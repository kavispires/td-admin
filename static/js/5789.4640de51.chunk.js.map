{"version":3,"file":"static/js/5789.4640de51.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/queriesObserver.ts","components/Daily/hooks/useLoadDrawings.ts","../node_modules/@tanstack/react-query/src/useQueries.ts","hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/utils/games/daily-teoria-de-conjuntos.ts","components/Daily/utils/utils.ts","components/DataLoadingWrapper.tsx","components/Items/Diagram/utils.ts","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    _options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    _options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult, (accessedProp) => {\n                // track property on all observers to ensure proper (synchronized) tracking (#7000)\n                matches.forEach((m) => {\n                  m.observer.trackProp(accessedProp)\n                })\n              })\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : T extends Array<\n              UseQueryOptionsForUseQueries<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseQueryResult>\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries: readonly [...QueriesOptions<T>]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { useLoadDrawings } from 'components/Daily/hooks';\nimport { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport { getNextDay, checkWeekend } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[]\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { ItemAtributesValues, ItemAttribute } from 'types';\nimport { DailyComunicacaoAlienigenaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAtributesValues>\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes).filter((attr) => !attr.limited && attr.id !== 'sol');\n  const allAttributesValues = values(attributeValues).filter((i) => i.complete);\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId]) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAtributesValues[]\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB)!,\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC)!,\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC)!,\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC)!,\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  // console.log({\n  //   attributeA,\n  //   attributeB,\n  //   attributeC,\n  //   attributeAB,\n  //   attributeAC,\n  //   attributeBC,\n  //   attributeABC,\n  // });\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo } from 'react';\nimport {\n  DailyDiscSet,\n  ArteRuimCard,\n  DailyMovieSet,\n  DailyDiagramItem,\n  DailyDiagramRule,\n  ItemAttribute,\n  ItemAtributesValues,\n} from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\nimport { buildDailyComunicacaoAlienigenaGames } from '../utils/games/daily-comunicacao-alienigena';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory('teoria-de-conjuntos', historyQuery.data);\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // SET 9: Comunicação Alienígena\n  const [comunicacaoAlienigenaHistory] = useParsedHistory('comunicacao-alienigena', historyQuery.data);\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values', enabled);\n  const comunicacaoAlienigenaEntries = useMemo(() => {\n    if (\n      !historyQuery.isSuccess ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data\n    );\n  }, [\n    batchSize,\n    historyQuery.isSuccess,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n  ]);\n  console.log(comunicacaoAlienigenaEntries);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigenaEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n    comunicacaoAlienigenaEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading,\n    entries,\n  };\n}\n","import { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiscSet } from 'types';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { ArteRuimCard } from 'types';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[]\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId)\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyMovieSet } from 'types';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n        'teoria-de-conjuntos': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['teoria-de-conjuntos'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['teoria-de-conjuntos']?.used ?? '[]'),\n              ...data.map((e) => e['teoria-de-conjuntos'].setId),\n              ...data.map((e) => e['teoria-de-conjuntos'].intersectingThing.id),\n            ])\n          ),\n        },\n        'comunicacao-alienigena': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['comunicacao-alienigena'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { DailyTeoriaDeConjuntosEntry, ParsedDailyHistoryEntry } from '../types';\nimport { cloneDeep, difference, intersection, sample, sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { getIsThingOutdated, getLatestRuleUpdate } from 'components/Items/Diagram/utils';\n\nexport const buildDailyTeoriaDeConjuntosGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  rules: Dictionary<DailyDiagramRule>,\n  things: Dictionary<DailyDiagramItem>\n) => {\n  console.count('Creating Teoria de Conjuntos...');\n  let lastDate = history.latestDate;\n  const used: string[] = [...history.used];\n\n  const latestRuleUpdate = getLatestRuleUpdate(rules);\n\n  const thingsByRules = (() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    Object.values(things).forEach((entry) => {\n      // Only use things that are not outdated\n      if (!getIsThingOutdated(entry, latestRuleUpdate)) {\n        entry.rules.forEach((ruleId) => {\n          dict[ruleId].push(entry.itemId);\n        });\n      }\n    });\n    return dict;\n  })();\n\n  const entries: Dictionary<DailyTeoriaDeConjuntosEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'teoria-de-conjuntos',\n      number: history.latestNumber + i + 1,\n      ...getRuleSet(things, thingsByRules, rules, used, latestRuleUpdate),\n    };\n  }\n  return entries;\n};\n\nfunction getRuleSet(\n  things: Dictionary<DailyDiagramItem>,\n  thingsByRules: Record<string, string[]>,\n  rules: Dictionary<DailyDiagramRule>,\n  used: string[],\n  latestRuleUpdate: number\n) {\n  const availableThingsIds = shuffle(\n    Object.keys(things).filter(\n      (id) => !used.includes(id) && !getIsThingOutdated(things[id], latestRuleUpdate)\n    )\n  );\n\n  // Get one random initial thing\n  const initialThingId = sample(availableThingsIds);\n  if (!initialThingId) throw new Error('No available things to choose from');\n  used.push(initialThingId);\n\n  const intersectingThing = {\n    id: initialThingId,\n    name: things[initialThingId].name,\n  };\n\n  // Group rules by type than get a random pair of rules of different types\n  const thingsRulesByType = things[initialThingId].rules.reduce((acc: Record<string, string[]>, ruleId) => {\n    const type = rules[ruleId].type;\n    if (!acc[type]) acc[type] = [];\n    acc[type].push(ruleId);\n    return acc;\n  }, {});\n  // Delete any rule with less than 2 rules\n  Object.keys(thingsRulesByType).forEach((type) => {\n    if (thingsRulesByType[type].length < 2) delete thingsRulesByType[type];\n  });\n\n  const twoRandomTypes = sampleSize(Object.keys(thingsRulesByType), 2);\n\n  if (twoRandomTypes.length !== 2) throw new Error('No types found for this thing');\n  const selectedRules = [\n    sample(thingsRulesByType[twoRandomTypes[0]]),\n    sample(thingsRulesByType[twoRandomTypes[1]]),\n  ];\n  if (!selectedRules[0] || !selectedRules[1]) throw new Error('No rules found for this thing');\n\n  const ruleId = [selectedRules[0], selectedRules[1]].sort().join('-');\n  used.push(ruleId);\n\n  const level = rules[selectedRules[0]].level + rules[selectedRules[1]].level - 1;\n\n  const availableThingsByRules = cloneDeep(thingsByRules);\n  // Removed the initial thing from the available things\n  delete availableThingsByRules[initialThingId];\n\n  const itemsOnlyInRule1 = shuffle(\n    difference(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]])\n  );\n\n  const itemsOnlyInRule2 = shuffle(\n    difference(thingsByRules[selectedRules[1]], thingsByRules[selectedRules[0]])\n  );\n\n  const commonItems = shuffle(intersection(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]]));\n\n  // Get one unique initial thing that only fits rule 1\n  const selectedInitialThingId1 = itemsOnlyInRule1.pop();\n  if (!selectedInitialThingId1) throw new Error('No only in rule 1 things to choose from');\n  const rule1 = {\n    id: selectedRules[0],\n    text: rules[selectedRules[0]].title,\n    level: rules[selectedRules[0]].level,\n    thing: {\n      id: selectedInitialThingId1,\n      name: things[selectedInitialThingId1].name,\n    },\n  };\n\n  // Get one unique initial thing that only fits rule 2\n  const selectedInitialThingId2 = itemsOnlyInRule2.pop();\n  if (!selectedInitialThingId2) throw new Error('No only in rule 2 things to choose from');\n  const rule2 = {\n    id: selectedRules[1],\n    text: rules[selectedRules[1]].title,\n    level: rules[selectedRules[1]].level,\n    thing: {\n      id: selectedInitialThingId2,\n      name: things[selectedInitialThingId2].name,\n    },\n  };\n\n  // Get up to 4 unique things that fit both rules, if possible\n  const sampleCommonThings = sampleSize(commonItems, 4);\n  const sampleRule1Things = sampleSize(itemsOnlyInRule1, 8);\n  const sampleRule2Things = sampleSize(itemsOnlyInRule2, 8);\n  const gabarito: Record<string, number> = {};\n  sampleCommonThings.forEach((id) => (gabarito[id] = 0));\n  sampleRule1Things.forEach((id) => (gabarito[id] = 1));\n  sampleRule2Things.forEach((id) => (gabarito[id] = 2));\n\n  // Sample 8 things among the options\n  const selectionIds = sampleSize([...sampleCommonThings, ...sampleRule1Things, ...sampleRule2Things], 8);\n\n  const selectedThings = selectionIds.map((id) => ({\n    id,\n    name: things[id].name,\n    rule: gabarito[id],\n  }));\n\n  // Build title\n  const TITLES: Record<string, string> = {\n    contains: 'Inclusão',\n    starts: 'Inicialização',\n    ends: 'Terminação',\n    grammar: 'Gramática',\n    order: 'Sequência',\n    count: 'Contagem',\n    comparison: 'Comparação',\n    repetition: 'Repetição',\n  };\n\n  const title = [\n    TITLES?.[rules[rule1.id].type] ?? 'Desconhecido',\n    TITLES?.[rules[rule2.id].type] ?? 'Desconhecido',\n  ].join(' vs ');\n  const setId = [rule1.id, rule2.id].sort().join('::');\n\n  // Create the DailyTeoriaDeConjuntosEntry object\n  const entry: Omit<DailyTeoriaDeConjuntosEntry, 'id' | 'type' | 'number'> = {\n    title,\n    setId,\n    level,\n    rule1,\n    rule2,\n    intersectingThing,\n    things: selectedThings,\n  };\n  return entry;\n}\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\n/**\n * Calculates the next day based on the given date string.\n *\n * @param dateString - The date string in the format 'YYYY-MM-DD'.\n * @returns The next day in the format 'YYYY-MM-DD'.\n */\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\n/**\n * Checks if a given date is a Saturday or Sunday.\n *\n * @param {string} dateString - The date in 'YYYY-MM-DD' format.\n * @returns {boolean} True if the date is a Saturday or Sunday, false otherwise.\n */\nexport function checkWeekend(dateString: string): boolean {\n  const date = moment(dateString, 'YYYY-MM-DD');\n  return [6, 0].includes(date.day()); // 0 represents Sunday and 6 represents Saturday in moment.js\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { memoize } from 'lodash';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { stringRemoveAccents } from 'utils';\n\nexport const SYLLABLE_SEPARATOR = '|';\nexport const LETTERS = 'abcdefghijklmnopqrstuvwxyz';\nexport const CONSONANTS = 'bcdfghjklmnpqrstvwxyz';\nexport const VOWELS = 'aeiou';\nexport const ACCENTS = /[áéíóúãẽĩõũâêîôûàèìòùäëïöü]/;\n\nconst cleanupWord = memoize((word: string) => {\n  return stringRemoveAccents(word).toLowerCase();\n});\n\nconst countLetters = (word: string) => {\n  return cleanupWord(word).length;\n};\n\nconst countVowels = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => VOWELS.includes(letter)).length;\n};\n\nconst countConsonants = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => CONSONANTS.includes(letter)).length;\n};\n\nconst countAccents = (word: string) => {\n  return word\n    .toLowerCase()\n    .split('')\n    .filter((letter) => ACCENTS.test(letter)).length;\n};\n\nconst countWords = (text: string) => {\n  return text.split(' ').length;\n};\n\nexport const verifiers: Record<string, (word: string) => boolean> = {\n  // The first two letters are in alphabetical order\n  'ddr-7-pt': (word: string) => {\n    return LETTERS.indexOf(cleanupWord(word)[0]) < LETTERS.indexOf(cleanupWord(word)[1]);\n  },\n  // has 4 or less letters\n  'ddr-8-pt': (word: string) => countLetters(word) <= 4,\n  // Has exactly 5 letters\n  'ddr-9-pt': (word: string) => countLetters(word) === 5,\n  // Has 6 letters\n  'ddr-10-pt': (word: string) => countLetters(word) === 6,\n  // Has between 7\n  'ddr-11-pt': (word: string) => countLetters(word) === 7,\n  // Has more than 8 letters\n  'ddr-12-pt': (word: string) => countLetters(word) > 7,\n  // Has more than 1 word\n  'ddr-13-pt': (word: string) => countWords(word) > 1,\n  // Has two or more different vowels\n  'ddr-14-pt': (word: string) => {\n    const vowels = cleanupWord(word)\n      .split('')\n      .filter((letter) => VOWELS.includes(letter));\n    return new Set(vowels).size >= 2;\n  },\n  // Has 4 or less unique letters\n  'ddr-15-pt': (word: string) => new Set(cleanupWord(word).split('')).size <= 4,\n  // Has more consonants than vowels\n  'ddr-16-pt': (word: string) => countConsonants(word) > countVowels(word),\n  // Has more vowels than consonants\n  'ddr-17-pt': (word: string) => countVowels(word) > countConsonants(word),\n  // The first letter is repeated at least once\n  'ddr-18-pt': (word: string) => {\n    const firstLetter = cleanupWord(word)[0];\n    return cleanupWord(word).slice(1).includes(firstLetter);\n  },\n  // has repeated letters\n  'ddr-19-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) =>\n        cleanupWord(word)\n          .slice(index + 1)\n          .includes(letter)\n      );\n  },\n  // has repeated vowels\n  'ddr-20-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          VOWELS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has repeated consonants\n  'ddr-21-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          CONSONANTS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has consecutive vowels\n  'ddr-22-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => VOWELS.includes(letter) && VOWELS.includes(word[index + 1]));\n  },\n  // starts with letters from A to M\n  'ddr-23-pt': (word: string) => 'abcdefghijklm'.includes(cleanupWord(word)[0]),\n  // starts with letters from N to Z\n  'ddr-24-pt': (word: string) => 'nopqrstuvwxyz'.includes(cleanupWord(word)[0]),\n  // starts with a vowel\n  'ddr-25-pt': (word: string) => VOWELS.includes(cleanupWord(word)[0]),\n  // starts with a consonant\n  'ddr-26-pt': (word: string) => CONSONANTS.includes(cleanupWord(word)[0]),\n  // Double consecutive consonants\n  'ddr-27-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => CONSONANTS.includes(letter) && word[index + 1] === letter);\n  },\n  // Has an A\n  'ddr-28-pt': (word: string) => cleanupWord(word).includes('a'),\n  // Has an E\n  'ddr-29-pt': (word: string) => cleanupWord(word).includes('e'),\n  // Has an U\n  'ddr-30-pt': (word: string) => cleanupWord(word).includes('u'),\n  // Has a Q or J\n  'ddr-31-pt': (word: string) => cleanupWord(word).includes('q'),\n  // Has a C or Ç\n  'ddr-32-pt': (word: string) => cleanupWord(word).includes('c') || cleanupWord(word).includes('ç'),\n  // Has an M or N followed by a consonant\n  'ddr-33-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (['m', 'n'].includes(letter) && CONSONANTS.includes(word[index + 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has an H\n  'ddr-34-pt': (word: string) => cleanupWord(word).includes('h'),\n  // Has H preceded by a consonant\n  'ddr-35-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (letter === 'h' && CONSONANTS.includes(word[index - 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has K, W or Y\n  'ddr-36-pt': (word: string) =>\n    cleanupWord(word).includes('k') || cleanupWord(word).includes('w') || cleanupWord(word).includes('y'),\n  // Has an accent\n  'ddr-37-pt': (word: string) => countAccents(word) > 0,\n  // Ends with a vowel\n  'ddr-38-pt': (word: string) => {\n    return VOWELS.includes(cleanupWord(word).slice(-1));\n  },\n  // Ends with a consonant\n  'ddr-39-pt': (word: string) => CONSONANTS.includes(cleanupWord(word).slice(-1)),\n  // Ends with an S\n  'ddr-40-pt': (word: string) => cleanupWord(word).slice(-1) === 's',\n  // Has an I\n  'ddr-47-pt': (word: string) => cleanupWord(word).includes('i'),\n  // Has an O\n  'ddr-48-pt': (word: string) => cleanupWord(word).includes('o'),\n  // Has an X\n  'ddr-49-pt': (word: string) => cleanupWord(word).includes('x'),\n  // Has an J\n  'ddr-52-pt': (word: string) => cleanupWord(word).includes('j'),\n};\n\nexport const syllableDependencyVerifier: Record<\n  string,\n  (word: string, syllables: string, isAcronym: boolean) => boolean\n> = {\n  // Has 2 syllables\n  'ddr-3-pt': (word: string, syllables: string) =>\n    countWords(word) === 1 && syllables.split(SYLLABLE_SEPARATOR).length === 2,\n  // Has 3 syllables\n  'ddr-4-pt': (word: string, syllables: string) =>\n    countWords(word) === 1 && syllables.split(SYLLABLE_SEPARATOR).length === 3,\n  // Has 4 syllables\n  'ddr-22-pt': (word: string, syllables: string) =>\n    countWords(word) === 1 && syllables.split(SYLLABLE_SEPARATOR).length === 4,\n  // Has two consecutive vowels on the same syllable\n  'ddr-41-pt': (word: string, syllables: string) => {\n    return (\n      countWords(word) === 1 &&\n      syllables.split(SYLLABLE_SEPARATOR).some((syllable) => {\n        return syllable.split('').some((letter, index) => {\n          if (VOWELS.includes(letter) && VOWELS.includes(syllable[index + 1])) {\n            return true;\n          }\n          return false;\n        });\n      })\n    );\n  },\n  // Has two consecutive vowels on different syllables\n  'ddr-42-pt': (_: string, syllables: string) => {\n    return syllables.split(SYLLABLE_SEPARATOR).some((syllable, index) => {\n      if (index === 0) {\n        return false;\n      }\n      return syllable[0] === syllables.split(SYLLABLE_SEPARATOR)[index - 1].slice(-1);\n    });\n  },\n  // Single syllable word\n  'ddr-46-pt': (word: string, syllables: string, isAcronym: boolean) =>\n    countWords(word) === 1 && !isAcronym && syllables.split(SYLLABLE_SEPARATOR).length === 1,\n};\n\nexport const stressSyllableDependencyVerifier: Record<\n  string,\n  (word: string, syllables: string, stress: number) => boolean\n> = {\n  // The stress syllable is on the last syllable (oxitona)\n  'ddr-43-pt': (word: string, _, stress: number) => {\n    return countWords(word) === 1 && stress === 0;\n  },\n  // The stress syllable is on the second to last syllable (paroxitona)\n  'ddr-44-pt': (word: string, _, stress: number) => {\n    return countWords(word) === 1 && stress === 1;\n  },\n  // The stress syllable is on the third to last syllable (proparoxitona)\n  'ddr-45-pt': (word: string, _, stress: number) => {\n    return countWords(word) === 1 && stress === 2;\n  },\n};\n\nexport const getLatestRuleUpdate = (rules: Dictionary<DailyDiagramRule>) => {\n  return Object.values(rules).reduce((acc, rule) => {\n    return Math.max(acc, rule.updatedAt);\n  }, 0);\n};\n\nexport const getIsThingOutdated = (thing: DailyDiagramItem, latestRuleUpdate: number) => {\n  return latestRuleUpdate > thing.updatedAt;\n};\n\nconst checkIsVowel = (char: string) => VOWELS.includes(stringRemoveAccents(char));\nconst checkIsConsonant = (char: string) => CONSONANTS.includes(stringRemoveAccents(char));\nconst LMNRS = ['s', 'r', 'l', 'm', 'n'];\nconst DOUBLE_LETTERS = [\n  'rr',\n  'ss',\n  'st',\n  'sc',\n  'lm',\n  'ld',\n  'mp',\n  'mb',\n  'rn',\n  'rm',\n  'rt',\n  'rd',\n  'lt',\n  'ld',\n  'nt',\n  'nd',\n  'sp',\n  'ls',\n];\n/**\n * Guesses the separation of syllables in a given word.\n * @param word - The word for which to guess the syllables separation.\n * @returns The guessed syllables separation as a string.\n */\nexport const guessSyllablesSeparation = (word: string): string => {\n  let syllables: string[] = [];\n  let currentSyllable = '';\n\n  const stringWithoutAccents = stringRemoveAccents(word);\n\n  for (let i = 0; i < word.length; i++) {\n    const char = stringWithoutAccents[i];\n    // Space makes a syllable\n    if (char === ' ') {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n      continue;\n    }\n\n    // Hyphen makes a syllable\n    if (char === '-') {\n      syllables.push(currentSyllable + '-');\n      currentSyllable = '';\n      continue;\n    }\n\n    if (checkIsVowel(char) && i < stringWithoutAccents.length - 2) {\n      const nextChar = stringWithoutAccents[i + 1];\n      const nextNextChar = stringWithoutAccents[i + 2];\n      // If the next character is a consonant and the next next character is a consonant, the first pair is a syllable\n      if (LMNRS.includes(nextChar) && checkIsConsonant(nextNextChar)) {\n        currentSyllable += word[i] + word[i + 1];\n        i++; // Skip the next character\n        continue;\n      }\n    }\n\n    // Handle \"c\" followed by \"h\", \"r\", or \"l\"\n    if (\n      char === 'c' &&\n      i < stringWithoutAccents.length - 2 &&\n      ['h', 'r', 'l'].includes(stringWithoutAccents[i + 1]) &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle \"l\" or \"n\" followed by \"h\"\n    if (\n      ['l', 'n'].includes(char) &&\n      i < stringWithoutAccents.length - 2 &&\n      stringWithoutAccents[i + 1] === 'h' &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle consonant followed by vowel followed by consonant cluster\n    if (\n      checkIsConsonant(char) &&\n      i < stringWithoutAccents.length - 3 &&\n      checkIsVowel(stringWithoutAccents[i + 1]) &&\n      LMNRS.includes(stringWithoutAccents[i + 2]) &&\n      checkIsConsonant(stringWithoutAccents[i + 3])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    currentSyllable += word[i];\n\n    if (\n      checkIsVowel(char) &&\n      i < stringWithoutAccents.length - 1 &&\n      !checkIsVowel(stringWithoutAccents[i + 1]) &&\n      !['l', 'r', 'n'].includes(stringWithoutAccents[i + 1])\n    ) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  if (currentSyllable !== '') {\n    syllables.push(currentSyllable);\n  }\n\n  // As a final effort, if there are syllables with \"rr\" or \"ss\", split them but keep the characters. e.g. carro -> car:ro\n  syllables = syllables.map((syllable) => {\n    for (const doubleLetter of DOUBLE_LETTERS) {\n      if (syllable.includes(doubleLetter)) {\n        return syllable.split(doubleLetter).join(`${doubleLetter[0]}${SYLLABLE_SEPARATOR}${doubleLetter[1]}`);\n      }\n    }\n    return syllable;\n  });\n\n  return syllables.filter(Boolean).join(SYLLABLE_SEPARATOR);\n};\n\n/**\n * Separates the syllables of a given word.\n * @param word - The word to separate syllables from.\n * @returns The word with syllables separated by '|'.\n */\nexport function separateSyllables(word: string): string {\n  const syllablePattern =\n    /([^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*[aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]{1,3}[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*)(?=[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]|$)/gi;\n\n  const proposed = word.replace(syllablePattern, '$1|').slice(0, -1);\n\n  return proposed.replace(/\\s/g, '');\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  let baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CITY_LOCATIONS: 'city-locations',\n  COLORS: 'colors',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_SCENES: 'crime-scenes',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  EMOTIONS: 'emotions',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SINGLE_WORDS: 'single-words',\n  SPECTRUMS: 'spectrums',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TEENAGE_RUMORS: 'teenage-rumors',\n  TEENAGE_STUDENTS: 'teenage-students',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n  WAREHOUSE_BOSS_IDEAS: 'warehouse-boss-ideas',\n  WARNING_SIGNS_DESCRIPTORS: 'warning-signs-descriptors',\n  WARNING_SIGNS_SUBJECTS: 'warning-signs-subjects',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CITY_LOCATIONS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_SCENES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n  RESOURCE_NAMES.TEENAGE_RUMORS,\n  RESOURCE_NAMES.TEENAGE_STUDENTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2496;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 256,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Checks if an array has any duplicate elements.\n * @param arr - The array to check for duplicates.\n * @returns A boolean indicating whether the array has duplicates.\n * @template T - The type of elements in the array.\n */\nexport const hasDuplicates = <T>(arr: T[]): boolean => {\n  return new Set(arr).size !== arr.length;\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>,\n  /**\n   * Ignore attributes that are UNRELATED or UNCLEAR\n   */\n  onlyRelevant?: boolean\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED)),\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR)),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n\n/**\n * Pauses the execution for a specified duration.\n * @param duration - The duration to wait in milliseconds. Default is 1000ms.\n */\nexport const wait = async (duration = 1000) => {\n  await new Promise((resolve) => setTimeout(resolve, duration));\n};\n"],"names":["difference","array1","array2","filter","x","includes","QueriesObserver","Subscribable","constructor","client","queries","_options","super","this","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","result","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","index","length","hasListeners","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","matches","r","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","replaceEqualDeep","prevObserversMap","Map","options","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","QueryObserver","newOrReusedObservers","concat","sort","a","b","indexOf","array","value","copy","slice","replaceAt","listener","useLoadDrawings","enabled","queryLanguage","notification","App","suffixCountsQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","suffixData","LANGUAGE_PREFIX","libraryCount","data","docPrefix","queryClient","useQueryClient","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","React","opts","_optimisticResults","query","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","optimisticResult","getCombinedResult","onStoreChange","suspensePromises","shouldSuspend","queryObserver","fetchOptimistic","willFetch","Promise","all","firstSingleResultWhichShouldThrow","getHasError","throwOnError","getQueryCache","useQueries","useMemo","Array","fill","_","Boolean","onSuccess","info","useLoadWordLibrary","wordLength","language","selected","getUrl","useBaseUrl","resourceName","async","res","fetch","json","hasResponseData","isEmpty","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","fixedKeyword","shuffledWords","shuffle","keyword","pop","selectedWords","i","newWord","getNewWord","push","letters","shuffleLetters","usedLetters","uniq","word","split","shortList","sortBy","intersection","preservedIndexes","otherLetters","shuffledLetters","shift","generateControleDeEstoqueGame","id","num","year","month","day","Number","entry","number","type","title","Date","getDay","goods","orders","sampleSize","GOODS_SIZE","outOfStockGood","generateComunicacaoAlienigenaGame","attributes","attributeValues","shuffledAttributeValues","spriteIDs","makeArray","selectedAttributes","attr","spriteId","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","item","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","name","pt","description","itemsIds","Math","max","usedItemsIds","complexRequests","spritesIds","itemId","sample","simpleRequests","requests","console","log","requestItemsIds","req","setId","join","solution","random","valid","every","useLoadDailySetup","drawingsCount","batchSize","source","historyQuery","useDailyHistoryQuery","drawingsQuery","areDrawingsLoading","q","isLoading","arteRuimHistory","useParsedHistory","arteRuimEntries","history","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","key","dataDrawing","cardId","used","drawing","trim","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","latestDate","getNextDay","latestNumber","buildDailyArteRuimGames","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","notUsedSets","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isWeekend","checkWeekend","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","comunicacaoAlienigenaEntries","allAttributes","limited","allAttributesValues","complete","preliminaryEntries","tries","buildDailyComunicacaoAlienigenaGames","palavreado","artista","filmaco","useSaveDailySetup","isDirty","setIsDirty","useState","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","JSON","stringify","removeDuplicates","parse","intersectingThing","invalidateQueries","onError","save","mutateAsync","isPending","useTempDaily","getYesterday","SUFFIX_DATA","en","DAILY","rules","things","latestRuleUpdate","getLatestRuleUpdate","thingsByRules","dict","rule","getIsThingOutdated","ruleId","getRuleSet","availableThingsIds","initialThingId","thingsRulesByType","twoRandomTypes","selectedRules","level","cloneDeep","itemsOnlyInRule1","itemsOnlyInRule2","commonItems","selectedInitialThingId1","rule1","thing","selectedInitialThingId2","rule2","sampleCommonThings","sampleRule1Things","sampleRule2Things","gabarito","selectedThings","TITLES","contains","starts","ends","grammar","order","comparison","repetition","moment","subtract","format","dateString","add","date","DataLoadingWrapper","isIdle","children","tip","className","showIcon","SYLLABLE_SEPARATOR","LETTERS","CONSONANTS","VOWELS","ACCENTS","cleanupWord","memoize","stringRemoveAccents","toLowerCase","countLetters","countVowels","letter","countConsonants","countWords","verifiers","vowels","firstLetter","test","countAccents","syllableDependencyVerifier","syllables","syllable","isAcronym","stressSyllableDependencyVerifier","stress","updatedAt","separateSyllables","replace","Sprite","width","padding","response","paddedWidth","style","height","display","placeItems","svgContent","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","y","background","WarehouseGood","str","numId","parseInt","goodId","sourceId","ceil","getSource","clsx","AlienSign","Emoji","emojiId","startsWith","glyphId","Glyph","Item","library","baseUrl","process","folder","path","docId","getCurrentDateTime","getDoc","useGetFirebaseDoc","useTDResourceNonCollection","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CITY_LOCATIONS","COLORS","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_SCENES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","EMOTIONS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SINGLE_WORDS","SPECTRUMS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TEENAGE_RUMORS","TEENAGE_STUDENTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","WAREHOUSE_BOSS_IDEAS","WARNING_SIGNS_DESCRIPTORS","WARNING_SIGNS_SUBJECTS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","DEFAULT_LANGUAGE","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","capitalize","normalize","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","chain","toPairs","fromPairs","deserializeFirebaseData","serializeFirebaseData","now","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","merge","groups","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","onlyRelevant","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","filterMessage","showUnclear","showUnrelated","sortItemsIds","wait","duration","resolve","setTimeout"],"sourceRoot":""}