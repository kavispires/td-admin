{"version":3,"file":"static/js/2516.1fd5a2b1.chunk.js","mappings":"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","sources":["../node_modules/antd/es/tag/style/index.js","../node_modules/antd/es/tag/CheckableTag.js","../node_modules/antd/es/tag/style/presetCmp.js","../node_modules/antd/es/tag/style/statusCmp.js","../node_modules/antd/es/_util/capitalize.js","../node_modules/antd/es/tag/index.js","../node_modules/@tanstack/query-core/src/queriesObserver.ts","../node_modules/@tanstack/react-query/src/useQueries.ts"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// ============================== Styles ==============================\nconst genBaseStyle = token => {\n  const {\n    paddingXXS,\n    lineWidth,\n    tagPaddingHorizontal,\n    componentCls,\n    calc\n  } = token;\n  const paddingInline = calc(tagPaddingHorizontal).sub(lineWidth).equal();\n  const iconMarginInline = calc(paddingXXS).sub(lineWidth).equal();\n  return {\n    // Result\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      height: 'auto',\n      // https://github.com/ant-design/ant-design/pull/47504\n      marginInlineEnd: token.marginXS,\n      paddingInline,\n      fontSize: token.tagFontSize,\n      lineHeight: token.tagLineHeight,\n      whiteSpace: 'nowrap',\n      background: token.defaultBg,\n      border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorder}`,\n      borderRadius: token.borderRadiusSM,\n      opacity: 1,\n      transition: `all ${token.motionDurationMid}`,\n      textAlign: 'start',\n      position: 'relative',\n      // RTL\n      [`&${componentCls}-rtl`]: {\n        direction: 'rtl'\n      },\n      '&, a, a:hover': {\n        color: token.defaultColor\n      },\n      [`${componentCls}-close-icon`]: {\n        marginInlineStart: iconMarginInline,\n        fontSize: token.tagIconSize,\n        color: token.colorTextDescription,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}`,\n        '&:hover': {\n          color: token.colorTextHeading\n        }\n      },\n      [`&${componentCls}-has-color`]: {\n        borderColor: 'transparent',\n        [`&, a, a:hover, ${token.iconCls}-close, ${token.iconCls}-close:hover`]: {\n          color: token.colorTextLightSolid\n        }\n      },\n      '&-checkable': {\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        cursor: 'pointer',\n        [`&:not(${componentCls}-checkable-checked):hover`]: {\n          color: token.colorPrimary,\n          backgroundColor: token.colorFillSecondary\n        },\n        '&:active, &-checked': {\n          color: token.colorTextLightSolid\n        },\n        '&-checked': {\n          backgroundColor: token.colorPrimary,\n          '&:hover': {\n            backgroundColor: token.colorPrimaryHover\n          }\n        },\n        '&:active': {\n          backgroundColor: token.colorPrimaryActive\n        }\n      },\n      '&-hidden': {\n        display: 'none'\n      },\n      // To ensure that a space will be placed between character and `Icon`.\n      [`> ${token.iconCls} + span, > span + ${token.iconCls}`]: {\n        marginInlineStart: paddingInline\n      }\n    }),\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent',\n      background: token.tagBorderlessBg\n    }\n  };\n};\n// ============================== Export ==============================\nexport const prepareToken = token => {\n  const {\n    lineWidth,\n    fontSizeIcon,\n    calc\n  } = token;\n  const tagFontSize = token.fontSizeSM;\n  const tagToken = mergeToken(token, {\n    tagFontSize,\n    tagLineHeight: unit(calc(token.lineHeightSM).mul(tagFontSize).equal()),\n    tagIconSize: calc(fontSizeIcon).sub(calc(lineWidth).mul(2)).equal(),\n    // Tag icon is much smaller\n    tagPaddingHorizontal: 8,\n    // Fixed padding.\n    tagBorderlessBg: token.defaultBg\n  });\n  return tagToken;\n};\nexport const prepareComponentToken = token => ({\n  defaultBg: new TinyColor(token.colorFillQuaternary).onBackground(token.colorBgContainer).toHexString(),\n  defaultColor: token.colorText\n});\nexport default genStyleHooks('Tag', token => {\n  const tagToken = prepareToken(token);\n  return genBaseStyle(tagToken);\n}, prepareComponentToken);","\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nconst CheckableTag = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n      prefixCls: customizePrefixCls,\n      style,\n      className,\n      checked,\n      onChange,\n      onClick\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"style\", \"className\", \"checked\", \"onChange\", \"onClick\"]);\n  const {\n    getPrefixCls,\n    tag\n  } = React.useContext(ConfigContext);\n  const handleClick = e => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(!checked);\n    onClick === null || onClick === void 0 ? void 0 : onClick(e);\n  };\n  const prefixCls = getPrefixCls('tag', customizePrefixCls);\n  // Style\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const cls = classNames(prefixCls, `${prefixCls}-checkable`, {\n    [`${prefixCls}-checkable-checked`]: checked\n  }, tag === null || tag === void 0 ? void 0 : tag.className, className, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"span\", Object.assign({}, restProps, {\n    ref: ref,\n    style: Object.assign(Object.assign({}, style), tag === null || tag === void 0 ? void 0 : tag.style),\n    className: cls,\n    onClick: handleClick\n  })));\n});\nexport default CheckableTag;","// Style as status component\nimport { prepareComponentToken, prepareToken } from '.';\nimport { genPresetColor, genSubStyleComponent } from '../../theme/internal';\n// ============================== Preset ==============================\nconst genPresetStyle = token => genPresetColor(token, (colorKey, _ref) => {\n  let {\n    textColor,\n    lightBorderColor,\n    lightColor,\n    darkColor\n  } = _ref;\n  return {\n    [`${token.componentCls}${token.componentCls}-${colorKey}`]: {\n      color: textColor,\n      background: lightColor,\n      borderColor: lightBorderColor,\n      // Inverse color\n      '&-inverse': {\n        color: token.colorTextLightSolid,\n        background: darkColor,\n        borderColor: darkColor\n      },\n      [`&${token.componentCls}-borderless`]: {\n        borderColor: 'transparent'\n      }\n    }\n  };\n});\n// ============================== Export ==============================\nexport default genSubStyleComponent(['Tag', 'preset'], token => {\n  const tagToken = prepareToken(token);\n  return genPresetStyle(tagToken);\n}, prepareComponentToken);","import { prepareComponentToken, prepareToken } from '.';\nimport capitalize from '../../_util/capitalize';\nimport { genSubStyleComponent } from '../../theme/internal';\nconst genTagStatusStyle = (token, status, cssVariableType) => {\n  const capitalizedCssVariableType = capitalize(cssVariableType);\n  return {\n    [`${token.componentCls}${token.componentCls}-${status}`]: {\n      color: token[`color${cssVariableType}`],\n      background: token[`color${capitalizedCssVariableType}Bg`],\n      borderColor: token[`color${capitalizedCssVariableType}Border`],\n      [`&${token.componentCls}-borderless`]: {\n        borderColor: 'transparent'\n      }\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genSubStyleComponent(['Tag', 'status'], token => {\n  const tagToken = prepareToken(token);\n  return [genTagStatusStyle(tagToken, 'success', 'Success'), genTagStatusStyle(tagToken, 'processing', 'Info'), genTagStatusStyle(tagToken, 'error', 'Error'), genTagStatusStyle(tagToken, 'warning', 'Warning')];\n}, prepareComponentToken);","export default function capitalize(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  const ret = str.charAt(0).toUpperCase() + str.slice(1);\n  return ret;\n}","\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { isPresetColor, isPresetStatusColor } from '../_util/colors';\nimport useClosable, { pickClosable } from '../_util/hooks/useClosable';\nimport { replaceElement } from '../_util/reactNode';\nimport { devUseWarning } from '../_util/warning';\nimport Wave from '../_util/wave';\nimport { ConfigContext } from '../config-provider';\nimport CheckableTag from './CheckableTag';\nimport useStyle from './style';\nimport PresetCmp from './style/presetCmp';\nimport StatusCmp from './style/statusCmp';\nconst InternalTag = /*#__PURE__*/React.forwardRef((tagProps, ref) => {\n  const {\n      prefixCls: customizePrefixCls,\n      className,\n      rootClassName,\n      style,\n      children,\n      icon,\n      color,\n      onClose,\n      bordered = true,\n      visible: deprecatedVisible\n    } = tagProps,\n    props = __rest(tagProps, [\"prefixCls\", \"className\", \"rootClassName\", \"style\", \"children\", \"icon\", \"color\", \"onClose\", \"bordered\", \"visible\"]);\n  const {\n    getPrefixCls,\n    direction,\n    tag: tagContext\n  } = React.useContext(ConfigContext);\n  const [visible, setVisible] = React.useState(true);\n  const domProps = omit(props, ['closeIcon', 'closable']);\n  // Warning for deprecated usage\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Tag');\n    warning.deprecated(!('visible' in tagProps), 'visible', 'visible && <Tag />');\n  }\n  React.useEffect(() => {\n    if (deprecatedVisible !== undefined) {\n      setVisible(deprecatedVisible);\n    }\n  }, [deprecatedVisible]);\n  const isPreset = isPresetColor(color);\n  const isStatus = isPresetStatusColor(color);\n  const isInternalColor = isPreset || isStatus;\n  const tagStyle = Object.assign(Object.assign({\n    backgroundColor: color && !isInternalColor ? color : undefined\n  }, tagContext === null || tagContext === void 0 ? void 0 : tagContext.style), style);\n  const prefixCls = getPrefixCls('tag', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  // Style\n  const tagClassName = classNames(prefixCls, tagContext === null || tagContext === void 0 ? void 0 : tagContext.className, {\n    [`${prefixCls}-${color}`]: isInternalColor,\n    [`${prefixCls}-has-color`]: color && !isInternalColor,\n    [`${prefixCls}-hidden`]: !visible,\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-borderless`]: !bordered\n  }, className, rootClassName, hashId, cssVarCls);\n  const handleCloseClick = e => {\n    e.stopPropagation();\n    onClose === null || onClose === void 0 ? void 0 : onClose(e);\n    if (e.defaultPrevented) {\n      return;\n    }\n    setVisible(false);\n  };\n  const [, mergedCloseIcon] = useClosable(pickClosable(tagProps), pickClosable(tagContext), {\n    closable: false,\n    closeIconRender: iconNode => {\n      const replacement = /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-close-icon`,\n        onClick: handleCloseClick\n      }, iconNode);\n      return replaceElement(iconNode, replacement, originProps => ({\n        onClick: e => {\n          var _a;\n          (_a = originProps === null || originProps === void 0 ? void 0 : originProps.onClick) === null || _a === void 0 ? void 0 : _a.call(originProps, e);\n          handleCloseClick(e);\n        },\n        className: classNames(originProps === null || originProps === void 0 ? void 0 : originProps.className, `${prefixCls}-close-icon`)\n      }));\n    }\n  });\n  const isNeedWave = typeof props.onClick === 'function' || children && children.type === 'a';\n  const iconNode = icon || null;\n  const kids = iconNode ? (/*#__PURE__*/React.createElement(React.Fragment, null, iconNode, children && /*#__PURE__*/React.createElement(\"span\", null, children))) : children;\n  const tagNode = /*#__PURE__*/React.createElement(\"span\", Object.assign({}, domProps, {\n    ref: ref,\n    className: tagClassName,\n    style: tagStyle\n  }), kids, mergedCloseIcon, isPreset && /*#__PURE__*/React.createElement(PresetCmp, {\n    key: \"preset\",\n    prefixCls: prefixCls\n  }), isStatus && /*#__PURE__*/React.createElement(StatusCmp, {\n    key: \"status\",\n    prefixCls: prefixCls\n  }));\n  return wrapCSSVar(isNeedWave ? /*#__PURE__*/React.createElement(Wave, {\n    component: \"Tag\"\n  }, tagNode) : tagNode);\n});\nconst Tag = InternalTag;\nif (process.env.NODE_ENV !== 'production') {\n  Tag.displayName = 'Tag';\n}\nTag.CheckableTag = CheckableTag;\nexport default Tag;","import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#options = options\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    if (process.env.NODE_ENV !== 'production') {\n      const queryHashes = queries.map((query) => query.queryHash)\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          '[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.',\n        )\n      }\n    }\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return this.#trackResult(result, queries)\n      },\n    ]\n  }\n\n  #trackResult(\n    result: Array<QueryObserverResult>,\n    queries: Array<QueryObserverOptions>,\n  ) {\n    const matches = this.#findMatchingObservers(queries)\n\n    return matches.map((match, index) => {\n      const observerResult = result[index]!\n      return !match.defaultedQueryOptions.notifyOnChangeProps\n        ? match.observer.trackResult(observerResult, (accessedProp) => {\n            // track property on all observers to ensure proper (synchronized) tracking (#7000)\n            matches.forEach((m) => {\n              m.observer.trackProp(accessedProp)\n            })\n          })\n        : observerResult\n    })\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const observers: Array<QueryObserverMatch> = []\n\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const match = prevObserversMap.get(defaultedOptions.queryHash)\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match,\n        })\n      } else {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: new QueryObserver(this.#client, defaultedOptions),\n        })\n      }\n    })\n\n    return observers\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult\n      const newResult = this.#combineResult(\n        this.#trackResult(this.#result, this.#queries),\n        this.#options?.combine,\n      )\n\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result)\n          })\n        })\n      }\n    }\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : T extends Array<\n              UseQueryOptionsForUseQueries<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseQueryResult>\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries: readonly [...QueriesOptions<T>]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? noop\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n"],"names":["prepareToken","token","lineWidth","fontSizeIcon","calc","tagFontSize","fontSizeSM","mergeToken","tagLineHeight","unit","lineHeightSM","mul","equal","tagIconSize","sub","tagPaddingHorizontal","tagBorderlessBg","defaultBg","prepareComponentToken","TinyColor","colorFillQuaternary","onBackground","colorBgContainer","toHexString","defaultColor","colorText","genStyleHooks","paddingXXS","componentCls","paddingInline","iconMarginInline","Object","assign","resetComponent","display","height","marginInlineEnd","marginXS","fontSize","lineHeight","whiteSpace","background","border","lineType","colorBorder","borderRadius","borderRadiusSM","opacity","transition","motionDurationMid","textAlign","position","direction","color","marginInlineStart","colorTextDescription","cursor","colorTextHeading","borderColor","iconCls","colorTextLightSolid","backgroundColor","colorPrimary","colorFillSecondary","colorPrimaryHover","colorPrimaryActive","genBaseStyle","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","CheckableTag","React","props","ref","prefixCls","customizePrefixCls","style","className","checked","onChange","onClick","restProps","getPrefixCls","tag","ConfigContext","wrapCSSVar","hashId","cssVarCls","useStyle","cls","classNames","genSubStyleComponent","genPresetColor","colorKey","_ref","textColor","lightBorderColor","lightColor","darkColor","genPresetStyle","genTagStatusStyle","status","cssVariableType","capitalizedCssVariableType","str","charAt","toUpperCase","slice","tagToken","InternalTag","tagProps","rootClassName","children","icon","onClose","bordered","visible","deprecatedVisible","tagContext","setVisible","domProps","omit","undefined","isPreset","isPresetColor","isStatus","isPresetStatusColor","isInternalColor","tagStyle","tagClassName","handleCloseClick","stopPropagation","defaultPrevented","mergedCloseIcon","useClosable","pickClosable","closable","closeIconRender","iconNode","replacement","replaceElement","originProps","_a","isNeedWave","type","kids","tagNode","PresetCmp","key","StatusCmp","Wave","component","Tag","difference","array1","array2","filter","x","includes","QueriesObserver","Subscribable","constructor","client","queries","options","super","this","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","result","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","matches","r","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","replaceEqualDeep","prevObserversMap","Map","queryHash","observers","defaultedOptions","defaultQueryOptions","get","push","QueryObserver","array","value","copy","replaceAt","previousResult","listener","useQueries","queryClient","useQueryClient","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","opts","_optimisticResults","query","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","optimisticResult","getCombinedResult","onStoreChange","noop","suspensePromises","shouldSuspend","flatMap","queryObserver","fetchOptimistic","willFetch","Promise","all","firstSingleResultWhichShouldThrow","find","getHasError","throwOnError","getQueryCache","error"],"sourceRoot":""}