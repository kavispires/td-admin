{"version":3,"file":"static/js/ItemsDiagramSets.58b8452f.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/SaveButton.tsx","hooks/useResourceFirebaseData.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Diagram/ItemsDiagramFilters.tsx","components/Items/Diagram/EditThingModal.tsx","components/Items/Diagram/Thing.tsx","components/Items/Diagram/DiagramGameSample.tsx","components/Items/Diagram/GameSimulator.tsx","components/Items/Diagram/ItemUpdateGuard.tsx","components/Items/Diagram/AddNewThingFlow.tsx","components/Items/Diagram/RulesByThing.tsx","components/Items/Diagram/ThingsByRule.tsx","components/Items/Diagram/ItemsDiagramSetsContent.tsx","pages/Items/ItemsDiagramSets.tsx"],"sourcesContent":["import { Button, type ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | (() => PlainObject);\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { togglePendingSave } from 'store/globalSave';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import type { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { type DocumentData, doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseMutationOptions, useMutation } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {},\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterSegments } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { cloneDeep } from 'lodash';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { verifiers } from './utils';\n\nexport function ItemsDiagramFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const { addParams, queryParams } = useQueryParams();\n  const tdrDiagramRulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules');\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data, tdrDiagramRulesQuery.data ?? {})}\n          fileName=\"daily-diagram-items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'rule'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Rule',\n            icon: <ClusterOutlined />,\n            value: 'rule',\n          },\n          {\n            title: 'By Thing',\n            icon: <TableOutlined />,\n            value: 'thing',\n          },\n        ]}\n      />\n\n      <Divider />\n\n      <Button size=\"small\" block onClick={() => addParams({ display: 'simulator' })}>\n        Simulator\n      </Button>\n\n      <Typography.Paragraph type=\"secondary\" className=\"my-6\">\n        v2.0.1\n      </Typography.Paragraph>\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  diagramItems: Dictionary<DailyDiagramItem>,\n  rules: Dictionary<DailyDiagramRule>,\n) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(diagramItems);\n\n  Object.values(copy).forEach((item) => {\n    const outdatedRules = Object.values(rules).filter((rule) => rule.updatedAt > item.updatedAt);\n\n    const autoUpdates = outdatedRules.filter((rule) => rule.method === 'auto');\n    if (autoUpdates.length > 0) {\n      console.log(`Performing ${autoUpdates.length} auto updates for ${item.name}`);\n\n      // Remove all rules to be updated\n      item.rules = item.rules.filter((ruleId) => !autoUpdates.map((rule) => rule.id).includes(ruleId));\n      // Rerun rules\n      autoUpdates.forEach((rule) => {\n        const pass = verifiers[rule.id](item.name);\n        if (pass) {\n          item.rules.push(rule.id);\n        }\n      });\n    }\n\n    item.rules = item.rules.sort();\n\n    const hasNonAutoUpdates = outdatedRules.some((rule) => rule.method !== 'auto');\n\n    if (!hasNonAutoUpdates) {\n      console.log('Auto updating');\n      item.updatedAt = Date.now();\n    }\n  });\n\n  return sortJsonKeys(copy);\n}\n","import { Affix, Button, Flex, Form, Input, Modal, Radio, Switch } from 'antd';\nimport clsx from 'clsx';\nimport { Item } from 'components/Sprites';\nimport { orderBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\n\nimport {\n  SYLLABLE_SEPARATOR,\n  separateSyllables,\n  stressSyllableDependencyVerifier,\n  syllableDependencyVerifier,\n  verifiers,\n} from './utils';\n\nexport type ThingFormValues = Record<string, boolean | string | number>;\n\ntype EditThingModalProps = {\n  isModalOpen: boolean;\n  onSaveThing: (item: DailyDiagramItem) => void;\n  onCancel: () => void;\n  thing: DailyDiagramItem;\n  rules: Dictionary<DailyDiagramRule>;\n  width?: number | string;\n  itemAliases?: string[];\n  subtitle?: string;\n  okButtonText?: string;\n  onGiveAnotherThing?: () => void;\n};\n\nexport function EditThingModal({\n  isModalOpen,\n  onSaveThing,\n  onCancel,\n  thing,\n  rules,\n  width,\n  itemAliases,\n  subtitle,\n  okButtonText,\n  onGiveAnotherThing,\n}: EditThingModalProps) {\n  // Sort rules properly by type\n  const orderedRules = useMemo(() => {\n    return orderBy(Object.values(rules), [\n      // Not auto\n      (r) => {\n        const index = ['manual', 'dependency', 'auto'].indexOf(r.method);\n        return index === -1 ? Number.POSITIVE_INFINITY : index;\n      },\n      // Sort by type\n      (r) => {\n        const index = ['grammar', 'comparison', 'order', 'count', 'contains', 'ends'].indexOf(r.type);\n        return index === -1 ? Number.POSITIVE_INFINITY : index;\n      },\n      // Sort by partial title\n      (r) => r.title.slice(0, 7),\n      // Sort by id\n      (r) => Number(r.id.split('-')[1]),\n    ]);\n  }, [rules]);\n\n  // Build initial values\n  const [form] = Form.useForm();\n  const values = Form.useWatch([], form);\n  const hasUndefinedValues = !values || Object.values(values ?? {}).some((value) => value === undefined);\n\n  // Automation: If name is changed, recalculates all rules\n  const nameWatch = Form.useWatch('name', form);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    // If initial state where name is still undefined, ignore\n    if (!nameWatch) return;\n\n    if (thing.name && thing.syllables && nameWatch === thing.name) return;\n\n    // If name changes, recalculate all rules\n    const fields: Record<string, boolean | string | number | undefined> = {\n      syllables: separateSyllables(nameWatch),\n      stressedSyllable: (thing.stressedSyllable ?? nameWatch.includes(' ')) ? -1 : 0,\n    };\n    Object.keys(rules).forEach((ruleId) => {\n      if (verifiers[ruleId]) {\n        fields[ruleId] = verifiers[ruleId](nameWatch);\n      } else {\n        fields[ruleId] = thing.rules.length > 0 ? thing.rules.includes(ruleId) : undefined;\n      }\n    });\n    form.setFieldsValue(fields);\n  }, [nameWatch]);\n\n  // Automation: Syllables\n  const syllables = Form.useWatch('syllables', form);\n  const isAcronym = form.getFieldValue('ddr-51-pt');\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (isAcronym) {\n      form.setFieldsValue({ stressedSyllable: undefined });\n      form.setFieldsValue({ 'ddr-43-pt': false });\n      form.setFieldsValue({ 'ddr-44-pt': false });\n      form.setFieldsValue({ 'ddr-45-pt': false });\n      form.setFieldsValue({ 'ddr-46-pt': false });\n    }\n    if (isAcronym === undefined) {\n      form.setFieldsValue({ 'ddr-51-pt': false });\n    }\n  }, [isAcronym]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (syllables) {\n      const syllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (syllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = syllableDependencyVerifier[ruleId](nameWatch, syllables, isAcronym);\n        }\n        return acc;\n      }, {});\n      form.setFieldsValue({\n        ...syllableRulesUpdate,\n        stressedSyllable:\n          syllables === thing.syllables\n            ? thing.stressedSyllable\n            : (thing.stressedSyllable ?? nameWatch.includes(' '))\n              ? -1\n              : undefined,\n      });\n    }\n  }, [nameWatch, syllables, isAcronym]);\n\n  // Automation: Stressed syllable\n  const stressedSyllable = Form.useWatch('stressedSyllable', form);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (!isAcronym && stressedSyllable !== undefined) {\n      const stressSyllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (stressSyllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = stressSyllableDependencyVerifier[ruleId](nameWatch, syllables, stressedSyllable);\n        }\n        return acc;\n      }, {});\n\n      form.setFieldsValue({\n        ...stressSyllableRulesUpdate,\n      });\n    }\n  }, [stressedSyllable]);\n\n  // Automation: Male vs Female nouns vs Both genders\n  const rule1 = form.getFieldValue('ddr-1-pt');\n  const rule2 = form.getFieldValue('ddr-2-pt');\n  const rule5 = form.getFieldValue('ddr-50-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule1 === true) {\n      form.setFieldsValue({ 'ddr-2-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule1]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule2 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule2]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule5 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-2-pt': false });\n    }\n  }, [rule5]);\n\n  // Automation: syllable count\n  const rule3 = form.getFieldValue('ddr-3-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule3 === true) {\n      form.setFieldsValue({ 'ddr-4-pt': false });\n    }\n  }, [rule3]);\n  const rule4 = form.getFieldValue('ddr-4-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule4 === true) {\n      form.setFieldsValue({ 'ddr-3-pt': false });\n    }\n  }, [rule4]);\n\n  // Automation: has hyphen\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    const hasHyphen = nameWatch?.includes('-');\n    if (hasHyphen) {\n      form.setFieldsValue({ 'ddr-5-pt': true });\n    }\n  }, [nameWatch]);\n\n  const onFinish = (values: any) => {\n    const preparedThing = serializeThing(values);\n    onSaveThing(preparedThing);\n  };\n\n  const splitSyllables: string[] = useMemo(() => (syllables ?? '').split(SYLLABLE_SEPARATOR), [syllables]);\n\n  return (\n    <Modal\n      width={width}\n      title={\n        <>\n          Edit {thing.name} {subtitle && <small>{subtitle}</small>}\n        </>\n      }\n      open={isModalOpen}\n      onOk={form.submit}\n      onCancel={onCancel}\n      maskClosable={false}\n      okButtonProps={{ disabled: hasUndefinedValues, htmlType: 'submit', size: 'large' }}\n      okText={okButtonText ?? 'Add Item'}\n    >\n      <Form\n        form={form}\n        name={`new-item-${thing.itemId}`}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        initialValues={deserializeThing(thing, rules)}\n        layout=\"vertical\"\n        size=\"small\"\n        labelWrap\n      >\n        <div className=\"diagram-container\">\n          <div>\n            <Item id={thing.itemId} width={50} />\n          </div>\n\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"itemId\" label=\"Item\">\n            <Input readOnly />\n          </Form.Item>\n\n          <Form.Item name=\"syllables\" label=\"Syllables\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"stressedSyllable\" label=\"Stressed Syllable\">\n            <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n              {splitSyllables.map((syllable, index) => (\n                <Radio key={index} value={splitSyllables.length - index - 1}>\n                  {syllable}\n                </Radio>\n              ))}\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item name=\"updatedAt\" label=\"Updated At\">\n            <Input value={new Date(thing.updatedAt).toLocaleString()} readOnly />\n          </Form.Item>\n\n          {(itemAliases || onGiveAnotherThing) && (\n            <div>\n              {itemAliases && <span>Options: {itemAliases?.join(', ')}</span>}\n              {onGiveAnotherThing && (\n                <Button size=\"small\" onClick={onGiveAnotherThing} type=\"dashed\" className=\"mt-2\">\n                  Give me another thing\n                </Button>\n              )}\n            </div>\n          )}\n\n          <div>\n            <Affix offsetTop={50}>\n              <Flex justify=\"center\" align=\"center\">\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\" disabled={hasUndefinedValues}>\n                  {okButtonText ?? 'Add Item'}\n                </Button>\n              </Flex>\n            </Affix>\n          </div>\n        </div>\n        <div className=\"diagram-container\">\n          {orderedRules.map((rule) => {\n            if (rule.method === 'auto' && verifiers[rule.id]) {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            if (rule.method === 'dependency') {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            return (\n              <Form.Item\n                key={rule.id}\n                name={rule.id}\n                label={rule.title}\n                className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n              >\n                <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n                  <Radio value={true}>✅</Radio>\n                  <Radio value={false}>❌</Radio>\n                </Radio.Group>\n              </Form.Item>\n            );\n          })}\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n\nconst deserializeThing = (\n  thing: DailyDiagramItem,\n  rules: Dictionary<DailyDiagramRule>,\n): Record<string, boolean | string | number> => {\n  let wasAnyRuleUpdated = false;\n  return {\n    name: thing.name,\n    itemId: thing.itemId,\n    syllables: thing.syllables ?? separateSyllables(thing.name),\n    stressedSyllable: thing.stressedSyllable ?? 0,\n\n    ...Object.keys(rules).reduce((acc: Record<string, boolean | undefined>, ruleId) => {\n      // Only re-verify if rule is older than the last update\n      if (thing.updatedAt < rules[ruleId].updatedAt) {\n        if (verifiers[ruleId]) {\n          const reVerify = verifiers[ruleId](thing.name);\n          if (reVerify && thing.rules.includes(ruleId)) {\n            wasAnyRuleUpdated = true;\n          }\n          acc[ruleId] = reVerify;\n        } else {\n          acc[ruleId] = undefined;\n        }\n      } else {\n        acc[ruleId] = thing.rules.includes(ruleId);\n      }\n\n      return acc;\n    }, {}),\n    updatedAt: wasAnyRuleUpdated ? Date.now() : thing.updatedAt,\n  };\n};\n\nconst serializeThing = (values: Record<string, boolean | string | number>): DailyDiagramItem => {\n  const { itemId, name, updatedAt, syllables, stressedSyllable, ...thingRules } = values;\n\n  return {\n    itemId: itemId as string,\n    name: name as string,\n    updatedAt: Date.now(),\n    syllables: syllables as string,\n    stressedSyllable: stressedSyllable as number,\n    rules: Object.keys(thingRules).filter((key) => thingRules[key] === true),\n  };\n};\n","import { Flex, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { Item } from 'components/Sprites';\nimport type { DailyDiagramItem } from 'types';\n\ntype ThingProps = {\n  itemId: string;\n  name: string;\n  width?: number;\n};\n\nexport function Thing({ itemId, name, width = 50 }: ThingProps) {\n  return (\n    <Flex vertical align=\"center\">\n      <Item id={itemId} width={width} />\n      <Typography.Text code key={itemId}>\n        {name}\n      </Typography.Text>\n    </Flex>\n  );\n}\n\ntype ThingButtonProps = {\n  thing: DailyDiagramItem;\n  onActivateThing: (thing: DailyDiagramItem) => void;\n  width?: number;\n};\n\nexport function ThingButton({ thing, width = 50, onActivateThing }: ThingButtonProps) {\n  return (\n    <TransparentButton onClick={() => onActivateThing(thing)}>\n      <Thing itemId={thing.itemId} name={thing.name} width={width} />\n    </TransparentButton>\n  );\n}\n","import { Collapse, Rate, Space, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport type { DailyTeoriaDeConjuntosEntry } from 'components/Daily/utils/games/daily-teoria-de-conjuntos';\nimport { type ReactNode, useState } from 'react';\nimport { Thing } from './Thing';\n\ntype DiagramGameSampleProps = {\n  game: DailyTeoriaDeConjuntosEntry;\n};\n\ntype TThing = {\n  id: string;\n  name: string;\n  rule: number;\n};\n\nexport function DiagramGameSample({ game }: DiagramGameSampleProps) {\n  const [leftRing] = useState<TThing[]>([\n    {\n      id: game.rule1.thing.id,\n      name: game.rule1.thing.name,\n      rule: 1,\n    },\n  ]);\n  const [rightRing] = useState<TThing[]>([\n    {\n      id: game.rule2.thing.id,\n      name: game.rule2.thing.name,\n      rule: 2,\n    },\n  ]);\n  const [intersection] = useState<TThing[]>([\n    {\n      id: game.intersectingThing.id,\n      name: game.intersectingThing.name,\n      rule: 0,\n    },\n  ]);\n\n  const [playerOptions] = useState<TThing[]>(game.things.slice(0, 4));\n\n  const [selectedThing, setSelectedThing] = useState<TThing | null>(game.things[0]);\n\n  // const\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Typography.Title level={4}>Game Sample</Typography.Title>\n      <Typography.Title level={5}>\"{game.title}\"</Typography.Title>\n      <Rate value={game.level} count={game.level} disabled />\n      <Typography.Paragraph style={{ maxWidth: '500px' }}>\n        O círculo amarelo tem uma regra gramatical secreta e o circulo vermelho tem outra regra gramatical\n        secreta. O quadrado do meio representa a interseção entre a regra amarela e a regra vermelha.\n      </Typography.Paragraph>\n\n      <Space>\n        <VennDiagram\n          width={600}\n          leftCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {leftRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          rightCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {rightRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          intersectionChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {intersection.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n        />\n      </Space>\n      <Typography.Text>Coloque os objetos nos círculos corretos:</Typography.Text>\n      <Space className=\"space--center\">\n        {playerOptions.map((thing) => (\n          <TransparentButton\n            key={thing.id}\n            style={thing.id === selectedThing?.id ? { outline: '3px solid hotPink' } : {}}\n            onClick={() => setSelectedThing(thing)}\n          >\n            <Thing key={thing.id} itemId={thing.id} name={thing.name} />\n          </TransparentButton>\n        ))}\n      </Space>\n\n      <Collapse\n        items={[\n          {\n            key: '1',\n            label: 'Resposta',\n            children: (\n              <Space direction=\"vertical\">\n                <Typography.Text strong>Regra Amarela</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule1.text}</Typography.Text>\n                  </li>\n                </ul>\n\n                <Typography.Text strong>Regra Vermelha</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule2.text}</Typography.Text>\n                  </li>\n                </ul>\n              </Space>\n            ),\n          },\n        ]}\n      />\n\n      <div style={{ height: '200px' }}></div>\n    </Space>\n  );\n}\n\ntype VennDiagramProps = {\n  leftCircleChildren: ReactNode;\n  rightCircleChildren: ReactNode;\n  intersectionChildren: ReactNode;\n} & React.SVGProps<SVGSVGElement>;\n\nfunction VennDiagram({\n  leftCircleChildren,\n  rightCircleChildren,\n  intersectionChildren,\n  ...props\n}: VennDiagramProps) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 760 500\" {...props}>\n      <path\n        fill=\"#fbb03b\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M252.78 3.5c-136.42 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.59-247-247-247zm.99 483.07C123.39 486.57 17.7 380.88 17.7 250.5S123.39 14.43 253.77 14.43 489.84 120.12 489.84 250.5 384.15 486.57 253.77 486.57z\"\n      ></path>\n      <path\n        fill=\"#f15a24\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M508.22 3.5c-136.41 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.58-247-247-247zm.99 483.07c-130.38 0-236.07-105.69-236.07-236.07S378.84 14.43 509.22 14.43 745.29 120.12 745.29 250.5 639.6 486.57 509.22 486.57z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M487.34 250.5c0-62.39-24.29-121.04-68.41-165.16a235.9 235.9 0 00-37.43-30.47 235.35 235.35 0 00-37.43 30.47c-44.12 44.11-68.41 102.77-68.41 165.16s24.29 121.04 68.41 165.16a235.9 235.9 0 0037.43 30.47 235.35 235.35 0 0037.43-30.47c44.12-44.11 68.41-102.77 68.41-165.16z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M258.72 250.5c0-66.64 25.95-129.3 73.08-176.42a253.125 253.125 0 0134.1-28.57c-33.98-18.65-72.29-28.57-112.13-28.57-62.39 0-121.04 24.29-165.16 68.41C44.5 129.46 20.2 188.11 20.2 250.5s24.29 121.04 68.41 165.16c44.11 44.12 102.77 68.41 165.16 68.41 39.84 0 78.15-9.92 112.13-28.57a252.507 252.507 0 01-34.1-28.57c-47.12-47.12-73.08-109.78-73.08-176.42zM674.37 85.34C630.25 41.22 571.6 16.93 509.21 16.93c-40.27 0-78.98 10.14-113.24 29.18 11.74 8.26 22.86 17.6 33.22 27.96 47.12 47.12 73.08 109.78 73.08 176.42s-25.95 129.3-73.08 176.42a252.312 252.312 0 01-33.22 27.96c34.25 19.04 72.96 29.18 113.24 29.18 62.39 0 121.04-24.29 165.16-68.41 44.12-44.11 68.41-102.77 68.41-165.16s-24.29-121.04-68.41-165.16z\"\n      ></path>\n      <foreignObject x=\"30\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-left\">{leftCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"480\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-right\">{rightCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"290\" y=\"65\" width=\"182\" height=\"370\">\n        <div className=\"venn-diagram__circle-content-intersection\">{intersectionChildren}</div>\n      </foreignObject>\n    </svg>\n  );\n}\n","import { Button, Space, Typography } from 'antd';\nimport {\n  type DailyTeoriaDeConjuntosEntry,\n  buildDailyTeoriaDeConjuntosGames,\n} from 'components/Daily/utils/games/daily-teoria-de-conjuntos';\n\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { DiagramGameSample } from './DiagramGameSample';\nimport './GameSimulator.scss';\n\ntype GameSimulatorProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n};\n\nexport function GameSimulator({ things, rules }: GameSimulatorProps) {\n  const [ref] = useMeasure<HTMLDivElement>();\n\n  const [simulation, setSimulation] = useState<DailyTeoriaDeConjuntosEntry | null>(null);\n\n  const onSimulate = () => {\n    setSimulation(\n      Object.values(\n        buildDailyTeoriaDeConjuntosGames(\n          1,\n          {\n            latestDate: '2023/01/01',\n            latestNumber: 0,\n            used: [],\n          },\n          rules,\n          things,\n        ),\n      )[0],\n    );\n  };\n\n  const onGenerateDemoGames = () => {\n    let demos: any = null;\n    try {\n      demos = buildDailyTeoriaDeConjuntosGames(\n        25,\n        {\n          latestDate: '2023/01/01',\n          latestNumber: 0,\n          used: [],\n        },\n        rules,\n        things,\n      );\n\n      console.log(demos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>Game Simulator</Typography.Title>\n\n      <Button size=\"large\" onClick={onSimulate}>\n        Simulate\n      </Button>\n\n      <Button size=\"large\" onClick={onGenerateDemoGames}>\n        Generate Demos (log)\n      </Button>\n\n      {simulation && <DiagramGameSample game={simulation} key={JSON.stringify(simulation)} />}\n    </Space>\n  );\n}\n","import type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { type ReactNode, useEffect, useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\nimport { SYLLABLE_SEPARATOR } from './utils';\n\ntype ItemUpdateGuardProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  rules: Dictionary<DailyDiagramRule>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  children: ReactNode;\n};\n\nexport function ItemUpdateGuard({ children, things, rules, addEntryToUpdate }: ItemUpdateGuardProps) {\n  // If any rules has been added or updated AFTER the last time the user has updated the item, the user will be warned to update the item\n  const toUpdateThings = useMemo(() => {\n    return Object.values(things).filter((item) => {\n      // Prevent updating items that have the syllables field but it's not correct\n      if (\n        item.syllables &&\n        item.syllables.split(SYLLABLE_SEPARATOR).join('') !== item.name.replace(/\\s/g, '')\n      ) {\n        console.log('❗️ Name and syllables do not match', item.name, item.syllables);\n        return true;\n      }\n\n      const outdatedRules = Object.values(rules).filter((rule) => rule.updatedAt > item.updatedAt);\n\n      const autoUpdates = outdatedRules.filter((rule) => rule.method === 'auto');\n      if (autoUpdates.length > 0) {\n        console.log(\n          '❗️ Thing has auto updates that will be performed automatically upon downloading the JSON',\n        );\n      }\n\n      return outdatedRules.some((rule) => rule.method !== 'auto');\n    });\n  }, [things, rules]);\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  useEffect(() => {\n    const updateThings = async (_: DailyDiagramItem) => {\n      console.log('Found things that need to update...');\n      setActiveThing(null);\n\n      // Await the wait function here\n      await wait(250);\n\n      if (toUpdateThings.length > 0) {\n        setActiveThing(toUpdateThings[0]);\n      }\n    };\n\n    console.count('Checking for things that need to update...');\n    if (toUpdateThings.length > 0) {\n      updateThings(toUpdateThings[0]);\n    }\n  }, [toUpdateThings]);\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <>\n      {activeThing && (\n        <EditThingModal\n          subtitle={`(${toUpdateThings.length} left to update)`}\n          isModalOpen={activeThing !== null}\n          onSaveThing={onUpdateThing}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          okButtonText=\"Update\"\n          width=\"90vw\"\n        />\n      )}\n      {children}\n    </>\n  );\n}\n","import { App, Button } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { sample } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\n\ntype AddNewThingFlowProps = {\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  width: number;\n};\n\nexport function AddNewThingFlow({ addEntryToUpdate, availableThings, rules, width }: AddNewThingFlowProps) {\n  const { notification } = App.useApp();\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  const onActivateThing = () => {\n    const randomItem = sample(availableThings);\n    if (randomItem) {\n      setActiveThing({\n        itemId: randomItem.id,\n        name: chooseNameThatIsASingleWord(randomItem),\n        updatedAt: Date.now(),\n        syllables: '',\n        stressedSyllable: 0,\n        rules: [],\n      });\n    } else {\n      setActiveThing(null);\n    }\n  };\n\n  const aliases = useMemo(() => {\n    if (!activeThing) return [];\n    const item = availableThings.find((thing) => thing.id === activeThing.itemId);\n    return [item?.name.pt, ...(item?.aliasesPt ?? [])].filter(Boolean);\n  }, [activeThing, availableThings]);\n\n  const onAddItem = async (newThing: DailyDiagramItem) => {\n    if (!activeThing) return;\n    if (!newThing.name || !newThing.itemId) {\n      notification.error({ message: 'Name and Item ID are required' });\n    }\n\n    addEntryToUpdate(newThing.itemId, newThing);\n\n    console.log('COMPLETED SAVE');\n\n    setActiveThing(null);\n\n    await wait(250);\n\n    onActivateThing();\n  };\n\n  const onGiveAnotherThing = async () => {\n    setActiveThing(null);\n    await wait(100);\n    onActivateThing();\n  };\n\n  return (\n    <>\n      <Button size=\"large\" onClick={onActivateThing}>\n        Classify New Item\n      </Button>\n      {!!activeThing && (\n        <EditThingModal\n          isModalOpen={activeThing !== null}\n          onSaveThing={onAddItem}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          width={width * 0.9}\n          itemAliases={aliases as string[]}\n          onGiveAnotherThing={onGiveAnotherThing}\n        />\n      )}\n    </>\n  );\n}\n\nconst chooseNameThatIsASingleWord = (item: ItemT) => {\n  if (item.name.pt.split(' ').length === 1) return item.name.pt;\n\n  if (item.aliasesPt) {\n    return item.aliasesPt.find((alias) => alias.split(' ').length === 1) ?? item.name.pt;\n  }\n  return item.name.pt;\n};\n","import { Divider, Flex, Space, Table, type TableColumnsType, Tag, Tooltip, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useMemo } from 'react';\nimport { useMeasure } from 'react-use';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\n\ntype RulesByThingProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n};\n\nexport function RulesByThing({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  setActiveThing,\n}: RulesByThingProps) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const rows = useMemo(() => Object.values(things), [things]);\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableColumnsType<DailyDiagramItem> = [\n    {\n      title: 'ItemId',\n      dataIndex: 'itemId',\n      key: 'itemId',\n      sorter: (a, b) => Number(a.itemId) - Number(b.itemId),\n      render: (itemId: string) => <Tag>{itemId}</Tag>,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (name: string) => <Typography.Text>{name}</Typography.Text>,\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'itemId',\n      key: 'sprite',\n      render: (itemId: string) => (\n        <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n      ),\n    },\n    {\n      title: 'Rules',\n      dataIndex: 'rules',\n      key: 'rules',\n      render: (itemRules: string[], record) => (\n        <Space wrap>\n          {itemRules.map((ruleId) => (\n            <Tooltip title={rules[ruleId].title} key={ruleId}>\n              <Tag color={rules[ruleId].updatedAt > record.updatedAt ? 'red' : undefined}>{ruleId}</Tag>\n            </Tooltip>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'rules',\n      key: 'count',\n      sorter: (a, b) => a.rules.length - b.rules.length,\n      render: (rules: string[]) => rules.length,\n    },\n  ];\n\n  const duplicatedThings = useMemo(() => {\n    const dict: Dictionary<string[]> = {};\n\n    Object.values(things).forEach((item) => {\n      if (!dict[item.name]) {\n        dict[item.name] = [];\n      }\n      dict[item.name].push(item.itemId);\n    });\n    return Object.values(dict).filter((ids) => ids.length > 1);\n  }, [things]);\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>\n        Rules By Items <Divider type=\"vertical\" /> Added: <Tag>{Object.keys(things).length}</Tag> Available to\n        add <Tag>{availableThings.length}</Tag>\n      </Typography.Title>\n\n      <AddNewThingFlow\n        addEntryToUpdate={addEntryToUpdate}\n        availableThings={availableThings}\n        rules={rules}\n        width={containerWidth}\n      />\n\n      <Divider />\n\n      <Table dataSource={rows} columns={columns} rowKey=\"itemId\" pagination={paginationProps} />\n\n      <Divider />\n\n      <Typography.Title level={5}>Duplicated Things</Typography.Title>\n      <Space wrap>\n        {duplicatedThings.length === 0 && <Typography.Text>No duplicated things</Typography.Text>}\n        {duplicatedThings.map((ids) => (\n          <Flex key={ids[0]} align=\"center\">\n            <Tag color=\"red\">{ids.length}</Tag>\n            {ids.map((itemId) => (\n              <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n            ))}\n          </Flex>\n        ))}\n      </Space>\n    </Space>\n  );\n}\n","import { Divider, Rate, Space, Switch, Table, type TableColumnsType, Tag, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMemo } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\n\ntype ThingsByRuleProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n  containerWidth: number;\n};\n\nexport function ThingsByRule({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  thingsByRules,\n  setActiveThing,\n  containerWidth,\n}: ThingsByRuleProps) {\n  const { is, addParam } = useQueryParams();\n\n  const rows = useMemo(\n    () =>\n      Object.values(rules).map((r) => ({\n        ...r,\n        thingsCount: thingsByRules[r.id].length,\n      })),\n    [rules, thingsByRules],\n  );\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const stats = useMemo(() => {\n    const quantities = Object.values(thingsByRules).map((things) => things.length);\n\n    return {\n      maxThings: Math.max(...quantities),\n      minThings: Math.min(...quantities),\n      averageThings: Math.round(\n        Object.values(thingsByRules).reduce((sum, things) => sum + things.length, 0) /\n          Object.keys(thingsByRules).length,\n      ),\n    };\n  }, [thingsByRules]);\n\n  const columns: TableColumnsType<DailyDiagramRule & { thingsCount: number }> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => Number(a.id.split('-')[1]) - Number(b.id.split('-')[1]),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Rule',\n      dataIndex: 'title',\n      key: 'title',\n      sorter: (a, b) => a.title.localeCompare(b.title),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n    },\n    {\n      title: 'Method',\n      dataIndex: 'method',\n      key: 'method',\n      sorter: (a, b) => a.method.localeCompare(b.method),\n    },\n    {\n      title: 'Things',\n      dataIndex: 'thingsCount',\n      key: 'thingsCount',\n      render: (thingsCount: number, record) => (\n        <Space size=\"small\">\n          <Tag>{thingsCount}</Tag>\n          {is('showThings') ? (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 20).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 20 && (\n                <Typography.Text>+{thingsCount - 20} more</Typography.Text>\n              )}\n            </Space>\n          ) : (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 5).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 5 && (\n                <Typography.Text>+{thingsCount - 5} more</Typography.Text>\n              )}\n            </Space>\n          )}\n        </Space>\n      ),\n      sorter: (a, b) => a.thingsCount - b.thingsCount,\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      sorter: (a, b) => a.level - b.level,\n      render: (level: number) => <Rate value={level} count={3} disabled />,\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={4}>\n        Things By Rule (Added: {Object.keys(things).length} | {availableThings.length}){' '}\n      </Typography.Title>\n\n      <Space split={<Divider type=\"vertical\" />} wrap>\n        <AddNewThingFlow\n          addEntryToUpdate={addEntryToUpdate}\n          availableThings={availableThings}\n          rules={rules}\n          width={containerWidth}\n        />\n\n        <Typography.Text strong>\n          Average Things: <Tag>{stats.averageThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Max Things: <Tag>{stats.maxThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Min Things: <Tag>{stats.minThings}</Tag>\n        </Typography.Text>\n\n        <Switch\n          checked={is('showThings')}\n          onChange={(e) => addParam('showThings', e)}\n          checkedChildren=\"Hide things\"\n          unCheckedChildren=\"Show things\"\n        />\n      </Space>\n\n      <Table dataSource={rows} columns={columns} pagination={paginationProps} />\n    </Space>\n  );\n}\n","import { Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { orderBy } from 'lodash';\nimport { useMeasure } from 'react-use';\nimport { EditThingModal } from './EditThingModal';\nimport { GameSimulator } from './GameSimulator';\nimport { ItemUpdateGuard } from './ItemUpdateGuard';\nimport { RulesByThing } from './RulesByThing';\nimport { ThingsByRule } from './ThingsByRule';\n\nexport function ItemsDiagramSetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const tdrItemsQuery = useTDResource<ItemT>('items');\n  const tdrDiagramRulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules');\n\n  const availableThings = useMemo(() => {\n    return Object.values(tdrItemsQuery.data ?? {}).filter((item) => {\n      if (data && data[item.id] !== undefined) return false;\n      if (item.nsfw) return false;\n      const isNameSingleWord = item.name.pt.split(' ').length === 1;\n\n      if (item.decks?.includes('thing')) return true;\n      if (item.decks?.includes('alien') && isNameSingleWord) return true;\n      if (item.decks?.includes('manufactured') && isNameSingleWord) return true;\n\n      return false;\n    });\n  }, [data, tdrItemsQuery.data]);\n\n  const rules = useMemo(() => {\n    return tdrDiagramRulesQuery.data ?? {};\n  }, [tdrDiagramRulesQuery.data]);\n\n  const thingsByRules = useMemo(() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    orderBy(Object.values(data), ['updatedAt'], ['desc']).forEach((entry) => {\n      entry.rules.forEach((ruleId) => {\n        dict[ruleId].push(entry.itemId);\n      });\n    });\n    return dict;\n  }, [data, rules]);\n\n  const { is, queryParams } = useQueryParams();\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  if (tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading) {\n    return <Typography.Text>Loading...</Typography.Text>;\n  }\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading}\n      hasResponseData={tdrItemsQuery.hasResponseData || tdrDiagramRulesQuery.hasResponseData}\n    >\n      <div ref={ref}>\n        <ItemUpdateGuard things={data} rules={rules} addEntryToUpdate={addEntryToUpdate}>\n          {activeThing && (\n            <EditThingModal\n              isModalOpen={activeThing !== null}\n              onSaveThing={(at) => {\n                onUpdateThing(at);\n                setActiveThing(null);\n              }}\n              onCancel={() => setActiveThing(null)}\n              thing={activeThing}\n              rules={rules}\n              okButtonText=\"Update\"\n              width={containerWidth}\n            />\n          )}\n\n          {(is('display', 'rule') || !queryParams.has('display')) && (\n            <ThingsByRule\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n              containerWidth={containerWidth}\n            />\n          )}\n\n          {is('display', 'thing') && (\n            <RulesByThing\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n            />\n          )}\n\n          {is('display', 'simulator') && (\n            <GameSimulator\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n            />\n          )}\n        </ItemUpdateGuard>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsDiagramFilters } from 'components/Items/Diagram/ItemsDiagramFilters';\nimport { ItemsDiagramSetsContent } from 'components/Items/Diagram/ItemsDiagramSetsContent';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { DailyDiagramItem } from 'types';\n\nexport function ItemsDiagramSets() {\n  const diagramData = useResourceFirebaseData<DailyDiagramItem>({\n    tdrResourceName: 'daily-diagram-items',\n    firebaseDataCollectionName: 'diagramItems',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Diagram Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsDiagramFilters {...diagramData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={diagramData.isLoading || diagramData.isSaving}\n            error={diagramData.error}\n            hasResponseData={!isEmpty(diagramData.data)}\n          >\n            <Flex vertical gap={24}>\n              <ItemsDiagramSetsContent {...diagramData} />\n            </Flex>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsDiagramSets;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","cancel","reset","useTimeoutFn","useEffect","togglePendingSave","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","disabled","danger","block","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","undefined","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","error","description","useMemo","isSuccess","isPending","cloneDeep","isEmpty","firebaseData","isLoading","save","mutate","serializeFirebaseData","addEntryToUpdate","id","item","prev","entriesToUpdate","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","queryParams","addParam","useQueryParams","current","Number","get","String","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","path","docId","docRef","doc","firestore","updateDoc","options","useMutation","mutationFn","async","ItemsDiagramFilters","addParams","tdrDiagramRulesQuery","vertical","gap","JSON","stringify","diagramItems","rules","copy","Object","values","forEach","outdatedRules","filter","rule","updatedAt","autoUpdates","method","length","name","ruleId","map","includes","verifiers","push","sort","some","sortJsonKeys","prepareFileForDownload","label","value","mode","display","title","ClusterOutlined","TableOutlined","className","EditThingModal","isModalOpen","onSaveThing","onCancel","thing","width","itemAliases","subtitle","okButtonText","onGiveAnotherThing","orderedRules","orderBy","r","index","indexOf","POSITIVE_INFINITY","slice","split","form","Form","hasUndefinedValues","nameWatch","syllables","fields","separateSyllables","stressedSyllable","keys","setFieldsValue","isAcronym","getFieldValue","syllableRulesUpdate","reduce","acc","syllableDependencyVerifier","stressSyllableRulesUpdate","stressSyllableDependencyVerifier","rule1","rule2","rule5","rule3","rule4","splitSyllables","SYLLABLE_SEPARATOR","open","onOk","submit","maskClosable","okButtonProps","htmlType","okText","itemId","onFinish","preparedThing","serializeThing","autoComplete","initialValues","deserializeThing","layout","labelWrap","readOnly","optionType","buttonStyle","syllable","toLocaleString","join","offsetTop","justify","align","valuePropName","clsx","checkedChildren","unCheckedChildren","wasAnyRuleUpdated","reVerify","thingRules","key","Thing","code","ThingButton","onActivateThing","DiagramGameSample","game","leftRing","rightRing","intersection","intersectingThing","playerOptions","things","selectedThing","setSelectedThing","direction","level","count","style","maxWidth","VennDiagram","leftCircleChildren","height","arr","rightCircleChildren","intersectionChildren","outline","items","strong","text","xmlns","viewBox","fill","stroke","strokeMiterlimit","strokeWidth","d","x","y","GameSimulator","ref","useMeasure","simulation","setSimulation","buildDailyTeoriaDeConjuntosGames","latestDate","latestNumber","used","demos","ItemUpdateGuard","toUpdateThings","replace","activeThing","setActiveThing","wait","updateThings","newThing","AddNewThingFlow","availableThings","randomItem","sample","chooseNameThatIsASingleWord","aliases","find","pt","aliasesPt","Boolean","alias","RulesByThing","containerWidth","rows","paginationProps","columns","dataIndex","sorter","a","b","render","localeCompare","itemRules","record","wrap","color","duplicatedThings","dict","ids","dataSource","rowKey","pagination","ThingsByRule","thingsByRules","is","thingsCount","stats","quantities","maxThings","Math","max","minThings","min","averageThings","round","sum","checked","e","ItemsDiagramSetsContent","tdrItemsQuery","nsfw","isNameSingleWord","decks","entry","DataLoadingWrapper","hasResponseData","at","has","ItemsDiagramSets","diagramData","hasSider","PageSider"],"sourceRoot":""}