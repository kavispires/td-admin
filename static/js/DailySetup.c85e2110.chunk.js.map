{"version":3,"file":"static/js/DailySetup.c85e2110.chunk.js","mappings":"0KASO,SAASA,EACdC,GAEC,IADDC,EACA,uDAD0F,CAAC,EAE3F,MAAM,aAAEC,GAAiBC,EAAAA,EAAAA,SAEnBC,GAAeC,EAAAA,EAAAA,GAAsD,CACzEC,SAAU,CAACN,EAAQ,WACnBO,SAASC,EAAAA,EAAAA,GAAkCR,EAAQ,cAChDC,IAkBL,OAfAQ,EAAAA,EAAAA,YAAU,KACJL,EAAaM,YACfC,EAAAA,EAAAA,IAAc,uBACf,GACA,CAACP,EAAaM,aAEjBD,EAAAA,EAAAA,YAAU,KACJL,EAAaQ,SACfV,EAAaW,MAAM,CACjBC,QAAS,8BACTC,UAAW,cAEd,GACA,CAACX,EAAaQ,UAEVR,CACR,C,0DCjCM,SAASY,EACdC,EACAC,GAEA,MAAMC,GAAUC,EAAAA,EAAAA,UACd,mCACEF,QADF,IACEA,OADF,EACEA,EAAOD,UADT,QACiB,CACbI,YAAYC,EAAAA,EAAAA,MACZC,aAAc,EACdC,KAAM,KAJV,GAMA,CAACN,EAAMD,IAWT,MAAO,EARwCG,EAAAA,EAAAA,UAAQ,KAAO,IAAD,MAC3D,MAAO,CACLG,aAAY,iBAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAASI,oBAAX,QAA2B,EACvCF,WAAU,iBAAEF,QAAF,IAAEA,OAAF,EAAEA,EAASE,kBAAX,SAAyBC,EAAAA,EAAAA,MACnCE,KAAMC,KAAKC,MAAL,iBAAWP,QAAX,IAAWA,OAAX,EAAWA,EAASK,YAApB,QAA4B,MAHpC,GAKC,CAACL,IAEmBA,EACxB,C,kCC3BM,MAAMQ,EAAkB,CAC7BC,YAAa,CACXC,GAAI,aACJC,GAAI,cAENC,MAAO,CACLF,GAAI,SACJC,GAAI,S,iICFR,MA0CaE,EAAY,IAOF,IAAD,QAPI,QACxBC,EAAU,GADc,UAExBC,EAAY,GAFY,MAGxBC,EAAQ,IAHgB,OAIxBC,EAJwB,YAKxBC,EAAc,SALU,QAMxBC,EAAU,eACU,EACpB,MAAMC,EAAad,KAAKC,MAAMO,GACxBO,EAA8BD,EAlDfE,KAAKC,IACxB,IAAIC,EAAO,GACX,IAAK,IAAIC,EAAI,EAAGC,EAAI,EAAGA,EAAIH,EAAQI,OAAQF,GAAK,EAAGC,GAAK,EAClDH,EAAQE,EAAI,IAAMF,EAAQG,EAAI,KAChCF,GAAI,WAAQD,EAAQE,GAAhB,YAAsBF,EAAQG,GAA9B,aAAqCH,EAAQE,EAAI,GAAjD,YAAuDF,EAAQG,EAAI,KAI3E,OAAOF,CAAP,IA4CF,MAAMI,EAAiB,oBACrB,CACEC,MAAO,EACPC,OAAQ,EACRC,MAAO,UAJY,aACrB,EAIIb,UALiB,QAKD,EAEtB,OACE,iBACEc,MAAM,6BACNb,QAASA,EACTc,SAAS,SACTlB,UAAWA,EACXmB,MAAO,CAAElB,MAAM,GAAD,OAAKA,EAAL,MAAgBC,OAAO,GAAD,OAAKA,GAAUD,EAAf,OALtC,WAOE,oBACCK,EAAMC,KAAI,CAACE,EAAMW,KAChB,iBAEEC,EAAGZ,EACHa,KAAK,OACLC,OAAO,OACPpB,YAAaU,EACbW,cAAc,QACdC,eAAe,QACfC,iBAAiB,MARnB,UACU3B,EADV,YACqBqB,QAX3B,E,wIC5DK,SAASO,EACdC,EACAC,GAGC,IAAD,MAFAC,IAEA,yDADAC,EACA,uCACA,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,GAAW,aAExBC,EAAeH,EAAQ,gBAChBH,EADgB,6BACeC,GADf,gBAEhBD,EAFgB,oBAEMC,GAC7BM,GAAQhE,EAAAA,EAAAA,GAAkC,CAC9CC,SAAU,CAAC8D,GACX7D,QAAS+D,UACP,MAAMC,QAAYC,MAAMN,EAAO,GAAD,OAAIE,EAAJ,WAC9B,aAAcG,EAAIE,MAAlB,EAEFT,QAASA,KAAaF,KAAgBC,IAElCW,IAAmBC,EAAAA,EAAAA,SAAQN,EAAMnD,MAEvC,MAAO,IACFmD,EACHnD,KAAI,UAAEmD,EAAMnD,YAAR,QAAgB,GACpBwD,kBAEH,C,kCChBM,MCqCME,EAAyB,SACpCC,EACAC,EACAC,GAGI,IAAD,MAFHC,EAEG,uDAFI,EACPC,EACG,uCACCC,GAAgBC,EAAAA,EAAAA,UAAQC,EAAAA,EAAAA,YAAWP,EAAOE,EAAcD,IAG5D,MAAMO,EAAUJ,IAAY,UAAmBC,EAAcI,aAAjC,QAA0C,IAClEL,IACFC,GAAgBE,EAAAA,EAAAA,YAAWF,EAAe,CAACD,KAG7C,MAAMM,EAA0B,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMQ,IAAK,CAC7B,MAAMC,EAAUC,EAAWb,EAAOQ,EAASE,EAAeC,GAC1DD,EAAcI,KAAKF,EACpB,CAID,OAFAV,EAAaY,KAAKN,KAAYE,GAEvB,CACLF,UACAR,MAAOU,EACPK,QAASC,EAAeN,EAAeF,EAAQvC,QAElD,EAWK4C,EAAa,CAACb,EAAiBQ,EAAiBE,EAAyBjC,KAC7E,MAAMwC,GAAcC,EAAAA,EAAAA,MAAK,KAAIC,EAAAA,EAAAA,SAAQT,EAAc9C,KAAKwD,GAASA,EAAKC,MAAM,UAAUb,EAAQa,MAAM,MAE9FC,GAAYhB,EAAAA,EAAAA,SAChBN,EAAMuB,QAAQH,GAASA,EAAK3C,KAAW+B,EAAQ/B,KAAWiC,EAAcc,SAASJ,MAQnF,OANmBK,EAAAA,EAAAA,QAAOH,GAAYF,IACjBM,EAAAA,EAAAA,cAAaN,EAAKC,MAAM,IAAKJ,GAAahD,SAK7C,EAAlB,EAGI+C,EAAiB,CAACN,EAAyBP,KAC/C,MAAMY,GAAUI,EAAAA,EAAAA,SAAQT,EAAc9C,KAAKwD,GAASA,EAAKC,MAAM,OACzDM,EAA4B,IAATxB,EAAa,CAAC,EAAG,EAAG,GAAI,IAAM,CAAC,EAAG,EAAG,GAAI,GAAI,IAChEyB,GAAetB,EAAAA,EAAAA,SAAQS,EAAQQ,QAAO,CAACM,EAAGpD,KAAWkD,EAAiBH,SAAS/C,MAErF,IAAIqD,EAA4B,GAChC,IAAK,IAAInB,EAAI,EAAGA,EAAII,EAAQ9C,OAAQ0C,IAAK,CAG/B,IAAD,EAFP,GAAIgB,EAAiBH,SAASb,GAC5BmB,EAAgBhB,KAAKC,EAAQJ,SAE7BmB,EAAgBhB,KAAhB,UAAqBc,EAAaG,eAAlC,QAA6C,GAEhD,CAED,OAAOD,CAAP,EClFWE,EAAgC,CAACC,EAAYC,KACxD,MAAOC,EAAMC,EAAOC,GAAOJ,EAAGZ,MAAM,KAAKzD,IAAI0E,QAevCC,EAAqC,CACzCN,KACAO,OAAQN,EACRO,KAAM,sBACNvD,SAAU,KACVwD,MAfmB,CACnB,UACA,gBACA,iBACA,eACA,eACA,cACA,aAXW,IAAIC,KAAKR,EAAMC,EAAQ,EAAGC,GAEXO,UAkB1BC,MAAO,GACPC,OAAQ,IAGJD,GAAQE,EAAAA,EAAAA,YACZC,MAtCgB,KAuCbrE,KAAK,IACLf,KAAI,CAACiE,EAAGlB,IAAJ,eAAkBA,EAAI,KAC7BsC,IAEIC,EAAiBL,EAAMpC,MAQ7B,OANA8B,EAAMM,MAAQA,EACdN,EAAMO,QAASC,EAAAA,EAAAA,YAAWR,EAAMM,MA5Cf,GA8CjBN,EAAMO,OAAOhC,KAAKoC,GAClBX,EAAMO,QAASxC,EAAAA,EAAAA,SAAQiC,EAAMO,QAEtBP,CAAP,E,kCCvEK,MAgDDY,EAAoC,CACxCC,EACAC,KAEA,MAAMC,GAA0BhD,EAAAA,EAAAA,SAAQ+C,GAElCE,GAAYjD,EAAAA,EAAAA,UAAQkD,EAAAA,EAAAA,IAAU,GAAI,IAGlCC,GAAqBV,EAAAA,EAAAA,YAAWK,EAAY,GAAGxF,KAAK8F,IAAD,IACpDA,EACHC,SAAS,GAAD,OAAKJ,EAAU9C,WAEnBmD,EAAuB,GACvBC,EAAuB,GACvBC,EAAuB,GACvBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAyB,GACzBC,EAAiB,GAEvBb,EAAwBc,SAASC,IAC/B,MAAMC,EAAW,CAACC,EAAAA,GAAAA,cAA+BA,EAAAA,GAAAA,SAC3CC,EAAeH,EAAKjB,WAAWK,EAAmB,GAAGxB,MAAQsC,EAAAA,GAAAA,cAC7DE,EAAWH,EAAS9C,SAAS6C,EAAKjB,WAAWK,EAAmB,GAAGxB,KACnEyC,EAAcL,EAAKjB,WAAWK,EAAmB,GAAGxB,MAAQsC,EAAAA,GAAAA,UAC5DI,EAAeN,EAAKjB,WAAWK,EAAmB,GAAGxB,MAAQsC,EAAAA,GAAAA,cAC7DK,EAAWN,EAAS9C,SAAS6C,EAAKjB,WAAWK,EAAmB,GAAGxB,KACnE4C,EAAcR,EAAKjB,WAAWK,EAAmB,GAAGxB,MAAQsC,EAAAA,GAAAA,UAC5DO,EAAeT,EAAKjB,WAAWK,EAAmB,GAAGxB,MAAQsC,EAAAA,GAAAA,cAC7DQ,EAAWT,EAAS9C,SAAS6C,EAAKjB,WAAWK,EAAmB,GAAGxB,KACnE+C,EAAcX,EAAKjB,WAAWK,EAAmB,GAAGxB,MAAQsC,EAAAA,GAAAA,UAElE,GAAIG,GAAeG,GAAeG,EAChC,OAAOb,EAAKrD,KAAKuD,EAAKpC,IAEpBuC,GAAgBK,GAAeG,GACjCpB,EAAW9C,KAAKuD,EAAKpC,IAEnByC,GAAeC,GAAgBK,GACjCnB,EAAW/C,KAAKuD,EAAKpC,IAEnByC,GAAeG,GAAeC,GAChChB,EAAWhD,KAAKuD,EAAKpC,IAEnBwC,GAAYG,GAAYI,GAC1BjB,EAAYjD,KAAKuD,EAAKpC,IAEpBwC,GAAYI,GAAeE,GAC7Bf,EAAYlD,KAAKuD,EAAKpC,IAEpByC,GAAeE,GAAYG,GAC7Bd,EAAYnD,KAAKuD,EAAKpC,IAEpBwC,GAAYG,GAAYG,GAC1Bb,EAAapD,KAAKuD,EAAKpC,GACxB,IAGH,MAAMgD,EAAgExB,EAAmB7F,KAAK8F,IAAD,CAC3FzB,GAAIyB,EAAKzB,GACTiD,KAAMxB,EAAKwB,KAAKlI,GAChBmI,YAAazB,EAAKyB,YAAYnI,GAC9B2G,SAAUD,EAAKC,SACfyB,SAAU,OAEZH,EAAe,GAAGG,UAAWrC,EAAAA,EAAAA,YAC3Ba,EACAA,EAAW3F,OAAS,EAAI,EAAIoH,KAAKC,IAAI1B,EAAW3F,OAAS,EAAG,IAE9DgH,EAAe,GAAGG,UAAWrC,EAAAA,EAAAA,YAC3Bc,EACAA,EAAW5F,OAAS,EAAI,EAAIoH,KAAKC,IAAI1B,EAAW3F,OAAS,EAAG,IAE9DgH,EAAe,GAAGG,UAAWrC,EAAAA,EAAAA,YAC3Be,EACAA,EAAW7F,OAAS,EAAI,EAAIoH,KAAKC,IAAI1B,EAAW3F,OAAS,EAAG,IAG9D,MAAMsH,EAAyB,GAC/BN,EAAeb,SAASV,IACtB6B,EAAazE,QAAQ4C,EAAK0B,SAA1B,IAGF,MAAMI,EAA+D,GAEjEzB,EAAY9F,OAAS,GACvBuH,EAAgB1E,KAAK,CACnB2E,WAAY,CAAChC,EAAmB,GAAGE,SAAUF,EAAmB,GAAGE,UACnE+B,QAAQC,EAAAA,EAAAA,QAAO5B,KAIfC,EAAY/F,OAAS,GACvBuH,EAAgB1E,KAAK,CACnB2E,WAAY,CAAChC,EAAmB,GAAGE,SAAUF,EAAmB,GAAGE,UACnE+B,QAAQC,EAAAA,EAAAA,QAAO3B,KAIfC,EAAYhG,OAAS,GACvBuH,EAAgB1E,KAAK,CACnB2E,WAAY,CAAChC,EAAmB,GAAGE,SAAUF,EAAmB,GAAGE,UACnE+B,QAAQC,EAAAA,EAAAA,QAAO1B,KAIfC,EAAajG,OAAS,GACxBuH,EAAgB1E,KAAK,CACnB2E,WAAYhC,EAAmB7F,KAAK8F,GAASA,EAAKC,WAClD+B,QAAQC,EAAAA,EAAAA,QAAOzB,KAGnB,MAAM0B,EAA8D,GAEhEhC,EAAW3F,OAAS,GACtB2H,EAAe9E,KAAK,CAClB2E,WAAY,CAAChC,EAAmB,GAAGE,UACnC+B,OAAQ9B,EAAWrC,QAAQU,IAAQsD,EAAa/D,SAASS,KAAK,KAI9D4B,EAAW5F,OAAS,GACtB2H,EAAe9E,KAAK,CAClB2E,WAAY,CAAChC,EAAmB,GAAGE,UAEnC+B,OAAQ7B,EAAWtC,QAAQU,IAAQsD,EAAa/D,SAASS,KAAK,KAI9D6B,EAAW7F,OAAS,GACtB2H,EAAe9E,KAAK,CAClB2E,WAAY,CAAChC,EAAmB,GAAGE,UACnC+B,OAAQ5B,EAAWvC,QAAQU,IAAQsD,EAAa/D,SAASS,KAAK,KAclE,IAAI4D,GAAW9C,EAAAA,EAAAA,YAAWyC,EAAiB,GAEvCK,EAAS5H,OAAS,GACpB4H,EAAS/E,SAAQiC,EAAAA,EAAAA,YAAW6C,EAAgB,EAAIC,EAAS5H,SAGvD4H,EAAS5H,OAAS,GACpB6H,QAAQC,IAAI,mFAGdF,GAAWvF,EAAAA,EAAAA,SAAQuF,GAEnB,MAAMG,EAA4BH,EAASjI,KAAKqI,GAAQA,EAAIP,SAEtDQ,EAA0C,CAC9CjE,GAAI,aACJkE,MAAOlB,EACJrH,KAAK8F,GAASA,EAAKzB,KACnBmE,OACAC,KAAK,KACR7D,OAAQ,EACRC,KAAM,kCACNW,WAAY6B,EACZY,WACAS,SAAUN,EAAgBK,KAAK,KAC/BjB,UAAU9E,EAAAA,EAAAA,SAAQ,IACb0F,MACAjD,EAAAA,EAAAA,YAAW,CAACoB,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,KAAKoC,EAAAA,EAAAA,QAAO,EAAG,MAC7DhF,OAAOiF,SACVC,OAAO,GAYT,OARAP,EAAOO,MAAQ,CACgB,IAA7BP,EAAO9C,WAAWnF,OACS,IAA3BiI,EAAOL,SAAS5H,OAChBiI,EAAOd,SAASnH,OAAS,EACzBiI,EAAO9C,WAAWsD,OAAOhD,GAASA,EAAK0B,SAASnH,OAAS,IACzDiI,EAAOL,SAASa,OAAOT,GAAQA,EAAIP,UACnCgB,MAAMF,SAEDN,CAAP,EC1MK,SAASS,EACdxH,EACAyH,EACAC,EACAC,GAGA,MAAM3L,EAAS2B,EAAAA,EAAAA,MAAA,OAAsB8J,QAAtB,IAAsBA,EAAAA,EAAiB,MAChDrL,GAAeL,EAAAA,EAAAA,GAAqBC,EAAQ,CAAEgE,aAC7C4H,EAAUC,IAAeC,EAAAA,EAAAA,UAAmB,IAE7CC,EAAkBC,IACtBH,GAAaI,GAAS,IAAIA,EAAMD,IAAhC,GAGFvL,EAAAA,EAAAA,YAAU,KACRoL,EAAY,GAAZ,GACC,CAACF,EAAWF,IAGf,MAAMS,EC5CD,SAAyBlI,EAAkByH,GAA0B,IAAD,IACzE,MAAM,aAAEvL,GAAiBC,EAAAA,EAAAA,SAEnBgM,GAAoB9L,EAAAA,EAAAA,GAAiD,CACzEC,SAAU,CAAC,OAAQ,gBACnBC,SAASC,EAAAA,EAAAA,GAAsC,OAAQ,gBACvDwD,aAGFvD,EAAAA,EAAAA,YAAU,KACJ0L,EAAkBzL,YACpBC,EAAAA,EAAAA,IAAc,2BACf,GACA,CAACwL,EAAkBzL,aAEtBD,EAAAA,EAAAA,YAAU,KACJ0L,EAAkBvL,SACpBV,EAAaW,MAAM,CACjBC,QAAS,kCACTC,UAAW,cAEd,GACA,CAACoL,EAAkBvL,UAEtB,MAAMwL,EAAazK,EAAAA,EAAAA,YAAA,OAA4B8J,QAA5B,IAA4BA,EAAAA,EAAiB,MAE1DY,EAAY,oBAAGF,EAAkBjL,YAArB,aAAG,EAAyBkL,UAA5B,QAA2C,EAEvDE,EAAS,kBAAgC,OAAlBb,EAAyB,KAAO,MACvDc,GAA6BnL,EAAAA,EAAAA,UAAQ,IAClC,IAAIyG,MAAMwE,GAAc7I,KAAK,GAAGf,KAAI,CAACiE,EAAGpD,KACtC,CACLhD,SAAU,CAAC,OAAD,UAAYgM,GAAZ,OAAwBhJ,EAAQ,IAC1C/C,SAASC,EAAAA,EAAAA,GAAoB,OAAD,UAAY8L,GAAZ,OAAwBhJ,EAAQ,IAC5DU,QAASA,GAAWqH,QAAQgB,GAC5BG,UAAW,KACTtM,EAAauM,KAAK,CAChB3L,QAAQ,iBAAD,OAAmBwL,GAAnB,OAA+BhJ,EAAQ,EAAvC,WACPvC,UAAW,cAFb,OAOL,CAACsL,IAEJ,OAAOK,EAAAA,EAAAA,GAAW,CAAEH,WACrB,CDFuBI,CAAgB3I,EAAD,OAAUyH,QAAV,IAAUA,EAAAA,EAAiB,MAC1DmB,EAAqBV,EAAcW,MAAMC,GAAMA,EAAEC,aAChDC,IAAmBhM,EAAAA,EAAAA,GAAiB,YAAaZ,EAAac,MAC/D+L,GAAkB7L,EAAAA,EAAAA,UAAQ,IAC1BwL,IAAuBxM,EAAaM,UAC/B,GJpD0B,EACrCiL,EACAxK,EACA+K,EACAT,EACAC,KAEAf,QAAQuC,MAAM,yBACd,MAAMC,GAAW,OAACjB,QAAD,IAACA,EAAAA,EAAiB,IAAIkB,QACrC,CAACC,EAA8CC,KAAkB,IAAD,EAC9D,MAAMC,EAAe,UAAID,EAAapM,YAAjB,QAAyB,CAAC,EAiC/C,OA/BAsM,OAAOC,QAAQF,GAAiBtE,SAAQ,IAAyB,IAAD,MAAtBhI,EAAKyM,GAAiB,EAC9D,MAAMC,EAAM,UAAGD,EAAYC,cAAf,QAAyBD,EAAY5G,GAGjD,OAAU,OAAN6G,QAAM,IAANA,GAAAA,EAAQtH,SAAS,OAASlF,EAAQK,KAAK6E,SAASsH,GAC3CN,EAILK,EAAYzL,QAAQ2L,OAAO9K,OAAS,IACtC6H,QAAQC,IAAI,6BAAoB+C,GACzBN,aAGWQ,IAAhBR,EAAIM,GACNN,EAAIM,GAAU,CACZ7G,GAAI6G,EACJrG,KAAM,YACNvD,SAAQ,OAAE0H,QAAF,IAAEA,EAAAA,EAAiB,KAC3BkC,OAAQA,EACRG,KAAMJ,EAAYI,KAClBX,SAAU,CAACO,EAAYzL,SACvBoF,OAAQ,EACR0G,QAAS,CAAC9M,KAGZoM,EAAIM,GAAQR,SAASxH,KAAK+H,EAAYzL,SACtCoL,EAAIM,GAAQI,QAAQpI,KAAK1E,IAC1B,IAGIoM,CAAP,GAEF,CAAC,GAIGW,EAAyBR,OAAOS,OAAOd,GAAU/G,QACpD8H,IAAD,aAAOA,EAAEf,SAASrK,QAAU4I,GAAiBwC,EAAEP,UAAU,UAACO,EAAEP,cAAH,OAAC,EAAUtH,SAAS,MAA7E,IAII8H,GAAoBvG,EAAAA,EAAAA,aAAWzC,EAAAA,EAAAA,SAAQ6I,GAAyBrC,GAEtE,IAAIyC,EAAWjN,EAAQE,WAavB,OAXsC8M,EAAkB1L,KAAI,CAACyL,EAAG5K,KAC9D,MAAMwD,GAAKuH,EAAAA,EAAAA,IAAWD,GAGtB,OADAA,EAAWtH,EACJ,IACFoH,EACHpH,KACAO,OAAQlG,EAAQI,aAAe+B,EAAQ,EAHzC,GAOF,EIdSgL,CAAwB3C,EAAWqB,EAAiBd,EAAeT,EAAeC,IACxF,CACDQ,EACAT,EACAuB,EACArB,EACAD,EACAkB,EACAxM,EAAaM,YAIT6N,GAAiBC,EAAAA,EAAAA,GAA4B,kBAAmBxK,IAC/DyK,IAAgBzN,EAAAA,EAAAA,GAAiB,SAAUZ,EAAac,MACzDwN,GAAetN,EAAAA,EAAAA,UAAQ,IACtBmN,EAAe7N,WAAcN,EAAaM,UExEf,EAClCiL,EACAxK,EACAwN,EACA5C,KAEApB,QAAQuC,MAAM,yBAEd,MAAM0B,GAAezJ,EAAAA,EAAAA,SACnBqI,OAAOS,OAAOU,GAAUvI,QAAQyI,GAAaA,EAAS5E,SAAS7D,OAAOiF,SAASvI,QAAU,MAG3F,IAAIgM,EAAcF,EAAaxI,QAAQyI,IAAc1N,EAAQK,KAAK6E,SAASwI,EAAS/H,MAEhFgI,EAAYhM,OAAS6I,IACvBhB,QAAQC,IAAI,0DACZmB,EAAe,+BACf+C,EAAYnJ,SAAQR,EAAAA,EAAAA,SAAQyJ,KAG9B,IAAIR,EAAWjN,EAAQE,WAEvB,MAAMoM,EAAuC,CAAC,EAC9C,IAAK,IAAIjI,EAAI,EAAGA,EAAImG,EAAWnG,IAAK,CAClC,MAAMqJ,EAAWC,EAAYtJ,GACxBqJ,GACHlE,QAAQ9J,MAAM,uBAEhB,MAAMiG,GAAKuH,EAAAA,EAAAA,IAAWD,GACtBA,EAAWtH,EACX2G,EAAQ3G,GAAM,CACZA,KACAQ,KAAM,SACND,OAAQlG,EAAQI,aAAeiE,EAAI,EACnCwF,MAAO6D,EAAS/H,GAChBS,MAAOsH,EAAStH,MAChB0C,SAAU,CAAC,QAAQrC,EAAAA,EAAAA,YAAWiH,EAAS5E,SAAU,KAEpD,CAED,OAAOwD,CAAP,EFoCSsB,CAAqBpD,EAAW8C,EAAcF,EAAerN,KAAM6K,GAHjE,CAAC,GAIT,CAACwC,EAAgBE,EAAc9C,EAAWvL,EAAaM,YAGpDsO,EAAiBnL,EAAmB,EAAG4H,GAAe,GAAM,GAC5DwD,EAAiBpL,EAAmB,EAAG4H,GAAe,GAAM,IAC3DyD,IAAqBlO,EAAAA,EAAAA,GAAiB,aAAcZ,EAAac,MAClEiO,GAAoB/N,EAAAA,EAAAA,UAAQ,IAE7B4N,EAAe9N,MACf8N,EAAe9N,KAAK4B,QACpBmM,EAAe/N,MACf+N,EAAe/N,KAAK4B,QACpB1C,EAAaM,UH1FqB,EACvCiL,EACAxK,EACAiO,EACAC,KAEA1E,QAAQuC,MAAM,0BACd,IAAIkB,EAAWjN,EAAQE,WACvB,MAAMiO,EAAsB,GAEtB7B,EAA4C,CAAC,EACnD,IAAK,IAAIjI,EAAI,EAAGA,EAAImG,EAAWnG,IAAK,CAClC,MAAMsB,GAAKuH,EAAAA,EAAAA,IAAWD,GAChBmB,GAAYC,EAAAA,EAAAA,IAAa1I,GACzB9B,EAAOuK,EAAY,EAAI,EAC7BnB,EAAWtH,EACX2G,EAAQ3G,GAAM,CACZA,KACAQ,KAAM,aACND,OAAQlG,EAAQI,aAAeiE,EAAI,KAChCZ,EACD2K,EAAYF,EAAkBD,EAC9B,IAAI5B,OAAOS,OAAOR,GAAShL,KAAKyL,GAAMA,EAAE7I,aAAalE,EAAQK,MAC7D8N,EACAtK,GAGL,CACD,OAAOyI,CAAP,EGmESgC,CAA0B9D,EAAWuD,EAAmBF,EAAe9N,KAAM+N,EAAe/N,MAH1F,CAAC,GAIT,CAAC8N,EAAgBC,EAAgBC,EAAmBvD,EAAWvL,EAAaM,YAGzEgP,GAAqBlB,EAAAA,EAAAA,GAAa,0BAAkC/C,GAAiBzH,IACpF2L,IAAkB3O,EAAAA,EAAAA,GAAiB,UAAWZ,EAAac,MAC5D0O,GAAiBxO,EAAAA,EAAAA,UAAQ,KAC7B,IAAKsO,EAAmBhP,YAAcN,EAAaM,UACjD,MAAO,CAAC,EAGV,MAAMmP,EAAkB5C,EAAgBxK,KAAKqN,GAAaA,EAASnC,SAEnE,MGnHkC,EACpChC,EACAxK,EACA6L,EACA+C,EACAC,KAEArF,QAAQuC,MAAM,uBAEd,IAAIkB,EAAWjN,EAAQE,WAEvB,MAAMoM,EAAyC,CAAC,EAChD,IAAK,IAAIjI,EAAI,EAAGA,EAAImG,EAAWnG,IAAK,CAClC,MAAMsB,GAAKuH,EAAAA,EAAAA,IAAWD,GAChB6B,EAAoBzC,OAAO0C,KAAP,OAAYH,QAAZ,IAAYA,EAAAA,EAAiB,CAAC,GAAG3J,QACxDuH,IAAYX,EAAgBxL,KAAK6E,SAASsH,KAAYqC,EAAgB3J,SAASsH,KAE5EwC,GAAQvI,EAAAA,EAAAA,YAAWqI,EAAmB,IAAIxN,KAAKkL,GAAWoC,EAAcpC,KAC9ES,EAAWtH,EACX2G,EAAQ3G,GAAM,CACZA,KACAQ,KAAM,UACND,OAAQlG,EAAQI,aAAeiE,EAAI,EACnC2K,QAEH,CACD,OAAO1C,CAAP,EHyFS2C,CACLzE,EACAgE,EACA3C,EACA0C,EAAmBxO,KACnB2O,EALF,GAOC,CACDH,EACA1C,EACA2C,EACAhE,EACAvL,EAAaM,UACbuM,IAIIoD,GAAiB7B,EAAAA,EAAAA,GAA6B,mBAAoBxK,IACjEsM,IAAkBtP,EAAAA,EAAAA,GAAiB,UAAWZ,EAAac,MAC5DqP,GAAiBnP,EAAAA,EAAAA,UAAQ,IACxBiP,EAAe3P,WAAcN,EAAaM,UI/Hb,EACpCiL,EACAxK,EACAqP,KAEA7F,QAAQuC,MAAM,0BAEd,MAAM0B,GAAezJ,EAAAA,EAAAA,SACnBqI,OAAOS,OAAOuC,GAAQpK,QAAQyI,GAAaA,EAAS5E,SAAS7D,OAAOiF,SAASvI,OAAS,KAGxF,IAAIgM,EAAcF,EAAaxI,QAAQyI,IAAc1N,EAAQK,KAAK6E,SAASwI,EAAS/H,MAEhFgI,EAAYhM,OAAS6I,GACvBmD,EAAYnJ,SAAQR,EAAAA,EAAAA,SAAQyJ,IAG9B,IAAIR,EAAWjN,EAAQE,WAEvB,MAAMoM,EAAyC,CAAC,EAChD,IAAK,IAAIjI,EAAI,EAAGA,EAAImG,EAAWnG,IAAK,CAClC,MAAMqJ,EAAWC,EAAYtJ,GAC7B,IAAKqJ,EAAU,CACblE,QAAQ9J,MAAM,2BACd,KACD,CACD,MAAMiG,GAAKuH,EAAAA,EAAAA,IAAWD,GACtBA,EAAWtH,EACX2G,EAAQ3G,GAAM,CACZA,KACAQ,KAAM,UACND,OAAQlG,EAAQI,aAAeiE,EAAI,EACnCwF,MAAO6D,EAAS/H,GAChBS,MAAOsH,EAAStH,MAChB0C,SAAU4E,EAAS5E,SACnBjD,KAAM6H,EAAS7H,KAElB,CAED,OAAOyG,CAAP,EJ4FSgD,CAAuB9E,EAAW2E,EAAgBD,EAAenP,MAH/D,CAAC,GAIT,CAACmP,EAAgBC,EAAgB3E,EAAWvL,EAAaM,aAGrDgQ,IAA4B1P,EAAAA,EAAAA,GAAiB,sBAAuBZ,EAAac,MAClFyP,GAA2BvP,EAAAA,EAAAA,UAAQ,IAClChB,EAAaM,UF3I0B,EAACiL,EAAmBxK,KAClEwJ,QAAQuC,MAAM,mCAEd,IAAIkB,EAAWjN,EAAQE,WAGvB,MAAMoM,EAAmD,CAAC,EAC1D,IAAK,IAAIjI,EAAI,EAAGA,EAAImG,EAAWnG,IAAK,CAClC,MAAMsB,GAAKuH,EAAAA,EAAAA,IAAWD,GACtBA,EAAWtH,EAEX2G,EAAQ3G,GAAMD,EAA8BC,EAAI3F,EAAQI,aAAeiE,EAAI,EAC5E,CACD,OAAOiI,CAAP,EEkISmD,CAAiCjF,EAAW+E,GAH1C,CAAC,GAIT,CAAC/E,EAAWvL,EAAaM,UAAWgQ,KAGhCG,IAA4B7P,EAAAA,EAAAA,GAAiB,sBAAuBZ,EAAac,MAClF4P,GAActC,EAAAA,EAAAA,GAAgC,sBAAuBxK,GACrE+M,GAAavC,EAAAA,EAAAA,GAAgC,sBAAuBxK,GACpEgN,GAAkC5P,EAAAA,EAAAA,UAAQ,IACzChB,EAAaM,WAAcoQ,EAAYpQ,WAAcqQ,EAAWrQ,WAI9DuQ,EAAAA,EAAAA,GACLtF,EACAkF,EACAE,EAAW7P,KACX4P,EAAY5P,MAPL,CAAC,GAST,CAACyK,EAAWvL,EAAaM,UAAWmQ,EAA0BE,EAAYD,KAGtEI,IAAgClQ,EAAAA,EAAAA,GAAiB,yBAA0BZ,EAAac,MACzFiQ,GAAqB3C,EAAAA,EAAAA,GAA6B,mBAAoBxK,GACtEoN,GAAgC5C,EAAAA,EAAAA,GAAmC,yBAA0BxK,GAC7FqN,GAA+BjQ,EAAAA,EAAAA,UAAQ,IAExChB,EAAaM,WACbyQ,EAAmBzQ,WACnB0Q,EAA8B1Q,UD/Ke,EAClDiL,EACAxK,EACA8G,EACAC,EACA6D,KAEApB,QAAQuC,MAAM,sCAEd,IAAIkB,EAAWjN,EAAQE,WAEvB,MAAMiQ,GAAgBrD,EAAAA,EAAAA,QAAOhG,GAAY7B,QAAQmC,IAAUA,EAAKgJ,SAAuB,QAAZhJ,EAAKzB,KAC1E0K,GAAsBvD,EAAAA,EAAAA,QAAO/F,GAAiB9B,QAAQZ,GAAMA,EAAEiM,WAE9DC,EAAkE,CAAC,EACzE,IAAIC,EAAQ,EACZ,MAAOzB,EAAAA,EAAAA,MAAKwB,GAAoB5O,OAAS6I,GAAagG,EAAQ,KAAK,CACjE,MAAMvK,EAAQY,EAAkCsJ,EAAeE,GAI/D,IAHIpK,EAAMkE,OAAUoG,EAAmBtK,EAAM4D,QAAW7J,EAAQK,KAAK6E,SAASe,EAAM4D,SAClF0G,EAAmBtK,EAAM4D,OAAS5D,IAEhC8I,EAAAA,EAAAA,MAAKwB,GAAoB5O,QAAU6I,EACrC,MAEFgG,GAAS,CACV,CAEDhH,QAAQC,IAAR,kDAA6C+G,EAA7C,WAEIA,GAAS,KACX5F,EAAe,qEAGjB,MAAM0B,EAAuD,CAAC,EAY9D,OAXAD,OAAOS,OAAOyD,GAAoBzI,SAAQ,CAAC7B,EAAO9D,KAChD,MAAMwD,GAAKuH,EAAAA,EAAAA,IAAWD,GACtBA,EAAWtH,EAEX2G,EAAQ3G,GAAM,IACTM,EACHN,KACAO,OAAQlG,EAAQI,aAAe+B,EAAQ,EAHzC,IAOKmK,CAAP,ECuISmE,CACLjG,EACAuF,EACAC,EAAmBjQ,KACnBkQ,EAA8BlQ,KAC9B6K,GARO,CAAC,GAUT,CACDJ,EACAvL,EAAaM,UACbwQ,EACAC,EACAC,IAII3D,GAAUrM,EAAAA,EAAAA,UAAQ,IACS,IAA3B6L,EAAgBnK,OACX,IAET6H,QAAQuC,MAAM,uBACPD,EAAgBxK,KAAKqN,IACnB,CACLhJ,GAAIgJ,EAAShJ,GACb,YAAagJ,EACb,SAAUpB,EAAaoB,EAAShJ,IAChC+K,WAAY1C,EAAkBW,EAAShJ,IACvCgL,QAASlC,EAAeE,EAAShJ,IACjCiL,QAASxB,EAAeT,EAAShJ,IACjC,sBAAuB6J,EAAyBb,EAAShJ,IACzD,sBAAuBkK,EAAgClB,EAAShJ,IAChE,yBAA0BuK,EAA6BvB,EAAShJ,UAGnE,CACDmG,EACAyB,EACAS,EACAS,EACAW,EACAI,EACAK,EACAK,IAGF,MAAO,CACLtE,UACEH,GACAxM,EAAa2M,WACbiC,EAAejC,WACfkC,EAAelC,WACf2C,EAAmB3C,WACnBwB,EAAexB,WACfsD,EAAetD,WACf+D,EAAY/D,WACZgE,EAAWhE,WACXoE,EAAmBpE,WACnBqE,EAA8BrE,UAChCU,UACA7B,WAEH,C,wBK1OM,SAASoG,EAAT,GAAsE,IAAD,QAA7C,SAAEjO,EAAF,SAAYkO,GAAiC,EAC1E,MAAMxG,EAAgB1H,EAEhBmO,EAAwC,CAC5C,CACE3K,MAAO,KACP4K,UAAW,KACXlR,IAAK,MAEP,CACEsG,MAAO,YACP4K,UAAW,YACXlR,IAAK,YACLmR,OAAQ,IAAyC,IAAxC,OAAE/K,EAAF,OAAUsG,EAAV,KAAkBG,EAAlB,SAAwBX,GAAe,EAC9C,OACE,UAAC,IAAD,CAAOkF,UAAU,WAAjB,WACE,UAAC,IAAD,YACE,gCAAQhL,MACR,uCAAesG,MACf,sCAAcR,EAASrK,cAEzB,+BAEGgL,EACE5H,MAAM,IACNzD,KAAI,CAAC6P,EAAW9M,IAAeA,EAAI,GAAW,MAAN8M,EAAYA,EAAI,WACxDpH,KAAK,IALV,QAQA,SAAC,IAAD,CAAOqH,MAAI,EAAX,SACGpF,EAAS1K,KAAKc,IACb,SAACvB,EAAD,CAAmBC,QAASsB,EAAGpB,MAAO,GAAIC,OAAQ,GAAIF,UAAU,UAAhDqB,SAjBxB,GAwBJ,CACEgE,MAAO,SACP4K,UAAW,SACXlR,IAAK,SACLmR,OAAQ,IAAyC,IAAxC,OAAE/K,EAAF,MAAU2D,EAAV,MAAiBzD,EAAjB,SAAwB0C,GAAe,EAC9C,OACE,UAAC,IAAD,CAAOoI,UAAU,WAAjB,WACE,gCAAQhL,MACR,sCAAc2D,MACd,sCAAczD,EAAMxD,OACpB,UAAC,IAAD,CAAMyO,IAAK,EAAGD,MAAI,EAAlB,WACE,SAAC,KAAD,CAAMzL,GAAImD,EAAS,GAAI9H,MAAO,MAC9B,SAAC,KAAD,CAAM2E,GAAImD,EAAS,GAAI9H,MAAO,MAC9B,SAAC,KAAD,CAAM2E,GAAImD,EAAS,IAAK9H,MAAO,UARrC,GAcJ,CACEoF,MAAO,aACP4K,UAAW,aACXlR,IAAK,aACLmR,OAAQ,IAA0C,IAAzC,OAAE/K,EAAF,MAAUxC,EAAV,QAAiBe,EAAjB,QAA0BP,GAAc,EAC/C,OACE,UAAC,IAAD,CAAOgN,UAAU,WAAjB,WACE,gCAAQhL,MACR,wCAAgBzB,EAAQ9C,WACxB,wCAAgBuC,MAChB,SAAC,IAAD,CAAOgN,UAAU,WAAjB,SACGxN,EAAMpC,KAAI,CAACwD,EAAc3C,KACxB,0BACG2C,EACEC,MAAM,IACNzD,KAAI,CAAC6P,EAAW9M,IAAeA,IAAMlC,GAAe,MAANgP,EAAYA,EAAI,WAC9DpH,KAAK,KAJV,UAAc7D,EAAd,YAAwBpB,UAPhC,GAmBJ,CACEsB,MAAO,aACP4K,UAAW,UACXlR,IAAK,UACLmR,OAAQ,IAAqC,IAApC,OAAE/K,EAAF,MAAU2D,EAAV,KAAiBhE,EAAjB,MAAuBO,GAAY,EAC1C,OACE,UAAC,IAAD,CAAO8K,UAAU,WAAjB,WACE,gCAAQhL,MACR,sCAAc2D,MACd,qCAAahE,MACb,qCACS,IACNO,EACErB,MAAM,IACNzD,KAAI,CAAC6P,EAAW9M,IAAeA,EAAI,GAAW,MAAN8M,EAAYA,EAAI,WACxDpH,KAAK,SAVd,GAgBJ,CACE3D,MAAO,sBACP4K,UAAW,sBACXlR,IAAK,sBACLmR,OAAQ,IAA+B,IAA9B,OAAE/K,EAAF,MAAUE,EAAV,MAAiBG,GAAY,EACpC,OACE,UAAC,IAAD,CAAO2K,UAAU,WAAjB,WACE,gCAAQhL,MACR,sCAAcE,MACd,UAAC,IAAD,CAAMiL,IAAK,EAAGD,MAAI,EAAlB,WACE,SAACE,EAAA,EAAD,CAAe3L,GAAIY,EAAM,GAAIvF,MAAO,MACpC,SAACsQ,EAAA,EAAD,CAAe3L,GAAIY,EAAM,GAAIvF,MAAO,MACpC,SAACsQ,EAAA,EAAD,CAAe3L,GAAIY,EAAM,GAAIvF,MAAO,UAP1C,GAaJ,CACEoF,MAAO,sBACP4K,UAAW,sBACXlR,IAAK,sBACLmR,OAAQ,IAA2C,IAA1C,OAAE/K,EAAF,MAAUE,EAAV,kBAAiBmL,GAAwB,EAChD,OACE,UAAC,IAAD,CAAOL,UAAU,WAAjB,WACE,gCAAQhL,MACR,sCAAcE,MACd,SAAC,IAAD,CAAMiL,IAAK,EAAGD,MAAI,EAAlB,UACE,SAAC,KAAD,CAAMzL,GAAI4L,EAAkB5L,GAAI3E,MAAO,SAL7C,GAWJ,CACEoF,MAAO,kCACP4K,UAAW,yBACXlR,IAAK,yBACLmR,OAAShL,GACFA,GAKH,UAAC,IAAD,CAAOiL,UAAU,WAAjB,WACE,gCAAQjL,EAAMC,WACd,4BAAOD,EAAM6C,SAASnH,OAAtB,aACA,UAAC,IAAD,YACE,SAAC,IAAD,CAAOuP,UAAU,WAAjB,SACGjL,EAAMa,WAAWxF,KAAKqI,IACrB,SAAC,KAAD,CAA8BhE,GAAE,eAAUgE,EAAItC,UAAYrG,MAAO,IAAjD2I,EAAItC,eAGxB,SAAC,IAAD,CAAO6J,UAAU,WAAjB,SACGjL,EAAM6C,SAASxH,KAAK8H,IACnB,SAAC,KAAD,CAAmBzD,GAAIyD,EAAQpI,MAAO,IAA3BoI,cAfZ,SAAC,IAAD,CAAOzJ,QAAQ,WAAWwG,KAAK,WAuB5C,CACEC,MAAO,UACP4K,UAAW,UACXlR,IAAK,UACLmR,OAAQ,IAAwB,IAAvB,OAAE/K,EAAF,MAAU8I,GAAY,EAC7B,OACE,UAAC,IAAD,CAAOkC,UAAU,WAAWhP,MAAO,CAAEsP,UAAW,IAAKC,UAAW,QAAhE,WACE,gCAAQvL,KACP8I,EAAM1N,KAAI,CAACoQ,EAAoBvP,KAC9B,0BAAmCuP,EAAK/E,MAAxC,UAAc+E,EAAK/L,GAAnB,YAAyBxD,QAJ/B,KAYA,KAAEwP,EAAF,UAAQC,GClLT,SAA2BtH,GAChC,MAAM,aAAEvL,GAAiBC,EAAAA,EAAAA,SACnB6S,GAAcC,EAAAA,EAAAA,MAEdjT,EAAS2B,EAAAA,EAAAA,MAAA,OAAsB8J,QAAtB,IAAsBA,EAAAA,EAAiB,OAE/CyH,EAASC,IAAcrH,EAAAA,EAAAA,WAAS,GAEjC1L,GAAeL,EAAAA,EAAAA,GAAqBC,EAAQ,CAAEgE,QAASqH,QAAQrL,KAE/DoT,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,WAAYhP,UAAwB,IAAD,cACjC,MAAMiP,EAAQrS,EAAKuB,KAAK2E,IACtB,MAAMoM,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAD,UAAe1T,EAAf,YAAyBoH,EAAMN,KACjD,OAAO6M,EAAAA,EAAAA,IAAOH,EAAQpM,EAAtB,IAGIwM,GAASH,EAAAA,EAAAA,IAAIC,EAAAA,GAAD,UAAe1T,EAAf,aACZ6T,EAAkBzT,EAAac,KAErC,IAAK2S,EACH,MAAM,IAAIC,MAAM,uBAGlB,MAAMC,EAA2B,IAC5BF,EACH,YAAa,CACXxS,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAG,aAAauE,OACjD7F,KAAMC,KAAKuS,WACTC,EAAAA,EAAAA,IAAiB,IACZxS,KAAKC,MAAMmS,EAAgB,aAAarS,SACxCN,EAAKuB,KAAKyL,GAAMA,EAAE,aAAaP,aAIxC,SAAU,CACRtM,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAG,UAAUuE,OAC9C7F,KAAMC,KAAKuS,WACTC,EAAAA,EAAAA,IAAiB,IACZxS,KAAKC,MAAL,UAAWmS,EAAgB,UAAUrS,YAArC,QAA6C,SAC7CN,EAAKuB,KAAKyL,GAAMA,EAAE,UAAUlD,YAIrC6G,WAAY,CACVxQ,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAnB,WAAoCuE,OAClD7F,KAAMC,KAAKuS,WACTC,EAAAA,EAAAA,IAAiB,IACZxS,KAAKC,MAAMmS,EAAgBhC,WAAWrQ,SACtCN,EAAKuB,KAAKyL,GAAMA,EAAC,WAAe7I,cAIzCyM,QAAS,CACPzQ,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAnB,QAAiCuE,OAC/C7F,KAAM,MAERuQ,QAAS,CACP1Q,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAnB,QAAiCuE,OAC/C7F,KAAMC,KAAKuS,WACTC,EAAAA,EAAAA,IAAiB,IACZxS,KAAKC,MAAL,iBAAWmS,QAAX,IAAWA,GAAX,UAAWA,EAAe,eAA1B,aAAW,EAA8BrS,YAAzC,QAAiD,SACjDN,EAAKuB,KAAKyL,GAAMA,EAAC,QAAYlD,YAItC,sBAAuB,CACrB3J,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAG,uBAAuBuE,OAC3D7F,KAAM,MAER,sBAAuB,CACrBH,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAG,uBAAuBuE,OAC3D7F,KAAMC,KAAKuS,WACTC,EAAAA,EAAAA,IAAiB,IACZxS,KAAKC,MAAL,iBAAWmS,QAAX,IAAWA,GAAX,UAAWA,EAAkB,8BAA7B,aAAW,EAA0CrS,YAArD,QAA6D,SAC7DN,EAAKuB,KAAKyL,GAAMA,EAAE,uBAAuBlD,WACzC9J,EAAKuB,KAAKyL,GAAMA,EAAE,uBAAuBwE,kBAAkB5L,SAIpE,yBAA0B,CACxBzF,WAAYH,EAAKA,EAAK4B,OAAS,GAAGgE,GAClCvF,aAAcL,EAAKA,EAAK4B,OAAS,GAAG,0BAA0BuE,OAC9D7F,KAAMC,KAAKuS,WACTC,EAAAA,EAAAA,IAAiB,IACZxS,KAAKC,MAAL,iBAAWmS,QAAX,IAAWA,GAAX,UAAWA,EAAkB,iCAA7B,aAAW,EAA6CrS,YAAxD,QAAgE,SAChEN,EAAKuB,KAAKyL,GAAMA,EAAE,0BAA0BlD,aAOvD,OAFA2I,EAAAA,EAAAA,IAAOC,EAAQG,GAERG,QAAQC,IAAIZ,EAAnB,EAGF/G,UAAW,KACTtM,EAAauM,KAAK,CAChB3L,QAAS,aACTC,UAAW,eAEbiS,EAAYoB,kBAAkB,CAC5B9T,SAAU,CAACN,EAAQ,aAErBmT,GAAW,EAAX,EAGFkB,QAAS,KACPnU,EAAaW,MAAM,CACjBC,QAAS,oBACTC,UAAW,cAFb,IAOJ,MAAO,CACLmS,UACAC,aACAL,KAAMM,EAASkB,YACfvB,UAAWK,EAASL,UAEvB,CDkD6BwB,CAAiB,OAAC9I,QAAD,IAACA,EAAAA,EAAiB,MAE/D,OACE,2BACGwG,EAASlF,YAAa,wCACtBkF,EAASrG,SAASnJ,KAAK+R,IACtB,SAAC,IAAD,CAAqB1T,QAAS0T,EAASlN,KAAK,UAAUmN,UAAQ,GAAlDD,MAEd,UAAC,IAAD,CAAME,QAAQ,gBAAgBC,MAAM,SAApC,WACE,oCAAY1C,EAASxE,QAAQ3K,WAC7B,SAAC,KAAD,CACE8R,QAAS,IAAM9B,EAAKb,EAASxE,SAC7BoH,QAAS9B,EACT+B,SAA8C,KAApC,UAAC7C,EAASxE,eAAV,QAAqB,IAAI3K,OACnCwE,KAAK,UACLtC,KAAK,QALP,sBAUF,SAAC,IAAD,CAAOkN,QAASA,EAAS6C,WAAU,UAAE9C,EAASxE,eAAX,QAAsB,OAG9D,C,wBE9MM,SAASuH,EAAT,GAOe,IAPM,SAC1BjR,EAD0B,YAE1BkR,EAF0B,cAG1BvJ,EAH0B,iBAI1BwJ,EAJ0B,UAK1BvJ,EAL0B,aAM1BwJ,GACmB,EACnB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,MAAM,WACNC,MAAOtR,EACPuR,SAAUL,EACVhV,QAAS,CAACsV,EAAAA,IACVC,YAAY,uBAEd,SAAC,KAAD,CACEJ,MAAM,mBACNC,MAAO3J,EACP4J,SAAUJ,EACVjV,QAAS,CAAC,EAAG,EAAG,GAChBuV,YAAY,qBAEd,SAAC,KAAD,CACEJ,MAAM,aACNC,MAAO1J,EACP2J,SAAUH,EACVlV,QAAS,CAAC,EAAG,EAAG,GAAI,GAAI,IACxBuV,YAAY,sBAInB,C,wBCCD,QArCA,WACE,MAAOzR,EAAUkR,IAAenJ,EAAAA,EAAAA,UAAS,KAClCJ,EAAewJ,IAAoBpJ,EAAAA,EAAAA,UAAS,IAC5CH,EAAWwJ,IAAgBrJ,EAAAA,EAAAA,UAAS,GAErCmG,EAAWzG,EAAkBH,QAAQtH,GAAWA,EAAsB2H,EAAeC,GAE3F,OACE,SAAC,KAAD,CAAYpE,MAAM,cAAlB,UACE,UAAC,IAAD,CAAQkO,UAAQ,EAAhB,WACE,UAACC,EAAA,EAAD,YACE,SAAC,KAAD,CAAe3I,UAAWkF,EAASlF,UAAWlM,MAAO,KAAM6D,iBAAkBuN,EAASlF,aACtF,SAACiI,EAAD,CACEjR,SAAUA,EACVkR,YAAaA,EACbvJ,cAAeA,EACfwJ,iBAAkBA,EAClBvJ,UAAWA,EACXwJ,aAAcA,QAIlB,SAAC,YAAD,CAAgBjT,UAAU,UAA1B,UACE,UAACyT,EAAA,EAAD,CACE5I,UAAWkF,EAASlF,UACpBlM,MAAO,KACP6D,iBAAkBuN,EAASlF,UAH7B,WAKE,SAAC,UAAD,CAAkB6I,MAAO,EAAzB,8BACA,SAAC5D,EAAD,CAAgBjO,SAAUA,EAAUkO,SAAUA,aAMzD,C","sources":["components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/CanvasSVG.tsx","hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx"],"sourcesContent":["import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { useLoadDrawings } from 'components/Daily/hooks';\nimport { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport { getNextDay, checkWeekend } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[]\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { ItemAtributesValues, ItemAttribute } from 'types';\nimport { DailyComunicacaoAlienigenaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAtributesValues>,\n  updateWarnings: (warning: string) => void\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes).filter((attr) => !attr.limited && attr.id !== 'sol');\n  const allAttributesValues = values(attributeValues).filter((i) => i.complete);\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId] && !history.used.includes(entry.setId)) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  if (tries >= 100) {\n    updateWarnings('Not enough valid comunicacao alienigena games (over 100 attempts)');\n  }\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAtributesValues[]\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB)!,\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC)!,\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC)!,\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC)!,\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  // console.log({\n  //   attributeA,\n  //   attributeB,\n  //   attributeC,\n  //   attributeAB,\n  //   attributeAC,\n  //   attributeBC,\n  //   attributeABC,\n  // });\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  DailyDiscSet,\n  ArteRuimCard,\n  DailyMovieSet,\n  DailyDiagramItem,\n  DailyDiagramRule,\n  ItemAttribute,\n  ItemAtributesValues,\n} from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\nimport { buildDailyComunicacaoAlienigenaGames } from '../utils/games/daily-comunicacao-alienigena';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  warnings: string[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n  const [warnings, setWarnings] = useState<string[]>([]);\n\n  const updateWarnings = (newWarning: string) => {\n    setWarnings((prev) => [...prev, newWarning]);\n  };\n\n  useEffect(() => {\n    setWarnings([]);\n  }, [batchSize, queryLanguage]);\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data, updateWarnings);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory('teoria-de-conjuntos', historyQuery.data);\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // SET 9: Comunicação Alienígena\n  const [comunicacaoAlienigenaHistory] = useParsedHistory('comunicacao-alienigena', historyQuery.data);\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values', enabled);\n  const comunicacaoAlienigenaEntries = useMemo(() => {\n    if (\n      !historyQuery.isSuccess ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data,\n      updateWarnings\n    );\n  }, [\n    batchSize,\n    historyQuery.isSuccess,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n  ]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigenaEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n    comunicacaoAlienigenaEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading,\n    entries,\n    warnings,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiscSet } from 'types';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>,\n  updateWarnings: (warning: string) => void\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    updateWarnings('Not enough aqui-o sets left');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { ArteRuimCard } from 'types';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[]\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId)\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyMovieSet } from 'types';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { Alert, Button, Flex, Space, Table, TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { ArteRuimCard } from 'types';\n\nimport { UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport { DailyComunicacaoAlienigenaEntry, DailyEntry } from './utils/types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry: DailyComunicacaoAlienigenaEntry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <span>{entry.itemsIds.length} items</span>\n            <Space>\n              <Space direction=\"vertical\">\n                {entry.attributes.map((req) => (\n                  <AlienSign key={req.spriteId} id={`sign-${req.spriteId}`} width={50} />\n                ))}\n              </Space>\n              <Space direction=\"vertical\">\n                {entry.itemsIds.map((itemId) => (\n                  <Item key={itemId} id={itemId} width={50} />\n                ))}\n              </Space>\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      {dataLoad.warnings.map((warning) => (\n        <Alert key={warning} message={warning} type=\"warning\" showIcon />\n      ))}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n        'teoria-de-conjuntos': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['teoria-de-conjuntos'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['teoria-de-conjuntos']?.used ?? '[]'),\n              ...data.map((e) => e['teoria-de-conjuntos'].setId),\n              ...data.map((e) => e['teoria-de-conjuntos'].intersectingThing.id),\n            ])\n          ),\n        },\n        'comunicacao-alienigena': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['comunicacao-alienigena'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['comunicacao-alienigena']?.used ?? '[]'),\n              ...data.map((e) => e['comunicacao-alienigena'].setId),\n            ])\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n"],"names":["useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","useParsedHistory","key","data","history","useMemo","latestDate","getYesterday","latestNumber","used","JSON","parse","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","CanvasSVG","drawing","className","width","height","strokeWidth","viewBox","konvaLines","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","useLoadWordLibrary","wordLength","language","enabled","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","hasResponseData","isEmpty","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","fixedKeyword","shuffledWords","shuffle","difference","keyword","pop","selectedWords","i","newWord","getNewWord","push","letters","shuffleLetters","usedLetters","uniq","flatMap","word","split","shortList","filter","includes","sortBy","intersection","preservedIndexes","otherLetters","_","shuffledLetters","shift","generateControleDeEstoqueGame","id","num","year","month","day","Number","entry","number","type","title","Date","getDay","goods","orders","sampleSize","Array","GOODS_SIZE","outOfStockGood","generateComunicacaoAlienigenaGame","attributes","attributeValues","shuffledAttributeValues","spriteIDs","makeArray","selectedAttributes","attr","spriteId","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","forEach","item","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","name","description","itemsIds","Math","max","usedItemsIds","complexRequests","spritesIds","itemId","sample","simpleRequests","requests","console","log","requestItemsIds","req","result","setId","sort","join","solution","random","Boolean","valid","every","useLoadDailySetup","queryLanguage","drawingsCount","batchSize","warnings","setWarnings","useState","updateWarnings","newWarning","prev","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","arteRuimEntries","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","dataDrawing","cardId","trim","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","getNextDay","buildDailyArteRuimGames","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","notUsedSets","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isWeekend","checkWeekend","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","comunicacaoAlienigenaEntries","allAttributes","limited","allAttributesValues","complete","preliminaryEntries","tries","buildDailyComunicacaoAlienigenaGames","palavreado","artista","filmaco","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","wrap","gap","WarehouseGood","intersectingThing","maxHeight","overflowY","card","save","isPending","queryClient","useQueryClient","isDirty","setIsDirty","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","mutateAsync","useSaveDailySetup","warning","showIcon","justify","align","onClick","loading","disabled","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","label","value","onChange","DEFAULT_LANGUAGE","placeholder","hasSider","PageSider","DataLoadingWrapper","level"],"sourceRoot":""}