{"version":3,"file":"static/js/ArteRuimGroups.cc80fc67.chunk.js","mappings":"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","sources":["pages/ArteRuim/ArteRuimGroups.tsx"],"sourcesContent":["import { Input, Layout, List, Typography } from 'antd';\nimport { ResponseState } from 'components/Common';\nimport { SectionTitle } from 'components/Common/SectionTitle';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useEffect, useState } from 'react';\nimport type { ArteRuimCard, ArteRuimGroup } from 'types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { DataLoadingWrapper } from '../../components/DataLoadingWrapper';\nimport { ResourceSelectionFilters } from '../../components/Resource/ResourceSelectionFilters';\nimport { useResourceState } from '../../hooks/useResourceState';\nimport { RESOURCE_NAMES } from '../../utils/constants';\n\nconst { Text } = Typography;\n\nconst parseData = (cards: Record<CardId, ArteRuimCard>, groups: Record<string, ArteRuimGroup>) => {\n  const themes = Object.values(groups)\n    .map((entry) => entry.theme)\n    .sort();\n\n  const used: StringDictionary = {};\n  const unused: StringDictionary = {};\n  const duplicated: StringDictionary = {};\n  // Get used and unused\n  Object.values(groups).forEach((group) => {\n    Object.keys(group.cards).forEach((entryId) => {\n      if (used[entryId]) {\n        duplicated[entryId] = cards[entryId].text;\n      } else {\n        used[entryId] = cards[entryId].text;\n      }\n    });\n  });\n\n  Object.values(cards).forEach((card) => {\n    if (used[card.id] === undefined) {\n      unused[card.id] = card.text;\n    }\n  });\n\n  return { themes, used, unused, duplicated };\n};\n\nfunction ArteRuimGroups() {\n  // Set default query params\n  useQueryParams({ resourceName: RESOURCE_NAMES.ARTE_RUIM_CARDS, language: 'pt' });\n  const { getUrl } = useBaseUrl('resources');\n\n  const [used, setUsed] = useState({});\n  const [unused, setUnused] = useState({});\n  const [duplicated, setDuplicated] = useState({});\n  const [themes, setThemes] = useState<string[]>([]);\n\n  const {\n    language,\n    isLoading,\n    error,\n    hasResponseData,\n    response: cards,\n  } = useResourceState([RESOURCE_NAMES.ARTE_RUIM_CARDS]);\n\n  const {\n    data: groups,\n    isLoading: loadingLevel4,\n    error: errorLevel4,\n  } = useQuery<any, ResponseError>({\n    queryKey: [RESOURCE_NAMES.ARTE_RUIM_GROUPS, language],\n    queryFn: async () => {\n      const response = await fetch(getUrl(`${RESOURCE_NAMES.ARTE_RUIM_GROUPS}-${language}.json`));\n      const result = await response.json();\n\n      return result;\n    },\n    enabled: Boolean(language),\n  });\n\n  useEffect(() => {\n    if (!isLoading && !loadingLevel4 && cards && groups) {\n      const result = parseData(cards, groups);\n      setThemes(result.themes);\n      setUsed(result.used);\n      setUnused(result.unused);\n      setDuplicated(result.duplicated);\n    }\n  }, [cards, groups, isLoading, loadingLevel4]);\n\n  return (\n    <PageLayout title=\"Arte Ruim Groups\" subtitle={language ? `${language}` : ''}>\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState\n            hasResponseData={hasResponseData && Boolean(groups)}\n            isLoading={isLoading || loadingLevel4}\n            error={error || errorLevel4}\n          />\n          <ResourceSelectionFilters resourceNames={[RESOURCE_NAMES.ARTE_RUIM_CARDS]} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={isLoading || loadingLevel4}\n            error={error || errorLevel4}\n            hasResponseData={hasResponseData && Boolean(groups)}\n          >\n            <div className=\"parser-container\">\n              <div className=\"parser-main\">\n                <SectionTitle>Used in Groups ({Object.keys(used).length})</SectionTitle>\n                <Input.TextArea\n                  name=\"output\"\n                  id=\"\"\n                  cols={15}\n                  rows={10}\n                  readOnly\n                  value={JSON.stringify(used, null, 4)}\n                />\n                <SectionTitle>Unused in Groups ({Object.keys(unused).length})</SectionTitle>\n                <Input.TextArea\n                  name=\"output\"\n                  id=\"\"\n                  cols={15}\n                  rows={10}\n                  readOnly\n                  value={JSON.stringify(unused, null, 4)}\n                />\n                <SectionTitle>In More than One Group ({Object.keys(duplicated).length})</SectionTitle>\n                <Input.TextArea\n                  name=\"duplicates\"\n                  id=\"\"\n                  cols={15}\n                  rows={5}\n                  readOnly\n                  value={JSON.stringify(duplicated, null, 4)}\n                />\n              </div>\n\n              <aside className=\"parser-controls\">\n                <List\n                  header={<SectionTitle>Themes</SectionTitle>}\n                  bordered\n                  className=\"theme-list\"\n                  dataSource={themes}\n                  size=\"small\"\n                  renderItem={(item) => (\n                    <List.Item>\n                      <Text mark></Text> {item}\n                    </List.Item>\n                  )}\n                />\n              </aside>\n            </div>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ArteRuimGroups;\n"],"names":["Text","Typography","useQueryParams","resourceName","RESOURCE_NAMES","language","getUrl","useBaseUrl","used","setUsed","useState","unused","setUnused","duplicated","setDuplicated","themes","setThemes","isLoading","error","hasResponseData","response","cards","useResourceState","data","groups","loadingLevel4","errorLevel4","useQuery","queryKey","queryFn","async","fetch","json","enabled","Boolean","useEffect","result","Object","values","map","entry","theme","sort","forEach","group","keys","entryId","text","card","undefined","id","parseData","title","subtitle","hasSider","resourceNames","className","length","name","cols","rows","readOnly","value","JSON","stringify","header","bordered","dataSource","size","renderItem","item","mark"],"sourceRoot":""}