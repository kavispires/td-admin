{"version":3,"file":"static/js/DailySetup.05f2568c.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Daily/utils/constants.ts","components/Daily/utils/utils.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","hooks/useGetFirebaseDoc.ts","components/Daily/CanvasSVG.tsx","components/Daily/DataPopulation.tsx","components/Daily/SideFilters.tsx","pages/DailySetup.tsx"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getToday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getToday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getToday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { sampleSize, shuffle } from 'lodash';\nimport { useMemo } from 'react';\nimport { AquiOSet, ArteRuimCard } from 'types';\n\nimport { QueryKey, useQuery } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport {\n  DailyAquiOEntry,\n  DailyArtistaEntry,\n  DailyEntry,\n  DailyHistory,\n  DailyPalavreadoEntry,\n  DataDrawing,\n} from '../utils/types';\nimport { getNextDay, getWordsWithUniqueLetters } from '../utils/utils';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  // arteRuimHistory: ParsedDailyHistoryEntry;\n  // round5sample: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  const { notification } = App.useApp();\n\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    enabled,\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    console.count('Creating Arte Ruim...');\n    const drawings = (drawingsQuery ?? []).reduce(\n      (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n        const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n        Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n          const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n          if (dataDrawing.drawing.trim().length < 10) {\n            console.warn('Empty drawing', cardId);\n            return acc;\n          }\n\n          if (acc[cardId] === undefined) {\n            acc[cardId] = {\n              id: cardId,\n              type: 'arte-ruim',\n              language: queryLanguage ?? 'pt',\n              cardId: cardId,\n              text: dataDrawing.text,\n              drawings: [dataDrawing.drawing],\n              number: 0,\n              dataIds: [key],\n            };\n          } else {\n            acc[cardId].drawings.push(dataDrawing.drawing);\n            acc[cardId].dataIds.push(key);\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const atLeastTwoDrawingsList = Object.values(drawings).filter(\n      (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n    );\n\n    const shortList = Object.values(atLeastTwoDrawingsList).filter(\n      (e) => !arteRuimHistory.used.includes(e.cardId)\n    );\n\n    const shuffledShortList = sampleSize(shuffle(shortList), batchSize);\n\n    let lastDate = arteRuimHistory.latestDate;\n\n    return shuffledShortList.map((e, index) => {\n      const id = getNextDay(lastDate);\n\n      lastDate = id;\n      return {\n        ...e,\n        id,\n        number: arteRuimHistory.latestNumber + index + 1,\n      };\n    });\n  }, [drawingsQuery, queryLanguage, arteRuimHistory, batchSize, drawingsCount]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<AquiOSet>('aqui-o-sets');\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    console.count('Creating Aqui Ó...');\n    // Filter complete sets only\n    const completeSets = shuffle(\n      Object.values(aquiOSetsQuery.data).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n    );\n    // Filter not-used sets only\n    let notUsedSets = completeSets.filter((setEntry) => !aquiOHistory.used.includes(setEntry.id));\n\n    if (notUsedSets.length < batchSize) {\n      notUsedSets.push(...shuffle(completeSets));\n    }\n\n    let lastDate = aquiOHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyAquiOEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const setEntry = notUsedSets[i];\n      if (!setEntry) {\n        break;\n      }\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: aquiOHistory.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n\n    return entries;\n  }, [aquiOSetsQuery, aquiOHistory, batchSize]);\n\n  // STEP 4: Palavreado\n  const wordsQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    console.count('Creating Palavreado...');\n    let lastDate = palavreadoHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyPalavreadoEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const words = getWordsWithUniqueLetters(wordsQuery.data);\n      const letters = shuffle(words.join('').split(''));\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'palavreado',\n        number: palavreadoHistory.latestNumber + i + 1,\n        words,\n        letters,\n      };\n    }\n    return entries;\n  }, [wordsQuery, palavreadoHistory, batchSize]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    console.count('Creating Artista...');\n    let lastDate = artistaHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyArtistaEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      const availableCardsIds = Object.keys(arteRuimCardsQuery.data ?? {}).filter(\n        (cardId) => !arteRuimHistory.used.includes(cardId)\n      );\n      const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCardsQuery.data[cardId]);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'artista',\n        number: artistaHistory.latestNumber + i + 1,\n        cards,\n      };\n    }\n    return entries;\n  }, [arteRuimCardsQuery, arteRuimHistory, artistaHistory, batchSize]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n      };\n    });\n  }, [arteRuimEntries, aquiOEntries, palavreadoEntries, artistaEntries]);\n\n  return {\n    isLoading: areDrawingsLoading || historyQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled: enabled,\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Suffix Counts loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading suffix counts',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { QueryKey, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry, DailyHistory, DataSuffixCounts } from '../utils/types';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>(source, 'history'),\n    enabled: Boolean(source),\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  const mutation = useMutation<any, Error, DailyEntry[], QueryKey>(\n    async (data) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data as DailyHistory;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: '[]',\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n    {\n      onSuccess: () => {\n        notification.info({\n          message: 'Data saved',\n          placement: 'bottomLeft',\n        });\n        queryClient.invalidateQueries([source, 'history']);\n        setIsDirty(false);\n      },\n      onError: () => {\n        notification.error({\n          message: 'Error saving data',\n          placement: 'bottomLeft',\n        });\n      },\n    }\n  );\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isLoading: mutation.isLoading,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, useQuery } from '@tanstack/react-query';\n\nimport { DailyHistory, DataSuffixCounts } from '../utils/types';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>(source, 'history'),\n    enabled,\n    onSuccess: (data) => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n\n  // useQuery<any, Error, string[], QueryKey>({\n  //   queryKey: [source, 'allDocs'],\n  //   queryFn: async () => {\n  //     const querySnapshot = await getDocs(collection(firestore, source));\n  //     const ids: string[] = [];\n  //     querySnapshot.forEach((doc) => {\n  //       const snapshot = doc.data() as DailyEntry;\n  //       console.log('Getting', snapshot.id);\n  //       if (snapshot.dataIds) {\n  //         ids.push(...snapshot.dataIds.map((e) => e.split('::')[0]));\n  //       }\n  //     });\n  //     return removeDuplicates(ids);\n  //   },\n  //   enabled: Boolean(historyQuery.data?.used),\n  //   onSuccess: (data) => {\n  //     const history = historyQuery.data as DailyHistory;\n\n  //     mutation.mutateAsync({\n  //       ...history,\n  //       used: data,\n  //     });\n  //   },\n  // });\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: UseQueryOptions<any, Error, TData, QueryKey>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","// Ant Design Resources\nimport { TableColumnsType, Table, Button, Flex, Space } from 'antd';\n// Components\n\nimport { UseLoadDailySetup, useSaveDailySetup } from './hooks';\n\nimport { DailyEntry } from './utils/types';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { ArteRuimCard } from 'types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isLoading: isMutating } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isMutating}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { LANGUAGES } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={LANGUAGES}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[5, 15, 30, 45]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(2);\n  const [batchSize, setBatchSize] = useState(45);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","getToday","moment","format","getNextDay","dateString","add","getWordsWithUniqueLetters","words","selectedWords","usedLetters","tries","length","word","sample","splitWord","split","every","letter","push","forEach","console","count","includes","useParsedHistory","key","data","history","useMemo","latestDate","latestNumber","used","JSON","parse","useLoadDailySetup","enabled","queryLanguage","drawingsCount","batchSize","notification","App","source","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","onSuccess","info","message","placement","onError","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Array","fill","_","index","Boolean","useQueries","useLoadDrawings","areDrawingsLoading","some","q","arteRuimHistory","arteRuimEntries","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","dataDrawing","cardId","id","drawing","trim","warn","undefined","type","language","text","number","dataIds","atLeastTwoDrawingsList","values","filter","e","shortList","shuffledShortList","sampleSize","shuffle","lastDate","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","completeSets","setEntry","itemsIds","notUsedSets","i","setId","title","wordsQuery","wordLength","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","isEmpty","useLoadWordLibrary","palavreadoHistory","palavreadoEntries","letters","join","arteRuimCardsQuery","artistaHistory","artistaEntries","availableCardsIds","keys","cards","arteRuim","palavreado","artista","useSaveDailySetup","queryClient","useQueryClient","setIsDirty","useState","mutation","useMutation","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","save","mutateAsync","useTempDaily","mutationFn","path","docId","log","getCurrentDateTime","getDoc","useGetFirebaseDoc","CanvasSVG","height","strokeWidth","viewBox","konvaLines","paths","lineArr","x","y","strokeWidthBySize","small","medium","large","xmlns","overflow","d","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","card","isMutating","justify","align","onClick","loading","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","LANGUAGES","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}