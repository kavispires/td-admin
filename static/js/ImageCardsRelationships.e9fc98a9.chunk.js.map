{"version":3,"file":"static/js/ImageCardsRelationships.e9fc98a9.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","components/Images/ImageCards/RelationshipCountTag.tsx","components/Images/ImageCards/RelationshipsContent.tsx","components/Images/ImageCards/RelationshipsFilters.tsx","pages/Images/ImageCardsRelationships.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","import { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { isEmpty } from 'lodash';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { Card, FloatButton, Image, Tag } from 'antd';\nimport {\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { ImageCard } from '../ImageCard';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { TransparentButton } from 'components/Common';\nimport { useMemo, useRef } from 'react';\nimport { useMeasure } from 'react-use';\n\nexport function RelationshipsContent() {\n  const {\n    query: { isDirty, isSaving, save, stats, ...query },\n    randomGroups: { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles },\n    showIds,\n    cardSize,\n  } = useImagesRelationshipsContext();\n\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const [cardQuantity, cardWidth] = useMemo(() => {\n    const cq = Math.floor(containerWidth / cardSize) + 1;\n    const cw = Math.floor(containerWidth / cq);\n    return [cq, cw];\n  }, [cardSize, containerWidth]);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={query.isLoading}\n      error={query.error}\n      hasResponseData={!isEmpty(query.data)}\n    >\n      <div ref={ref} className=\"my-6\">\n        <Card\n          title=\"Card Relationship Matching\"\n          extra={\n            <span>\n              <FileImageOutlined /> {cycles}\n            </span>\n          }\n          className=\"image-card-categorizer-card\"\n          ref={cardRef}\n        >\n          <Image.PreviewGroup>\n            <div\n              className=\"image-cards-group\"\n              style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n            >\n              {cardIds.map((cardId: string, index: number) => {\n                const isSelected = selection.includes(cardId);\n                const card = cards[index];\n\n                return (\n                  <div className=\"image-card-card__image\" key={cardId}>\n                    <TransparentButton\n                      onClick={() => onSelect(cardId)}\n                      active={isSelected}\n                      className=\"image-cards-group__button\"\n                      activeClass=\"image-cards-group__button--active\"\n                    >\n                      <ImageCard id={cardId} width={cardWidth - 24} preview={false} />\n                      <div>\n                        {showIds && <Tag>{cardId}</Tag>}\n                        {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                        <RelationshipCountTag card={card} />\n                      </div>\n                    </TransparentButton>\n                  </div>\n                );\n              })}\n            </div>\n          </Image.PreviewGroup>\n          <Actions\n            isSaving={isSaving}\n            isDirty={isDirty}\n            selection={selection}\n            relate={relate}\n            deselectAll={deselectAll}\n            onNextSet={onNextSet}\n          />\n        </Card>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    // </FloatButton.Group>\n    (<>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>)\n  );\n};\n","import { Flex } from 'antd';\nimport { FilterSelect, FilterSwitch, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\nimport { CARD_SIZE_OPTIONS, SAMPLE_SIZE_OPTIONS, TAGS_SELECTOR_OPTIONS } from 'utils/constants';\n\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipsStats } from './RelationshipsStats';\n\nexport function RelationshipsFilters() {\n  const {\n    query: { isDirty, isSaving, save, data, isLoading, isError },\n    randomGroups: { filters },\n    showIds,\n    setShowIds,\n    tagThreshold,\n    setTagThreshold,\n    sampleSize,\n    setSampleSize,\n    cardSize,\n    setCardSize,\n  } = useImagesRelationshipsContext();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Flex vertical gap={6}>\n          <SaveButton\n            isDirty={isDirty}\n            dirt={JSON.stringify(data)}\n            onSave={() => save({})}\n            isSaving={isSaving}\n          />\n\n          <DownloadButton\n            data={data}\n            fileName=\"imageCardsRelationships.json\"\n            loading={isSaving}\n            disabled={isEmpty(data)}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <FilterSwitch\n          label=\"Use Cycles\"\n          value={filters.useCycles}\n          onChange={() => filters.toggleUseCycles()}\n        />\n\n        <FilterSwitch label=\"Show Ids\" value={showIds} onChange={(c) => setShowIds(c)} />\n\n        <FilterSelect\n          onChange={(value) => setTagThreshold(value)}\n          value={tagThreshold}\n          options={TAGS_SELECTOR_OPTIONS}\n          label=\"Tag Count\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setSampleSize(value)}\n          value={sampleSize}\n          options={SAMPLE_SIZE_OPTIONS}\n          label=\"Sample Size\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setCardSize(value)}\n          value={cardSize}\n          options={CARD_SIZE_OPTIONS}\n          label=\"Card Size\"\n        />\n      </SiderContent>\n\n      <SiderContent>\n        <RelationshipsStats />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { ImagesRelationshipsProvider } from 'components/Images/ImageCards/ImagesRelationshipsContext';\nimport { RelationshipsContent } from 'components/Images/ImageCards/RelationshipsContent';\nimport { RelationshipsFilters } from 'components/Images/ImageCards/RelationshipsFilters';\n\nimport { PageLayout } from 'components/Layout';\n\nfunction ImageCardsRelationships() {\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Relationships\">\n      <ImagesRelationshipsProvider>\n        <Layout hasSider>\n          <RelationshipsFilters />\n\n          <Layout.Content className=\"content\">\n            <RelationshipsContent />\n          </Layout.Content>\n        </Layout>\n      </ImagesRelationshipsProvider>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsRelationships;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","RelationshipCountTag","card","color","length","undefined","TagsFilled","RelationshipsContent","query","save","stats","randomGroups","cardIds","cards","onSelect","selection","relate","nextSet","deselectAll","cycles","showIds","cardSize","useImagesRelationshipsContext","cardRef","useRef","ref","width","containerWidth","useMeasure","cardQuantity","cardWidth","useMemo","cq","Math","floor","DataLoadingWrapper","isLoading","error","hasResponseData","isEmpty","data","className","title","extra","FileImageOutlined","style","gridTemplateColumns","max","map","cardId","index","isSelected","includes","active","activeClass","ImageCard","id","preview","Actions","onNextSet","current","scrollIntoView","behavior","LoadingOutlined","WarningOutlined","right","ExpandOutlined","ForkOutlined","badge","count","SyncOutlined","RelationshipsFilters","isError","filters","setShowIds","tagThreshold","setTagThreshold","sampleSize","setSampleSize","setCardSize","vertical","gap","JSON","stringify","DownloadButton","fileName","label","value","useCycles","onChange","toggleUseCycles","c","options","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","RelationshipsStats","subtitle","hasSider"],"sourceRoot":""}