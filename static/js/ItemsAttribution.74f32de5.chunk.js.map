{"version":3,"file":"static/js/ItemsAttribution.74f32de5.chunk.js","mappings":"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","sources":["components/Items/ItemBuildingBlocks.tsx","hooks/useItemQueryParams.ts","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","components/Items/Attributes/AttributionValueButtons.tsx","components/Items/Attributes/ItemAttributeDescription.tsx","components/Common/Stat.tsx","components/Items/Attributes/ItemAttributeStats.tsx","components/Items/Attributes/ItemAttributionCard.tsx","components/Items/Attributes/ItemAttributionNavigation.tsx","hooks/useItemSampler.ts","components/Items/Attributes/ItemSamplerCard.tsx","components/Common/GoToTopButton.tsx","components/Items/Attributes/ItemAttributionDrawer.tsx","components/Items/Attributes/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","components/Items/Attributes/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/Attributes/DailyAlienSimulator.tsx","components/Items/Attributes/ItemSimulation.tsx","components/Items/Attributes/ItemStats.tsx","components/Items/Attributes/ItemAttributionPageContent.tsx","components/Items/Attributes/ItemAttributionFiltersSections.tsx","components/Items/Attributes/ItemAttributionFilters.tsx","pages/Items/ItemsAttribution.tsx"],"sourcesContent":["import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { deserializeFirebaseData, getNewItem, getNewItemAttributeValues, serializeFirebaseData } from 'utils';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAtributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAtributesValues>\n  >('tdr', 'itemsAttributeValues', {\n    select: deserializeFirebaseData,\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAtributesValues>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', 'itemsAttributeValues'],\n      });\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAtributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAtributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id'\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(serializeFirebaseData({ ...firebaseData, ...modifiedAttributeValues }));\n  };\n\n  // Filter items that have the alien deck only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.decks ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc'\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if ((tdrItemsQuery.data ?? {})?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n","import { App } from 'antd';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { ReactNode, useContext, createContext, useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues, sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAtributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAtributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAtributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAtributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAtributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n  attributesToUpdate: Dictionary<ItemAtributesValues>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n  attributesToUpdate: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n      return;\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n      return;\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n      return;\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n      return;\n    }\n\n    if (direction === 'incomplete') {\n      setItemIndex((prev) => {\n        let index = prev + 1;\n        while (index < availableItemIds.length) {\n          const item = getItemAttributeValues(availableItemIds[index]);\n          if (Object.keys(item.attributes).length !== attributesList.length) {\n            return index;\n          }\n          if (index === availableItemIds.length - 1) {\n            message.info('No more incomplete items found.');\n            return prev;\n          }\n          index++;\n        }\n        return prev;\n      });\n      return;\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n        return;\n      } else {\n        message.error(`Item ${itemId} is not available for attribution.`);\n      }\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAtributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {})\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n        attributesToUpdate,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { Radio, RadioGroupProps, Tooltip } from 'antd';\nimport { ItemAttribute } from 'types';\n\nimport { CheckCircleFilled, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n  size?: RadioGroupProps['size'];\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n  size,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {attribute.name.en}{' '}\n        <Tooltip title={attribute.description.en}>\n          <QuestionCircleOutlined />\n        </Tooltip>\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from 'utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAtributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated]\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { Tag, Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Tooltip, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAtributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n          acc += v / 2;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Tooltip title=\"The percentage of conclusive attributes (not unclear)\">\n          <Stat label=\"Reliability\">{relevancy}%</Stat>\n        </Tooltip>\n      </Flex>\n    </div>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute, index) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group className=\"my-4\">\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Title\">\n        <Button>Go To</Button>\n      </Popover>\n      <Button onClick={() => jumpToItem('incomplete')}>Next Incomplete</Button>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return <ItemsTypeahead isPending={false} onFinish={(itemId) => jumpToItem('goTo', itemId)} />;\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  const getSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    return {\n      selectedAttribute,\n      selected,\n    };\n  };\n\n  // Create sample\n  const onGetSample = () => {\n    let tempSample = getSample();\n    let attempts = 0;\n    while (tempSample.selected.length === 0 && attempts < 30) {\n      tempSample = getSample();\n      attempts++;\n    }\n\n    setAttribute(tempSample.selectedAttribute);\n    setSampleIds(tempSample.selected);\n  };\n\n  const itemsLeftForAttribute = useMemo(() => {\n    if (!attribute) return 0;\n\n    return availableItemIds.filter((id) => !getItemAttributeValues(id).attributes[attribute?.id]).length;\n  }, [attribute, availableItemIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    itemsLeftForAttribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { Button, Card, Divider, Empty, Flex, Modal, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { useToggle } from 'react-use';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { wait } from 'utils';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue, itemsLeftForAttribute } = useItemSampler();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n\n        <Divider />\n\n        <SingleSampleModalFlow />\n      </Card>\n    );\n  }\n\n  const sample = sampleIds.map((itemId) => ({\n    itemAttributes: getItemAttributeValues(itemId),\n    item: getItem(itemId),\n  }));\n\n  const unsetItems = sample.filter(({ itemAttributes }) => !itemAttributes.attributes[attribute!.id]);\n\n  const onMarkRestAsUnrelated = () => {\n    unsetItems.forEach(({ item }) => {\n      updateAttributeValue(item.id, attribute!.id, -3);\n    });\n  };\n\n  return (\n    <>\n      <SingleSampleModalFlow />\n      <Card\n        className=\"my-4\"\n        title={\n          <Typography.Text>\n            {attribute?.name.en} - {attribute?.description.en} ({itemsLeftForAttribute} items left)\n          </Typography.Text>\n        }\n        actions={[\n          <Button onClick={onMarkRestAsUnrelated} danger disabled={unsetItems.length === 0}>\n            Mark rest as unrelated\n          </Button>,\n          <Button type=\"primary\" ghost onClick={onGetSample}>\n            Get New Sample\n          </Button>,\n        ]}\n        extra={\n          <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n            Get New Sample\n          </Button>\n        }\n      >\n        <Flex vertical gap={6}>\n          {sample.length === 0 && (\n            <Empty\n              description=\"No unset items found for this attribute.\"\n              image={Empty.PRESENTED_IMAGE_SIMPLE}\n            />\n          )}\n          {sample.map(({ item, itemAttributes }) => {\n            return (\n              <Fragment key={`${item.id}-${itemAttributes.updatedAt}`}>\n                <Flex gap={6}>\n                  <ItemSprite item={item} width={75} />\n                  <Flex vertical gap={6}>\n                    <Flex gap={6}>\n                      <ItemId item={item} />\n                      <ItemGoTo item={item} />\n                    </Flex>\n                    <ItemName item={item} language=\"en\" />\n                    <ItemName item={item} language=\"pt\" />\n                  </Flex>\n                  <AttributionValueButtons\n                    attribute={attribute!}\n                    value={itemAttributes.attributes[attribute!.id]}\n                    onChange={(attributeId: string, value: number) =>\n                      updateAttributeValue(item.id, attributeId, value)\n                    }\n                  />\n                </Flex>\n                <Divider className=\"my-1\" />\n              </Fragment>\n            );\n          })}\n        </Flex>\n      </Card>\n    </>\n  );\n}\n\nexport function SingleSampleModalFlow() {\n  const [open, toggleOpen] = useToggle(false);\n  const { addQueryParam, removeQueryParam } = useItemQueryParams();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue } = useItemSampler();\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n\n  const handleOpenSingleSampler = () => {\n    addQueryParam('size', '1');\n    toggleOpen(true);\n    onGetSample();\n  };\n\n  const onClose = () => {\n    removeQueryParam('size');\n    toggleOpen(false);\n  };\n\n  const itemId = sampleIds[0];\n  const item = getItem(itemId);\n  const itemAttributes = getItemAttributeValues(itemId);\n\n  return (\n    <Flex className=\"mt-4\">\n      <Button type=\"primary\" onClick={handleOpenSingleSampler}>\n        Single Sampler\n      </Button>\n      <Modal\n        title={\n          <Typography>\n            Single Sampler: <strong>{attribute?.name.en}</strong>\n          </Typography>\n        }\n        open={open}\n        width=\"100vw\"\n        maskClosable={false}\n        onOk={onClose}\n        onClose={onClose}\n        onCancel={onClose}\n        cancelButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        {itemId && item && itemAttributes && attribute && (\n          <Flex gap={6} className=\"my-10\" wrap=\"wrap\" key={itemId}>\n            <ItemSprite item={item} width={150} />\n            <Flex vertical gap={6}>\n              <Flex gap={6}>\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n              </Flex>\n              <ItemName item={item} language=\"en\" />\n              <ItemName item={item} language=\"pt\" />\n            </Flex>\n            <AttributionValueButtons\n              size=\"large\"\n              attribute={attribute!}\n              value={itemAttributes.attributes[attribute!.id]}\n              onChange={async (attributeId: string, value: number) => {\n                updateAttributeValue(item.id, attributeId, value);\n                await wait(500);\n                onGetSample();\n              }}\n            />\n          </Flex>\n        )}\n        <Button onClick={onGetSample}>Another Sample</Button>\n      </Modal>\n    </Flex>\n  );\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { ButtonProps } from 'antd/lib/button';\nimport { useEffect, useState } from 'react';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.pageYOffset > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { Divider, Drawer, Flex, Space, Switch } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\n\nexport function ItemAttributionDrawer() {\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('drawer');\n  const [showOnlyUnset, setUnsetOnly] = useState(false);\n\n  console.log('what?');\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem } =\n    useItemsAttributeValuesContext();\n\n  const onClose = () => {\n    removeQueryParam('drawer');\n  };\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return (\n    <Drawer open={!!queryParamsItemId} title={`Edit: ${activeItem.name.en}`} onClose={onClose} width=\"640px\">\n      <Flex gap={6}>\n        <Flex vertical gap={6}>\n          <ItemSprite item={activeItem} width={50} />\n          <ItemId item={activeItem} />\n        </Flex>\n        <Flex vertical gap={6}>\n          <ItemName item={activeItem} language=\"en\" />\n          <ItemName item={activeItem} language=\"pt\" />\n        </Flex>\n        <Flex vertical gap={6}>\n          <Switch\n            checked={showOnlyUnset}\n            onChange={setUnsetOnly}\n            checkedChildren=\"Unset\"\n            unCheckedChildren=\"All\"\n          />\n        </Flex>\n      </Flex>\n\n      <Divider className=\"my-1\" />\n\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n        {filteredAttributesList.map((attribute) => (\n          <AttributionValueButtons\n            size=\"small\"\n            key={attribute.id}\n            attribute={attribute}\n            value={itemAttributeValues.attributes[attribute.id]}\n            onChange={onAttributeChange}\n          />\n        ))}\n      </Space>\n    </Drawer>\n  );\n}\n","import { Button, Card, Empty, Flex, Pagination, Popconfirm, Select, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributionDrawer } from './ItemAttributionDrawer';\n\nconst getStatSentence = (stats: Record<string, number>, scope: string | null) => {\n  if (scope === 'unset' || !scope) {\n    return `${100 - stats.percent}% done, ${stats.group} left`;\n  }\n\n  return `${stats.percent}%  - ${stats.group} items`;\n};\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n\n  const { attribute, pageIds, updateAttributeValue, updatePageItemsAsUnrelated, pagination, stats, sorting } =\n    useItemGrouping();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const sortingComponent = (\n    <Flex align=\"center\">\n      <Typography.Text className=\"mr-2\">Sort by</Typography.Text>\n      <Select style={{ width: 120 }} value={sorting.sortBy} onChange={(v) => sorting.setSortBy(v)}>\n        <Select.Option value={null}>Last Updated</Select.Option>\n        <Select.Option value=\"prop::id\">Id</Select.Option>\n        {attributesList.map((a) => (\n          <Select.Option key={a.id} value={`attribute::${a.id}`}>\n            {a.name.en}\n          </Select.Option>\n        ))}\n      </Select>\n    </Flex>\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({getStatSentence(stats, searchParams.get('scope'))}) -{' '}\n          {attribute.description.en}\n        </Typography.Text>\n      }\n      extra={\n        <Flex align=\"center\">\n          {sortingComponent}\n\n          {paginationComponent}\n        </Flex>\n      }\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.length === 0 && (\n        <Empty\n          description=\"No items found in this scope for this attribute.\"\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n        />\n      )}\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <Button.Group>\n                  <ItemGoTo item={item} />\n                  <Button size=\"small\" shape=\"round\" onClick={() => addQueryParam('drawer', item.id)}>\n                    Drawer\n                  </Button>\n                </Button.Group>\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute!}\n                value={itemAttributes.attributes[attribute!.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n      <ItemAttributionDrawer />\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { orderBy } from 'lodash';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const [sortBy, setSortBy] = useState<string | null>(null);\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    const [sortType, sortValue] = (sortBy ?? '::').split('::');\n\n    return orderBy(\n      filteredItemIds,\n      [\n        (id) => (sortType === 'attribute' ? getItemAttributeValues(id)?.attributes?.[sortValue] : true),\n        (id) => (sortType === 'prop' ? Number(id) : true),\n        (id) => getItemAttributeValues(id)?.updatedAt,\n        (id) => Number(id),\n      ],\n      [sortOrder, 'asc', 'desc', 'asc']\n    );\n  }, [attributeKey, scope, sortBy, sortOrder]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      })\n    );\n  };\n\n  return {\n    group,\n    stats: {\n      total: availableItemIds.length,\n      group: group.length,\n      percent: Math.round((group.length / availableItemIds.length) * 100),\n    },\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    sorting: {\n      sortBy,\n      setSortBy,\n      sortOrder,\n      setSortOrder,\n    },\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { Flex, Table, TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport { Item } from 'types';\n\nimport { AttributeSprite } from './ItemAttributeDescription';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <ItemGoTo item={item} />\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : '0'}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} pagination={{ showQuickJumper: true }} />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { filterMessage, getItemAttributePriorityResponse } from 'utils';\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { Item, ItemAtributesValues } from 'types';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAtributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc']\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { Alert, Button, Divider, Flex, Space, Typography } from 'antd';\nimport { keys, sample, sampleSize, shuffle, values } from 'lodash';\nimport { useState } from 'react';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { makeArray } from 'utils';\n\nexport function DailyAliemSimulator() {\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n\n  const [simulation, setSimulation] = useState<DailyAlienGame | null>(null);\n\n  // Choose 3 random attributes that are not limited\n  // Get examples for each attribute of items that have value 10 in that attribute but are -3 in the other two\n\n  const onSimulate = () => {\n    setSimulation(generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data));\n  };\n\n  const onSimulateMany = () => {\n    const simulations: Dictionary<DailyAlienGame> = {};\n    let tries = 0;\n    while (tries < 300 || keys(simulations).length === 15) {\n      const simulation = generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data);\n      if (simulation.valid && !simulations[simulation.setId]) {\n        simulations[simulation.setId] = simulation;\n      }\n      if (keys(simulations).length >= 15) {\n        break;\n      }\n      tries += 1;\n    }\n    console.log('TRIES', tries);\n    console.log(Object.values(simulations).map((e, i) => ({ ...e, number: e.number - i })));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Daily Simulator</Typography.Title>\n\n      <Typography.Paragraph>Generates a daily game for Alien Communication</Typography.Paragraph>\n\n      <Space>\n        <Button type=\"primary\" onClick={onSimulate}>\n          Generate\n        </Button>\n        <Button onClick={onSimulateMany}>Generate List</Button>\n      </Space>\n\n      <div>\n        {Boolean(simulation) && (\n          <Space direction=\"vertical\" key={simulation?.setId}>\n            <Typography.Title level={5}>{simulation?.setId}</Typography.Title>\n            {!simulation?.valid && <Alert type=\"error\" message=\"Invalid game\" />}\n            <Space direction=\"vertical\">\n              {simulation?.attributes.map((attr) => (\n                <Flex key={attr.id} gap={8}>\n                  <AlienSign id={attr.spriteId} width={50} />\n                  {attr.itemsIds.map((itemId) => (\n                    <Item id={itemId || '0'} width={50} />\n                  ))}\n                </Flex>\n              ))}\n            </Space>\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.requests.map((req) => (\n                <Flex key={req.itemId} vertical>\n                  <AlienSign id={req.spritesIds[2]} width={50} />\n                  <AlienSign id={req.spritesIds[1]} width={50} />\n                  <AlienSign id={req.spritesIds[0]} width={50} />\n                </Flex>\n              ))}\n            </Space>\n\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.itemsIds.map((itemId) => <Item id={itemId || '0'} width={50} />)}\n            </Space>\n          </Space>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype DailyAlienGameAttribute = {\n  id: string;\n  name: string;\n  description: string;\n  spriteId: string;\n  itemsIds: string[];\n};\n\ntype DailyAlienGameRequest = {\n  spritesIds: string[];\n  itemId: string;\n};\n\ntype DailyAlienGame = {\n  id: string;\n  setId: string;\n  number: number;\n  type: 'comunicação-alienígena';\n  attributes: DailyAlienGameAttribute[];\n  requests: DailyAlienGameRequest[];\n  solution: string;\n  itemsIds: string[];\n  valid: boolean;\n};\n\nconst generateDailyAlienGame = (\n  attributes: Dictionary<ItemAttribute>,\n  itemsAttributesValues: Dictionary<ItemAtributesValues>\n): DailyAlienGame => {\n  const allAttributes = values(attributes).filter((attr) => !attr.limited || attr.id === 'sol');\n  const allItems = shuffle(values(itemsAttributesValues).filter((i) => i.complete));\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(allAttributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  allItems.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyAlienGameAttribute[] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyAlienGameRequest[] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB)!,\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC)!,\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC)!,\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC)!,\n    });\n  }\n  const simpleRequests: DailyAlienGameRequest[] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  console.log({\n    attributeA,\n    attributeB,\n    attributeC,\n    attributeAB,\n    attributeAC,\n    attributeBC,\n    attributeABC,\n  });\n\n  console.log('COMPLEX REQUEST SIZE', complexRequests.length);\n  console.log('SIMPLE REQUEST SIZE', simpleRequests.length);\n  let requests = sampleSize(complexRequests, 4);\n  console.log('REQUEST SIZE', requests.length);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.warn('Not enough requests');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyAlienGame = {\n    id: '2024-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([...requestItemsIds, none[0], none[1], none[2], none[3]]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    // TODO: verify if it should be 6\n    result.itemsIds.length > 5,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  console.log(result);\n\n  return result;\n};\n","import { App, Button, Flex, InputNumber, Space, Typography } from 'antd';\nimport {\n  FilterCheckBox,\n  FilterNumber,\n  FilterSelect,\n  FilterSwitch,\n  TransparentButton,\n} from 'components/Common';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keys, sampleSize, shuffle, sortBy } from 'lodash';\nimport { useState } from 'react';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport clsx from 'clsx';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport {\n  CheckSquareOutlined,\n  CloseSquareOutlined,\n  LineChartOutlined,\n  PlusSquareOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { DailyAliemSimulator } from './DailyAlienSimulator';\n\nconst ROMAN_NUMERALS = ['', 'I', 'II', 'III', 'IV', 'V'];\n\ntype AttributeSummary = {\n  relatedCount: number;\n  deterministicCount: number;\n  unclearCount: number;\n  oppositeCount: number;\n} & ItemAttribute;\n\nexport function ItemSimulation() {\n  const { attributes, availableItemIds, getItemAttributeValues, getItem } = useItemsAttributeValuesContext();\n  const { message } = App.useApp();\n\n  const [gridSize, setGridSize] = useState<16 | 25>(25);\n  const [reliabilityThreshold, setReliabilityThreshold] = useState<number>(90);\n  const [nsfw, setNsfw] = useState<boolean>(false);\n  const [selectedItemsIds, setSelectedItemsIds] = useState<string[]>([]);\n  const [selectedAttributes, setSelectedAttributes] = useState<AttributeSummary[]>([]);\n  const [highlightedAttributeKey, setHighlightedAttributeKey] = useState<string | null>(null);\n  const [displays, setDisplays] = useState<BooleanDictionary>({\n    id: true,\n    nameEn: true,\n    namePt: true,\n    reliability: true,\n  });\n\n  const onGetSample = () => {\n    const keysDict: Record<string, string> = {};\n\n    const shuffledIds = shuffle(availableItemIds);\n\n    while (Object.values(keysDict).length < gridSize) {\n      const itemId = shuffledIds.pop();\n      if (!itemId) break;\n\n      const itemAttributeValues = getItemAttributeValues(itemId);\n\n      if (!itemAttributeValues) continue;\n\n      if (\n        !itemAttributeValues.complete ||\n        !itemAttributeValues.reliability ||\n        itemAttributeValues.reliability < reliabilityThreshold\n      )\n        continue;\n\n      if (!nsfw && getItem(itemId).nsfw) continue;\n\n      if (itemAttributeValues.key && !keysDict[itemAttributeValues.key]) {\n        keysDict[itemAttributeValues.key] = itemId;\n      } else {\n        console.log('Item has identical key to another item. Skipping.', getItem(itemId).name.en);\n      }\n    }\n    const result = Object.values(keysDict);\n    if (result.length < gridSize) {\n      message.error(`Could not generate sample. Got only ${result.length} items`);\n    }\n\n    setSelectedItemsIds(sortBy(result, (itemId) => Number(itemId)));\n\n    // Get the most common attributes\n    const attributesResult = getHighestAttributeKeys(\n      result.map((itemId) => getItemAttributeValues(itemId)),\n      25,\n      attributes\n    );\n\n    // If less than 25 attributes are found, add more by priority\n    if (attributesResult.length < 25) {\n      const remainingAttributes = keys(attributes).filter((key) => !attributesResult.includes(key));\n      const remainingAttributesByPriority = sortBy(remainingAttributes, (key) => attributes[key].priority);\n      const toBeAdded = remainingAttributesByPriority.slice(0, 25 - attributesResult.length);\n      console.log('Adding more attributes by priority', toBeAdded);\n      attributesResult.push(...toBeAdded);\n    }\n\n    const dicts = attributesResult.reduce(\n      (\n        acc: {\n          relatedCount: NumberDictionary;\n          deterministicCount: NumberDictionary;\n          unclearCount: NumberDictionary;\n          oppositeCount: NumberDictionary;\n        },\n        key\n      ) => {\n        result.forEach((itemId) => {\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          if (!itemAttributeValues) return;\n          switch (itemAttributeValues.attributes[key]) {\n            case ATTRIBUTE_VALUE.RELATED:\n              acc.relatedCount[key] = (acc.relatedCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.DETERMINISTIC:\n              acc.deterministicCount[key] = (acc.deterministicCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.UNCLEAR:\n              acc.unclearCount[key] = (acc.unclearCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.OPPOSITE:\n              acc.oppositeCount[key] = (acc.oppositeCount[key] || 0) + 1;\n              break;\n          }\n        });\n\n        return acc;\n      },\n      { relatedCount: {}, deterministicCount: {}, unclearCount: {}, oppositeCount: {} }\n    );\n\n    setSelectedAttributes(\n      attributesResult.sort().map((key) => ({\n        ...attributes[key],\n        relatedCount: dicts.relatedCount[key],\n        deterministicCount: dicts.deterministicCount[key],\n        unclearCount: dicts.unclearCount[key],\n        oppositeCount: dicts.oppositeCount[key],\n      }))\n    );\n  };\n\n  const onUpdateDisplays = (key: string) => {\n    setDisplays((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Simulator</Typography.Title>\n\n      <Typography.Paragraph>\n        Generates a board with items different enough to get Deterministic values in all selected attributes.\n      </Typography.Paragraph>\n\n      <Flex wrap gap={12}>\n        <FilterSelect\n          label=\"Grid Size\"\n          value={gridSize}\n          onChange={(value) => setGridSize(value)}\n          options={[16, 25]}\n        />\n        <FilterNumber\n          label=\"Reliability Threshold\"\n          value={reliabilityThreshold}\n          onChange={(value) => setReliabilityThreshold(value)}\n          step={5}\n          min={10}\n          max={100}\n        />\n        <FilterSwitch label=\"NSFW\" value={nsfw} onChange={setNsfw} />\n        <Button onClick={onGetSample} type=\"primary\">\n          Get Sample Board\n        </Button>\n      </Flex>\n      <Flex wrap gap={12}>\n        <FilterCheckBox label=\"Show Id\" value={!!displays.id} onChange={() => onUpdateDisplays('id')} />\n        <FilterCheckBox\n          label=\"Show Name (EN)\"\n          value={!!displays.nameEn}\n          onChange={() => onUpdateDisplays('nameEn')}\n        />\n        <FilterCheckBox\n          label=\"Show Name (PT)\"\n          value={!!displays.namePt}\n          onChange={() => onUpdateDisplays('namePt')}\n        />\n        <FilterCheckBox\n          label=\"Show Reliability\"\n          value={!!displays.reliability}\n          onChange={() => onUpdateDisplays('reliability')}\n        />\n      </Flex>\n\n      <div className=\"simulator-grid\" style={{ gridTemplateColumns: `repeat(${Math.sqrt(gridSize)}, 1fr)` }}>\n        {selectedItemsIds.map((itemId) => {\n          const item = getItem(itemId);\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          return (\n            <Space\n              key={itemId}\n              direction=\"vertical\"\n              className={clsx(\n                'simulator-grid__entry',\n                highlightedAttributeKey &&\n                  itemAttributeValues.attributes[highlightedAttributeKey] > 0 &&\n                  'simulator-grid__entry--highlighted'\n              )}\n              align=\"center\"\n            >\n              <Space>\n                <Flex vertical>\n                  {displays.id && <ItemId item={item} />}\n\n                  {displays.reliability && (\n                    <span>\n                      <InputNumber\n                        prefix={<LineChartOutlined />}\n                        placeholder=\"Reliability\"\n                        variant=\"borderless\"\n                        size=\"small\"\n                        value={itemAttributeValues.reliability}\n                        readOnly\n                        style={{ width: '8ch' }}\n                        formatter={(value) => `${value}%`}\n                      />\n                    </span>\n                  )}\n\n                  {displays.id && <ItemGoTo item={item} />}\n                </Flex>\n\n                <ItemSprite item={item} width={50} />\n              </Space>\n\n              {displays.nameEn && <ItemName item={item} language=\"en\" />}\n              {displays.namePt && <ItemName item={item} language=\"pt\" />}\n            </Space>\n          );\n        })}\n      </div>\n\n      <div className=\"simulator-grid my-4\">\n        {selectedAttributes.map((attributeSummary) => (\n          <TransparentButton\n            key={attributeSummary.id}\n            className={clsx(\n              'simulator-grid__entry',\n              'simulator-grid__button',\n              highlightedAttributeKey === attributeSummary.id && 'simulator-grid__entry--highlighted'\n            )}\n            onClick={() => setHighlightedAttributeKey(attributeSummary.id)}\n          >\n            {attributeSummary.name.en} {ROMAN_NUMERALS[attributeSummary.level]}\n            <Flex gap={6} justify=\"center\" className=\"my-1\">\n              <span>\n                <CheckSquareOutlined\n                  style={{ color: attributeSummary.deterministicCount ? 'dodgerblue' : undefined }}\n                />{' '}\n                {attributeSummary.deterministicCount ?? 0}\n              </span>\n              <span>\n                <PlusSquareOutlined style={{ color: attributeSummary.relatedCount ? 'green' : undefined }} />{' '}\n                {attributeSummary.relatedCount ?? 0}\n              </span>\n              <span>\n                <CloseSquareOutlined style={{ color: attributeSummary.oppositeCount ? 'red' : undefined }} />{' '}\n                {attributeSummary.oppositeCount ?? 0}\n              </span>\n              <span>\n                <QuestionCircleOutlined\n                  style={{ color: attributeSummary.unclearCount ? 'gold' : undefined }}\n                />{' '}\n                {attributeSummary.unclearCount ?? 0}\n              </span>\n            </Flex>\n          </TransparentButton>\n        ))}\n      </div>\n\n      <DailyAliemSimulator />\n    </div>\n  );\n}\n\nfunction getHighestAttributeKeys(\n  selectedItemsAttributesValues: ItemAtributesValues[],\n  quantity: number,\n  attributes: Dictionary<ItemAttribute>\n): string[] {\n  // 1. Count the number of times each attribute is present. Make sure to gather any deterministic value\n  const attributesCounts: Record<string, number> = {};\n  const deterministicKeysDict: BooleanDictionary = {};\n  selectedItemsAttributesValues.forEach((itemAttributeValues) => {\n    if (!itemAttributeValues) return;\n    Object.keys(itemAttributeValues.attributes).forEach((key) => {\n      if (itemAttributeValues.attributes[key] > 0) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        deterministicKeysDict[key] = true;\n        attributesCounts[key] = (attributesCounts[key] || 0) + 2;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.OPPOSITE) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  const levelCount: NumberDictionary = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n  };\n\n  /**\n   * Filters the given keys array based on the count of attribute levels and guards against having more than one level 4 attribute.\n   */\n  function filterCountLevelsAndGuardLevel4(keys: string[]) {\n    return keys.filter((key) => {\n      levelCount[attributes[key].level]++;\n\n      if (levelCount[4] > 1) {\n        console.log('Discarding level 4 attribute', key);\n        return false;\n      }\n      return true;\n    });\n  }\n\n  const deterministicKeys = filterCountLevelsAndGuardLevel4(Object.keys(deterministicKeysDict));\n  const nondeterministicKeys = filterCountLevelsAndGuardLevel4(\n    keys(attributesCounts).filter((key) => !deterministicKeys.includes(key))\n  );\n  console.log({ levelCount });\n\n  // 1.b If deterministic keys are exactly the quantity, return them\n  if (quantity === deterministicKeys.length) {\n    console.log('All keys are deterministic');\n    return deterministicKeys;\n  }\n\n  // 2. Get all keys and sort them by value in descending order, but have only one level 5 attribute\n  console.log(attributesCounts);\n  // let hasLevel5Attribute = false;\n  // const sortedKeys = keys(attributesCounts)\n  //   .sort((a, b) => {\n  //     if (attributesCounts[a] !== attributesCounts[b]) {\n  //       return attributesCounts[b] - attributesCounts[a];\n  //     }\n\n  //     return attributes[a].priority - attributes[b].priority;\n  //   })\n  //   .filter((key) => {\n  //     if (attributes[key].level !== 4) return true;\n\n  //     if (!hasLevel5Attribute) {\n  //       console.log('Keeping level 4 attribute', key, attributesCounts[key]);\n  //       hasLevel5Attribute = true;\n  //       return true;\n  //     }\n  //     console.log('Discarding level 4 attribute', key, attributesCounts[key]);\n\n  //     return false;\n  //   });\n\n  // console.log(sortedKeys);\n\n  // 2.b. Handle edge cases: empty object or quantity exceeding keys\n  if (deterministicKeys.length === 0) {\n    return [];\n  }\n\n  const deterministicTiedGroups = deterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  const sortedDeterministicTiedGroupsKeys = keys(deterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a)\n  );\n  console.log({ sortedDeterministicTiedGroupsKeys });\n\n  const nondeterministicTiedGroups = nondeterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  console.log(nondeterministicTiedGroups);\n  const sortedNondeterministicTiedGroupsKeys = keys(nondeterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a)\n  );\n\n  let result: string[] = [];\n\n  for (const group of sortedDeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(deterministicTiedGroups[group], quantity - result.length));\n  }\n\n  for (const group of sortedNondeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(nondeterministicTiedGroups[group], quantity - result.length));\n  }\n\n  return result;\n}\n","import { Button, Flex, Progress, Rate, Space, Table, TableProps, Tabs, Tag, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { TabsProps } from 'antd/lib';\nimport { useNavigate } from 'react-router-dom';\nimport { AlienSign } from 'components/Sprites';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemStats() {\n  // console.log(attributesList);\n  // console.log(attributes);\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'All Attributes',\n      children: <AttributesStatsTable type=\"all\" />,\n    },\n    {\n      key: '2',\n      label: 'Default Attributes',\n      children: <AttributesStatsTable type=\"default\" />,\n    },\n    {\n      key: '3',\n      label: 'Custom Attributes',\n      children: <AttributesStatsTable type=\"custom\" />,\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Stats</Typography.Title>\n\n      <Tabs defaultActiveKey=\"1\" items={items} />\n    </div>\n  );\n}\n\nconst calculateAttributeStats = (attribute: ItemAttribute, itemsAttributes: ItemAtributesValues[]) => {\n  let completionCount = 0;\n  let tensCount = 0;\n  let fivesCount = 0;\n  let zerosCount = 0;\n  let negativeOnesCount = 0;\n  let negativeThreesCount = 0;\n  let negativeTensCount = 0;\n  let positiveCount = 0;\n\n  itemsAttributes.forEach(({ attributes }) => {\n    if (attributes[attribute.id]) {\n      completionCount++;\n\n      const value = attributes[attribute.id];\n      if (value === 10) {\n        tensCount++;\n      } else if (value === 5) {\n        fivesCount++;\n      } else if (value === 0 || !value) {\n        zerosCount++;\n      } else if (value === -1) {\n        negativeOnesCount++;\n      } else if (value === -3) {\n        negativeThreesCount++;\n      } else if (value === -10) {\n        negativeTensCount++;\n      }\n\n      if (value > 0) {\n        positiveCount++;\n      }\n    }\n  });\n\n  const total = itemsAttributes.length;\n  const completionPercentage = (completionCount / total) * 100;\n  const tensPercentage = (tensCount / total) * 100;\n  const fivesPercentage = (fivesCount / total) * 100;\n  const zerosPercentage = (zerosCount / total) * 100;\n  const negativeOnesPercentage = (negativeOnesCount / total) * 100;\n  const negativeThreesPercentage = (negativeThreesCount / total) * 100;\n  const negativeTensPercentage = (negativeTensCount / total) * 100;\n  const positivePercentage = (positiveCount / total) * 100;\n\n  return {\n    completionPercentage: completionPercentage.toFixed(1),\n    tensPercentage: tensPercentage.toFixed(1),\n    fivesPercentage: fivesPercentage.toFixed(1),\n    zerosPercentage: zerosPercentage.toFixed(1),\n    negativeOnesPercentage: negativeOnesPercentage.toFixed(1),\n    negativeThreesPercentage: negativeThreesPercentage.toFixed(1),\n    negativeTensPercentage: negativeTensPercentage.toFixed(1),\n    positivePercentage: positivePercentage.toFixed(1),\n  };\n};\n\ntype AttributesStatsTableProps = {\n  type: 'all' | 'default' | 'custom';\n};\n\nfunction AttributesStatsTable({ type }: AttributesStatsTableProps) {\n  const { availableItemIds, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n  const navigate = useNavigate();\n  const { is } = useQueryParams();\n\n  const attributesPool = useMemo(() => {\n    if (type === 'default') {\n      return attributesList.filter((attribute) => attribute.default);\n    }\n\n    if (type === 'custom') {\n      return attributesList.filter((attribute) => !attribute.default);\n    }\n\n    return attributesList;\n  }, [attributesList, type]);\n\n  const rows = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n\n    return attributesPool.map((attribute) => {\n      return {\n        ...attribute,\n        ...calculateAttributeStats(attribute, itemsAttributes),\n      };\n    });\n  }, [attributesPool, availableItemIds, getItemAttributeValues]);\n\n  const columns: TableProps['columns'] = [\n    {\n      title: 'Attribute',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, record) => (\n        <Flex align=\"center\" gap={8}>\n          {is('showGlyphs') && <AlienSign id={record.spriteId} width={30} />}\n          {name.en}\n          {record.default ? <Tag className=\"ml-1\">default</Tag> : ''}\n          {record.limited ? <Tag className=\"ml-1\">limited</Tag> : ''}\n        </Flex>\n      ),\n      sorter: (a, b) => a.name.en.localeCompare(b.name.en),\n    },\n\n    {\n      title: 'Priority',\n      dataIndex: 'priority',\n      key: 'priority',\n      sorter: (a, b) => a.priority - b.priority,\n    },\n\n    {\n      title: 'Positive',\n      dataIndex: 'positivePercentage',\n      key: 'positivePercentage',\n      render: (positivePercentage: string) => `${positivePercentage}%`,\n      sorter: (a, b) => parseFloat(a.positivePercentage) - parseFloat(b.positivePercentage),\n    },\n    {\n      title: '10',\n      dataIndex: 'tensPercentage',\n      key: 'tensPercentage',\n      render: (tensPercentage: string, record) => {\n        if (record.limited) {\n          return '-';\n        }\n\n        return `${tensPercentage}%`;\n      },\n      sorter: (a, b) => parseFloat(a.tensPercentage) - parseFloat(b.tensPercentage),\n    },\n    {\n      title: '5',\n      dataIndex: 'fivesPercentage',\n      key: 'fivesPercentage',\n      render: (fivesPercentage: string) => `${fivesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.fivesPercentage) - parseFloat(b.fivesPercentage),\n    },\n    {\n      title: '-1',\n      dataIndex: 'negativeOnesPercentage',\n      key: 'negativeOnesPercentage',\n      render: (negativeOnesPercentage: string) => `${negativeOnesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeOnesPercentage) - parseFloat(b.negativeOnesPercentage),\n    },\n    {\n      title: '-3',\n      dataIndex: 'negativeThreesPercentage',\n      key: 'negativeThreesPercentage',\n      render: (negativeThreesPercentage: string) => `${negativeThreesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeThreesPercentage) - parseFloat(b.negativeThreesPercentage),\n    },\n    {\n      title: '-10',\n      dataIndex: 'negativeTensPercentage',\n      key: 'negativeTensPercentage',\n      render: (negativeTensPercentage: string) => `${negativeTensPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeTensPercentage) - parseFloat(b.negativeTensPercentage),\n    },\n    {\n      title: 'Completion',\n      dataIndex: 'completionPercentage',\n      key: 'completionPercentage',\n      render: (completionPercentage: string) => (\n        <Progress percent={parseFloat(completionPercentage)} size=\"small\" />\n      ),\n      sorter: (a, b) => parseFloat(a.completionPercentage) - parseFloat(b.completionPercentage),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      render: (level) => <Rate count={4} value={level} disabled />,\n      sorter: (a, b) => a.level - b.level,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record) => (\n        <Space>\n          <Button.Group>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=grouping&attribute=${record.id}&page=1`)}\n            >\n              Grouping\n            </Button>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=sampler&attribute=${record.id}&size=6`)}\n            >\n              Sample\n            </Button>\n          </Button.Group>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Typography.Paragraph>Total: {rows.length}</Typography.Paragraph>\n      <Table columns={columns} dataSource={rows} pagination={false} rowKey=\"id\" size=\"small\" />\n    </>\n  );\n}\n","import { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { Empty, Flex } from 'antd';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { ItemComparatorCard } from './ItemComparatorCard';\nimport { ItemSimulation } from './ItemSimulation';\nimport { ItemStats } from './ItemStats';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <ItemAttributionNavigation />\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  if (view === 'simulator') {\n    return <ItemSimulation />;\n  }\n\n  if (view === 'stats') {\n    return <ItemStats />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ complete: isComplete, attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name, ...rest }) => ({\n      label: `${name.en}${rest.default ? '*' : ''}`,\n      value: id,\n    }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionStatsFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Show Glyphs\"\n        value={searchParams.get('showGlyphs') === 'true'}\n        onChange={(v) => addQueryParam('showGlyphs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { getItemAttributePriorityResponse, sortJsonKeys } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n  ItemAttributionStatsFilters,\n} from './ItemAttributionFiltersSections';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload, attributes, isSaving, attributesToUpdate } =\n    useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(attributesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(prepareItemsAttributesFileForDownload(), attributes)}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator', 'simulator', 'stats']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n      {view === 'stats' && <ItemAttributionStatsFilters />}\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  itemsAttributes: Dictionary<ItemAtributesValues>,\n  attributes: Dictionary<ItemAttribute>\n) {\n  const total = Object.keys(attributes).length;\n\n  Object.keys(itemsAttributes).forEach((key) => {\n    const itemAttributeValues = itemsAttributes[key];\n\n    // // TODO: Tempo Rename hol to gra (grab)\n    // const originalHolValue = itemAttributeValues.attributes['hol'];\n    // delete itemAttributeValues.attributes['hol'];\n    // itemAttributeValues.attributes['gra'] = originalHolValue;\n\n    // // TODO: TEMP Rename sol to har, and base values in soft\n    // const originalSolValue = itemAttributeValues.attributes['sol'];\n    // delete itemAttributeValues.attributes['sol'];\n    // const softValue = itemAttributeValues.attributes['sof'];\n    // if (softValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (originalSolValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n\n    // // TODO: TEMP Auto-add cold if warm\n    // const warmValue = itemAttributeValues.attributes['war'];\n    // if (warmValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.OPPOSITE) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.UNCLEAR;\n    // }\n\n    // const bigValue = itemAttributeValues.attributes['big'];\n    // if (bigValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['sma'] = ATTRIBUTE_VALUE.UNRELATED;\n    // }\n    // if (bigValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['sma'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n\n    // Check completion\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n\n    if (completed === total) {\n      // Add completion\n      itemAttributeValues.complete = true;\n\n      // Add score\n      let unclearCount = 0;\n      itemAttributeValues.score = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n        if (v <= 0) {\n          if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n            unclearCount += 1;\n          }\n          if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n            acc += v / 2;\n          }\n          return acc;\n        }\n\n        return acc + v;\n      }, 0);\n\n      // Add reliability\n      itemAttributeValues.reliability = Math.floor(((completed - unclearCount) / total) * 100);\n\n      // Add key with only relevant attributes\n      itemAttributeValues.key = getItemAttributePriorityResponse(itemAttributeValues, attributes, true).join(\n        ''\n      );\n    } else {\n      delete itemAttributeValues.complete;\n      delete itemAttributeValues.score;\n      delete itemAttributeValues.reliability;\n      delete itemAttributeValues.key;\n    }\n  });\n\n  return sortJsonKeys(itemsAttributes);\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionPageContent } from 'components/Items/Attributes/ItemAttributionPageContent';\nimport { ItemAttributionFilters } from 'components/Items/Attributes/ItemAttributionFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n"],"names":["ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","size","value","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","useItemQueryParams","searchParams","get","setView","addQueryParam","key","set","removeQueryParam","delete","globalNewItemsAttributesValues","ItemsAttributeValuesContext","createContext","getItem","getNewItem","getItemAttributeValues","getNewItemAttributeValues","isLoading","error","hasResponseData","isDirty","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","isSaving","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributes","attributesToUpdate","ItemsAttributeValuesProvider","children","notification","message","App","queryClient","useQueryClient","tdrItemsQuery","useTDResource","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","useGetFirebaseDoc","select","deserializeFirebaseData","modifiedAttributeValues","setModifiedAttributeValues","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","description","savedItemsAttributeValues","useMemo","data","isEmpty","firebaseData","items","orderBy","Object","keys","filter","decks","includes","Number","info","storedValue","modifiedValue","merge","isPending","mutate","serializeFirebaseData","prev","updatedAt","Date","now","itemsArr","mapKeys","map","useItemsAttribution","itemIndex","setItemIndex","random","length","values","Provider","direction","undefined","index","indexOf","attributeId","sortJsonKeys","reduce","acc","complete","useItemsAttributeValuesContext","useContext","attributeOptions","label","ATTRIBUTE_VALUE","attributeLimitedOptions","disabled","AttributionValueButtons","attribute","onChange","onlyButtons","options","limited","target","v","optionType","buttonStyle","QuestionCircleOutlined","CheckCircleFilled","ItemAttributeDescription","showUnclear","showUnrelated","filteredResponse","filterMessage","getItemAttributePriorityResponse","Component","AttributeSprite","AttributeText","gap","vertical","wrap","keyVariant","arr","firstElement","lastElement","withText","text","parseAttribute","align","spriteId","clsx","justify","maxWidth","textAlign","wordBreak","toLowerCase","suffix","Stat","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","total","completed","Math","floor","unclearCount","strong","percent","CloseCircleOutlined","ItemAttributionCard","queryParamsItemId","useEffect","showOnlyUnset","filteredAttributesList","offsetTop","type","ItemAttributionNavigation","icon","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","ItemsTypeahead","onFinish","useItemSampler","sampleIds","setSampleIds","setAttribute","getSample","attributeKey","lodashSample","selectedAttribute","find","a","sampleSize","selected","shuffle","i","push","itemsLeftForAttribute","onGetSample","tempSample","attempts","updateAttributeValue","currentItemAttributeValues","ItemSamplerCard","SingleSampleModalFlow","sample","itemAttributes","unsetItems","actions","forEach","danger","ghost","extra","image","Empty","Fragment","open","toggleOpen","useToggle","onClose","maskClosable","onOk","onCancel","cancelButtonProps","display","async","wait","GoToTopButton","props","isVisible","setIsVisible","handleScroll","window","pageYOffset","addEventListener","removeEventListener","scrollTo","top","behavior","VerticalAlignTopOutlined","ItemAttributionDrawer","setUnsetOnly","console","log","checked","checkedChildren","unCheckedChildren","getStatSentence","stats","scope","group","ItemGroupingCard","pageIds","updatePageItemsAsUnrelated","pagination","sorting","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","sortBy","setSortBy","sortOrder","setSortOrder","itemsAttributes","scopeValue","filteredItemIds","sortType","sortValue","split","slice","start","end","round","current","String","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","sortingComponent","unrelateButton","onConfirm","Boolean","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemAttributesValues","itemMessage","fullMessage","join","moreThanOne","ids","keyBy","useItemsComparator","columns","dataIndex","render","sorter","b","localeCompare","groupA","level","dataSource","showQuickJumper","DailyAliemSimulator","simulation","setSimulation","generateDailyAlienGame","simulations","tries","valid","setId","e","number","attr","itemsIds","requests","req","spritesIds","itemsAttributesValues","allAttributes","allItems","spriteIDs","makeArray","selectedAttributes","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","POSITIVE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","max","usedItemsIds","complexRequests","simpleRequests","warn","requestItemsIds","result","sort","solution","every","ROMAN_NUMERALS","ItemSimulation","gridSize","setGridSize","reliabilityThreshold","setReliabilityThreshold","setNsfw","selectedItemsIds","setSelectedItemsIds","setSelectedAttributes","highlightedAttributeKey","setHighlightedAttributeKey","displays","setDisplays","nameEn","namePt","reliability","onUpdateDisplays","step","min","keysDict","shuffledIds","attributesResult","selectedItemsAttributesValues","quantity","attributesCounts","deterministicKeysDict","levelCount","filterCountLevelsAndGuardLevel4","deterministicKeys","nondeterministicKeys","deterministicTiedGroups","sortedDeterministicTiedGroupsKeys","nondeterministicTiedGroups","sortedNondeterministicTiedGroupsKeys","getHighestAttributeKeys","remainingAttributes","toBeAdded","priority","dicts","relatedCount","deterministicCount","oppositeCount","gridTemplateColumns","sqrt","LineChartOutlined","formatter","attributeSummary","CheckSquareOutlined","PlusSquareOutlined","CloseSquareOutlined","ItemStats","AttributesStatsTable","defaultActiveKey","calculateAttributeStats","completionCount","tensCount","fivesCount","zerosCount","negativeOnesCount","negativeThreesCount","negativeTensCount","positiveCount","tensPercentage","fivesPercentage","zerosPercentage","negativeOnesPercentage","negativeThreesPercentage","negativeTensPercentage","positivePercentage","completionPercentage","toFixed","navigate","useNavigate","is","useQueryParams","attributesPool","default","rows","record","parseFloat","count","rowKey","ItemAttributionPageContent","ItemAttributionStats","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","isComplete","ItemAttributionClassifierFilters","block","ItemAttributionSamplerFilters","ItemAttributionGroupingFilters","rest","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionStatsFilters","ItemAttributionFilters","SaveButton","onSave","dirt","JSON","stringify","DownloadButton","score","prepareFileForDownload","fileName","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}