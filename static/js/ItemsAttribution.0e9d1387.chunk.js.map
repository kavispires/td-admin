{"version":3,"file":"static/js/ItemsAttribution.0e9d1387.chunk.js","mappings":"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","sources":["components/Items/ItemBuildingBlocks.tsx","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","hooks/useItemQueryParams.ts","components/Common/Stat.tsx","components/Items/Attributes/ItemAttributionFiltersSections.tsx","components/Items/Attributes/ItemAttributionFilters.tsx","components/Common/GoToTopButton.tsx","components/Common/PopoverInfo.tsx","components/Items/Attributes/AttributionValueButtons.tsx","components/Items/Attributes/ItemAttributeDescription.tsx","components/Items/Attributes/ItemAttributeStats.tsx","components/Items/Attributes/ItemAttributionCard.tsx","components/Items/Attributes/ItemAttributionNavigation.tsx","components/Items/Attributes/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/Attributes/ItemAttributionDrawer.tsx","components/Items/Attributes/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","hooks/useItemSampler.ts","components/Items/Attributes/ItemSamplerCard.tsx","components/Items/Attributes/DailyAlienSimulator.tsx","components/Items/Attributes/ItemSimulation.tsx","components/Items/Attributes/ItemStats.tsx","components/Items/Attributes/ItemAttributionPageContent.tsx","pages/Items/ItemsAttribution.tsx"],"sourcesContent":["import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport type { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useSearchParams } from 'react-router-dom';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { deserializeFirebaseData, getNewItem, getNewItemAttributeValues, serializeFirebaseData } from 'utils';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAtributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAtributesValues>\n  >('tdr', 'itemsAttributeValues', {\n    select: deserializeFirebaseData,\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAtributesValues>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', 'itemsAttributeValues'],\n      });\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAtributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAtributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id',\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(serializeFirebaseData({ ...firebaseData, ...modifiedAttributeValues }));\n  };\n\n  // Filter items that have the alien deck only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.decks ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc',\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if (tdrItemsQuery.data?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n","import { App } from 'antd';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { type ReactNode, createContext, useContext, useMemo, useState } from 'react';\nimport type { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues, sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAtributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAtributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAtributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAtributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAtributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n  attributesToUpdate: Dictionary<ItemAtributesValues>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n  attributesToUpdate: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n      return;\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n      return;\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n      return;\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n      return;\n    }\n\n    if (direction === 'incomplete') {\n      setItemIndex((prev) => {\n        let index = prev + 1;\n        while (index < availableItemIds.length) {\n          const item = getItemAttributeValues(availableItemIds[index]);\n          if (Object.keys(item.attributes).length !== attributesList.length) {\n            return index;\n          }\n          if (index === availableItemIds.length - 1) {\n            message.info('No more incomplete items found.');\n            return prev;\n          }\n          index++;\n        }\n        return prev;\n      });\n      return;\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n        return;\n      }\n      message.error(`Item ${itemId} is not available for attribution.`);\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAtributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          // biome-ignore lint/performance/noDelete: <explanation>\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {}),\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n        attributesToUpdate,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { Tag, Typography } from 'antd';\nimport type { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ complete: isComplete, attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name, ...rest }) => ({\n      label: `${name.en}${rest.default ? '*' : ''}`,\n      value: id,\n    }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionStatsFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Show Glyphs\"\n        value={searchParams.get('showGlyphs') === 'true'}\n        onChange={(v) => addQueryParam('showGlyphs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\nimport { deepCleanObject, getItemAttributePriorityResponse, sortJsonKeys } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n  ItemAttributionStatsFilters,\n} from './ItemAttributionFiltersSections';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload, attributes, isSaving, attributesToUpdate } =\n    useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(attributesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(prepareItemsAttributesFileForDownload(), attributes)}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator', 'simulator', 'stats']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n      {view === 'stats' && <ItemAttributionStatsFilters />}\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  itemsAttributes: Dictionary<ItemAtributesValues>,\n  attributes: Dictionary<ItemAttribute>,\n) {\n  const total = Object.keys(attributes).length;\n\n  Object.keys(itemsAttributes).forEach((key) => {\n    const itemAttributeValues = itemsAttributes[key];\n\n    // // TODO: Tempo Rename hol to gra (grab)\n    // const originalHolValue = itemAttributeValues.attributes['hol'];\n    // delete itemAttributeValues.attributes['hol'];\n    // itemAttributeValues.attributes['gra'] = originalHolValue;\n\n    // // TODO: TEMP Rename sol to har, and base values in soft\n    // const originalSolValue = itemAttributeValues.attributes['sol'];\n    // delete itemAttributeValues.attributes['sol'];\n    // const softValue = itemAttributeValues.attributes['sof'];\n    // if (softValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (originalSolValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n\n    // // TODO: TEMP Auto-add cold if warm\n    // const warmValue = itemAttributeValues.attributes['war'];\n    // if (warmValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.OPPOSITE) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.UNCLEAR;\n    // }\n\n    // const bigValue = itemAttributeValues.attributes['big'];\n    // if (bigValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['sma'] = ATTRIBUTE_VALUE.UNRELATED;\n    // }\n    // if (bigValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['sma'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n\n    // Check completion\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n\n    if (completed === total) {\n      // Add completion\n      itemAttributeValues.complete = true;\n\n      // Add score\n      let unclearCount = 0;\n      itemAttributeValues.score = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n        if (v <= 0) {\n          if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n            unclearCount += 1;\n          }\n          if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n            acc += v / 2;\n          }\n          return acc;\n        }\n\n        return acc + v;\n      }, 0);\n\n      // Add reliability\n      itemAttributeValues.reliability = Math.floor(((completed - unclearCount) / total) * 100);\n\n      // Add key with only relevant attributes\n      itemAttributeValues.key = getItemAttributePriorityResponse(itemAttributeValues, attributes, true).join(\n        '',\n      );\n    } else {\n      itemAttributeValues.complete = undefined;\n      itemAttributeValues.score = undefined;\n      itemAttributeValues.reliability = undefined;\n      itemAttributeValues.key = undefined;\n    }\n  });\n\n  return sortJsonKeys(deepCleanObject(itemsAttributes));\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport type { ButtonProps } from 'antd/lib/button';\nimport { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.scrollY > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffectOnce(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  });\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Tooltip } from 'antd';\nimport type { ReactNode } from 'react';\n\ntype PopoverInfoProps = {\n  title: ReactNode;\n  icon?: ReactNode;\n};\n\nexport function PopoverInfo({ title, icon }: PopoverInfoProps) {\n  return <Tooltip title={title}>{icon ?? <QuestionCircleOutlined />}</Tooltip>;\n}\n","import { Radio, type RadioGroupProps, Tooltip } from 'antd';\nimport type { ItemAttribute } from 'types';\n\nimport { CheckCircleFilled, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { PopoverInfo } from 'components/Common/PopoverInfo';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n  size?: RadioGroupProps['size'];\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n  size,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {attribute.name.en} <PopoverInfo title={attribute.description.en} />\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from 'utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAtributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated,\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated],\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Tooltip, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAtributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n          acc += v / 2;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Tooltip title=\"The percentage of conclusive attributes (not unclear)\">\n          <Stat label=\"Reliability\">{relevancy}%</Stat>\n        </Tooltip>\n      </Flex>\n    </div>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id],\n  );\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute, index) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group className=\"my-4\">\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Title\">\n        <Button>Go To</Button>\n      </Popover>\n      <Button onClick={() => jumpToItem('incomplete')}>Next Incomplete</Button>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return <ItemsTypeahead isPending={false} onFinish={(itemId) => jumpToItem('goTo', itemId)} />;\n}\n","import { Flex, Table, type TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { type ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport type { Item } from 'types';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributeSprite } from './ItemAttributeDescription';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <ItemGoTo item={item} />\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : '0'}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} pagination={{ showQuickJumper: true }} />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type { Item, ItemAtributesValues } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse } from 'utils';\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAtributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc'],\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { Divider, Drawer, Flex, Space, Switch } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\n\nexport function ItemAttributionDrawer() {\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('drawer');\n  const [showOnlyUnset, setUnsetOnly] = useState(false);\n\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem } =\n    useItemsAttributeValuesContext();\n\n  const onClose = () => {\n    removeQueryParam('drawer');\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: function\n  useEffect(() => {\n    if (queryParamsItemId) {\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id],\n  );\n\n  return (\n    <Drawer open={!!queryParamsItemId} title={`Edit: ${activeItem.name.en}`} onClose={onClose} width=\"640px\">\n      <Flex gap={6}>\n        <Flex vertical gap={6}>\n          <ItemSprite item={activeItem} width={50} />\n          <ItemId item={activeItem} />\n        </Flex>\n        <Flex vertical gap={6}>\n          <ItemName item={activeItem} language=\"en\" />\n          <ItemName item={activeItem} language=\"pt\" />\n        </Flex>\n        <Flex vertical gap={6}>\n          <Switch\n            checked={showOnlyUnset}\n            onChange={setUnsetOnly}\n            checkedChildren=\"Unset\"\n            unCheckedChildren=\"All\"\n          />\n        </Flex>\n      </Flex>\n\n      <Divider className=\"my-1\" />\n\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n        {filteredAttributesList.map((attribute) => (\n          <AttributionValueButtons\n            size=\"small\"\n            key={attribute.id}\n            attribute={attribute}\n            value={itemAttributeValues.attributes[attribute.id]}\n            onChange={onAttributeChange}\n          />\n        ))}\n      </Space>\n    </Drawer>\n  );\n}\n","import { Button, Card, Empty, Flex, Pagination, Popconfirm, Select, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributionDrawer } from './ItemAttributionDrawer';\n\nconst getStatSentence = (stats: Record<string, number>, scope: string | null) => {\n  if (scope === 'unset' || !scope) {\n    return `${100 - stats.percent}% done, ${stats.group} left`;\n  }\n\n  return `${stats.percent}%  - ${stats.group} items`;\n};\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n\n  const { attribute, pageIds, updateAttributeValue, updatePageItemsAsUnrelated, pagination, stats, sorting } =\n    useItemGrouping();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const sortingComponent = (\n    <Flex align=\"center\">\n      <Typography.Text className=\"mr-2\">Sort by</Typography.Text>\n      <Select style={{ width: 120 }} value={sorting.sortBy} onChange={(v) => sorting.setSortBy(v)}>\n        <Select.Option value={null}>Last Updated</Select.Option>\n        <Select.Option value=\"prop::id\">Id</Select.Option>\n        {attributesList.map((a) => (\n          <Select.Option key={a.id} value={`attribute::${a.id}`}>\n            {a.name.en}\n          </Select.Option>\n        ))}\n      </Select>\n    </Flex>\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({getStatSentence(stats, searchParams.get('scope'))}) -{' '}\n          {attribute.description.en}\n        </Typography.Text>\n      }\n      extra={\n        <Flex align=\"center\">\n          {sortingComponent}\n\n          {paginationComponent}\n        </Flex>\n      }\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.length === 0 && (\n        <Empty\n          description=\"No items found in this scope for this attribute.\"\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n        />\n      )}\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <Button.Group>\n                  <ItemGoTo item={item} />\n                  <Button size=\"small\" shape=\"round\" onClick={() => addQueryParam('drawer', item.id)}>\n                    Drawer\n                  </Button>\n                </Button.Group>\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute}\n                value={itemAttributes.attributes[attribute.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n      <ItemAttributionDrawer />\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const [sortBy, setSortBy] = useState<string | null>(null);\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    const [sortType, sortValue] = (sortBy ?? '::').split('::');\n\n    return orderBy(\n      filteredItemIds,\n      [\n        (id) => (sortType === 'attribute' ? getItemAttributeValues(id)?.attributes?.[sortValue] : true),\n        (id) => (sortType === 'prop' ? Number(id) : true),\n        (id) => getItemAttributeValues(id)?.updatedAt,\n        (id) => Number(id),\n      ],\n      [sortOrder, 'asc', 'desc', 'asc'],\n    );\n  }, [attributeKey, scope, sortBy, sortOrder]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]);\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      }),\n    );\n  };\n\n  return {\n    group,\n    stats: {\n      total: availableItemIds.length,\n      group: group.length,\n      percent: Math.round((group.length / availableItemIds.length) * 100),\n    },\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    sorting: {\n      sortBy,\n      setSortBy,\n      sortOrder,\n      setSortOrder,\n    },\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  const getSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    return {\n      selectedAttribute,\n      selected,\n    };\n  };\n\n  // Create sample\n  const onGetSample = () => {\n    let tempSample = getSample();\n    let attempts = 0;\n    while (tempSample.selected.length === 0 && attempts < 30) {\n      tempSample = getSample();\n      attempts++;\n    }\n\n    setAttribute(tempSample.selectedAttribute);\n    setSampleIds(tempSample.selected);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: getItemAttributeValues should not be a dependency\n  const itemsLeftForAttribute = useMemo(() => {\n    if (!attribute) return 0;\n\n    return availableItemIds.filter((id) => !getItemAttributeValues(id).attributes[attribute?.id]).length;\n  }, [attribute, availableItemIds]);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    itemsLeftForAttribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { Button, Card, Divider, Empty, Flex, Modal, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\nimport { useToggle } from 'react-use';\nimport { wait } from 'utils';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue, itemsLeftForAttribute } = useItemSampler();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n\n        <Divider />\n\n        <SingleSampleModalFlow />\n      </Card>\n    );\n  }\n\n  const sample = sampleIds.map((itemId) => ({\n    itemAttributes: getItemAttributeValues(itemId),\n    item: getItem(itemId),\n  }));\n\n  const unsetItems = sample.filter(\n    ({ itemAttributes }) => attribute?.id && !itemAttributes.attributes[attribute.id],\n  );\n\n  const onMarkRestAsUnrelated = () => {\n    unsetItems.forEach(({ item }) => {\n      if (attribute?.id) {\n        updateAttributeValue(item.id, attribute.id, -3);\n      }\n    });\n  };\n\n  return (\n    <>\n      <SingleSampleModalFlow />\n      <Card\n        className=\"my-4\"\n        title={\n          <Typography.Text>\n            {attribute?.name.en} - {attribute?.description.en} ({itemsLeftForAttribute} items left)\n          </Typography.Text>\n        }\n        actions={[\n          <Button key=\"1\" onClick={onMarkRestAsUnrelated} danger disabled={unsetItems.length === 0}>\n            Mark rest as unrelated\n          </Button>,\n          <Button key=\"2\" type=\"primary\" ghost onClick={onGetSample}>\n            Get New Sample\n          </Button>,\n        ]}\n        extra={\n          <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n            Get New Sample\n          </Button>\n        }\n      >\n        <Flex vertical gap={6}>\n          {sample.length === 0 && (\n            <Empty\n              description=\"No unset items found for this attribute.\"\n              image={Empty.PRESENTED_IMAGE_SIMPLE}\n            />\n          )}\n          {sample.map(({ item, itemAttributes }) => {\n            return (\n              <Fragment key={`${item.id}-${itemAttributes.updatedAt}`}>\n                <Flex gap={6}>\n                  <ItemSprite item={item} width={75} />\n                  <Flex vertical gap={6}>\n                    <Flex gap={6}>\n                      <ItemId item={item} />\n                      <ItemGoTo item={item} />\n                    </Flex>\n                    <ItemName item={item} language=\"en\" />\n                    <ItemName item={item} language=\"pt\" />\n                  </Flex>\n                  {!!attribute && (\n                    <AttributionValueButtons\n                      attribute={attribute}\n                      value={itemAttributes.attributes[attribute.id]}\n                      onChange={(attributeId: string, value: number) =>\n                        updateAttributeValue(item.id, attributeId, value)\n                      }\n                    />\n                  )}\n                </Flex>\n                <Divider className=\"my-1\" />\n              </Fragment>\n            );\n          })}\n        </Flex>\n      </Card>\n    </>\n  );\n}\n\nexport function SingleSampleModalFlow() {\n  const [open, toggleOpen] = useToggle(false);\n  const { addQueryParam, removeQueryParam } = useItemQueryParams();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue } = useItemSampler();\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n\n  const handleOpenSingleSampler = () => {\n    addQueryParam('size', '1');\n    toggleOpen(true);\n    onGetSample();\n  };\n\n  const onClose = () => {\n    removeQueryParam('size');\n    toggleOpen(false);\n  };\n\n  const itemId = sampleIds[0];\n  const item = getItem(itemId);\n  const itemAttributes = getItemAttributeValues(itemId);\n\n  return (\n    <Flex className=\"mt-4\">\n      <Button type=\"primary\" onClick={handleOpenSingleSampler}>\n        Single Sampler\n      </Button>\n      <Modal\n        title={\n          <Typography>\n            Single Sampler: <strong>{attribute?.name.en}</strong>\n          </Typography>\n        }\n        open={open}\n        width=\"100vw\"\n        maskClosable={false}\n        onOk={onClose}\n        onClose={onClose}\n        onCancel={onClose}\n        cancelButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        {itemId && item && itemAttributes && attribute && (\n          <Flex gap={6} className=\"my-10\" wrap=\"wrap\" key={itemId}>\n            <ItemSprite item={item} width={150} />\n            <Flex vertical gap={6}>\n              <Flex gap={6}>\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n              </Flex>\n              <ItemName item={item} language=\"en\" />\n              <ItemName item={item} language=\"pt\" />\n            </Flex>\n            {!!attribute && (\n              <AttributionValueButtons\n                size=\"large\"\n                attribute={attribute}\n                value={itemAttributes.attributes[attribute.id]}\n                onChange={async (attributeId: string, value: number) => {\n                  updateAttributeValue(item.id, attributeId, value);\n                  await wait(500);\n                  onGetSample();\n                }}\n              />\n            )}\n          </Flex>\n        )}\n        <Button onClick={onGetSample}>Another Sample</Button>\n      </Modal>\n    </Flex>\n  );\n}\n","import { Alert, Button, Divider, Flex, Space, Typography } from 'antd';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { keys, sample, sampleSize, shuffle, values } from 'lodash';\nimport { useState } from 'react';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nexport function DailyAliemSimulator() {\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n\n  const [simulation, setSimulation] = useState<DailyAlienGame | null>(null);\n\n  // Choose 3 random attributes that are not limited\n  // Get examples for each attribute of items that have value 10 in that attribute but are -3 in the other two\n\n  const onSimulate = () => {\n    setSimulation(generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data));\n  };\n\n  const onSimulateMany = () => {\n    const simulations: Dictionary<DailyAlienGame> = {};\n    let tries = 0;\n    while (tries < 300 || keys(simulations).length === 15) {\n      const simulation = generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data);\n      if (simulation.valid && !simulations[simulation.setId]) {\n        simulations[simulation.setId] = simulation;\n      }\n      if (keys(simulations).length >= 15) {\n        break;\n      }\n      tries += 1;\n    }\n    console.log('TRIES', tries);\n    console.log(Object.values(simulations).map((e, i) => ({ ...e, number: e.number - i })));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Daily Simulator</Typography.Title>\n\n      <Typography.Paragraph>Generates a daily game for Alien Communication</Typography.Paragraph>\n\n      <Space>\n        <Button type=\"primary\" onClick={onSimulate}>\n          Generate\n        </Button>\n        <Button onClick={onSimulateMany}>Generate List</Button>\n      </Space>\n\n      <div>\n        {Boolean(simulation) && (\n          <Space direction=\"vertical\" key={simulation?.setId}>\n            <Typography.Title level={5}>{simulation?.setId}</Typography.Title>\n            {!simulation?.valid && <Alert type=\"error\" message=\"Invalid game\" />}\n            <Space direction=\"vertical\">\n              {simulation?.attributes.map((attr) => (\n                <Flex key={attr.id} gap={8}>\n                  <AlienSign id={attr.spriteId} width={50} />\n                  {attr.itemsIds.map((itemId) => (\n                    <Item key={itemId} id={itemId || '0'} width={50} />\n                  ))}\n                </Flex>\n              ))}\n            </Space>\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.requests.map((req) => (\n                <Flex key={req.itemId} vertical>\n                  <AlienSign id={req.spritesIds[2]} width={50} />\n                  <AlienSign id={req.spritesIds[1]} width={50} />\n                  <AlienSign id={req.spritesIds[0]} width={50} />\n                </Flex>\n              ))}\n            </Space>\n\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.itemsIds.map((itemId) => (\n                <Item key={itemId} id={itemId || '0'} width={50} />\n              ))}\n            </Space>\n          </Space>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype DailyAlienGameAttribute = {\n  id: string;\n  name: string;\n  description: string;\n  spriteId: string;\n  itemsIds: string[];\n};\n\ntype DailyAlienGameRequest = {\n  spritesIds: string[];\n  itemId: string;\n};\n\ntype DailyAlienGame = {\n  id: string;\n  setId: string;\n  number: number;\n  type: 'comunicação-alienígena';\n  attributes: DailyAlienGameAttribute[];\n  requests: DailyAlienGameRequest[];\n  solution: string;\n  itemsIds: string[];\n  valid: boolean;\n};\n\nconst generateDailyAlienGame = (\n  attributes: Dictionary<ItemAttribute>,\n  itemsAttributesValues: Dictionary<ItemAtributesValues>,\n): DailyAlienGame => {\n  const allAttributes = values(attributes).filter((attr) => !attr.limited || attr.id === 'sol');\n  const allItems = shuffle(values(itemsAttributesValues).filter((i) => i.complete));\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(allAttributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  allItems.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyAlienGameAttribute[] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyAlienGameRequest[] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB) ?? '',\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC) ?? '',\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC) ?? '',\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC) ?? '',\n    });\n  }\n  const simpleRequests: DailyAlienGameRequest[] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  console.log({\n    attributeA,\n    attributeB,\n    attributeC,\n    attributeAB,\n    attributeAC,\n    attributeBC,\n    attributeABC,\n  });\n\n  console.log('COMPLEX REQUEST SIZE', complexRequests.length);\n  console.log('SIMPLE REQUEST SIZE', simpleRequests.length);\n  let requests = sampleSize(complexRequests, 4);\n  console.log('REQUEST SIZE', requests.length);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.warn('Not enough requests');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyAlienGame = {\n    id: '2024-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([...requestItemsIds, none[0], none[1], none[2], none[3]]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    // TODO: verify if it should be 6\n    result.itemsIds.length > 5,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  console.log(result);\n\n  return result;\n};\n","import {\n  CheckSquareOutlined,\n  CloseSquareOutlined,\n  LineChartOutlined,\n  PlusSquareOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { App, Button, Flex, InputNumber, Space, Typography } from 'antd';\nimport clsx from 'clsx';\nimport {\n  FilterCheckBox,\n  FilterNumber,\n  FilterSelect,\n  FilterSwitch,\n  TransparentButton,\n} from 'components/Common';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keys, sampleSize, shuffle, sortBy } from 'lodash';\nimport { useState } from 'react';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { DailyAliemSimulator } from './DailyAlienSimulator';\n\nconst ROMAN_NUMERALS = ['', 'I', 'II', 'III', 'IV', 'V'];\n\ntype AttributeSummary = {\n  relatedCount: number;\n  deterministicCount: number;\n  unclearCount: number;\n  oppositeCount: number;\n} & ItemAttribute;\n\nexport function ItemSimulation() {\n  const { attributes, availableItemIds, getItemAttributeValues, getItem } = useItemsAttributeValuesContext();\n  const { message } = App.useApp();\n\n  const [gridSize, setGridSize] = useState<16 | 25>(25);\n  const [reliabilityThreshold, setReliabilityThreshold] = useState<number>(90);\n  const [nsfw, setNsfw] = useState<boolean>(false);\n  const [selectedItemsIds, setSelectedItemsIds] = useState<string[]>([]);\n  const [selectedAttributes, setSelectedAttributes] = useState<AttributeSummary[]>([]);\n  const [highlightedAttributeKey, setHighlightedAttributeKey] = useState<string | null>(null);\n  const [displays, setDisplays] = useState<BooleanDictionary>({\n    id: true,\n    nameEn: true,\n    namePt: true,\n    reliability: true,\n  });\n\n  const onGetSample = () => {\n    const keysDict: Record<string, string> = {};\n\n    const shuffledIds = shuffle(availableItemIds);\n\n    while (Object.values(keysDict).length < gridSize) {\n      const itemId = shuffledIds.pop();\n      if (!itemId) break;\n\n      const itemAttributeValues = getItemAttributeValues(itemId);\n\n      if (!itemAttributeValues) continue;\n\n      if (\n        !itemAttributeValues.complete ||\n        !itemAttributeValues.reliability ||\n        itemAttributeValues.reliability < reliabilityThreshold\n      )\n        continue;\n\n      if (!nsfw && getItem(itemId).nsfw) continue;\n\n      if (itemAttributeValues.key && !keysDict[itemAttributeValues.key]) {\n        keysDict[itemAttributeValues.key] = itemId;\n      } else {\n        console.log('Item has identical key to another item. Skipping.', getItem(itemId).name.en);\n      }\n    }\n    const result = Object.values(keysDict);\n    if (result.length < gridSize) {\n      message.error(`Could not generate sample. Got only ${result.length} items`);\n    }\n\n    setSelectedItemsIds(sortBy(result, (itemId) => Number(itemId)));\n\n    // Get the most common attributes\n    const attributesResult = getHighestAttributeKeys(\n      result.map((itemId) => getItemAttributeValues(itemId)),\n      25,\n      attributes,\n    );\n\n    // If less than 25 attributes are found, add more by priority\n    if (attributesResult.length < 25) {\n      const remainingAttributes = keys(attributes).filter((key) => !attributesResult.includes(key));\n      const remainingAttributesByPriority = sortBy(remainingAttributes, (key) => attributes[key].priority);\n      const toBeAdded = remainingAttributesByPriority.slice(0, 25 - attributesResult.length);\n      console.log('Adding more attributes by priority', toBeAdded);\n      attributesResult.push(...toBeAdded);\n    }\n\n    const dicts = attributesResult.reduce(\n      (\n        acc: {\n          relatedCount: NumberDictionary;\n          deterministicCount: NumberDictionary;\n          unclearCount: NumberDictionary;\n          oppositeCount: NumberDictionary;\n        },\n        key,\n      ) => {\n        result.forEach((itemId) => {\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          if (!itemAttributeValues) return;\n          switch (itemAttributeValues.attributes[key]) {\n            case ATTRIBUTE_VALUE.RELATED:\n              acc.relatedCount[key] = (acc.relatedCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.DETERMINISTIC:\n              acc.deterministicCount[key] = (acc.deterministicCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.UNCLEAR:\n              acc.unclearCount[key] = (acc.unclearCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.OPPOSITE:\n              acc.oppositeCount[key] = (acc.oppositeCount[key] || 0) + 1;\n              break;\n          }\n        });\n\n        return acc;\n      },\n      { relatedCount: {}, deterministicCount: {}, unclearCount: {}, oppositeCount: {} },\n    );\n\n    setSelectedAttributes(\n      attributesResult.sort().map((key) => ({\n        ...attributes[key],\n        relatedCount: dicts.relatedCount[key],\n        deterministicCount: dicts.deterministicCount[key],\n        unclearCount: dicts.unclearCount[key],\n        oppositeCount: dicts.oppositeCount[key],\n      })),\n    );\n  };\n\n  const onUpdateDisplays = (key: string) => {\n    setDisplays((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Simulator</Typography.Title>\n\n      <Typography.Paragraph>\n        Generates a board with items different enough to get Deterministic values in all selected attributes.\n      </Typography.Paragraph>\n\n      <Flex wrap gap={12}>\n        <FilterSelect\n          label=\"Grid Size\"\n          value={gridSize}\n          onChange={(value) => setGridSize(value)}\n          options={[16, 25]}\n        />\n        <FilterNumber\n          label=\"Reliability Threshold\"\n          value={reliabilityThreshold}\n          onChange={(value) => setReliabilityThreshold(value)}\n          step={5}\n          min={10}\n          max={100}\n        />\n        <FilterSwitch label=\"NSFW\" value={nsfw} onChange={setNsfw} />\n        <Button onClick={onGetSample} type=\"primary\">\n          Get Sample Board\n        </Button>\n      </Flex>\n      <Flex wrap gap={12}>\n        <FilterCheckBox label=\"Show Id\" value={!!displays.id} onChange={() => onUpdateDisplays('id')} />\n        <FilterCheckBox\n          label=\"Show Name (EN)\"\n          value={!!displays.nameEn}\n          onChange={() => onUpdateDisplays('nameEn')}\n        />\n        <FilterCheckBox\n          label=\"Show Name (PT)\"\n          value={!!displays.namePt}\n          onChange={() => onUpdateDisplays('namePt')}\n        />\n        <FilterCheckBox\n          label=\"Show Reliability\"\n          value={!!displays.reliability}\n          onChange={() => onUpdateDisplays('reliability')}\n        />\n      </Flex>\n\n      <div className=\"simulator-grid\" style={{ gridTemplateColumns: `repeat(${Math.sqrt(gridSize)}, 1fr)` }}>\n        {selectedItemsIds.map((itemId) => {\n          const item = getItem(itemId);\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          return (\n            <Space\n              key={itemId}\n              direction=\"vertical\"\n              className={clsx(\n                'simulator-grid__entry',\n                highlightedAttributeKey &&\n                  itemAttributeValues.attributes[highlightedAttributeKey] > 0 &&\n                  'simulator-grid__entry--highlighted',\n              )}\n              align=\"center\"\n            >\n              <Space>\n                <Flex vertical>\n                  {displays.id && <ItemId item={item} />}\n\n                  {displays.reliability && (\n                    <span>\n                      <InputNumber\n                        prefix={<LineChartOutlined />}\n                        placeholder=\"Reliability\"\n                        variant=\"borderless\"\n                        size=\"small\"\n                        value={itemAttributeValues.reliability}\n                        readOnly\n                        style={{ width: '8ch' }}\n                        formatter={(value) => `${value}%`}\n                      />\n                    </span>\n                  )}\n\n                  {displays.id && <ItemGoTo item={item} />}\n                </Flex>\n\n                <ItemSprite item={item} width={50} />\n              </Space>\n\n              {displays.nameEn && <ItemName item={item} language=\"en\" />}\n              {displays.namePt && <ItemName item={item} language=\"pt\" />}\n            </Space>\n          );\n        })}\n      </div>\n\n      <div className=\"simulator-grid my-4\">\n        {selectedAttributes.map((attributeSummary) => (\n          <TransparentButton\n            key={attributeSummary.id}\n            className={clsx(\n              'simulator-grid__entry',\n              'simulator-grid__button',\n              highlightedAttributeKey === attributeSummary.id && 'simulator-grid__entry--highlighted',\n            )}\n            onClick={() => setHighlightedAttributeKey(attributeSummary.id)}\n          >\n            {attributeSummary.name.en} {ROMAN_NUMERALS[attributeSummary.level]}\n            <Flex gap={6} justify=\"center\" className=\"my-1\">\n              <span>\n                <CheckSquareOutlined\n                  style={{ color: attributeSummary.deterministicCount ? 'dodgerblue' : undefined }}\n                />{' '}\n                {attributeSummary.deterministicCount ?? 0}\n              </span>\n              <span>\n                <PlusSquareOutlined style={{ color: attributeSummary.relatedCount ? 'green' : undefined }} />{' '}\n                {attributeSummary.relatedCount ?? 0}\n              </span>\n              <span>\n                <CloseSquareOutlined style={{ color: attributeSummary.oppositeCount ? 'red' : undefined }} />{' '}\n                {attributeSummary.oppositeCount ?? 0}\n              </span>\n              <span>\n                <QuestionCircleOutlined\n                  style={{ color: attributeSummary.unclearCount ? 'gold' : undefined }}\n                />{' '}\n                {attributeSummary.unclearCount ?? 0}\n              </span>\n            </Flex>\n          </TransparentButton>\n        ))}\n      </div>\n\n      <DailyAliemSimulator />\n    </div>\n  );\n}\n\nfunction getHighestAttributeKeys(\n  selectedItemsAttributesValues: ItemAtributesValues[],\n  quantity: number,\n  attributes: Dictionary<ItemAttribute>,\n): string[] {\n  // 1. Count the number of times each attribute is present. Make sure to gather any deterministic value\n  const attributesCounts: Record<string, number> = {};\n  const deterministicKeysDict: BooleanDictionary = {};\n  selectedItemsAttributesValues.forEach((itemAttributeValues) => {\n    if (!itemAttributeValues) return;\n    Object.keys(itemAttributeValues.attributes).forEach((key) => {\n      if (itemAttributeValues.attributes[key] > 0) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        deterministicKeysDict[key] = true;\n        attributesCounts[key] = (attributesCounts[key] || 0) + 2;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.OPPOSITE) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  const levelCount: NumberDictionary = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n  };\n\n  /**\n   * Filters the given keys array based on the count of attribute levels and guards against having more than one level 4 attribute.\n   */\n  function filterCountLevelsAndGuardLevel4(keys: string[]) {\n    return keys.filter((key) => {\n      levelCount[attributes[key].level]++;\n\n      if (levelCount[4] > 1) {\n        console.log('Discarding level 4 attribute', key);\n        return false;\n      }\n      return true;\n    });\n  }\n\n  const deterministicKeys = filterCountLevelsAndGuardLevel4(Object.keys(deterministicKeysDict));\n  const nondeterministicKeys = filterCountLevelsAndGuardLevel4(\n    keys(attributesCounts).filter((key) => !deterministicKeys.includes(key)),\n  );\n  console.log({ levelCount });\n\n  // 1.b If deterministic keys are exactly the quantity, return them\n  if (quantity === deterministicKeys.length) {\n    console.log('All keys are deterministic');\n    return deterministicKeys;\n  }\n\n  // 2. Get all keys and sort them by value in descending order, but have only one level 5 attribute\n  console.log(attributesCounts);\n  // let hasLevel5Attribute = false;\n  // const sortedKeys = keys(attributesCounts)\n  //   .sort((a, b) => {\n  //     if (attributesCounts[a] !== attributesCounts[b]) {\n  //       return attributesCounts[b] - attributesCounts[a];\n  //     }\n\n  //     return attributes[a].priority - attributes[b].priority;\n  //   })\n  //   .filter((key) => {\n  //     if (attributes[key].level !== 4) return true;\n\n  //     if (!hasLevel5Attribute) {\n  //       console.log('Keeping level 4 attribute', key, attributesCounts[key]);\n  //       hasLevel5Attribute = true;\n  //       return true;\n  //     }\n  //     console.log('Discarding level 4 attribute', key, attributesCounts[key]);\n\n  //     return false;\n  //   });\n\n  // console.log(sortedKeys);\n\n  // 2.b. Handle edge cases: empty object or quantity exceeding keys\n  if (deterministicKeys.length === 0) {\n    return [];\n  }\n\n  const deterministicTiedGroups = deterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  const sortedDeterministicTiedGroupsKeys = keys(deterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a),\n  );\n  console.log({ sortedDeterministicTiedGroupsKeys });\n\n  const nondeterministicTiedGroups = nondeterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  console.log(nondeterministicTiedGroups);\n  const sortedNondeterministicTiedGroupsKeys = keys(nondeterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a),\n  );\n\n  const result: string[] = [];\n\n  for (const group of sortedDeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(deterministicTiedGroups[group], quantity - result.length));\n  }\n\n  for (const group of sortedNondeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(nondeterministicTiedGroups[group], quantity - result.length));\n  }\n\n  return result;\n}\n","import { Button, Flex, Progress, Rate, Space, Table, type TableProps, Tabs, Tag, Typography } from 'antd';\nimport type { TabsProps } from 'antd/lib';\nimport { PopoverInfo } from 'components/Common/PopoverInfo';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\n\nexport function ItemStats() {\n  // console.log(attributesList);\n  // console.log(attributes);\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'All Attributes',\n      children: <AttributesStatsTable type=\"all\" />,\n    },\n    {\n      key: '2',\n      label: 'Default Attributes',\n      children: <AttributesStatsTable type=\"default\" />,\n    },\n    {\n      key: '3',\n      label: 'Custom Attributes',\n      children: <AttributesStatsTable type=\"custom\" />,\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Stats</Typography.Title>\n\n      <Tabs defaultActiveKey=\"1\" items={items} />\n    </div>\n  );\n}\n\nconst calculateAttributeStats = (attribute: ItemAttribute, itemsAttributes: ItemAtributesValues[]) => {\n  let completionCount = 0;\n  let tensCount = 0;\n  let fivesCount = 0;\n  let zerosCount = 0;\n  let negativeOnesCount = 0;\n  let negativeThreesCount = 0;\n  let negativeTensCount = 0;\n  let positiveCount = 0;\n\n  itemsAttributes.forEach(({ attributes }) => {\n    if (attributes[attribute.id]) {\n      completionCount++;\n\n      const value = attributes[attribute.id];\n      if (value === 10) {\n        tensCount++;\n      } else if (value === 5) {\n        fivesCount++;\n      } else if (value === 0 || !value) {\n        zerosCount++;\n      } else if (value === -1) {\n        negativeOnesCount++;\n      } else if (value === -3) {\n        negativeThreesCount++;\n      } else if (value === -10) {\n        negativeTensCount++;\n      }\n\n      if (value > 0) {\n        positiveCount++;\n      }\n    }\n  });\n\n  const total = itemsAttributes.length;\n  const completionPercentage = (completionCount / total) * 100;\n  const tensPercentage = (tensCount / total) * 100;\n  const fivesPercentage = (fivesCount / total) * 100;\n  const zerosPercentage = (zerosCount / total) * 100;\n  const negativeOnesPercentage = (negativeOnesCount / total) * 100;\n  const negativeThreesPercentage = (negativeThreesCount / total) * 100;\n  const negativeTensPercentage = (negativeTensCount / total) * 100;\n  const positivePercentage = (positiveCount / total) * 100;\n\n  return {\n    completionPercentage: completionPercentage.toFixed(1),\n    tensPercentage: tensPercentage.toFixed(1),\n    fivesPercentage: fivesPercentage.toFixed(1),\n    zerosPercentage: zerosPercentage.toFixed(1),\n    negativeOnesPercentage: negativeOnesPercentage.toFixed(1),\n    negativeThreesPercentage: negativeThreesPercentage.toFixed(1),\n    negativeTensPercentage: negativeTensPercentage.toFixed(1),\n    positivePercentage: positivePercentage.toFixed(1),\n  };\n};\n\ntype AttributesStatsTableProps = {\n  type: 'all' | 'default' | 'custom';\n};\n\nfunction AttributesStatsTable({ type }: AttributesStatsTableProps) {\n  const { availableItemIds, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n  const navigate = useNavigate();\n  const { is } = useQueryParams();\n\n  const attributesPool = useMemo(() => {\n    if (type === 'default') {\n      return attributesList.filter((attribute) => attribute.default);\n    }\n\n    if (type === 'custom') {\n      return attributesList.filter((attribute) => !attribute.default);\n    }\n\n    return attributesList;\n  }, [attributesList, type]);\n\n  const rows = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n\n    return attributesPool.map((attribute) => {\n      return {\n        ...attribute,\n        ...calculateAttributeStats(attribute, itemsAttributes),\n      };\n    });\n  }, [attributesPool, availableItemIds, getItemAttributeValues]);\n\n  const columns: TableProps['columns'] = [\n    {\n      title: 'Attribute',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, record) => (\n        <Flex align=\"center\" gap={8}>\n          {is('showGlyphs') && <AlienSign id={record.spriteId} width={30} />}\n          {name.en}\n          {record.default ? <Tag className=\"ml-1\">default</Tag> : ''}\n          {record.limited ? <Tag className=\"ml-1\">limited</Tag> : ''}\n          <PopoverInfo title={record.description.en} />\n        </Flex>\n      ),\n      sorter: (a, b) => a.name.en.localeCompare(b.name.en),\n    },\n\n    {\n      title: 'Priority',\n      dataIndex: 'priority',\n      key: 'priority',\n      sorter: (a, b) => a.priority - b.priority,\n    },\n\n    {\n      title: 'Positive',\n      dataIndex: 'positivePercentage',\n      key: 'positivePercentage',\n      render: (positivePercentage: string) => `${positivePercentage}%`,\n      sorter: (a, b) => Number.parseFloat(a.positivePercentage) - Number.parseFloat(b.positivePercentage),\n    },\n    {\n      title: '10',\n      dataIndex: 'tensPercentage',\n      key: 'tensPercentage',\n      render: (tensPercentage: string, record) => {\n        if (record.limited) {\n          return '-';\n        }\n\n        return `${tensPercentage}%`;\n      },\n      sorter: (a, b) => Number.parseFloat(a.tensPercentage) - Number.parseFloat(b.tensPercentage),\n    },\n    {\n      title: '5',\n      dataIndex: 'fivesPercentage',\n      key: 'fivesPercentage',\n      render: (fivesPercentage: string) => `${fivesPercentage}%`,\n      sorter: (a, b) => Number.parseFloat(a.fivesPercentage) - Number.parseFloat(b.fivesPercentage),\n    },\n    {\n      title: '-1',\n      dataIndex: 'negativeOnesPercentage',\n      key: 'negativeOnesPercentage',\n      render: (negativeOnesPercentage: string) => `${negativeOnesPercentage}%`,\n      sorter: (a, b) =>\n        Number.parseFloat(a.negativeOnesPercentage) - Number.parseFloat(b.negativeOnesPercentage),\n    },\n    {\n      title: '-3',\n      dataIndex: 'negativeThreesPercentage',\n      key: 'negativeThreesPercentage',\n      render: (negativeThreesPercentage: string) => `${negativeThreesPercentage}%`,\n      sorter: (a, b) =>\n        Number.parseFloat(a.negativeThreesPercentage) - Number.parseFloat(b.negativeThreesPercentage),\n    },\n    {\n      title: '-10',\n      dataIndex: 'negativeTensPercentage',\n      key: 'negativeTensPercentage',\n      render: (negativeTensPercentage: string) => `${negativeTensPercentage}%`,\n      sorter: (a, b) =>\n        Number.parseFloat(a.negativeTensPercentage) - Number.parseFloat(b.negativeTensPercentage),\n    },\n    {\n      title: 'Completion',\n      dataIndex: 'completionPercentage',\n      key: 'completionPercentage',\n      render: (completionPercentage: string) => (\n        <Progress percent={Number.parseFloat(completionPercentage)} size=\"small\" />\n      ),\n      sorter: (a, b) => Number.parseFloat(a.completionPercentage) - Number.parseFloat(b.completionPercentage),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      render: (level) => <Rate count={4} value={level} disabled />,\n      sorter: (a, b) => a.level - b.level,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record) => (\n        <Space>\n          <Button.Group>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=grouping&attribute=${record.id}&page=1`)}\n            >\n              Grouping\n            </Button>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=sampler&attribute=${record.id}&size=6`)}\n            >\n              Sample\n            </Button>\n          </Button.Group>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Typography.Paragraph>Total: {rows.length}</Typography.Paragraph>\n      <Table columns={columns} dataSource={rows} pagination={false} rowKey=\"id\" size=\"small\" />\n    </>\n  );\n}\n","import { Empty, Flex } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { ItemComparatorCard } from './ItemComparatorCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemSimulation } from './ItemSimulation';\nimport { ItemStats } from './ItemStats';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <ItemAttributionNavigation />\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  if (view === 'simulator') {\n    return <ItemSimulation />;\n  }\n\n  if (view === 'stats') {\n    return <ItemStats />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionFilters } from 'components/Items/Attributes/ItemAttributionFilters';\nimport { ItemAttributionPageContent } from 'components/Items/Attributes/ItemAttributionPageContent';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n"],"names":["ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","size","value","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","globalNewItemsAttributesValues","ItemsAttributeValuesContext","createContext","getItem","getNewItem","getItemAttributeValues","getNewItemAttributeValues","isLoading","error","hasResponseData","isDirty","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","isSaving","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributes","attributesToUpdate","ItemsAttributeValuesProvider","children","notification","message","App","queryClient","useQueryClient","tdrItemsQuery","useTDResource","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","useGetFirebaseDoc","select","deserializeFirebaseData","modifiedAttributeValues","setModifiedAttributeValues","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","description","savedItemsAttributeValues","useMemo","data","isEmpty","firebaseData","items","orderBy","Object","keys","filter","decks","includes","Number","info","storedValue","modifiedValue","merge","isPending","mutate","serializeFirebaseData","prev","updatedAt","Date","now","itemsArr","mapKeys","map","useItemsAttribution","itemIndex","setItemIndex","random","length","values","Provider","direction","undefined","index","indexOf","attributeId","sortJsonKeys","reduce","acc","complete","useItemsAttributeValuesContext","useContext","useItemQueryParams","searchParams","get","setView","addQueryParam","key","set","removeQueryParam","delete","Stat","label","ItemAttributionStats","total","completionPercentage","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","forEach","isComplete","toFixed","Math","floor","vertical","strong","ItemAttributionClassifierFilters","block","type","onChange","ItemAttributionSamplerFilters","options","v","String","min","max","step","ItemAttributionGroupingFilters","rest","default","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionStatsFilters","ItemAttributionFilters","gap","SaveButton","onSave","dirt","JSON","stringify","DownloadButton","itemsAttributes","completed","unclearCount","score","ATTRIBUTE_VALUE","reliability","getItemAttributePriorityResponse","join","deepCleanObject","prepareFileForDownload","fileName","disabled","GoToTopButton","props","isVisible","setIsVisible","handleScroll","window","scrollY","useEffectOnce","addEventListener","removeEventListener","scrollTo","top","behavior","icon","VerticalAlignTopOutlined","PopoverInfo","QuestionCircleOutlined","attributeOptions","attributeLimitedOptions","AttributionValueButtons","attribute","onlyButtons","limited","target","optionType","buttonStyle","CheckCircleFilled","ItemAttributeDescription","showUnclear","showUnrelated","filteredResponse","filterMessage","Component","AttributeSprite","AttributeText","wrap","keyVariant","arr","firstElement","lastElement","withText","text","parseAttribute","align","spriteId","clsx","justify","maxWidth","textAlign","wordBreak","toLowerCase","suffix","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","percent","CloseCircleOutlined","ItemAttributionCard","queryParamsItemId","useEffect","showOnlyUnset","filteredAttributesList","offsetTop","ItemAttributionNavigation","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","ItemsTypeahead","onFinish","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemAttributesValues","itemMessage","fullMessage","push","moreThanOne","ids","console","log","keyBy","useItemsComparator","columns","dataIndex","render","sorter","a","b","localeCompare","group","groupA","level","dataSource","pagination","showQuickJumper","ItemAttributionDrawer","setUnsetOnly","open","onClose","checked","checkedChildren","unCheckedChildren","getStatSentence","stats","scope","ItemGroupingCard","pageIds","updateAttributeValue","updatePageItemsAsUnrelated","sorting","attributeKey","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","sortBy","setSortBy","sortOrder","setSortOrder","scopeValue","filteredItemIds","sortType","sortValue","split","slice","start","end","find","round","currentItemAttributeValues","current","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","sortingComponent","unrelateButton","onConfirm","danger","extra","actions","Boolean","image","Empty","itemAttributes","useItemSampler","sampleIds","setSampleIds","setAttribute","getSample","lodashSample","selectedAttribute","sampleSize","selected","shuffle","i","itemsLeftForAttribute","onGetSample","tempSample","attempts","ItemSamplerCard","SingleSampleModalFlow","sample","unsetItems","ghost","Fragment","toggleOpen","useToggle","maskClosable","onOk","onCancel","cancelButtonProps","display","async","wait","DailyAliemSimulator","simulation","setSimulation","generateDailyAlienGame","simulations","tries","valid","setId","e","number","attr","itemsIds","requests","req","spritesIds","itemsAttributesValues","allAttributes","allItems","spriteIDs","makeArray","selectedAttributes","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","POSITIVE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","usedItemsIds","complexRequests","simpleRequests","warn","requestItemsIds","result","sort","solution","every","ROMAN_NUMERALS","ItemSimulation","gridSize","setGridSize","reliabilityThreshold","setReliabilityThreshold","setNsfw","selectedItemsIds","setSelectedItemsIds","setSelectedAttributes","highlightedAttributeKey","setHighlightedAttributeKey","displays","setDisplays","nameEn","namePt","onUpdateDisplays","keysDict","shuffledIds","attributesResult","selectedItemsAttributesValues","quantity","attributesCounts","deterministicKeysDict","levelCount","filterCountLevelsAndGuardLevel4","deterministicKeys","nondeterministicKeys","deterministicTiedGroups","sortedDeterministicTiedGroupsKeys","nondeterministicTiedGroups","sortedNondeterministicTiedGroupsKeys","getHighestAttributeKeys","remainingAttributes","toBeAdded","priority","dicts","relatedCount","deterministicCount","oppositeCount","gridTemplateColumns","sqrt","LineChartOutlined","formatter","attributeSummary","CheckSquareOutlined","PlusSquareOutlined","CloseSquareOutlined","ItemStats","AttributesStatsTable","defaultActiveKey","navigate","useNavigate","is","useQueryParams","attributesPool","rows","completionCount","tensCount","fivesCount","zerosCount","negativeOnesCount","negativeThreesCount","negativeTensCount","positiveCount","tensPercentage","fivesPercentage","zerosPercentage","negativeOnesPercentage","negativeThreesPercentage","negativeTensPercentage","positivePercentage","calculateAttributeStats","record","parseFloat","count","rowKey","ItemAttributionPageContent","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}