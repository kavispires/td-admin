{"version":3,"file":"static/js/DailySetup.cef0077f.chunk.js","mappings":"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","sources":["components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/CanvasSVG.tsx","hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx"],"sourcesContent":["import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { type QueryKey, type UseQueryOptions, useQuery } from '@tanstack/react-query';\n\nimport { printFirebase } from 'services/firebase';\nimport type { DailyHistory } from '../utils/types';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {},\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only the error should cause this notification\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]);\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport type { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory,\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key],\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n\nexport const DAILY_GAMES_KEYS = {\n  ARTE_RUIM: 'arte-ruim',\n  ARTISTA: 'artista',\n  AQUI_O: 'aqui-o',\n  COMUNICACAO_ALIENIGENA: 'comunicacao-alienigena',\n  CONTROLE_DE_ESTOQUE: 'controle-de-estoque',\n  FILMACO: 'filmaco',\n  PALAVREADO: 'palavreado',\n  TEORIA_DE_CONJUNTOS: 'teoria-de-conjuntos',\n};\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean,\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport type { ItemAtributesValues, ItemAttribute } from 'types';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport type { DailyComunicacaoAlienigenaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAtributesValues>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes).filter((attr) => !attr.limited && attr.id !== 'sol');\n  const allAttributesValues = values(attributeValues).filter((i) => i.complete);\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId] && !history.used.includes(entry.setId)) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  if (tries >= 100) {\n    updateWarnings('Not enough valid comunicacao alienigena games (over 100 attempts)');\n  }\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAtributesValues[],\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB) ?? '',\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC) ?? '',\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC) ?? '',\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC) ?? '',\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE,\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  if (!outOfStockGood) {\n    throw new Error('No out of stock good');\n  }\n  entry.orders.push(outOfStockGood);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport type { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[],\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size,\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string,\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word)),\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  const shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useEffect, useMemo, useState } from 'react';\nimport type {\n  ArteRuimCard,\n  DailyDiagramItem,\n  DailyDiagramRule,\n  DailyDiscSet,\n  DailyMovieSet,\n  ItemAtributesValues,\n  ItemAttribute,\n} from 'types';\n\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyComunicacaoAlienigenaGames } from '../utils/games/daily-comunicacao-alienigena';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\nimport type { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  warnings: string[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number,\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n  const [warnings, setWarnings] = useState<string[]>([]);\n\n  const updateWarnings = (newWarning: string) => {\n    setWarnings((prev) => [...prev, newWarning]);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: reset warnings on change of basic props\n  useEffect(() => {\n    setWarnings([]);\n  }, [batchSize, queryLanguage]);\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTE_RUIM, historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory(DAILY_GAMES_KEYS.AQUI_O, historyQuery.data);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data, updateWarnings);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory(DAILY_GAMES_KEYS.PALAVREADO, historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTISTA, historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds,\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory(DAILY_GAMES_KEYS.FILMACO, historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE,\n    historyQuery.data,\n  );\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS,\n    historyQuery.data,\n  );\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data,\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // SET 9: Comunicação Alienígena\n  const [comunicacaoAlienigenaHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA,\n    historyQuery.data,\n  );\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values', enabled);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const comunicacaoAlienigenaEntries = useMemo(() => {\n    if (\n      !historyQuery.isSuccess ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data,\n      updateWarnings,\n    );\n  }, [\n    batchSize,\n    historyQuery.isSuccess,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n  ]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigenaEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n    comunicacaoAlienigenaEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading,\n    entries,\n    warnings,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { type QueryKey, type UseQueryOptions, useQueries, useQuery } from '@tanstack/react-query';\n\nimport { printFirebase } from 'services/firebase';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport type { DataSuffixCounts } from '../utils/types';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only notify on error\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]);\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  // biome-ignore lint/correctness/useExhaustiveDependencies: notification function shouldn't trigger\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount, docPrefix, enabled]);\n\n  return useQueries({ queries });\n}\n","import type { useLoadDrawings } from 'components/Daily/hooks';\nimport { sampleSize, shuffle } from 'lodash';\nimport type { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number,\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {},\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--'),\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyDiscSet } from 'types';\nimport type { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    updateWarnings('Not enough aqui-o sets left');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { sampleSize } from 'lodash';\nimport type { ArteRuimCard } from 'types';\nimport type { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[],\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId),\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { shuffle } from 'lodash';\nimport type { DailyMovieSet } from 'types';\nimport type { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>,\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { Alert, Button, Flex, Space, Table, type TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport type { ArteRuimCard } from 'types';\n\nimport { type UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport type { DailyComunicacaoAlienigenaEntry, DailyEntry } from './utils/types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry: DailyComunicacaoAlienigenaEntry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <span>{entry.itemsIds.length} items</span>\n            <Space>\n              <Space direction=\"vertical\">\n                {entry.attributes.map((req) => (\n                  <AlienSign key={req.spriteId} id={`sign-${req.spriteId}`} width={50} />\n                ))}\n              </Space>\n              <Space direction=\"vertical\">\n                {entry.itemsIds.map((itemId) => (\n                  <Item key={itemId} id={itemId} width={50} />\n                ))}\n              </Space>\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      {dataLoad.warnings.map((warning) => (\n        <Alert key={warning} message={warning} type=\"warning\" showIcon />\n      ))}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport type { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        [DAILY_GAMES_KEYS.ARTE_RUIM]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTE_RUIM].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.ARTE_RUIM].used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.ARTE_RUIM].cardId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.AQUI_O]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.AQUI_O].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.AQUI_O].used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.AQUI_O].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.PALAVREADO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.PALAVREADO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.PALAVREADO].keyword),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.ARTISTA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTISTA].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.FILMACO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.FILMACO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.FILMACO]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.FILMACO].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].setId),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].intersectingThing.id),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].setId),\n            ]),\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { ResponseState } from 'components/Common';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n"],"names":["useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","useParsedHistory","key","data","history","useMemo","latestDate","getYesterday","latestNumber","used","JSON","parse","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","DAILY_GAMES_KEYS","ARTE_RUIM","ARTISTA","AQUI_O","COMUNICACAO_ALIENIGENA","CONTROLE_DE_ESTOQUE","FILMACO","PALAVREADO","TEORIA_DE_CONJUNTOS","CanvasSVG","drawing","className","width","height","strokeWidth","viewBox","konvaLines","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","useLoadWordLibrary","wordLength","language","enabled","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","hasResponseData","isEmpty","generateComunicacaoAlienigenaGame","attributes","attributeValues","shuffledAttributeValues","shuffle","spriteIDs","makeArray","selectedAttributes","sampleSize","attr","spriteId","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","forEach","item","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","id","isValueA","includes","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","push","gameAttributes","name","description","itemsIds","Math","max","usedItemsIds","complexRequests","spritesIds","itemId","sample","simpleRequests","filter","requests","console","log","requestItemsIds","req","result","setId","sort","join","number","type","solution","random","Boolean","valid","every","generateControleDeEstoqueGame","num","year","month","day","split","Number","entry","title","Date","getDay","goods","orders","Array","_","i","GOODS_SIZE","outOfStockGood","Error","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","fixedKeyword","shuffledWords","difference","keyword","selectedWords","newWord","getNewWord","letters","shuffleLetters","usedLetters","uniq","flatMap","word","shortList","sortBy","intersection","preservedIndexes","otherLetters","shuffledLetters","shift","useLoadDailySetup","queryLanguage","drawingsCount","batchSize","warnings","setWarnings","useState","updateWarnings","newWarning","prev","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","arteRuimEntries","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","dataDrawing","cardId","trim","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","getNextDay","buildDailyArteRuimGames","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","notUsedSets","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isWeekend","checkWeekend","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","comunicacaoAlienigenaEntries","allAttributes","limited","allAttributesValues","complete","preliminaryEntries","tries","buildDailyComunicacaoAlienigenaGames","palavreado","artista","filmaco","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","wrap","gap","WarehouseGood","intersectingThing","maxHeight","overflowY","card","save","isPending","queryClient","useQueryClient","isDirty","setIsDirty","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","mutateAsync","useSaveDailySetup","warning","showIcon","justify","align","onClick","loading","disabled","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","label","value","onChange","DEFAULT_LANGUAGE","placeholder","hasSider","PageSider","DataLoadingWrapper","level"],"sourceRoot":""}