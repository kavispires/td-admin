{"version":3,"file":"static/js/DailySetup.3e9e8e8c.chunk.js","mappings":"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","sources":["components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/utils/games/daily-teoria-de-conjuntos.ts","components/Daily/utils/utils.ts","components/Items/Diagram/utils.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","components/Daily/CanvasSVG.tsx","../node_modules/@tanstack/query-core/src/queriesObserver.ts","components/Daily/hooks/useLoadDrawings.ts","../node_modules/@tanstack/react-query/src/useQueries.ts","hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx"],"sourcesContent":["import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { DailyTeoriaDeConjuntosEntry, ParsedDailyHistoryEntry } from '../types';\nimport { cloneDeep, difference, intersection, sample, sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { getIsThingOutdated, getLatestRuleUpdate } from 'components/Items/Diagram/utils';\n\nexport const buildDailyTeoriaDeConjuntosGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  rules: Dictionary<DailyDiagramRule>,\n  things: Dictionary<DailyDiagramItem>\n) => {\n  console.count('Creating Teoria de Conjuntos...');\n  let lastDate = history.latestDate;\n  const used: string[] = [...history.used];\n\n  const latestRuleUpdate = getLatestRuleUpdate(rules);\n\n  const thingsByRules = (() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    Object.values(things).forEach((entry) => {\n      // Only use things that are not outdated\n      if (!getIsThingOutdated(entry, latestRuleUpdate)) {\n        entry.rules.forEach((ruleId) => {\n          dict[ruleId].push(entry.itemId);\n        });\n      }\n    });\n    return dict;\n  })();\n\n  const entries: Dictionary<DailyTeoriaDeConjuntosEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'teoria-de-conjuntos',\n      number: history.latestNumber + i + 1,\n      ...getRuleSet(things, thingsByRules, rules, used, latestRuleUpdate),\n    };\n  }\n  return entries;\n};\n\nfunction getRuleSet(\n  things: Dictionary<DailyDiagramItem>,\n  thingsByRules: Record<string, string[]>,\n  rules: Dictionary<DailyDiagramRule>,\n  used: string[],\n  latestRuleUpdate: number\n) {\n  const availableThingsIds = shuffle(\n    Object.keys(things).filter(\n      (id) => !used.includes(id) && !getIsThingOutdated(things[id], latestRuleUpdate)\n    )\n  );\n\n  // Get one random initial thing\n  const initialThingId = sample(availableThingsIds);\n  if (!initialThingId) throw new Error('No available things to choose from');\n  used.push(initialThingId);\n\n  const intersectingThing = {\n    id: initialThingId,\n    name: things[initialThingId].name,\n  };\n\n  // Group rules by type than get a random pair of rules of different types\n  const thingsRulesByType = things[initialThingId].rules.reduce((acc: Record<string, string[]>, ruleId) => {\n    const type = rules[ruleId].type;\n    if (!acc[type]) acc[type] = [];\n    acc[type].push(ruleId);\n    return acc;\n  }, {});\n  // Delete any rule with less than 2 rules\n  Object.keys(thingsRulesByType).forEach((type) => {\n    if (thingsRulesByType[type].length < 2) delete thingsRulesByType[type];\n  });\n\n  const twoRandomTypes = sampleSize(Object.keys(thingsRulesByType), 2);\n\n  if (twoRandomTypes.length !== 2) throw new Error('No types found for this thing');\n  const selectedRules = [\n    sample(thingsRulesByType[twoRandomTypes[0]]),\n    sample(thingsRulesByType[twoRandomTypes[1]]),\n  ];\n  if (!selectedRules[0] || !selectedRules[1]) throw new Error('No rules found for this thing');\n\n  const ruleId = [selectedRules[0], selectedRules[1]].sort().join('-');\n  used.push(ruleId);\n\n  const level = rules[selectedRules[0]].level + rules[selectedRules[1]].level - 1;\n\n  const availableThingsByRules = cloneDeep(thingsByRules);\n  // Removed the initial thing from the available things\n  delete availableThingsByRules[initialThingId];\n\n  const itemsOnlyInRule1 = shuffle(\n    difference(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]])\n  );\n\n  const itemsOnlyInRule2 = shuffle(\n    difference(thingsByRules[selectedRules[1]], thingsByRules[selectedRules[0]])\n  );\n\n  const commonItems = shuffle(intersection(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]]));\n\n  // Get one unique initial thing that only fits rule 1\n  const selectedInitialThingId1 = itemsOnlyInRule1.pop();\n  if (!selectedInitialThingId1) throw new Error('No only in rule 1 things to choose from');\n  const rule1 = {\n    id: selectedRules[0],\n    text: rules[selectedRules[0]].title,\n    level: rules[selectedRules[0]].level,\n    thing: {\n      id: selectedInitialThingId1,\n      name: things[selectedInitialThingId1].name,\n    },\n  };\n\n  // Get one unique initial thing that only fits rule 2\n  const selectedInitialThingId2 = itemsOnlyInRule2.pop();\n  if (!selectedInitialThingId2) throw new Error('No only in rule 2 things to choose from');\n  const rule2 = {\n    id: selectedRules[1],\n    text: rules[selectedRules[1]].title,\n    level: rules[selectedRules[1]].level,\n    thing: {\n      id: selectedInitialThingId2,\n      name: things[selectedInitialThingId2].name,\n    },\n  };\n\n  // Get up to 4 unique things that fit both rules, if possible\n  const sampleCommonThings = sampleSize(commonItems, 4);\n  const sampleRule1Things = sampleSize(itemsOnlyInRule1, 8);\n  const sampleRule2Things = sampleSize(itemsOnlyInRule2, 8);\n  const gabarito: Record<string, number> = {};\n  sampleCommonThings.forEach((id) => (gabarito[id] = 0));\n  sampleRule1Things.forEach((id) => (gabarito[id] = 1));\n  sampleRule2Things.forEach((id) => (gabarito[id] = 2));\n\n  // Sample 8 things among the options\n  const selectionIds = sampleSize([...sampleCommonThings, ...sampleRule1Things, ...sampleRule2Things], 8);\n\n  const selectedThings = selectionIds.map((id) => ({\n    id,\n    name: things[id].name,\n    rule: gabarito[id],\n  }));\n\n  // Build title\n  const TITLES: Record<string, string> = {\n    contains: 'Inclusão',\n    starts: 'Inicialização',\n    ends: 'Terminação',\n    grammar: 'Gramática',\n    order: 'Sequência',\n    count: 'Contagem',\n    comparison: 'Comparação',\n    repetition: 'Repetição',\n  };\n\n  const title = [\n    TITLES?.[rules[rule1.id].type] ?? 'Desconhecido',\n    TITLES?.[rules[rule2.id].type] ?? 'Desconhecido',\n  ].join(' vs ');\n  const setId = [rule1.id, rule2.id].sort().join('::');\n\n  // Create the DailyTeoriaDeConjuntosEntry object\n  const entry: Omit<DailyTeoriaDeConjuntosEntry, 'id' | 'type' | 'number'> = {\n    title,\n    setId,\n    level,\n    rule1,\n    rule2,\n    intersectingThing,\n    things: selectedThings,\n  };\n  return entry;\n}\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\n/**\n * Calculates the next day based on the given date string.\n *\n * @param dateString - The date string in the format 'YYYY-MM-DD'.\n * @returns The next day in the format 'YYYY-MM-DD'.\n */\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\n/**\n * Checks if a given date is a Saturday or Sunday.\n *\n * @param {string} dateString - The date in 'YYYY-MM-DD' format.\n * @returns {boolean} True if the date is a Saturday or Sunday, false otherwise.\n */\nexport function checkWeekend(dateString: string): boolean {\n  const date = moment(dateString, 'YYYY-MM-DD');\n  return [6, 0].includes(date.day()); // 0 represents Sunday and 6 represents Saturday in moment.js\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { memoize } from 'lodash';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { stringRemoveAccents } from 'utils';\n\nexport const SYLLABLE_SEPARATOR = '|';\nexport const LETTERS = 'abcdefghijklmnopqrstuvwxyz';\nexport const CONSONANTS = 'bcdfghjklmnpqrstvwxyz';\nexport const VOWELS = 'aeiou';\nexport const ACCENTS = /[áéíóúãẽĩõũâêîôûàèìòùäëïöü]/;\n\nconst cleanupWord = memoize((word: string) => {\n  return stringRemoveAccents(word).toLowerCase();\n});\n\nconst countLetters = (word: string) => {\n  return cleanupWord(word).length;\n};\n\nconst countVowels = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => VOWELS.includes(letter)).length;\n};\n\nconst countConsonants = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => CONSONANTS.includes(letter)).length;\n};\n\nconst countAccents = (word: string) => {\n  return word\n    .toLowerCase()\n    .split('')\n    .filter((letter) => ACCENTS.test(letter)).length;\n};\n\nconst countWords = (text: string) => {\n  return text.split(' ').length;\n};\n\nexport const verifiers: Record<string, (word: string) => boolean> = {\n  // The first two letters are in alphabetical order\n  'ddr-7-pt': (word: string) => {\n    return LETTERS.indexOf(cleanupWord(word)[0]) < LETTERS.indexOf(cleanupWord(word)[1]);\n  },\n  // has 4 or less letters\n  'ddr-8-pt': (word: string) => countLetters(word) <= 4,\n  // Has exactly 5 letters\n  'ddr-9-pt': (word: string) => countLetters(word) === 5,\n  // Has 6 letters\n  'ddr-10-pt': (word: string) => countLetters(word) === 6,\n  // Has between 7\n  'ddr-11-pt': (word: string) => countLetters(word) === 7,\n  // Has more than 8 letters\n  'ddr-12-pt': (word: string) => countLetters(word) > 7,\n  // Has more than 1 word\n  'ddr-13-pt': (word: string) => countWords(word) > 1,\n  // Has two or more different vowels\n  'ddr-14-pt': (word: string) => {\n    const vowels = cleanupWord(word)\n      .split('')\n      .filter((letter) => VOWELS.includes(letter));\n    return new Set(vowels).size >= 2;\n  },\n  // Has 4 or less unique letters\n  'ddr-15-pt': (word: string) => new Set(cleanupWord(word).split('')).size <= 4,\n  // Has more consonants than vowels\n  'ddr-16-pt': (word: string) => countConsonants(word) > countVowels(word),\n  // Has more vowels than consonants\n  'ddr-17-pt': (word: string) => countVowels(word) > countConsonants(word),\n  // The first letter is repeated at least once\n  'ddr-18-pt': (word: string) => {\n    const firstLetter = cleanupWord(word)[0];\n    return cleanupWord(word).slice(1).includes(firstLetter);\n  },\n  // has repeated letters\n  'ddr-19-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) =>\n        cleanupWord(word)\n          .slice(index + 1)\n          .includes(letter)\n      );\n  },\n  // has repeated vowels\n  'ddr-20-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          VOWELS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has repeated consonants\n  'ddr-21-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          CONSONANTS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has consecutive vowels\n  'ddr-22-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => VOWELS.includes(letter) && VOWELS.includes(word[index + 1]));\n  },\n  // starts with letters from A to M\n  'ddr-23-pt': (word: string) => 'abcdefghijklm'.includes(cleanupWord(word)[0]),\n  // starts with letters from N to Z\n  'ddr-24-pt': (word: string) => 'nopqrstuvwxyz'.includes(cleanupWord(word)[0]),\n  // starts with a vowel\n  'ddr-25-pt': (word: string) => VOWELS.includes(cleanupWord(word)[0]),\n  // starts with a consonant\n  'ddr-26-pt': (word: string) => CONSONANTS.includes(cleanupWord(word)[0]),\n  // Double consecutive consonants\n  'ddr-27-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => CONSONANTS.includes(letter) && word[index + 1] === letter);\n  },\n  // Has an A\n  'ddr-28-pt': (word: string) => cleanupWord(word).includes('a'),\n  // Has an E\n  'ddr-29-pt': (word: string) => cleanupWord(word).includes('e'),\n  // Has an U\n  'ddr-30-pt': (word: string) => cleanupWord(word).includes('u'),\n  // Has a Q or J\n  'ddr-31-pt': (word: string) => cleanupWord(word).includes('q'),\n  // Has a C or Ç\n  'ddr-32-pt': (word: string) => cleanupWord(word).includes('c') || cleanupWord(word).includes('ç'),\n  // Has an M or N followed by a consonant\n  'ddr-33-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (['m', 'n'].includes(letter) && CONSONANTS.includes(word[index + 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has an H\n  'ddr-34-pt': (word: string) => cleanupWord(word).includes('h'),\n  // Has H preceded by a consonant\n  'ddr-35-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (letter === 'h' && CONSONANTS.includes(word[index - 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has K, W or Y\n  'ddr-36-pt': (word: string) =>\n    cleanupWord(word).includes('k') || cleanupWord(word).includes('w') || cleanupWord(word).includes('y'),\n  // Has an accent\n  'ddr-37-pt': (word: string) => countAccents(word) > 0,\n  // Ends with a vowel\n  'ddr-38-pt': (word: string) => {\n    return VOWELS.includes(cleanupWord(word).slice(-1));\n  },\n  // Ends with a consonant\n  'ddr-39-pt': (word: string) => CONSONANTS.includes(cleanupWord(word).slice(-1)),\n  // Ends with an S\n  'ddr-40-pt': (word: string) => cleanupWord(word).slice(-1) === 's',\n  // Has an I\n  'ddr-47-pt': (word: string) => cleanupWord(word).includes('i'),\n  // Has an O\n  'ddr-48-pt': (word: string) => cleanupWord(word).includes('o'),\n  // Has an X\n  'ddr-49-pt': (word: string) => cleanupWord(word).includes('x'),\n  // Has an J\n  'ddr-52-pt': (word: string) => cleanupWord(word).includes('j'),\n};\n\nexport const syllableDependencyVerifier: Record<\n  string,\n  (word: string, syllables: string, isAcronym: boolean) => boolean\n> = {\n  // Has 2 syllables\n  'ddr-3-pt': (word: string, syllables: string) =>\n    countWords(word) === 1 && syllables.split(SYLLABLE_SEPARATOR).length === 2,\n  // Has 3 syllables\n  'ddr-4-pt': (word: string, syllables: string) =>\n    countWords(word) === 1 && syllables.split(SYLLABLE_SEPARATOR).length === 3,\n  // Has 4 syllables\n  'ddr-22-pt': (word: string, syllables: string) =>\n    countWords(word) === 1 && syllables.split(SYLLABLE_SEPARATOR).length === 4,\n  // Has two consecutive vowels on the same syllable\n  'ddr-41-pt': (word: string, syllables: string) => {\n    return (\n      countWords(word) === 1 &&\n      syllables.split(SYLLABLE_SEPARATOR).some((syllable) => {\n        return syllable.split('').some((letter, index) => {\n          if (VOWELS.includes(letter) && VOWELS.includes(syllable[index + 1])) {\n            return true;\n          }\n          return false;\n        });\n      })\n    );\n  },\n  // Has two consecutive vowels on different syllables\n  'ddr-42-pt': (_: string, syllables: string) => {\n    return syllables.split(SYLLABLE_SEPARATOR).some((syllable, index) => {\n      if (index === 0) {\n        return false;\n      }\n      return syllable[0] === syllables.split(SYLLABLE_SEPARATOR)[index - 1].slice(-1);\n    });\n  },\n  // Single syllable word\n  'ddr-46-pt': (word: string, syllables: string, isAcronym: boolean) =>\n    countWords(word) === 1 && !isAcronym && syllables.split(SYLLABLE_SEPARATOR).length === 1,\n};\n\nexport const stressSyllableDependencyVerifier: Record<\n  string,\n  (word: string, syllables: string, stress: number) => boolean\n> = {\n  // The stress syllable is on the last syllable (oxitona)\n  'ddr-43-pt': (word: string, _, stress: number) => {\n    return countWords(word) === 1 && stress === 0;\n  },\n  // The stress syllable is on the second to last syllable (paroxitona)\n  'ddr-44-pt': (word: string, _, stress: number) => {\n    return countWords(word) === 1 && stress === 1;\n  },\n  // The stress syllable is on the third to last syllable (proparoxitona)\n  'ddr-45-pt': (word: string, _, stress: number) => {\n    return countWords(word) === 1 && stress === 2;\n  },\n};\n\nexport const getLatestRuleUpdate = (rules: Dictionary<DailyDiagramRule>) => {\n  return Object.values(rules).reduce((acc, rule) => {\n    return Math.max(acc, rule.updatedAt);\n  }, 0);\n};\n\nexport const getIsThingOutdated = (thing: DailyDiagramItem, latestRuleUpdate: number) => {\n  return latestRuleUpdate > thing.updatedAt;\n};\n\nconst checkIsVowel = (char: string) => VOWELS.includes(stringRemoveAccents(char));\nconst checkIsConsonant = (char: string) => CONSONANTS.includes(stringRemoveAccents(char));\nconst LMNRS = ['s', 'r', 'l', 'm', 'n'];\nconst DOUBLE_LETTERS = [\n  'rr',\n  'ss',\n  'st',\n  'sc',\n  'lm',\n  'ld',\n  'mp',\n  'mb',\n  'rn',\n  'rm',\n  'rt',\n  'rd',\n  'lt',\n  'ld',\n  'nt',\n  'nd',\n  'sp',\n  'ls',\n];\n/**\n * Guesses the separation of syllables in a given word.\n * @param word - The word for which to guess the syllables separation.\n * @returns The guessed syllables separation as a string.\n */\nexport const guessSyllablesSeparation = (word: string): string => {\n  let syllables: string[] = [];\n  let currentSyllable = '';\n\n  const stringWithoutAccents = stringRemoveAccents(word);\n\n  for (let i = 0; i < word.length; i++) {\n    const char = stringWithoutAccents[i];\n    // Space makes a syllable\n    if (char === ' ') {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n      continue;\n    }\n\n    // Hyphen makes a syllable\n    if (char === '-') {\n      syllables.push(currentSyllable + '-');\n      currentSyllable = '';\n      continue;\n    }\n\n    if (checkIsVowel(char) && i < stringWithoutAccents.length - 2) {\n      const nextChar = stringWithoutAccents[i + 1];\n      const nextNextChar = stringWithoutAccents[i + 2];\n      // If the next character is a consonant and the next next character is a consonant, the first pair is a syllable\n      if (LMNRS.includes(nextChar) && checkIsConsonant(nextNextChar)) {\n        currentSyllable += word[i] + word[i + 1];\n        i++; // Skip the next character\n        continue;\n      }\n    }\n\n    // Handle \"c\" followed by \"h\", \"r\", or \"l\"\n    if (\n      char === 'c' &&\n      i < stringWithoutAccents.length - 2 &&\n      ['h', 'r', 'l'].includes(stringWithoutAccents[i + 1]) &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle \"l\" or \"n\" followed by \"h\"\n    if (\n      ['l', 'n'].includes(char) &&\n      i < stringWithoutAccents.length - 2 &&\n      stringWithoutAccents[i + 1] === 'h' &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle consonant followed by vowel followed by consonant cluster\n    if (\n      checkIsConsonant(char) &&\n      i < stringWithoutAccents.length - 3 &&\n      checkIsVowel(stringWithoutAccents[i + 1]) &&\n      LMNRS.includes(stringWithoutAccents[i + 2]) &&\n      checkIsConsonant(stringWithoutAccents[i + 3])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    currentSyllable += word[i];\n\n    if (\n      checkIsVowel(char) &&\n      i < stringWithoutAccents.length - 1 &&\n      !checkIsVowel(stringWithoutAccents[i + 1]) &&\n      !['l', 'r', 'n'].includes(stringWithoutAccents[i + 1])\n    ) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  if (currentSyllable !== '') {\n    syllables.push(currentSyllable);\n  }\n\n  // As a final effort, if there are syllables with \"rr\" or \"ss\", split them but keep the characters. e.g. carro -> car:ro\n  syllables = syllables.map((syllable) => {\n    for (const doubleLetter of DOUBLE_LETTERS) {\n      if (syllable.includes(doubleLetter)) {\n        return syllable.split(doubleLetter).join(`${doubleLetter[0]}${SYLLABLE_SEPARATOR}${doubleLetter[1]}`);\n      }\n    }\n    return syllable;\n  });\n\n  return syllables.filter(Boolean).join(SYLLABLE_SEPARATOR);\n};\n\n/**\n * Separates the syllables of a given word.\n * @param word - The word to separate syllables from.\n * @returns The word with syllables separated by '|'.\n */\nexport function separateSyllables(word: string): string {\n  const syllablePattern =\n    /([^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*[aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]{1,3}[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*)(?=[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]|$)/gi;\n\n  const proposed = word.replace(syllablePattern, '$1|').slice(0, -1);\n\n  return proposed.replace(/\\s/g, '');\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#options = options\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    if (process.env.NODE_ENV !== 'production') {\n      const queryHashes = queries.map((query) => query.queryHash)\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          '[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.',\n        )\n      }\n    }\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return this.#trackResult(result, queries)\n      },\n    ]\n  }\n\n  #trackResult(\n    result: Array<QueryObserverResult>,\n    queries: Array<QueryObserverOptions>,\n  ) {\n    const matches = this.#findMatchingObservers(queries)\n\n    return matches.map((match, index) => {\n      const observerResult = result[index]!\n      return !match.defaultedQueryOptions.notifyOnChangeProps\n        ? match.observer.trackResult(observerResult, (accessedProp) => {\n            // track property on all observers to ensure proper (synchronized) tracking (#7000)\n            matches.forEach((m) => {\n              m.observer.trackProp(accessedProp)\n            })\n          })\n        : observerResult\n    })\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const observers: Array<QueryObserverMatch> = []\n\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const match = prevObserversMap.get(defaultedOptions.queryHash)\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match,\n        })\n      } else {\n        const existingObserver = this.#observers.find(\n          (o) => o.options.queryHash === defaultedOptions.queryHash,\n        )\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer:\n            existingObserver ??\n            new QueryObserver(this.#client, defaultedOptions),\n        })\n      }\n    })\n\n    return observers.sort((a, b) => {\n      return (\n        queries.findIndex(\n          (q) => q.queryHash === a.defaultedQueryOptions.queryHash,\n        ) -\n        queries.findIndex(\n          (q) => q.queryHash === b.defaultedQueryOptions.queryHash,\n        )\n      )\n    })\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult\n      const newResult = this.#combineResult(\n        this.#trackResult(this.#result, this.#queries),\n        this.#options?.combine,\n      )\n\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result)\n          })\n        })\n      }\n    }\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : T extends Array<\n              UseQueryOptionsForUseQueries<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseQueryResult>\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries: readonly [...QueriesOptions<T>]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? noop\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { useLoadDrawings } from 'components/Daily/hooks';\nimport { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport { getNextDay, checkWeekend } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[]\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { ItemAtributesValues, ItemAttribute } from 'types';\nimport { DailyComunicacaoAlienigenaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAtributesValues>,\n  updateWarnings: (warning: string) => void\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes).filter((attr) => !attr.limited && attr.id !== 'sol');\n  const allAttributesValues = values(attributeValues).filter((i) => i.complete);\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId] && !history.used.includes(entry.setId)) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  if (tries >= 100) {\n    updateWarnings('Not enough valid comunicacao alienigena games (over 100 attempts)');\n  }\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAtributesValues[]\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB)!,\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC)!,\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC)!,\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC)!,\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  // console.log({\n  //   attributeA,\n  //   attributeB,\n  //   attributeC,\n  //   attributeAB,\n  //   attributeAC,\n  //   attributeBC,\n  //   attributeABC,\n  // });\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  DailyDiscSet,\n  ArteRuimCard,\n  DailyMovieSet,\n  DailyDiagramItem,\n  DailyDiagramRule,\n  ItemAttribute,\n  ItemAtributesValues,\n} from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\nimport { buildDailyComunicacaoAlienigenaGames } from '../utils/games/daily-comunicacao-alienigena';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  warnings: string[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n  const [warnings, setWarnings] = useState<string[]>([]);\n\n  const updateWarnings = (newWarning: string) => {\n    setWarnings((prev) => [...prev, newWarning]);\n  };\n\n  useEffect(() => {\n    setWarnings([]);\n  }, [batchSize, queryLanguage]);\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data, updateWarnings);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory('teoria-de-conjuntos', historyQuery.data);\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // SET 9: Comunicação Alienígena\n  const [comunicacaoAlienigenaHistory] = useParsedHistory('comunicacao-alienigena', historyQuery.data);\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values', enabled);\n  const comunicacaoAlienigenaEntries = useMemo(() => {\n    if (\n      !historyQuery.isSuccess ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data,\n      updateWarnings\n    );\n  }, [\n    batchSize,\n    historyQuery.isSuccess,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n  ]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigenaEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n    comunicacaoAlienigenaEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading,\n    entries,\n    warnings,\n  };\n}\n","import { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiscSet } from 'types';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>,\n  updateWarnings: (warning: string) => void\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    updateWarnings('Not enough aqui-o sets left');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { ArteRuimCard } from 'types';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[]\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId)\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyMovieSet } from 'types';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { Alert, Button, Flex, Space, Table, TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { ArteRuimCard } from 'types';\n\nimport { UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport { DailyComunicacaoAlienigenaEntry, DailyEntry } from './utils/types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry: DailyComunicacaoAlienigenaEntry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <span>{entry.itemsIds.length} items</span>\n            <Space>\n              <Space direction=\"vertical\">\n                {entry.attributes.map((req) => (\n                  <AlienSign key={req.spriteId} id={`sign-${req.spriteId}`} width={50} />\n                ))}\n              </Space>\n              <Space direction=\"vertical\">\n                {entry.itemsIds.map((itemId) => (\n                  <Item key={itemId} id={itemId} width={50} />\n                ))}\n              </Space>\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      {dataLoad.warnings.map((warning) => (\n        <Alert key={warning} message={warning} type=\"warning\" showIcon />\n      ))}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n        'teoria-de-conjuntos': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['teoria-de-conjuntos'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['teoria-de-conjuntos']?.used ?? '[]'),\n              ...data.map((e) => e['teoria-de-conjuntos'].setId),\n              ...data.map((e) => e['teoria-de-conjuntos'].intersectingThing.id),\n            ])\n          ),\n        },\n        'comunicacao-alienigena': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['comunicacao-alienigena'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['comunicacao-alienigena']?.used ?? '[]'),\n              ...data.map((e) => e['comunicacao-alienigena'].setId),\n            ])\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n"],"names":["useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","useParsedHistory","key","data","history","useMemo","latestDate","getYesterday","latestNumber","used","JSON","parse","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","buildDailyTeoriaDeConjuntosGames","batchSize","rules","things","console","count","lastDate","latestRuleUpdate","getLatestRuleUpdate","thingsByRules","dict","Object","values","reduce","acc","rule","id","forEach","entry","getIsThingOutdated","ruleId","push","itemId","entries","i","getNextDay","type","number","getRuleSet","availableThingsIds","shuffle","keys","filter","includes","initialThingId","sample","Error","intersectingThing","name","thingsRulesByType","length","twoRandomTypes","sampleSize","selectedRules","sort","join","level","cloneDeep","itemsOnlyInRule1","difference","itemsOnlyInRule2","commonItems","intersection","selectedInitialThingId1","pop","rule1","text","title","thing","selectedInitialThingId2","rule2","sampleCommonThings","sampleRule1Things","sampleRule2Things","gabarito","selectedThings","map","TITLES","contains","starts","ends","grammar","order","comparison","repetition","setId","moment","subtract","format","dateString","add","checkWeekend","date","day","SYLLABLE_SEPARATOR","LETTERS","CONSONANTS","VOWELS","ACCENTS","cleanupWord","memoize","word","stringRemoveAccents","toLowerCase","countLetters","countVowels","split","letter","countConsonants","countWords","verifiers","indexOf","vowels","Set","size","firstLetter","slice","some","index","test","countAccents","syllableDependencyVerifier","syllables","syllable","_","isAcronym","stressSyllableDependencyVerifier","stress","Math","max","updatedAt","separateSyllables","replace","path","docId","async","log","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useTDResource","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","hasResponseData","isEmpty","useTDResourceNonCollection","CanvasSVG","drawing","className","width","height","strokeWidth","viewBox","konvaLines","paths","lineArr","x","y","strokeWidthBySize","small","medium","large","xmlns","overflow","style","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","array1","array2","QueriesObserver","Subscribable","constructor","client","queries","super","this","setQueries","onSubscribe","listeners","observer","subscribe","result","onUnsubscribe","destroy","notifyOptions","notifyManager","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","hasListeners","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","matches","r","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","replaceEqualDeep","prevObserversMap","Map","queryHash","observers","defaultedOptions","defaultQueryOptions","get","existingObserver","find","o","QueryObserver","a","b","findIndex","q","array","value","copy","replaceAt","previousResult","listener","useLoadDrawings","queryLanguage","suffixCountsQuery","suffixData","libraryCount","docPrefix","queryClient","useQueryClient","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","React","opts","_optimisticResults","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","optimisticResult","getCombinedResult","onStoreChange","noop","suspensePromises","shouldSuspend","flatMap","queryObserver","fetchOptimistic","willFetch","Promise","all","firstSingleResultWhichShouldThrow","getHasError","throwOnError","getQueryCache","useQueries","Array","Boolean","onSuccess","info","useLoadWordLibrary","wordLength","language","selected","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","fixedKeyword","shuffledWords","keyword","selectedWords","newWord","getNewWord","letters","shuffleLetters","usedLetters","uniq","shortList","sortBy","preservedIndexes","otherLetters","shuffledLetters","shift","generateControleDeEstoqueGame","num","year","month","Number","Date","getDay","goods","orders","GOODS_SIZE","outOfStockGood","generateComunicacaoAlienigenaGame","attributes","attributeValues","shuffledAttributeValues","spriteIDs","makeArray","selectedAttributes","attr","spriteId","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","item","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","description","itemsIds","usedItemsIds","complexRequests","spritesIds","simpleRequests","requests","requestItemsIds","req","solution","random","valid","every","useLoadDailySetup","drawingsCount","warnings","setWarnings","useState","updateWarnings","newWarning","prev","drawingsQuery","areDrawingsLoading","isLoading","arteRuimHistory","arteRuimEntries","drawings","drawingEntry","drawingsLibrary","dataDrawing","cardId","trim","undefined","dataIds","atLeastTwoDrawingsList","e","shuffledShortList","buildDailyArteRuimGames","aquiOSetsQuery","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","notUsedSets","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isWeekend","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","comunicacaoAlienigenaEntries","allAttributes","limited","allAttributesValues","complete","preliminaryEntries","tries","buildDailyComunicacaoAlienigenaGames","palavreado","artista","filmaco","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","wrap","gap","WarehouseGood","maxHeight","overflowY","card","save","isPending","isDirty","setIsDirty","mutation","useMutation","mutationFn","saves","setDoc","docRec","previousHistory","newHistory","stringify","removeDuplicates","invalidateQueries","onError","mutateAsync","useSaveDailySetup","warning","showIcon","justify","align","onClick","loading","disabled","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","label","onChange","DEFAULT_LANGUAGE","placeholder","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}