{"version":3,"file":"static/js/2326.ee132210.chunk.js","mappings":"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","sources":["hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/utils/games/daily-teoria-de-conjuntos.ts","components/Daily/utils/utils.ts","components/Items/Diagram/utils.ts"],"sourcesContent":["import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { useLoadDrawings } from 'components/Daily/hooks';\nimport { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport { getNextDay, checkWeekend } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[]\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo } from 'react';\nimport { DailyDiscSet, ArteRuimCard, DailyMovieSet, DailyDiagramItem, DailyDiagramRule } from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory('teoria-de-conjuntos', historyQuery.data);\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiscSet } from 'types';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { ArteRuimCard } from 'types';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[]\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId)\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyMovieSet } from 'types';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n        'teoria-de-conjuntos': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['teoria-de-conjuntos'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['teoria-de-conjuntos']?.used ?? '[]'),\n              ...data.map((e) => e['teoria-de-conjuntos'].setId),\n              ...data.map((e) => e['teoria-de-conjuntos'].intersectingThing.id),\n            ])\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { DailyTeoriaDeConjuntosEntry, ParsedDailyHistoryEntry } from '../types';\nimport { cloneDeep, difference, intersection, sample, sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { getIsThingOutdated, getLatestRuleUpdate } from 'components/Items/Diagram/utils';\n\nexport const buildDailyTeoriaDeConjuntosGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  rules: Dictionary<DailyDiagramRule>,\n  things: Dictionary<DailyDiagramItem>\n) => {\n  console.count('Creating Teoria de Conjuntos...');\n  let lastDate = history.latestDate;\n  const used: string[] = [...history.used];\n\n  const latestRuleUpdate = getLatestRuleUpdate(rules);\n\n  const thingsByRules = (() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    Object.values(things).forEach((entry) => {\n      // Only use things that are not outdated\n      if (!getIsThingOutdated(entry, latestRuleUpdate)) {\n        entry.rules.forEach((ruleId) => {\n          dict[ruleId].push(entry.itemId);\n        });\n      }\n    });\n    return dict;\n  })();\n\n  const entries: Dictionary<DailyTeoriaDeConjuntosEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'teoria-de-conjuntos',\n      number: history.latestNumber + i + 1,\n      ...getRuleSet(things, thingsByRules, rules, used, latestRuleUpdate),\n    };\n  }\n  return entries;\n};\n\nfunction getRuleSet(\n  things: Dictionary<DailyDiagramItem>,\n  thingsByRules: Record<string, string[]>,\n  rules: Dictionary<DailyDiagramRule>,\n  used: string[],\n  latestRuleUpdate: number\n) {\n  const availableThingsIds = shuffle(\n    Object.keys(things).filter(\n      (id) => !used.includes(id) && !getIsThingOutdated(things[id], latestRuleUpdate)\n    )\n  );\n\n  // Get one random initial thing\n  const initialThingId = sample(availableThingsIds);\n  if (!initialThingId) throw new Error('No available things to choose from');\n  used.push(initialThingId);\n\n  const intersectingThing = {\n    id: initialThingId,\n    name: things[initialThingId].name,\n  };\n\n  // Group rules by type than get a random pair of rules of different types\n  const thingsRulesByType = things[initialThingId].rules.reduce((acc: Record<string, string[]>, ruleId) => {\n    const type = rules[ruleId].type;\n    if (!acc[type]) acc[type] = [];\n    acc[type].push(ruleId);\n    return acc;\n  }, {});\n  // Delete any rule with less than 2 rules\n  Object.keys(thingsRulesByType).forEach((type) => {\n    if (thingsRulesByType[type].length < 2) delete thingsRulesByType[type];\n  });\n\n  const twoRandomTypes = sampleSize(Object.keys(thingsRulesByType), 2);\n\n  if (twoRandomTypes.length !== 2) throw new Error('No types found for this thing');\n  const selectedRules = [\n    sample(thingsRulesByType[twoRandomTypes[0]]),\n    sample(thingsRulesByType[twoRandomTypes[1]]),\n  ];\n  if (!selectedRules[0] || !selectedRules[1]) throw new Error('No rules found for this thing');\n\n  const ruleId = [selectedRules[0], selectedRules[1]].sort().join('-');\n  used.push(ruleId);\n\n  const level = rules[selectedRules[0]].level + rules[selectedRules[1]].level - 1;\n\n  const availableThingsByRules = cloneDeep(thingsByRules);\n  // Removed the initial thing from the available things\n  delete availableThingsByRules[initialThingId];\n\n  const itemsOnlyInRule1 = shuffle(\n    difference(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]])\n  );\n\n  const itemsOnlyInRule2 = shuffle(\n    difference(thingsByRules[selectedRules[1]], thingsByRules[selectedRules[0]])\n  );\n\n  const commonItems = shuffle(intersection(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]]));\n\n  // Get one unique initial thing that only fits rule 1\n  const selectedInitialThingId1 = itemsOnlyInRule1.pop();\n  if (!selectedInitialThingId1) throw new Error('No only in rule 1 things to choose from');\n  const rule1 = {\n    id: selectedRules[0],\n    text: rules[selectedRules[0]].title,\n    level: rules[selectedRules[0]].level,\n    thing: {\n      id: selectedInitialThingId1,\n      name: things[selectedInitialThingId1].name,\n    },\n  };\n\n  // Get one unique initial thing that only fits rule 2\n  const selectedInitialThingId2 = itemsOnlyInRule2.pop();\n  if (!selectedInitialThingId2) throw new Error('No only in rule 2 things to choose from');\n  const rule2 = {\n    id: selectedRules[1],\n    text: rules[selectedRules[1]].title,\n    level: rules[selectedRules[1]].level,\n    thing: {\n      id: selectedInitialThingId2,\n      name: things[selectedInitialThingId2].name,\n    },\n  };\n\n  // Get up to 4 unique things that fit both rules, if possible\n  const sampleCommonThings = sampleSize(commonItems, 4);\n  const sampleRule1Things = sampleSize(itemsOnlyInRule1, 8);\n  const sampleRule2Things = sampleSize(itemsOnlyInRule2, 8);\n  const gabarito: Record<string, number> = {};\n  sampleCommonThings.forEach((id) => (gabarito[id] = 0));\n  sampleRule1Things.forEach((id) => (gabarito[id] = 1));\n  sampleRule2Things.forEach((id) => (gabarito[id] = 2));\n\n  // Sample 8 things among the options\n  const selectionIds = sampleSize([...sampleCommonThings, ...sampleRule1Things, ...sampleRule2Things], 8);\n\n  const selectedThings = selectionIds.map((id) => ({\n    id,\n    name: things[id].name,\n    rule: gabarito[id],\n  }));\n\n  // Build title\n  const TITLES: Record<string, string> = {\n    contains: 'Inclusão',\n    starts: 'Inicialização',\n    ends: 'Terminação',\n    grammar: 'Gramática',\n    order: 'Sequência',\n    count: 'Contagem',\n    comparison: 'Comparação',\n    repetition: 'Repetição',\n  };\n\n  const title = [\n    TITLES?.[rules[rule1.id].type] ?? 'Desconhecido',\n    TITLES?.[rules[rule2.id].type] ?? 'Desconhecido',\n  ].join(' vs ');\n  const setId = [rule1.id, rule2.id].sort().join('::');\n\n  // Create the DailyTeoriaDeConjuntosEntry object\n  const entry: Omit<DailyTeoriaDeConjuntosEntry, 'id' | 'type' | 'number'> = {\n    title,\n    setId,\n    level,\n    rule1,\n    rule2,\n    intersectingThing,\n    things: selectedThings,\n  };\n  return entry;\n}\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\n/**\n * Calculates the next day based on the given date string.\n *\n * @param dateString - The date string in the format 'YYYY-MM-DD'.\n * @returns The next day in the format 'YYYY-MM-DD'.\n */\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\n/**\n * Checks if a given date is a Saturday or Sunday.\n *\n * @param {string} dateString - The date in 'YYYY-MM-DD' format.\n * @returns {boolean} True if the date is a Saturday or Sunday, false otherwise.\n */\nexport function checkWeekend(dateString: string): boolean {\n  const date = moment(dateString, 'YYYY-MM-DD');\n  return [6, 0].includes(date.day()); // 0 represents Sunday and 6 represents Saturday in moment.js\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { memoize } from 'lodash';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { stringRemoveAccents } from 'utils';\n\nexport const SYLLABLE_SEPARATOR = '|';\nexport const LETTERS = 'abcdefghijklmnopqrstuvwxyz';\nexport const CONSONANTS = 'bcdfghjklmnpqrstvwxyz';\nexport const VOWELS = 'aeiou';\nexport const ACCENTS = /[áéíóúãẽĩõũâêîôûàèìòùäëïöü]/;\n\nconst cleanupWord = memoize((word: string) => {\n  return stringRemoveAccents(word).toLowerCase();\n});\n\nconst countLetters = (word: string) => {\n  return cleanupWord(word).length;\n};\n\nconst countVowels = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => VOWELS.includes(letter)).length;\n};\n\nconst countConsonants = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => CONSONANTS.includes(letter)).length;\n};\n\nconst countAccents = (word: string) => {\n  return word\n    .toLowerCase()\n    .split('')\n    .filter((letter) => ACCENTS.test(letter)).length;\n};\n\nconst countWords = (text: string) => {\n  return text.split(' ').length;\n};\n\nexport const verifiers: Record<string, (word: string) => boolean> = {\n  // The first two letters are in alphabetical order\n  'ddr-7-pt': (word: string) => {\n    return LETTERS.indexOf(cleanupWord(word)[0]) < LETTERS.indexOf(cleanupWord(word)[1]);\n  },\n  // has 4 or less letters\n  'ddr-8-pt': (word: string) => countLetters(word) <= 4,\n  // Has exactly 5 letters\n  'ddr-9-pt': (word: string) => countLetters(word) === 5,\n  // Has 6 letters\n  'ddr-10-pt': (word: string) => countLetters(word) === 6,\n  // Has between 7\n  'ddr-11-pt': (word: string) => countLetters(word) === 7,\n  // Has more than 8 letters\n  'ddr-12-pt': (word: string) => countLetters(word) > 7,\n  // Has more than 1 word\n  'ddr-13-pt': (word: string) => countWords(word) > 1,\n  // Has two or more different vowels\n  'ddr-14-pt': (word: string) => {\n    const vowels = cleanupWord(word)\n      .split('')\n      .filter((letter) => VOWELS.includes(letter));\n    return new Set(vowels).size >= 2;\n  },\n  // Has 4 or less unique letters\n  'ddr-15-pt': (word: string) => new Set(cleanupWord(word).split('')).size <= 4,\n  // Has more consonants than vowels\n  'ddr-16-pt': (word: string) => countConsonants(word) > countVowels(word),\n  // Has more vowels than consonants\n  'ddr-17-pt': (word: string) => countVowels(word) > countConsonants(word),\n  // The first letter is repeated at least once\n  'ddr-18-pt': (word: string) => {\n    const firstLetter = cleanupWord(word)[0];\n    return cleanupWord(word).slice(1).includes(firstLetter);\n  },\n  // has repeated letters\n  'ddr-19-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) =>\n        cleanupWord(word)\n          .slice(index + 1)\n          .includes(letter)\n      );\n  },\n  // has repeated vowels\n  'ddr-20-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          VOWELS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has repeated consonants\n  'ddr-21-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          CONSONANTS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has consecutive vowels\n  'ddr-22-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => VOWELS.includes(letter) && VOWELS.includes(word[index + 1]));\n  },\n  // starts with letters from A to M\n  'ddr-23-pt': (word: string) => 'abcdefghijklm'.includes(cleanupWord(word)[0]),\n  // starts with letters from N to Z\n  'ddr-24-pt': (word: string) => 'nopqrstuvwxyz'.includes(cleanupWord(word)[0]),\n  // starts with a vowel\n  'ddr-25-pt': (word: string) => VOWELS.includes(cleanupWord(word)[0]),\n  // starts with a consonant\n  'ddr-26-pt': (word: string) => CONSONANTS.includes(cleanupWord(word)[0]),\n  // Double consecutive consonants\n  'ddr-27-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => CONSONANTS.includes(letter) && word[index + 1] === letter);\n  },\n  // Has an A\n  'ddr-28-pt': (word: string) => cleanupWord(word).includes('a'),\n  // Has an E\n  'ddr-29-pt': (word: string) => cleanupWord(word).includes('e'),\n  // Has an U\n  'ddr-30-pt': (word: string) => cleanupWord(word).includes('u'),\n  // Has a Q or J\n  'ddr-31-pt': (word: string) => cleanupWord(word).includes('q') || cleanupWord(word).includes('j'),\n  // Has a C or Ç\n  'ddr-32-pt': (word: string) => cleanupWord(word).includes('c') || cleanupWord(word).includes('ç'),\n  // Has an M or N followed by a consonant\n  'ddr-33-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (['m', 'n'].includes(letter) && CONSONANTS.includes(word[index + 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has an H\n  'ddr-34-pt': (word: string) => cleanupWord(word).includes('h'),\n  // Has H preceded by a consonant\n  'ddr-35-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (letter === 'h' && CONSONANTS.includes(word[index - 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has K, W or Y\n  'ddr-36-pt': (word: string) =>\n    cleanupWord(word).includes('k') || cleanupWord(word).includes('w') || cleanupWord(word).includes('y'),\n  // Has an accent\n  'ddr-37-pt': (word: string) => countAccents(word) > 0,\n  // Ends with a vowel\n  'ddr-38-pt': (word: string) => {\n    return VOWELS.includes(cleanupWord(word).slice(-1));\n  },\n  // Ends with a consonant\n  'ddr-39-pt': (word: string) => CONSONANTS.includes(cleanupWord(word).slice(-1)),\n  // Ends with an S\n  'ddr-40-pt': (word: string) => cleanupWord(word).slice(-1) === 's',\n  // Has an I\n  'ddr-47-pt': (word: string) => cleanupWord(word).includes('i'),\n  // Has an O\n  'ddr-48-pt': (word: string) => cleanupWord(word).includes('o'),\n};\n\nexport const syllableDependencyVerifier: Record<string, (syllables: string) => boolean> = {\n  // Has 2 syllables\n  'ddr-3-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 2,\n  // Has 3 syllables\n  'ddr-4-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 3,\n  // Has 4 syllables\n  'ddr-22-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 4,\n  // Has two consecutive vowels on the same syllable\n  'ddr-41-pt': (syllables: string) => {\n    return syllables.split(SYLLABLE_SEPARATOR).some((syllable) => {\n      return syllable.split('').some((letter, index) => {\n        if (VOWELS.includes(letter) && VOWELS.includes(syllable[index + 1])) {\n          return true;\n        }\n        return false;\n      });\n    });\n  },\n  // Has two consecutive vowels on different syllables\n  'ddr-42-pt': (syllables: string) => {\n    return syllables.split(SYLLABLE_SEPARATOR).some((syllable, index) => {\n      if (index === 0) {\n        return false;\n      }\n      return syllable[0] === syllables.split(SYLLABLE_SEPARATOR)[index - 1].slice(-1);\n    });\n  },\n  // Single syllable word\n  'ddr-46-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 1,\n};\n\nexport const stressSyllableDependencyVerifier: Record<\n  string,\n  (syllables: string, stress: number) => boolean\n> = {\n  // The stress syllable is on the last syllable (oxitona)\n  'ddr-43-pt': (_syllables: string, stress: number) => {\n    return stress === 0;\n  },\n  // The stress syllable is on the second to last syllable (paroxitona)\n  'ddr-44-pt': (_syllables: string, stress: number) => {\n    return stress === 1;\n  },\n  // The stress syllable is on the third to last syllable (proparoxitona)\n  'ddr-45-pt': (_syllables: string, stress: number) => {\n    return stress === 2;\n  },\n};\n\nexport const getLatestRuleUpdate = (rules: Dictionary<DailyDiagramRule>) => {\n  return Object.values(rules).reduce((acc, rule) => {\n    return Math.max(acc, rule.updatedAt);\n  }, 0);\n};\n\nexport const getIsThingOutdated = (thing: DailyDiagramItem, latestRuleUpdate: number) => {\n  return latestRuleUpdate > thing.updatedAt;\n};\n\nconst checkIsVowel = (char: string) => VOWELS.includes(stringRemoveAccents(char));\nconst checkIsConsonant = (char: string) => CONSONANTS.includes(stringRemoveAccents(char));\nconst LMNRS = ['s', 'r', 'l', 'm', 'n'];\nconst DOUBLE_LETTERS = [\n  'rr',\n  'ss',\n  'st',\n  'sc',\n  'lm',\n  'ld',\n  'mp',\n  'mb',\n  'rn',\n  'rm',\n  'rt',\n  'rd',\n  'lt',\n  'ld',\n  'nt',\n  'nd',\n  'sp',\n  'ls',\n];\n/**\n * Guesses the separation of syllables in a given word.\n * @param word - The word for which to guess the syllables separation.\n * @returns The guessed syllables separation as a string.\n */\nexport const guessSyllablesSeparation = (word: string): string => {\n  let syllables: string[] = [];\n  let currentSyllable = '';\n\n  const stringWithoutAccents = stringRemoveAccents(word);\n\n  for (let i = 0; i < word.length; i++) {\n    const char = stringWithoutAccents[i];\n    // Space makes a syllable\n    if (char === ' ') {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n      continue;\n    }\n\n    // Hyphen makes a syllable\n    if (char === '-') {\n      syllables.push(currentSyllable + '-');\n      currentSyllable = '';\n      continue;\n    }\n\n    if (checkIsVowel(char) && i < stringWithoutAccents.length - 2) {\n      const nextChar = stringWithoutAccents[i + 1];\n      const nextNextChar = stringWithoutAccents[i + 2];\n      // If the next character is a consonant and the next next character is a consonant, the first pair is a syllable\n      if (LMNRS.includes(nextChar) && checkIsConsonant(nextNextChar)) {\n        currentSyllable += word[i] + word[i + 1];\n        i++; // Skip the next character\n        continue;\n      }\n    }\n\n    // Handle \"c\" followed by \"h\", \"r\", or \"l\"\n    if (\n      char === 'c' &&\n      i < stringWithoutAccents.length - 2 &&\n      ['h', 'r', 'l'].includes(stringWithoutAccents[i + 1]) &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle \"l\" or \"n\" followed by \"h\"\n    if (\n      ['l', 'n'].includes(char) &&\n      i < stringWithoutAccents.length - 2 &&\n      stringWithoutAccents[i + 1] === 'h' &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle consonant followed by vowel followed by consonant cluster\n    if (\n      checkIsConsonant(char) &&\n      i < stringWithoutAccents.length - 3 &&\n      checkIsVowel(stringWithoutAccents[i + 1]) &&\n      LMNRS.includes(stringWithoutAccents[i + 2]) &&\n      checkIsConsonant(stringWithoutAccents[i + 3])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    currentSyllable += word[i];\n\n    if (\n      checkIsVowel(char) &&\n      i < stringWithoutAccents.length - 1 &&\n      !checkIsVowel(stringWithoutAccents[i + 1]) &&\n      !['l', 'r', 'n'].includes(stringWithoutAccents[i + 1])\n    ) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  if (currentSyllable !== '') {\n    syllables.push(currentSyllable);\n  }\n\n  // As a final effort, if there are syllables with \"rr\" or \"ss\", split them but keep the characters. e.g. carro -> car:ro\n  syllables = syllables.map((syllable) => {\n    for (const doubleLetter of DOUBLE_LETTERS) {\n      if (syllable.includes(doubleLetter)) {\n        return syllable.split(doubleLetter).join(`${doubleLetter[0]}${SYLLABLE_SEPARATOR}${doubleLetter[1]}`);\n      }\n    }\n    return syllable;\n  });\n\n  return syllables.filter(Boolean).join(SYLLABLE_SEPARATOR);\n};\n\n/**\n * Separates the syllables of a given word.\n * @param word - The word to separate syllables from.\n * @returns The word with syllables separated by '|'.\n */\nexport function separateSyllables(word: string): string {\n  const syllablePattern =\n    /([^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*[aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]{1,3}[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*)(?=[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]|$)/gi;\n\n  const proposed = word.replace(syllablePattern, '$1|').slice(0, -1);\n\n  return proposed.replace(/\\s/g, '');\n}\n"],"names":["useLoadWordLibrary","wordLength","language","enabled","selected","getUrl","useBaseUrl","resourceName","query","useQuery","queryKey","queryFn","async","res","fetch","json","hasResponseData","isEmpty","data","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","fixedKeyword","shuffledWords","shuffle","difference","keyword","pop","selectedWords","i","newWord","getNewWord","push","letters","shuffleLetters","length","index","usedLetters","uniq","flatMap","map","word","split","shortList","filter","includes","sortBy","intersection","preservedIndexes","otherLetters","_","shuffledLetters","shift","generateControleDeEstoqueGame","id","num","year","month","day","Number","entry","number","type","title","Date","getDay","goods","orders","sampleSize","Array","fill","GOODS_SIZE","outOfStockGood","useLoadDailySetup","queryLanguage","drawingsCount","batchSize","source","LANGUAGE_PREFIX","historyQuery","useDailyHistoryQuery","drawingsQuery","notification","App","suffixCountsQuery","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","suffixData","libraryCount","docPrefix","queries","useMemo","Boolean","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","useParsedHistory","arteRuimEntries","history","console","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","key","dataDrawing","cardId","used","drawing","trim","log","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","latestDate","getNextDay","latestNumber","buildDailyArteRuimGames","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","itemsIds","notUsedSets","setId","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isWeekend","checkWeekend","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","palavreado","artista","filmaco","useSaveDailySetup","queryClient","useQueryClient","isDirty","setIsDirty","useState","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","JSON","stringify","removeDuplicates","parse","intersectingThing","Promise","all","invalidateQueries","onError","save","mutateAsync","isPending","useTempDaily","options","getYesterday","SUFFIX_DATA","pt","en","DAILY","rules","things","latestRuleUpdate","getLatestRuleUpdate","thingsByRules","dict","rule","getIsThingOutdated","ruleId","itemId","getRuleSet","availableThingsIds","initialThingId","sample","name","thingsRulesByType","twoRandomTypes","selectedRules","sort","join","level","cloneDeep","itemsOnlyInRule1","itemsOnlyInRule2","commonItems","selectedInitialThingId1","rule1","thing","selectedInitialThingId2","rule2","sampleCommonThings","sampleRule1Things","sampleRule2Things","gabarito","selectedThings","TITLES","contains","starts","ends","grammar","order","comparison","repetition","moment","subtract","format","dateString","add","date","SYLLABLE_SEPARATOR","LETTERS","CONSONANTS","VOWELS","ACCENTS","cleanupWord","memoize","stringRemoveAccents","toLowerCase","countLetters","countVowels","letter","countConsonants","verifiers","indexOf","vowels","Set","firstLetter","slice","test","countAccents","syllableDependencyVerifier","syllables","syllable","stressSyllableDependencyVerifier","_syllables","stress","Math","max","updatedAt","separateSyllables","replace"],"sourceRoot":""}