{"version":3,"file":"static/js/ItemsGroups.9a545d08.chunk.js","mappings":"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","sources":["components/Items/ItemBuildingBlocks.tsx","components/Items/ItemGroupsCard.tsx","components/Items/ItemsGroupsContent.tsx","components/Items/ItemsGroupsFilters.tsx","pages/Items/ItemsGroups.tsx"],"sourcesContent":["import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { Card, Select, Space, Typography } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { Item as ItemT } from 'types';\nimport { ItemName, ItemNsfw, ItemSprite } from './ItemBuildingBlocks';\n\ntype ItemGroupsCardProps = {\n  item: ItemT;\n  itemGroups?: string[];\n  groupsTypeahead: { label: string; value: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nexport function ItemGroupsCard({\n  item,\n  itemGroups,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemGroupsCardProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  // const onInputKeyDown = (event: any) => {\n  //   if (event.key === 'Enter' && event.target.value) {\n  //     console.log('PRESSED ENTER', event.target.value.trim());\n  //     onAddToGroup(event.target.value.trim(), item.id);\n  //   }\n  // };\n\n  return (\n    <Card\n      title={\n        <>\n          <Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>\n          <ItemNsfw item={item} />\n        </>\n      }\n      style={{ maxWidth: 250 }}\n    >\n      <ItemSprite item={item} width={75} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <ItemName item={item} language=\"en\" />\n        <ItemName item={item} language=\"pt\" />\n\n        <Select\n          mode=\"multiple\"\n          style={{ width: '100%' }}\n          placeholder=\"Select a category\"\n          defaultValue={itemGroups}\n          options={groupsTypeahead}\n          showSearch\n          size=\"small\"\n          key={String(itemGroups)}\n          onChange={(groups) => onUpdateItemGroups(item.id, groups)}\n          // onSelect={(group) => onAddToGroup(group, item.id)}\n          // onInputKeyDown={onInputKeyDown}\n        />\n      </Space>\n    </Card>\n  );\n}\n","import { Col, Flex, Row, Table, TableProps, Typography } from 'antd';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { Item as ItemT, ItemGroup } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { ItemGroupsCard } from './ItemGroupsCard';\n\nexport function ItemsGroupsContent({ data, addEntryToUpdate }: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { is } = useQueryParams();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const grousByItem = useMemo(() => {\n    return Object.values(data ?? []).reduce((acc: Record<string, string[]>, group) => {\n      if (!group.itemsIds) {\n        console.warn('Group without items', group);\n      }\n      group.itemsIds.forEach((itemId) => {\n        if (!acc[itemId]) {\n          acc[itemId] = [];\n        }\n        acc[itemId].push(group.id);\n      });\n\n      return acc;\n    }, {});\n  }, [data]);\n\n  const groupsTypeahead = useMemo(\n    () =>\n      orderBy(\n        Object.keys(data).map((id) => ({ label: id, value: id })),\n        'label'\n      ),\n    [data]\n  );\n\n  const onUpdateItemGroups = (itemId: string, groupIds: string[]) => {\n    // Compare previous groups in items with new groups\n    const previousGroups = grousByItem[itemId] ?? [];\n    const groupsToAdd = groupIds.filter((id) => !previousGroups.includes(id));\n    const groupsToRemove = previousGroups.filter((id) => !groupIds.includes(id));\n\n    // Add item to groups\n    groupsToAdd.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates([...(data[groupId]?.itemsIds ?? []), itemId]),\n      });\n    });\n\n    // Remove item from groups\n    groupsToRemove.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates(data[groupId]?.itemsIds.filter((id) => id !== itemId)),\n      });\n    });\n  };\n\n  return (\n    <>\n      {is('display', 'group') && <ItemsGroupsByGroupTable data={data} />}\n      {is('display', 'item') && (\n        <ItemsGroupsByItemTable\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n        />\n      )}\n    </>\n  );\n}\n\nfunction ItemsGroupsByGroupTable({ data }: Pick<UseResourceFirebaseDataReturnType<ItemGroup>, 'data'>) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  const columns: TableProps<ItemGroup>['columns'] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n      render: (id) => <span>{id}</span>,\n    },\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <Flex gap={6} wrap=\"wrap\" key={`items-${record.id}`}>\n          {itemsIds.map((itemId) => (\n            <Flex key={`${record.id}-${itemId}`} gap={2} vertical>\n              <Item id={itemId} width={60} />\n              <Flex justify=\"center\">\n                <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n              </Flex>\n            </Flex>\n          ))}\n        </Flex>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n  ];\n\n  return <Table columns={columns} dataSource={Object.values(data)} className=\"my-4\" />;\n}\n\ntype ItemsGroupsByItemTableProps = {\n  items: Dictionary<ItemT>;\n  grousByItem: Record<string, string[]>;\n  groupsTypeahead: { value: string; label: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nfunction ItemsGroupsByItemTable({\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemsGroupsByItemTableProps) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const data = useMemo(\n    () => (showOnlyEmpty ? Object.values(items).filter((v) => !grousByItem[v.id]) : Object.values(items)),\n    [items, grousByItem, showOnlyEmpty]\n  );\n\n  const { page, pagination } = useGridPagination({ data });\n\n  return (\n    <>\n      <Typography.Title level={2}>Groups by Items ({data.length})</Typography.Title>\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemGroupsCard\n                item={item}\n                itemGroups={grousByItem[item.id]}\n                groupsTypeahead={groupsTypeahead}\n                onUpdateItemGroups={onUpdateItemGroups}\n              />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { ItemGroup } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nimport { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { SaveButton } from 'components/Common/SaveButton';\n\nexport function ItemsGroupsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { queryParams, addParam, is } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"items-groups.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'group'}\n        onChange={(mode) => addParam('display', mode)}\n        options={[\n          {\n            title: 'By Groups',\n            icon: <ClusterOutlined />,\n            value: 'group',\n          },\n          {\n            title: 'By Items',\n            icon: <TableOutlined />,\n            value: 'item',\n          },\n        ]}\n      />\n\n      <FilterSwitch\n        label=\"No Groups Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n    </SiderContent>\n  );\n}\nfunction prepareFileForDownload(groups: Dictionary<ItemGroup>) {\n  // TODO\n  return sortJsonKeys(groups);\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsGroupsContent } from 'components/Items/ItemsGroupsContent';\nimport { ItemsGroupsFilters } from 'components/Items/ItemsGroupsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { Item, ItemGroup } from 'types';\n\nexport function ItemsGroups() {\n  const groupsQuery = useResourceFirebaseData<ItemGroup>({\n    tdrResourceName: 'items-groups',\n    firebaseDataCollectionName: 'itemsGroups',\n    serialize: true,\n  });\n  const itemsTypeaheadQuery = useTDResource<Item>('items');\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Groups Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsGroupsFilters {...groupsQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={groupsQuery.isLoading || itemsTypeaheadQuery.isLoading}\n            error={groupsQuery.error || itemsTypeaheadQuery.error}\n            hasResponseData={!isEmpty(groupsQuery.data) && !isEmpty(itemsTypeaheadQuery.data)}\n          >\n            <ItemsGroupsContent {...groupsQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsGroups;\n"],"names":["ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","size","value","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","ItemGroupsCard","itemGroups","groupsTypeahead","onUpdateItemGroups","maxWidth","direction","mode","defaultValue","options","showSearch","onChange","groups","String","ItemsGroupsContent","data","addEntryToUpdate","is","useQueryParams","itemsTypeaheadQuery","useTDResource","grousByItem","useMemo","Object","values","reduce","acc","group","itemsIds","console","warn","forEach","push","orderBy","keys","map","label","ItemsGroupsByGroupTable","ItemsGroupsByItemTable","items","groupIds","previousGroups","groupsToAdd","filter","includes","groupsToRemove","groupId","removeDuplicates","columns","dataIndex","key","render","record","gap","wrap","vertical","justify","Boolean","length","dataSource","showOnlyEmpty","v","page","pagination","useGridPagination","level","PaginationWrapper","gutter","xs","sm","md","lg","xl","ItemsGroupsFilters","save","isDirty","isSaving","entriesToUpdate","queryParams","addParam","SaveButton","onSave","dirt","JSON","stringify","DownloadButton","prepareFileForDownload","sortJsonKeys","fileName","disabled","block","get","icon","ClusterOutlined","TableOutlined","ItemsGroups","groupsQuery","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","subtitle","hasSider","PageSider","DataLoadingWrapper","isLoading","error","hasResponseData","isEmpty"],"sourceRoot":""}