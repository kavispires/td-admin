{"version":3,"file":"static/js/DailySetup.e11237f0.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Daily/CanvasSVG.tsx","components/Daily/DataPopulation.tsx","components/Daily/SideFilters.tsx","pages/DailySetup.tsx"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: <Tooltip title={option.title}>{option.icon}</Tooltip>,\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","// Ant Design Resources\nimport { TableColumnsType, Table, Button, Flex, Space } from 'antd';\n// Components\n\nimport { UseLoadDailySetup, useSaveDailySetup } from './hooks';\n\nimport { DailyEntry } from './utils/types';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { ArteRuimCard } from 'types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { LANGUAGES } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={LANGUAGES}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[5, 15, 30, 45]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(2);\n  const [batchSize, setBatchSize] = useState(45);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","FilterSegments","block","option","title","icon","CanvasSVG","drawing","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DataPopulation","language","dataLoad","queryLanguage","columns","dataIndex","key","render","number","cardId","text","drawings","direction","split","l","i","join","setId","words","letters","keyword","word","cards","card","id","save","isPending","useSaveDailySetup","justify","align","entries","onClick","loading","type","dataSource","SideFilters","setLanguage","drawingsCount","setDrawingsCount","batchSize","setBatchSize","LANGUAGES","useState","useLoadDailySetup","Boolean","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}