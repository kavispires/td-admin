{"version":3,"file":"static/js/MovieMaker.8e44fe59.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/CopyToClipboardButton.tsx","components/DataLoadingWrapper.tsx","components/Images/ImageCard.tsx","hooks/useBaseUrl.ts","hooks/useCardWidth.ts","hooks/useCopyToClipboardFunction.ts","hooks/useQueryParams.ts","hooks/useTDResource.ts","components/Movie/ActorRole.tsx","components/Movie/FeatureFilmView.tsx","pages/MovieMaker.tsx"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: <Tooltip title={option.title}>{option.icon}</Tooltip>,\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Button, ButtonProps } from 'antd';\n\nimport { CopyOutlined } from '@ant-design/icons';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype CopyToClipboardButtonProps = {\n  content: string;\n} & ButtonProps;\n\nexport function CopyToClipboardButton({\n  content,\n  shape,\n  icon,\n  size,\n  ...buttonProps\n}: CopyToClipboardButtonProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Button\n      shape={shape ?? 'circle'}\n      icon={icon ?? <CopyOutlined />}\n      size={size ?? 'small'}\n      onClick={() => copyToClipboard(content)}\n      {...buttonProps}\n    />\n  );\n}\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  let baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { Ref, useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\n/**\n * Get a card width in px based on the window size of given container used with the containerRef\n * @param quantity how many cards should be fitted in the page screen width\n * @param options the options object\n * @param options.gap total value of padding and margin on the left and right of the card\n * @param options.minWidth minimum width of a card\n * @param options.maxWidth maximum width of a card\n * @param options.margin the outer margin of the container that should be removed from the width\n * @returns\n */\nexport function useCardWidth(\n  quantity: number,\n  options?: {\n    gap?: number;\n    minWidth?: number;\n    maxWidth?: number;\n    margin?: number;\n  }\n): [number, Ref<HTMLDivElement>] {\n  const [ref, { width }] = useMeasure();\n  const { gap = 32, minWidth = 120, maxWidth = 300, margin = 0 } = options ?? {};\n\n  const cardWidth = useMemo(() => {\n    const value = Math.min(Math.max(Math.floor((width - margin) / quantity) - gap, minWidth), maxWidth);\n    return Number.isNaN(value) ? minWidth : value;\n  }, [width, quantity, gap, minWidth, maxWidth, margin]);\n\n  const containerRef = ref as Ref<HTMLDivElement>;\n\n  return [cardWidth, containerRef];\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { Tag, Typography } from 'antd';\nimport { ImageCard } from 'components/Images/ImageCard';\nimport { useCardWidth } from 'hooks/useCardWidth';\n\nimport { ColumnHeightOutlined, ColumnWidthOutlined, ManOutlined, WomanOutlined } from '@ant-design/icons';\n\nimport { FeatureFilRole } from './FeatureFilmView';\n\ntype ActorRoleProps = {\n  role: FeatureFilRole;\n  language: Language;\n};\n\nexport function ActorRole({ role, language }: ActorRoleProps) {\n  const [cardWidth] = useCardWidth(8);\n\n  return (\n    <div key={role.id}>\n      <Typography.Title level={3}>{role.title[language]}</Typography.Title>\n      <div className=\"suspect\" style={{ width: `${cardWidth}px` }}>\n        <ImageCard id={role.actor.id} width={cardWidth} className=\"suspect__image\" />\n\n        <div className=\"suspect__name\">\n          <div>\n            <Tag>{role.actor.id}</Tag>\n          </div>\n          <div>🇧🇷 {role.actor.name.pt}</div>\n          <div>🇺🇸 {role.actor.name.en}</div>\n          <div className=\"suspect__info\">\n            <div>\n              <div>\n                {role.actor.gender === 'male' ? <ManOutlined /> : <WomanOutlined />} {role.actor.age}\n              </div>\n              <div>\n                <em>{role.actor.ethnicity}</em>\n              </div>\n            </div>\n            <div>\n              <ColumnWidthOutlined />\n              <br />\n              {role.actor.build}\n            </div>\n            <div>\n              <ColumnHeightOutlined />\n              <br />\n              {role.actor.height}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <br />\n      <strong>Traits:</strong>\n      <ul>\n        {role.traits.map((trait) => (\n          <li key={trait}>{trait}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Button, Divider, Flex, Input, Space, Tag, Typography } from 'antd';\nimport { cloneDeep, sample, sampleSize, shuffle } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item, MovieCard, MovieGenres, SuspectCard, TestimonyQuestionCard } from 'types';\nimport { CopyToClipboardButton } from 'components/CopyToClipboardButton';\nimport { ActorRole } from './ActorRole';\n\nexport type FeatureFilRole = {\n  actor: SuspectCard;\n  traits: string[];\n  id: string;\n  title: DualLanguageValue;\n  description: DualLanguageValue;\n  complexity: number;\n  pool: number;\n  type: string;\n};\n\nexport type FeatureFilm = {\n  movieTitle: string;\n  genre: { id: string; name: DualLanguageValue; rating: number; rolesIds: string[] };\n  subGenre: { id: string; name: DualLanguageValue; rating: number; rolesIds: string[] };\n  castingRoles: FeatureFilRole[];\n  features: { id: string; name: DualLanguageValue; probability: number; rating: number }[];\n  rating: number;\n  props: Item[];\n};\n\ntype FeatureFilmViewProps = {\n  movieTitles: MovieCard[];\n  movieGenres: MovieGenres;\n  movieActors: SuspectCard[];\n  characterTraits: TestimonyQuestionCard[];\n  items: Item[];\n  language: Language;\n};\n\nexport function FeatureFilmView({\n  movieTitles,\n  movieGenres,\n  movieActors,\n  characterTraits,\n  items,\n  language,\n}: FeatureFilmViewProps) {\n  const [featureFilm, setFeatureFilm] = useState<FeatureFilm>({\n    movieTitle: '',\n    genre: { id: '', name: { pt: '', en: '' }, rating: 0, rolesIds: [] },\n    subGenre: { id: '', name: { pt: '', en: '' }, rating: 0, rolesIds: [] },\n    castingRoles: [],\n    features: [],\n    rating: 0,\n    props: [],\n  });\n\n  const moviePrompt = useMemo(() => buildMoviePrompt(featureFilm), [featureFilm]);\n  const tvShowPrompt = useMemo(() => buildTVSeriesPrompt(featureFilm), [featureFilm]);\n\n  const onCreateFeatureFilm = () =>\n    setFeatureFilm(buildFeatureFilm(movieTitles, movieGenres, movieActors, characterTraits, items));\n\n  return (\n    <>\n      <Button onClick={onCreateFeatureFilm}>Create Feature Film</Button>\n\n      {Boolean(featureFilm) && (\n        <>\n          <Typography.Title level={2}>{featureFilm!.movieTitle || '?'}</Typography.Title>\n          <Typography.Paragraph>\n            <strong>Genre:</strong> {featureFilm.genre.name[language]}\n            <br />\n            <strong>Sub-genre:</strong> {featureFilm.subGenre.name[language]}\n            <br />\n            <strong>Rating:</strong> {featureFilm.rating}\n            <br />\n            {\n              <Flex>\n                <strong>Features:</strong>\n                {featureFilm.features.map((feature) => (\n                  <Tag key={feature.id}>{feature.name[language]}</Tag>\n                ))}\n              </Flex>\n            }\n            {\n              <Flex>\n                <strong>Key Objects:</strong>\n                {featureFilm.props.map((item) => (\n                  <Tag key={item.id}>{item.name[language]}</Tag>\n                ))}\n              </Flex>\n            }\n          </Typography.Paragraph>\n\n          <Space style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', alignItems: 'flex-start' }}>\n            {featureFilm.castingRoles.map((role) => (\n              <ActorRole key={role.id} role={role} language={language} />\n            ))}\n          </Space>\n\n          <Divider />\n\n          <Typography.Title level={2}>\n            Movie Prompt <CopyToClipboardButton content={moviePrompt} />\n          </Typography.Title>\n          <Input.TextArea value={moviePrompt} autoSize={{ minRows: 3, maxRows: 10 }} />\n\n          <Typography.Title level={2}>\n            TV Series Prompt <CopyToClipboardButton content={tvShowPrompt} />\n          </Typography.Title>\n          <Input.TextArea value={tvShowPrompt} autoSize={{ minRows: 3, maxRows: 10 }} />\n        </>\n      )}\n    </>\n  );\n}\n\nconst buildFeatureFilm = (\n  movieTitles: MovieCard[],\n  movieGenres: MovieGenres,\n  movieActors: SuspectCard[],\n  characterTraits: TestimonyQuestionCard[],\n  items: Item[]\n): FeatureFilm => {\n  // Define title\n  const movieTitle = sampleSize(movieTitles, 2)\n    .map((title, index) => {\n      return index % 2 === 0 ? title.prefix : title.suffix;\n    })\n    .join(' ');\n\n  // Rating\n  let rating = 0;\n\n  // Define genre\n  const selectedGenre = sample(Object.values(movieGenres.genres ?? {}));\n  if (!selectedGenre) {\n    throw new Error('No genre found');\n  }\n  rating += selectedGenre.rating;\n\n  // Define sub-genres\n  const selectedSubGenre = sample(Object.values(movieGenres.subGenres ?? {}));\n  if (!selectedSubGenre) {\n    throw new Error('No sub-genre found');\n  }\n  rating += selectedSubGenre.rating;\n\n  // Define features\n  let features: MovieGenres['features'][keyof MovieGenres['features']][] = [];\n  Object.values(movieGenres.features ?? {}).forEach((feature) => {\n    const hasFeature = Math.random() < feature.probability;\n\n    if (hasFeature) {\n      features.push(feature);\n      rating += feature.rating;\n    }\n  });\n\n  // Define roles\n  const preselectedRoles: MovieGenres['roles'][keyof MovieGenres['roles']][] = [];\n  selectedGenre.rolesIds.forEach((roleId) => {\n    preselectedRoles.push(movieGenres.roles[roleId]);\n  });\n  selectedSubGenre.rolesIds.forEach((roleId) => {\n    preselectedRoles.push(movieGenres.roles[roleId]);\n  });\n  const roles = getFirstNUniqueRoles(preselectedRoles, 5);\n\n  const selectedActors = sampleSize(movieActors, roles.length);\n  const shuffledTraits = cloneDeep(shuffle(characterTraits));\n\n  // Define traits\n  const castingRoles = roles.map((role, index) => {\n    return {\n      ...role,\n      actor: { ...selectedActors[index], id: getSuspectCTId(selectedActors[index].id) },\n      traits: shuffledTraits.splice(0, role.complexity).map((trait) => trait.answer),\n    };\n  });\n\n  // Define actors\n\n  return {\n    movieTitle,\n    genre: selectedGenre,\n    subGenre: selectedSubGenre,\n    castingRoles,\n    features,\n    rating,\n    props: sampleSize(items, 8),\n  };\n};\n\nconst buildMoviePrompt = (movie: FeatureFilm) => {\n  let prompt = `Escreva o resumo de um filme de ${movie.genre.name.pt}/${movie.subGenre.name.pt} entitulado \"${movie.movieTitle}\"`;\n\n  if (movie.features.length > 0) {\n    prompt += ` que contenha os seguintes elementos: ${movie.features.map((item) => item.name.pt).join(', ')}`;\n  }\n\n  prompt += `. Incorpore os personagens as suas características na trama, seja criativo e também incorpore esses objetos na trama: ${movie.props\n    .slice(0, 3)\n    .map((item) => item.name.pt)\n    .join(\n      ', '\n    )}. Para a idade, escolha um número aleatório dentre a faixa dada, por exemplo 20-30, diga 26 anos. Não use parenteses no texto. Adicione um plot twist inesperado. Aqui vão os personagens: \\n`;\n\n  movie.castingRoles.forEach((role) => {\n    prompt += `\\n${role.title.pt}: ${role.actor.name.pt.split(' ')[0]}, ${role.actor.age} anos, ${genders[role.actor.gender]}, ${ethnicity[role.actor.ethnicity]}, com as características: ${role.traits.join(', ')}.\\n`;\n  });\n\n  return prompt;\n};\n\nconst buildTVSeriesPrompt = (movie: FeatureFilm) => {\n  let prompt = `Escreva o resumo de cada um dos 8 episódios dá série de ${movie.genre.name.pt}/${movie.subGenre.name.pt} entitulada \"${movie.movieTitle}\"`;\n\n  if (movie.features.length > 0) {\n    prompt += ` que contenha os seguintes elementos: ${movie.features.map((item) => item.name.pt).join(', ')}`;\n  }\n\n  prompt += `. Incorpore o título da série e todos os personagens as suas características na trama, seja criativo e também incorpore esses objetos na trama: ${movie.props.map((item) => item.name.pt).join(', ')}. Para a idade, escolha um número aleatório dentre a faixa dada, por exemplo 20-30, diga 26 anos. Não use parenteses no texto. Cada episódio deve terminar com um cliffhanger e o próximo episódio deve continuar desse cliffhanger. Aqui vão os personagens: \\n`;\n\n  movie.castingRoles.forEach((role) => {\n    prompt += `\\n${role.title.pt}: ${role.actor.name.pt.split(' ')[0]}, ${role.actor.age} anos, ${genders[role.actor.gender]}, ${ethnicity[role.actor.ethnicity]}, com as características: ${role.traits.join(', ')}.\\n`;\n  });\n\n  return prompt;\n};\n\nconst genders: StringDictionary = {\n  female: 'mulher',\n  male: 'homem',\n};\nconst ethnicity: StringDictionary = {\n  asian: 'asiático',\n  black: 'negro',\n  caucasian: 'branco',\n  latino: 'latino',\n  mixed: 'mestiço',\n  'middle-eastern': 'oriente-médio',\n  'native-american': 'nativo-americano',\n  indian: 'indiano',\n};\n\nfunction getFirstNUniqueRoles(\n  roles: MovieGenres['roles'][keyof MovieGenres['roles']][],\n  quantity: number\n): MovieGenres['roles'][keyof MovieGenres['roles']][] {\n  const uniqueRoles: MovieGenres['roles'][keyof MovieGenres['roles']][] = [];\n  const seenIds = new Set<string>();\n\n  for (const role of roles) {\n    if (!seenIds.has(role.id)) {\n      uniqueRoles.push(role);\n      seenIds.add(role.id);\n\n      if (uniqueRoles.length === quantity) {\n        break;\n      }\n    }\n  }\n\n  return uniqueRoles;\n}\n\nfunction getSuspectCTId(id: string) {\n  return id.split('-').join('-ct-');\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useTDResource, useTDResourceNonCollection } from 'hooks/useTDResource';\nimport { Item, MovieCard, MovieGenres, SuspectCard, TestimonyQuestionCard } from 'types';\nimport { FeatureFilmView } from 'components/Movie/FeatureFilmView';\n\nfunction MovieMaker() {\n  const { queryParams } = useQueryParams({ language: 'pt' });\n  const language = (queryParams.get('language') ?? 'pt') as Language;\n  // Gather movie title\n  const movieTitleQuery = useTDResource<MovieCard>(`movies-${language}`);\n  // Gather movie genres\n  const movieGenresQuery = useTDResourceNonCollection<MovieGenres>('movie-genres');\n  // Gather movie actors\n  const movieActorsQuery = useTDResource<SuspectCard>('suspects');\n  // Gather character traits\n  const characterTraitsQuery = useTDResource<TestimonyQuestionCard>(`testimony-questions-${language}`);\n  // Gather items\n  const itemsQuery = useTDResource<Item>('items');\n\n  const hasResponseData =\n    movieTitleQuery.hasResponseData &&\n    movieGenresQuery.hasResponseData &&\n    movieActorsQuery.hasResponseData &&\n    itemsQuery.hasResponseData &&\n    characterTraitsQuery.hasResponseData;\n  const isLoading =\n    movieTitleQuery.isLoading ||\n    movieGenresQuery.isLoading ||\n    movieActorsQuery.isLoading ||\n    itemsQuery.isLoading ||\n    characterTraitsQuery.isLoading;\n  const error =\n    movieTitleQuery.error || movieGenresQuery.error || movieActorsQuery.error || characterTraitsQuery.error;\n\n  // const roleStats = useMemo(() => {\n  //   const roleStats: Record<string, number> = {};\n\n  //   Object.values(movieGenresQuery.data?.roles ?? {}).forEach((role) => {\n  //     roleStats[role.id] = 0;\n  //   });\n\n  //   Object.values(movieGenresQuery.data?.genres ?? {}).forEach((genre) => {\n  //     genre.rolesIds.forEach((roleId) => {\n  //       roleStats[roleId]++;\n  //     });\n  //   });\n\n  //   Object.values(movieGenresQuery.data?.subGenres ?? {}).forEach((genre) => {\n  //     genre.rolesIds.forEach((roleId) => {\n  //       roleStats[roleId]++;\n  //     });\n  //   });\n  //   return roleStats;\n  // }, [movieGenresQuery.data]);\n\n  return (\n    <PageLayout title=\"Movie Maker\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState hasResponseData={hasResponseData} isLoading={isLoading} error={error} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper hasResponseData={hasResponseData} isLoading={isLoading} error={error}>\n            <FeatureFilmView\n              movieTitles={Object.values(movieTitleQuery.data)}\n              movieGenres={movieGenresQuery.data!}\n              movieActors={Object.values(movieActorsQuery.data)}\n              characterTraits={Object.values(characterTraitsQuery.data)}\n              items={Object.values(itemsQuery.data)}\n              language={language}\n            />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default MovieMaker;\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","block","option","title","icon","CopyToClipboardButton","content","shape","buttonProps","copyToClipboard","useCopyToClipboardFunction","onClick","DataLoadingWrapper","tip","message","description","type","showIcon","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","library","baseUrl","process","folder","Error","path","join","useCardWidth","quantity","ref","useMeasure","gap","maxWidth","margin","useMemo","Math","floor","Number","isNaN","state","useCopyToClipboard","App","useEffect","length","info","truncate","omission","success","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","defaultValue","undefined","delete","set","String","addParams","params","defaultValues","Object","entries","forEach","removeParam","is","get","has","queryParams","useTDResource","resourceName","enabled","query","useQuery","queryKey","queryFn","async","res","fetch","json","isEmpty","data","useTDResourceNonCollection","ActorRole","role","language","cardWidth","actor","name","pt","en","gender","ManOutlined","WomanOutlined","age","ethnicity","ColumnWidthOutlined","build","ColumnHeightOutlined","height","traits","trait","FeatureFilmView","movieTitles","movieGenres","movieActors","characterTraits","items","featureFilm","setFeatureFilm","useState","movieTitle","genre","rating","rolesIds","subGenre","castingRoles","features","moviePrompt","buildMoviePrompt","tvShowPrompt","buildTVSeriesPrompt","buildFeatureFilm","Boolean","feature","item","display","gridTemplateColumns","alignItems","autoSize","minRows","maxRows","sampleSize","index","prefix","suffix","selectedGenre","sample","values","genres","selectedSubGenre","subGenres","random","probability","push","preselectedRoles","roleId","roles","uniqueRoles","seenIds","Set","add","getFirstNUniqueRoles","selectedActors","shuffledTraits","cloneDeep","shuffle","split","splice","complexity","answer","movie","prompt","slice","genders","female","male","asian","black","caucasian","latino","mixed","indian","movieTitleQuery","movieGenresQuery","movieActorsQuery","characterTraitsQuery","itemsQuery","hasSider","PageSider"],"sourceRoot":""}