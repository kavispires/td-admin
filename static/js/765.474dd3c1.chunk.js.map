{"version":3,"file":"static/js/765.474dd3c1.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/DataLoadingWrapper.tsx","components/Images/ImageCard.tsx","components/Images/ImageCards/hooks.ts","components/Images/ImageCards/constants.ts","components/Images/ImageCards/ImagesRelationshipsContext.tsx","components/Images/ImageCards/RelationshipsStats.tsx","components/Sprites/Sprite.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      Download JSON\n    </Button>\n  );\n}\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('tdi');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { cloneDeep, merge, padStart, random } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { CARDS_PER_DECK, DEFAULT_ENTRY, TOTAL_DECKS } from './constants';\nimport { FirebaseImageCardLibrary, ImageCardData, ImageCardRelationship } from './types';\nimport { UseMutateFunction, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { firestore } from 'services/firebase';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { App } from 'antd';\nimport { cleanupData } from './utils';\nimport { removeDuplicates } from 'utils';\n\nconst getRandomCardNumber = () => padStart(String(random(1, CARDS_PER_DECK)), 2, '0');\n\nconst getRandomDeck = () => random(1, TOTAL_DECKS);\n\nconst getRandomCardId = () => `td-d${getRandomDeck()}-${getRandomCardNumber()}`;\n\nexport type UseRandomCardReturnValue = {\n  cardId: string;\n  deck: number;\n  onRandomCard: () => void;\n  card: ImageCardData;\n  add: (key: keyof ImageCardData, value: string) => void;\n  remove: (key: keyof ImageCardData, value: string) => void;\n  update: (key: keyof ImageCardData, value: string[]) => void;\n  toggleHighlight: () => void;\n};\n\nexport function useRandomCard(\n  cardData: FirebaseImageCardLibrary,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n): UseRandomCardReturnValue {\n  const [deck, setDeck] = useState(getRandomDeck());\n  const [cardNumber, setCardNumber] = useState(getRandomCardNumber());\n  const cardId = `td-d${deck}-${cardNumber}`;\n\n  const onRandomCard = () => {\n    setDeck(getRandomDeck());\n    setCardNumber(getRandomCardNumber());\n  };\n\n  const card = merge(cloneDeep(DEFAULT_ENTRY), cardData?.[cardId] ?? {});\n\n  const add = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      card[key]!.push(value);\n      setDirty(true);\n    }\n  };\n\n  const remove = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      const entry = card[key] ?? [];\n      entry.splice(entry.indexOf(value), 1);\n      setDirty(true);\n    }\n  };\n\n  const update = (key: keyof ImageCardData, value: string[]) => {\n    if (key !== 'highlight') {\n      card[key] = value.map((v) => v.trim().toLowerCase());\n      setDirty(true);\n    }\n  };\n\n  const toggleHighlight = () => {\n    card.highlight = !card.highlight;\n    setDirty(true);\n  };\n\n  useEffect(() => {\n    cardData[cardId] = card;\n  }, [card]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    cardId,\n    deck,\n    onRandomCard,\n    card,\n    add,\n    remove,\n    update,\n    toggleHighlight,\n  };\n}\n\nexport function useImageCardsData() {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCards'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    refetch,\n  } = useQuery<any>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as FirebaseImageCardLibrary;\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'Data loaded',\n        placement: 'bottomLeft',\n      });\n      setDirty(false);\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  const {\n    isLoading: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, FirebaseImageCardLibrary, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const cleanData = cleanupData(data);\n      await setDoc(docRef, cleanData);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries(queryKey);\n      setDirty(false);\n    },\n  });\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n  };\n}\n\nexport function useRandomCards(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n) {\n  const [deckA, setDeckA] = useState(getRandomDeck());\n  const [cardNumberA, setCardNumberA] = useState(getRandomCardNumber());\n  const [deckB, setDeckB] = useState(getRandomDeck());\n  const [cardNumberB, setCardNumberB] = useState(getRandomCardNumber());\n  const cardAId = `td-d${deckA}-${cardNumberA}`;\n  const cardBId = `td-d${deckB}-${cardNumberB}`;\n  const [unrelatedCount, setUnrelatedCount] = useState(0);\n\n  const cardA = cardData?.[cardAId] ?? [];\n  const cardB = cardData?.[cardBId] ?? [];\n\n  const onRandomCards = () => {\n    setUnrelatedCount(0);\n    setDeckA(getRandomDeck());\n    setCardNumberA(getRandomCardNumber());\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const relate = () => {\n    setUnrelatedCount(0);\n    cardA.push(cardBId);\n    cardData[cardAId] = cardA;\n    cardB.push(cardAId);\n    cardData[cardBId] = cardB;\n    setDirty(true);\n    setDeckA(deckB);\n    setCardNumberA(cardNumberB);\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const unrelate = () => {\n    if (unrelatedCount >= 10) {\n      setUnrelatedCount(0);\n      onRandomCards();\n    } else {\n      setUnrelatedCount((ps) => ps + 1);\n      setDeckB(getRandomDeck());\n      setCardNumberB(getRandomCardNumber());\n    }\n  };\n\n  useEffect(() => {\n    if (cardAId === cardBId) {\n      setCardNumberB(getRandomCardNumber());\n    }\n  }, [cardAId, cardBId]);\n\n  return {\n    cardAId,\n    cardA,\n    cardBId,\n    cardB,\n    relate,\n    unrelate,\n    areRelated: cardA.includes(cardBId),\n    onRandomCards,\n  };\n}\n\ntype Stats = {\n  total: number;\n  overdone: number;\n  complete: number;\n  single: number;\n};\n\nexport type UseImageCardsRelationshipDataReturnValue = {\n  data: ImageCardRelationship;\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  hasData: boolean;\n  refetch: () => void;\n  isSaving: boolean;\n  isMutationError: boolean;\n  isSaved: boolean;\n  save: UseMutateFunction<{}, unknown, ImageCardRelationship, unknown>;\n  setDirty: (value: React.SetStateAction<boolean>) => void;\n  isDirty: boolean;\n  stats: Stats;\n};\n\nexport function useImageCardsRelationshipData(): UseImageCardsRelationshipDataReturnValue {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCardsRelationships'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n  const [stats, setStats] = useState<Stats>({ total: 0, overdone: 0, complete: 0, single: 0 });\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    isFetched,\n    isRefetching,\n    refetch,\n  } = useQuery<Record<string, string[]>>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as ImageCardRelationship;\n    },\n  });\n\n  const {\n    isLoading: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, ImageCardRelationship, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n\n      await setDoc(docRef, data);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries(queryKey);\n      setDirty(false);\n    },\n  });\n\n  useEffect(() => {\n    if (!isRefetching && isFetched) {\n      const total = Object.keys(data).length;\n      let overdone = 0;\n      let complete = 0;\n      let single = 0;\n      Object.values(data).forEach((v) => {\n        if (v.length > 8) {\n          overdone += 1;\n        }\n        if (v.length === 1) {\n          single += 1;\n        }\n        if (v.length > 2) {\n          complete += 1;\n        }\n      });\n      setStats({ total, overdone, complete, single });\n    }\n  }, [isFetched, isRefetching]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n    stats,\n  };\n}\n\nexport type UseRandomGroupReturnValue = {\n  cardIds: string[];\n  cards: string[][];\n  selection: string[];\n  onSelect: (id: string) => void;\n  relate: () => void;\n  nextSet: () => void;\n  deselectAll: () => void;\n  cycles: number;\n  filters: { useCycles: boolean; toggleUseCycles: () => void };\n};\n\nexport function useRandomGroups(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n  sampleSize: number,\n  tagThreshold: number\n): UseRandomGroupReturnValue {\n  const [cardIds, setCardIds] = useState<string[]>([]);\n  const [cards, setCards] = useState<string[][]>([]);\n  const [cycledCards, setCycleCards] = useState<string[]>([]);\n  const [cycles, setCycles] = useState(0);\n  const [filterUseCycles, setFIlterUseCycles] = useState(true);\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  const updateCards = (ids?: string[]) => {\n    setCards((ids ?? cardIds).map((id) => cardData?.[id] ?? []));\n  };\n\n  const onRandomCards = () => {\n    // setSelection([]);\n    const ids: string[] = [...selection];\n    let cycleCount = 0;\n    const cycledCardsSample = cycledCards.length < 2000 ? cycledCards : [];\n\n    // Avoid infinite loop failsafe\n    let tries = 0;\n    while (tries < 400 && ids.length < sampleSize) {\n      const id = getRandomCardId();\n      const card = cardData[id] ?? [];\n      const isNew = tagThreshold > 0 ? card.length < tagThreshold : true;\n      const isCycled = filterUseCycles ? cycledCardsSample.includes(id) : false;\n      if (!ids.includes(id) && !isCycled && isNew) {\n        ids.push(id);\n        cycleCount += 1;\n      }\n      tries += 1;\n    }\n    setCardIds(ids);\n    setCycleCards((pv) => [...pv, ...ids]);\n    updateCards(ids);\n    setCycles((ps) => ps + cycleCount);\n  };\n\n  // On Load get sample of cards\n  useEffect(() => {\n    if (cardIds.length === 0) {\n      onRandomCards();\n    }\n  }, [cardIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Selects or deselects a card\n   */\n  const onSelect = (id: string) => {\n    setSelection((ps) => {\n      const copy = [...ps];\n      const index = copy.indexOf(id);\n      if (index > -1) {\n        copy.splice(index, 1);\n      } else {\n        copy.push(id);\n      }\n      return copy;\n    });\n  };\n\n  /**\n   * Relates all selected cards in the selection array\n   */\n  const relate = () => {\n    selection.forEach((id) => {\n      const card = cardData[id] ?? [];\n\n      card.push(...selection.filter((s) => s !== id));\n      cardData[id] = removeDuplicates(card);\n    });\n    setDirty(true);\n    setSelection([]);\n    updateCards();\n    setCycleCards([]);\n    setCycles(0);\n  };\n\n  /**\n   * Deselects all cards\n   */\n  const deselectAll = () => {\n    setSelection([]);\n  };\n\n  const toggleFilterUseCycles = () => {\n    setFIlterUseCycles((ps) => !ps);\n  };\n\n  return {\n    cardIds,\n    cards,\n    selection,\n    onSelect,\n    relate,\n    nextSet: onRandomCards,\n    deselectAll,\n    cycles,\n    filters: {\n      useCycles: filterUseCycles,\n      toggleUseCycles: toggleFilterUseCycles,\n    },\n  };\n}\n","import { ImageCardData } from './types';\n\nexport const TOTAL_DECKS = 10;\n\nexport const CARDS_PER_DECK = 252;\n\nexport const SUGGESTED_MOODS = [\n  'anxious',\n  'bright',\n  'chaotic',\n  'colorful',\n  'confusion',\n  'cozy',\n  'creepy',\n  'dark',\n  'dramatic',\n  'dreamy',\n  'fear',\n  'gloomy',\n  'happy',\n  'intense',\n  'magical',\n  'melancholic',\n  'muted',\n  'mysterious',\n  'professional',\n  'reflective',\n  'scary',\n  'serene',\n  'surreal',\n  'tension',\n  'vibrant',\n  'warm',\n  'whimsical',\n];\n\nexport const SUGGESTED_COLORS = [\n  'beige',\n  'black',\n  'blue',\n  'brown',\n  'colorful',\n  'gray',\n  'green',\n  'mixed',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'white',\n  'yellow',\n];\n\nexport const DEFAULT_ENTRY: ImageCardData = {\n  focus: [],\n  actions: [],\n  colors: [],\n  mood: [],\n  elements: [],\n  highlight: false,\n};\n","import { ReactNode, useContext, createContext, useState } from 'react';\nimport {\n  UseImageCardsRelationshipDataReturnValue,\n  UseRandomGroupReturnValue,\n  useImageCardsRelationshipData,\n  useRandomGroups,\n} from './hooks';\n\nexport type ImagesRelationshipsContextType = {\n  sampleSize: number;\n  setSampleSize: (size: number) => void;\n  tagThreshold: number;\n  setTagThreshold: (threshold: number) => void;\n  cardSize: number;\n  setCardSize: (size: number) => void;\n  showIds: boolean;\n  setShowIds: (show: boolean) => void;\n  randomGroups: UseRandomGroupReturnValue;\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nconst ImagesRelationshipsContext = createContext<ImagesRelationshipsContextType | PlainObject>({});\n\ntype ImagesRelationshipsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ImagesRelationshipsProvider = ({ children }: ImagesRelationshipsProviderProps) => {\n  const query = useImageCardsRelationshipData();\n\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(150);\n  const [showIds, setShowIds] = useState(false);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const randomGroups = useRandomGroups(query.data, query.setDirty, sampleSize, tagThreshold);\n\n  return (\n    <ImagesRelationshipsContext.Provider\n      value={{\n        sampleSize,\n        setSampleSize,\n        tagThreshold,\n        setTagThreshold,\n        cardSize,\n        setCardSize,\n        showIds,\n        setShowIds,\n        randomGroups,\n        query,\n      }}\n    >\n      {children}\n    </ImagesRelationshipsContext.Provider>\n  );\n};\n\nexport const useImagesRelationshipsContext = () => useContext(ImagesRelationshipsContext);\n","import { BarChartOutlined } from '@ant-design/icons';\nimport { Form, Avatar } from 'antd';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\n\nexport function RelationshipsStats() {\n  const {\n    query: { stats },\n  } = useImagesRelationshipsContext();\n\n  return (\n    <Form.Item\n      label={\n        <>\n          <Avatar icon={<BarChartOutlined />} shape=\"square\" size=\"small\" style={{ marginRight: 6 }} />\n          Stats\n        </>\n      }\n    >\n      <ul className=\"statistic__list\">\n        <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n        <li>Total Relationships: {stats.total}</li>\n        <li>Complete: {stats.complete}</li>\n        <li>Overdone: {stats.overdone}</li>\n        <li>Single Match: {stats.single}</li>\n      </ul>\n    </Form.Item>\n  );\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('tdi');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'tdr' | 'tdi' | 'tdi-data') {\n  let baseUrl: string | undefined = '';\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'tdi':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_IMAGES;\n      break;\n    case 'tdi-data':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_DATA;\n      break;\n    default:\n      baseUrl =\n        process.env.NODE_ENV === 'development'\n          ? process.env.REACT_APP_LOCAL_URL\n          : process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TD_RESOURCES;\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 1418;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '',\n  DETERMINISTIC: '+',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n    ...sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED),\n    ...sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n"],"names":["DownloadButton","data","fileName","loading","props","onClick","downloadObjectAsFile","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","DataLoadingWrapper","tip","message","description","type","showIcon","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","getRandomCardNumber","padStart","String","random","getRandomDeck","ImagesRelationshipsContext","createContext","ImagesRelationshipsProvider","query","setDirty","useState","queryKey","queryClient","useQueryClient","notification","App","stats","setStats","total","overdone","complete","single","isSuccess","isFetched","isRefetching","refetch","useQuery","queryFn","async","docRef","doc","firestore","getDoc","isSaving","isMutationError","isSaved","mutate","save","useMutation","mutationKey","mutationFn","setDoc","onSuccess","success","placement","refetchQueries","useEffect","Object","keys","length","values","forEach","hasData","useImageCardsRelationshipData","sampleSize","setSampleSize","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","randomGroups","cardData","cardIds","setCardIds","cards","setCards","cycledCards","setCycleCards","cycles","setCycles","filterUseCycles","setFIlterUseCycles","selection","setSelection","updateCards","ids","onRandomCards","cycleCount","cycledCardsSample","tries","card","isNew","isCycled","includes","push","pv","ps","onSelect","copy","index","indexOf","splice","relate","filter","s","removeDuplicates","nextSet","deselectAll","filters","useCycles","toggleUseCycles","useRandomGroups","Provider","useImagesRelationshipsContext","useContext","RelationshipsStats","icon","shape","marginRight","Math","floor","Sprite","source","padding","title","response","fetch","text","enabled","paddedWidth","height","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","AlienSign","Emoji","emojiId","startsWith","getSource","memoize","str","match","numId","parseInt","glyphId","sourceId","ceil","Glyph","itemId","Item","library","baseUrl","folder","process","path","join","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","key","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","stringRemoveAccents","normalize","checkForDuplicates","property","unique","duplicates","console","entryKey","undefined","findSimilar","similar","trim","val","JSON","stringify","entryStr","stringSimilarity","arr","Array","from","Set","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","sortBy","_","fromPairs","getCurrentDateTime","now","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","cloneDeep","merge","en","pt","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","entries","attributeId","parseAttribute","keyVariant","variant","slice","filterMessage","showUnclear","showUnrelated"],"sourceRoot":""}