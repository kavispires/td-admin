{"version":3,"file":"static/js/Contenders.784434fe.chunk.js","mappings":"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","sources":["components/Common/DataFilters.tsx","components/Common/PaginationWrapper.tsx","components/Common/SaveButton.tsx","components/Images/ImageCard.tsx","hooks/useGridPagination.tsx","hooks/useResourceFirebaseData.ts","hooks/useUpdateFirebaseDoc.tsx","components/Contenders/ContenderEditCard.tsx","components/Contenders/ContendersContent.tsx","components/Contenders/ContendersFilters.tsx","pages/Contenders.tsx"],"sourcesContent":["import { Flex } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { capitalize, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { FilterSelect } from './FilterEntries';\n\nexport function buildDataFilters<T extends PlainObject>(data: Dictionary<T>, ignoreKeys: string[] = []) {\n  const keys = Object.keys(\n    Object.values(data).reduce((acc: Dictionary<boolean>, entry) => {\n      Object.keys(entry).forEach((key) => {\n        if (!acc[key] && !ignoreKeys.includes(key)) {\n          acc[key] = true;\n        }\n      });\n\n      return acc;\n    }, {}),\n  );\n\n  const sortableKeys: string[] = [];\n  const filters: { label: string; options: { label: string; value: any }[] }[] = [];\n\n  keys.forEach((key) => {\n    const values = Object.values(data).map((entry) => entry[key]);\n    const uniqueValues = Array.from(new Set(values));\n    const uniqueValueRatio = uniqueValues.length / values.length;\n\n    if (uniqueValueRatio >= 0.05) {\n      sortableKeys.push(key);\n    }\n\n    if (uniqueValueRatio <= 0.9) {\n      filters.push({\n        label: key,\n        options: [\n          { label: 'All', value: '' },\n          ...uniqueValues.sort().map((value) => ({ label: String(value), value })),\n        ],\n      });\n    }\n  });\n\n  return { filters, sortableKeys };\n}\n\ntype DataFiltersProps<T extends PlainObject> = {\n  data: Dictionary<T>;\n  ignoreKeys?: string[];\n};\n\nexport function DataFilters<T extends PlainObject>({ data, ignoreKeys = [] }: DataFiltersProps<T>) {\n  const { queryParams, addParam } = useQueryParams();\n  const filters = useMemo(() => buildDataFilters(data, ignoreKeys), [data, ignoreKeys]);\n\n  return (\n    <Flex vertical style={{ overflowY: 'auto' }}>\n      {filters.filters.map((filter) => (\n        <FilterSelect\n          key={filter.label}\n          label={capitalize(filter.label)}\n          options={filter.options}\n          onChange={(value) => addParam(filter.label.toLowerCase(), value)}\n          value={queryParams.get(filter.label.toLowerCase()) ?? ''}\n        />\n      ))}\n\n      <FilterSelect\n        label=\"Sort by\"\n        options={filters.sortableKeys.map((key) => ({ label: capitalize(key), value: key }))}\n        onChange={(value) => addParam('sort', value)}\n        value={queryParams.get('sort') ?? ''}\n      />\n\n      <FilterSelect\n        label=\"Order\"\n        options={[\n          { label: 'Ascending', value: 'asc' },\n          { label: 'Descending', value: 'desc' },\n        ]}\n        onChange={(value) => addParam('order', value)}\n        value={queryParams.get('order') ?? 'asc'}\n      />\n    </Flex>\n  );\n}\n\nexport function useFilterDataByDataFilters<T extends PlainObject>(data: Dictionary<T>) {\n  const { queryParams } = useQueryParams();\n  const filters = useMemo(() => buildDataFilters(data), [data]);\n  const activeQueryParams = useMemo(() => {\n    return Array.from(queryParams.entries())\n      .filter(([key]) => {\n        return filters.filters.some((filter) => filter.label.toLowerCase() === key);\n      })\n      .reduce((acc: Dictionary<any>, [key, value]) => {\n        acc[key] = value;\n        return acc;\n      }, {});\n  }, [queryParams, filters]);\n\n  const sortKey = queryParams.get('sort') ?? 'id';\n  const order = queryParams.get('order') === 'desc' ? 'desc' : 'asc';\n\n  return useMemo(() => {\n    const allValues = Object.values(data);\n\n    const filteredData = allValues.filter((entry) => {\n      return Object.entries(activeQueryParams).every(([key, value]) => {\n        return String(entry[key]) === value;\n      });\n    });\n    return orderBy(filteredData, sortKey, order);\n  }, [data, activeQueryParams, sortKey, order]);\n}\n","import { Pagination, Space, type SpaceProps, type TableProps } from 'antd';\nimport type { ReactNode } from 'react';\n\ntype PaginationWrapperProps = {\n  children: ReactNode;\n  pagination: TableProps['pagination'];\n} & SpaceProps;\n\nexport function PaginationWrapper({ children, pagination, ...spaceProps }: PaginationWrapperProps) {\n  const paginationComponent = <Pagination showQuickJumper {...pagination} className=\"fixed-pagination\" />;\n  return (\n    <Space direction=\"vertical\" {...spaceProps}>\n      {paginationComponent}\n      {children}\n      {paginationComponent}\n    </Space>\n  );\n}\n","import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","// Ant Design Resources\nimport { Image, type ImageProps } from 'antd';\nimport clsx from 'clsx';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import type { TableProps } from 'antd';\nimport { useMemo } from 'react';\n\nimport { usePrevious } from 'react-use';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UsePaginationOptions<TData> = {\n  /**\n   * The data array to be paginated.\n   */\n  data: TData[];\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n  /**\n   * The value that triggers the reset of the pagination.\n   */\n  resetter?: string;\n};\n\nexport function useGridPagination<TData>({\n  prefix = '',\n  data,\n  defaultCurrent = 1,\n  defaultPageSize = 64,\n  pageSizeOptions = [16, 32, 64, 128],\n  resetter,\n}: UsePaginationOptions<TData>): {\n  page: TData[];\n  pagination: TableProps['pagination'];\n} {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n  const previous = usePrevious(resetter);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return data.slice(start, end);\n  }, [currentPage, pageSize, data]);\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  if (resetter !== previous) {\n    onChange(defaultCurrent);\n  }\n\n  return {\n    page,\n    pagination: {\n      current: currentPage,\n      pageSize,\n      onChange,\n      onShowSizeChange,\n      defaultCurrent,\n      defaultPageSize,\n      pageSizeOptions,\n      total: data.length,\n      hideOnSinglePage: true,\n    },\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { type DocumentData, doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseMutationOptions, useMutation } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {},\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { EditOutlined } from '@ant-design/icons';\nimport { Card, Flex, Popover, Radio, Select } from 'antd';\nimport { DualLanguageTextField, Label, NSFWField } from 'components/Common/EditableFields';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { ImageCard } from 'components/Images/ImageCard';\nimport type { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { merge } from 'lodash';\nimport type { ContenderCard } from 'types';\nimport { removeDuplicates } from 'utils';\nimport { PLACEHOLDER_DUAL_LANGUAGE_OBJECT } from 'utils/constants';\n\nexport const DECKS = [\n  { value: 'base', label: 'Base' },\n  { value: 'anime', label: 'Anime' },\n  { value: 'art', label: 'Art' },\n  { value: 'cartoon', label: 'Cartoon' },\n  { value: 'characters', label: 'Characters' },\n  { value: 'comics', label: 'Comics' },\n  { value: 'games', label: 'Games' },\n  { value: 'history', label: 'History' },\n  { value: 'internet', label: 'Internet' },\n  { value: 'literature', label: 'Literature' },\n  { value: 'movies', label: 'Movies' },\n  { value: 'music', label: 'Music' },\n  { value: 'mythology', label: 'Mythology' },\n  { value: 'pop-culture', label: 'Pop Culture' },\n  { value: 'random', label: 'Random' },\n  { value: 'sports', label: 'Sports' },\n  { value: 'television', label: 'Television' },\n  { value: 'special-td', label: 'Special TD' },\n  { value: 'special-td-bg', label: 'Special TD BG' },\n];\n\nconst checkInvalidDecks = (decks?: string[], exclusivity?: string) => {\n  if (!decks || decks.length === 0) return 'warning';\n\n  const isInvalid = decks.filter((deck) => !DECKS.some((d) => d.value === deck));\n  if (isInvalid.length > 0) return 'error';\n\n  if (exclusivity && decks.includes('base')) return 'error';\n\n  return undefined;\n};\n\ntype ContenderEditCardProps = {\n  contender: ContenderCard;\n  addEntryToUpdate: ReturnType<typeof useResourceFirebaseData<ContenderCard>>['addEntryToUpdate'];\n};\n\nexport function ContenderEditCard({ contender, addEntryToUpdate }: ContenderEditCardProps) {\n  const onUpdateDualText = (value: string, field: keyof ContenderCard, language: 'en' | 'pt') => {\n    addEntryToUpdate(\n      contender.id,\n      merge({ [field]: { en: '', pt: '' } }, contender, { [field]: { [language]: value } }),\n    );\n  };\n\n  const onUpdateNSFW = (value: boolean) => {\n    addEntryToUpdate(contender.id, merge(contender, { nsfw: value }));\n  };\n\n  const onUpdateDecks = (value: string[]) => {\n    addEntryToUpdate(contender.id, { ...contender, decks: removeDuplicates(value).sort() });\n  };\n\n  return (\n    <Card\n      hoverable\n      style-={{ width: 240, maxWidth: 240 }}\n      cover={<ImageCard id={contender.id} width={240} />}\n    >\n      <Card.Meta\n        // avatar={getGenderIcon(contender)}\n        title={contender.id}\n        description={\n          <Flex vertical>\n            <Label>Name</Label>\n            <DualLanguageTextField\n              value={contender.name}\n              language=\"en\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'name', 'en')}\n            />\n            <DualLanguageTextField\n              value={contender.name}\n              language=\"pt\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'name', 'pt')}\n            />\n            <Label>Description</Label>\n            <DualLanguageTextField\n              value={contender.description ?? PLACEHOLDER_DUAL_LANGUAGE_OBJECT}\n              language=\"en\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'description', 'en')}\n            />\n            <DualLanguageTextField\n              value={contender.description ?? PLACEHOLDER_DUAL_LANGUAGE_OBJECT}\n              language=\"pt\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'description', 'pt')}\n            />\n            <Label>Decks</Label>\n            <Select\n              mode=\"multiple\"\n              defaultValue={contender.decks ?? []}\n              size=\"small\"\n              options={DECKS}\n              onChange={(e) => onUpdateDecks(e)}\n              style={{ maxWidth: 'calc(100vw / 9)' }}\n              status={checkInvalidDecks(contender.decks, contender.exclusivity)}\n            />\n            <Flex align=\"center\">\n              <Label>NSFW</Label>{' '}\n              <NSFWField value={contender.nsfw} size=\"small\" onChange={(e) => onUpdateNSFW(e)} />\n            </Flex>\n            <Flex align=\"center\" gap={8}>\n              <Label>Exclusivity</Label>{' '}\n              <Exclusivity contender={contender} addEntryToUpdate={addEntryToUpdate} />\n            </Flex>\n          </Flex>\n        }\n      />\n      <Card.Meta />\n    </Card>\n  );\n}\n\nfunction Exclusivity({ contender, addEntryToUpdate }: ContenderEditCardProps) {\n  const onUpdateExclusivity = (language?: string) => {\n    addEntryToUpdate(contender.id, merge(contender, { exclusivity: language }));\n  };\n\n  const options = [\n    { value: 'en', label: <LanguageFlag language=\"en\" style={{ width: 24 }} /> },\n    { value: 'pt', label: <LanguageFlag language=\"pt\" style={{ width: 24 }} /> },\n    { value: 'none', label: 'None' },\n  ];\n\n  const content = (\n    <Flex gap={8}>\n      <Radio.Group\n        options={options}\n        onChange={(e) => onUpdateExclusivity(e.target.value)}\n        value={contender?.exclusivity}\n      />\n    </Flex>\n  );\n\n  return (\n    <Flex gap={8}>\n      {contender?.exclusivity === 'en' && <LanguageFlag language=\"en\" style={{ width: 24 }} />}\n      {contender?.exclusivity === 'pt' && <LanguageFlag language=\"pt\" style={{ width: 24 }} />}\n      {!contender?.exclusivity && 'None'}\n      <Popover title=\"Change exclusivity?\" content={content} trigger=\"click\">\n        <EditOutlined />\n      </Popover>\n    </Flex>\n  );\n}\n","import type { ContenderCard } from 'types';\nimport './Contenders.scss';\nimport { Flex, Typography } from 'antd';\nimport { useFilterDataByDataFilters } from 'components/Common/DataFilters';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport type { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { ContenderEditCard } from './ContenderEditCard';\n\nexport type ContendersContentProps = ReturnType<typeof useResourceFirebaseData<ContenderCard>>;\n\nexport function ContendersContent({ data, addEntryToUpdate }: ContendersContentProps) {\n  const filteredData = useFilterDataByDataFilters(data);\n\n  const { page, pagination } = useGridPagination({\n    data: filteredData,\n    resetter: '',\n    defaultPageSize: 32,\n  });\n  return (\n    <>\n      <>\n        <Typography.Title level={2}>\n          Listing - Contenders ({filteredData.length} | {Object.values(data ?? {}).length})\n        </Typography.Title>\n\n        <PaginationWrapper pagination={pagination} className=\"full-width\">\n          <Flex gap={16} wrap=\"wrap\">\n            {page.map((entry) => (\n              <ContenderEditCard key={entry.id} contender={entry} addEntryToUpdate={addEntryToUpdate} />\n            ))}\n          </Flex>\n        </PaginationWrapper>\n      </>\n    </>\n  );\n}\n","import { Divider, Flex, Typography } from 'antd';\nimport { DataFilters } from 'components/Common/DataFilters';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport type { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep } from 'lodash';\nimport { useMemo } from 'react';\nimport type { ContenderCard } from 'types';\nimport { deepCleanObject, sortJsonKeys } from 'utils';\nimport { DECKS } from './ContenderEditCard';\n\nexport type ContendersFiltersProps = ReturnType<typeof useResourceFirebaseData<ContenderCard>>;\n\nexport function ContendersFilters({\n  data,\n  isDirty,\n  save,\n  isSaving,\n  entriesToUpdate,\n}: ContendersFiltersProps) {\n  return (\n    <>\n      <SiderContent>\n        <Flex vertical gap={12}>\n          <SaveButton\n            isDirty={isDirty}\n            onSave={save}\n            isSaving={isSaving}\n            dirt={JSON.stringify(entriesToUpdate)}\n          />\n\n          <DownloadButton\n            data={() => prepareFileForDownload(data)}\n            fileName=\"contenders.json\"\n            disabled={isDirty}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <SiderContent>\n        <DataFilters data={data} ignoreKeys={['description']} />\n      </SiderContent>\n\n      <SiderContent>\n        <DeckCounts data={data} />\n      </SiderContent>\n    </>\n  );\n}\n\nfunction prepareFileForDownload(entriesToUpdate: Dictionary<ContenderCard>) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(entriesToUpdate);\n  // Remove any undefined values of any keys in each entry\n  Object.values(copy).forEach((entry) => {\n    const exclusivity = entry.exclusivity as string;\n    if (entry.exclusivity === undefined || exclusivity === 'none') {\n      entry.exclusivity = undefined;\n    }\n  });\n\n  return sortJsonKeys(deepCleanObject(copy));\n}\n\nfunction DeckCounts({ data }: Pick<ContendersFiltersProps, 'data'>) {\n  const counts = useMemo(() => {\n    let englishExclusivity = 0;\n    let portugueseExclusivity = 0;\n    let bothExclusivity = 0;\n    const deckCounts = Object.values(data).reduce((acc: Dictionary<number>, contender) => {\n      (contender.decks ?? []).forEach((deck) => {\n        acc[deck] = acc[deck] ? acc[deck] + 1 : 1;\n      });\n      if (contender.exclusivity === 'en') {\n        englishExclusivity++;\n      }\n      if (contender.exclusivity === 'pt') {\n        portugueseExclusivity++;\n      }\n      if (!contender.exclusivity) {\n        bothExclusivity++;\n      }\n\n      return acc;\n    }, {});\n\n    const invalidDecks = Object.keys(deckCounts).filter((deck) => !DECKS.some((d) => d.value === deck));\n\n    return { deckCounts, invalidDecks, englishExclusivity, portugueseExclusivity, bothExclusivity };\n  }, [data]);\n\n  return (\n    <Flex vertical gap={8}>\n      <Typography.Text strong>Deck Counts</Typography.Text>\n\n      <Flex vertical gap={8} style={{ maxHeight: '300px', overflowY: 'auto' }}>\n        {DECKS.map((entry) => (\n          <Typography.Text key={entry.value}>\n            {entry.label}: {counts.deckCounts[entry.value] ?? 0}\n          </Typography.Text>\n        ))}\n      </Flex>\n\n      <Divider className=\"my-2\" />\n\n      <Typography.Text strong>Invalid Decks</Typography.Text>\n      <Flex vertical gap={8} style={{ maxHeight: '300px', overflowY: 'auto' }}>\n        {counts.invalidDecks.map((deck) => (\n          <Typography.Text key={deck}>{deck}</Typography.Text>\n        ))}\n      </Flex>\n\n      <Divider className=\"my-2\" />\n\n      <Typography.Text strong>Exclusivity</Typography.Text>\n      <Flex vertical gap={8}>\n        <Typography.Text>English: {counts.englishExclusivity}</Typography.Text>\n        <Typography.Text>Portuguese: {counts.portugueseExclusivity}</Typography.Text>\n        <Typography.Text>Both: {counts.bothExclusivity}</Typography.Text>\n      </Flex>\n    </Flex>\n  );\n}\n","import { Layout } from 'antd';\nimport { ContendersContent } from 'components/Contenders/ContendersContent';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\n\nimport { ContendersFilters } from 'components/Contenders/ContendersFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { ContenderCard } from 'types';\n\nexport function Contenders() {\n  const contendersQuery = useResourceFirebaseData<ContenderCard>({\n    tdrResourceName: 'contenders',\n    firebaseDataCollectionName: 'contenders',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Contenders\" subtitle=\"Characters, Celebrities, Personalities\">\n      <Layout hasSider>\n        <PageSider>\n          <ContendersFilters {...contendersQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={contendersQuery.isLoading}\n            error={contendersQuery.error}\n            hasResponseData={!isEmpty(contendersQuery.data)}\n          >\n            <ContendersContent {...contendersQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default Contenders;\n"],"names":["buildDataFilters","data","ignoreKeys","keys","Object","values","reduce","acc","entry","forEach","key","includes","sortableKeys","filters","map","uniqueValues","Array","from","Set","uniqueValueRatio","length","push","label","options","value","sort","String","DataFilters","queryParams","addParam","useQueryParams","useMemo","vertical","style","overflowY","filter","capitalize","onChange","toLowerCase","get","useFilterDataByDataFilters","activeQueryParams","entries","some","sortKey","order","filteredData","every","orderBy","PaginationWrapper","children","pagination","spaceProps","paginationComponent","showQuickJumper","className","direction","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","ImageCard","id","width","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","clsx","src","fallback","useGridPagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","resetter","currentPage","Number","pageSize","previous","usePrevious","page","start","end","slice","toString","current","onShowSizeChange","_","total","hideOnSinglePage","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","undefined","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","error","description","isSuccess","isPending","cloneDeep","isEmpty","firebaseData","isLoading","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","updateQueryFunction","path","docId","docRef","doc","firestore","updateDoc","useMutation","mutationFn","async","DECKS","checkInvalidDecks","decks","exclusivity","deck","d","ContenderEditCard","contender","onUpdateDualText","field","language","merge","en","pt","hoverable","maxWidth","cover","title","name","e","target","PLACEHOLDER_DUAL_LANGUAGE_OBJECT","mode","defaultValue","onUpdateDecks","removeDuplicates","status","align","nsfw","onUpdateNSFW","gap","Exclusivity","LanguageFlag","content","onUpdateExclusivity","trigger","EditOutlined","ContendersContent","level","wrap","ContendersFilters","JSON","stringify","DownloadButton","copy","sortJsonKeys","deepCleanObject","prepareFileForDownload","fileName","DeckCounts","counts","englishExclusivity","portugueseExclusivity","bothExclusivity","deckCounts","invalidDecks","strong","maxHeight","Contenders","contendersQuery","subtitle","hasSider","PageSider","DataLoadingWrapper","hasResponseData"],"sourceRoot":""}