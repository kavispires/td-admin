{"version":3,"file":"static/js/1477.640dbf49.chunk.js","mappings":"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","sources":["components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useQueryParams.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Optional padding\n   */\n  padding?: number;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, padding = 6, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px`, padding }}>\n      <svg\n        viewBox=\"0 0 512 512\"\n        style={{ width: `${width - padding * 2}px`, height: `${width - padding * 2}px` }}\n      >\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  const baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffectOnce } from 'react-use';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffectOnce(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  });\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CITY_LOCATIONS: 'city-locations',\n  COLORS: 'colors',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_SCENES: 'crime-scenes',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  EMOTIONS: 'emotions',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SINGLE_WORDS: 'single-words',\n  SPECTRUMS: 'spectrums',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TEENAGE_RUMORS: 'teenage-rumors',\n  TEENAGE_STUDENTS: 'teenage-students',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n  WAREHOUSE_BOSS_IDEAS: 'warehouse-boss-ideas',\n  WARNING_SIGNS_DESCRIPTORS: 'warning-signs-descriptors',\n  WARNING_SIGNS_SUBJECTS: 'warning-signs-subjects',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CITY_LOCATIONS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_SCENES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n  RESOURCE_NAMES.TEENAGE_RUMORS,\n  RESOURCE_NAMES.TEENAGE_STUDENTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2496;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 70,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 256,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key',\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nexport const PLACEHOLDER_DUAL_LANGUAGE_OBJECT = { en: '', pt: '' };\n\nexport const SEPARATOR = ';;';\n","import { chain, isNull, isObject, isUndefined, orderBy, set, transform } from 'lodash';\nimport stringSimilarity from 'string-similarity';\nimport { SEARCH_THRESHOLD } from './constants';\n\n/**\n * Generates a unique identifier that does not exist in the provided list of existing IDs.\n * The generated ID is a substring of a UUID, limited to 5 characters.\n * If a unique ID cannot be generated within 500 attempts, an error is logged.\n *\n * @param existingIds - An array of existing IDs to check against.\n * @param [length=5] - The length of the generated ID. Defaults to 5.\n * @returns A unique identifier.\n */\nexport function createUUID(existingIds: string[], length = 5): string {\n  let newId = crypto.randomUUID().substring(0, length);\n  let tries = 0;\n  while (existingIds.includes(newId) && tries < 500) {\n    newId = crypto.randomUUID().substring(0, length);\n    tries++;\n  }\n  if (tries > 500) {\n    console.error('Unable to generate unique id');\n  }\n  return newId;\n}\n\n/**\n * Removes accents from a given string.\n *\n * This function normalizes the input string to its decomposed form (NFD)\n * and then removes any combining diacritical marks (accents).\n *\n * @param str - The input string from which to remove accents.\n * @returns The input string with accents removed.\n */\nexport function stringRemoveAccents(str: string) {\n  // biome-ignore lint/suspicious/noMisleadingCharacterClass: the regex is used to remove accents\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n * Checks for duplicate entries in the provided data based on a specified property.\n *\n * @param data - The data to check for duplicates.\n * @param [property='text'] - The property to check for duplicates. Defaults to 'text'.\n * @returns An object containing the duplicates found. The keys are the normalized property values, and the values are arrays of IDs of the duplicate entries.\n *\n * @throws {Error} If the specified property does not exist in an entry.\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n * Finds and returns similar entries from a given data object based on a provided string.\n *\n * @param str - The string to compare against the data entries.\n * @param data - The data object containing entries to search through.\n * @param property - The property of the data entries to compare the string with. Defaults to 'text'.\n * @returns An object containing entries that are similar to the provided string.\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Checks if an array has any duplicate elements.\n * @param arr - The array to check for duplicates.\n * @returns A boolean indicating whether the array has duplicates.\n * @template T - The type of elements in the array.\n */\nexport const hasDuplicates = <T>(arr: T[]): boolean => {\n  return new Set(arr).size !== arr.length;\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @param keyOrder - An array of keys to place after the default keys.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject, keyOrder: string[] = []): PlainObject => {\n  const DEFAULT_ORDERED_KEYS = ['id', 'name', 'title', 'type'];\n\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const otherKeys = Object.keys(obj).filter(\n        (key) => !(DEFAULT_ORDERED_KEYS.includes(key) || keyOrder.includes(key)),\n      );\n\n      const sortedKeys = [...DEFAULT_ORDERED_KEYS, ...keyOrder, ...otherKeys.sort()];\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Recursively removes `undefined` values from an object or array.\n * @template T - The type of the object to clean.\n * @param {T} obj - The object to clean.\n * @returns {T} - The cleaned object with no `undefined` values.\n */\nexport const deepCleanObject = <T = unknown>(obj: T): T => {\n  if (!isObject(obj) || isNull(obj)) {\n    return obj;\n  }\n\n  // If the object is an array, filter out undefined values\n  if (Array.isArray(obj)) {\n    return obj.map((item) => deepCleanObject(item)).filter((item) => !isUndefined(item)) as unknown as T;\n  }\n\n  // Recursively process each key for objects\n  return transform(\n    obj,\n    (result, value, key) => {\n      if (isObject(value)) {\n        value = deepCleanObject(value);\n      }\n\n      // Only assign if the value is not undefined\n      if (!isUndefined(value)) {\n        set(result as Partial<T>, key, value);\n      }\n    },\n    {} as T,\n  );\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData, TParsedData = TData>(\n  data: Dictionary<string>,\n  entryDeserializer?: (e: TData) => TParsedData,\n): Dictionary<TParsedData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TParsedData>, key) => {\n    acc[key] = entryDeserializer ? entryDeserializer(JSON.parse(data[key])) : JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData, TParsedData = TData>(\n  data: Dictionary<TData>,\n  entrySerializer?: (e: TData) => TParsedData,\n): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(entrySerializer ? entrySerializer(data[key]) : data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n\n/**\n * Pauses the execution for a specified duration.\n * @param duration - The duration to wait in milliseconds. Default is 1000ms.\n */\nexport const wait = async (duration = 1000) => {\n  await new Promise((resolve) => setTimeout(resolve, duration));\n};\n"],"names":["DataLoadingWrapper","isLoading","isIdle","error","hasResponseData","children","tip","className","message","description","type","showIcon","Sprite","id","source","width","padding","title","getUrl","useBaseUrl","data","isError","useQuery","queryKey","queryFn","async","response","fetch","text","enabled","paddedWidth","style","height","display","placeItems","svgContent","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","WarehouseGood","itemId","str","match","numId","Number","parseInt","goodId","sourceId","Math","ceil","getSource","clsx","AlienSign","Emoji","emojiId","startsWith","memoize","glyphId","Glyph","Item","library","baseUrl","process","folder","Error","path","join","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","value","defaultValue","undefined","delete","set","String","addParams","params","defaultValues","Object","entries","forEach","removeParam","is","get","useEffectOnce","has","queryParams","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CITY_LOCATIONS","COLORS","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_SCENES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","EMOTIONS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SINGLE_WORDS","SPECTRUMS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TEENAGE_RUMORS","TEENAGE_STUDENTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","WAREHOUSE_BOSS_IDEAS","WARNING_SIGNS_DESCRIPTORS","WARNING_SIGNS_SUBJECTS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","DEFAULT_LANGUAGE","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","keys","map","toLowerCase","capitalize","PLACEHOLDER_DUAL_LANGUAGE_OBJECT","en","pt","SEPARATOR","createUUID","existingIds","length","newId","crypto","randomUUID","substring","tries","includes","console","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","values","entry","entryKey","push","findSimilar","similar","trim","val","JSON","stringify","entryStr","stringSimilarity","makeArray","Array","fill","e","i","removeDuplicates","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","keyOrder","DEFAULT_ORDERED_KEYS","sortKeys","isObject","isArray","otherKeys","filter","sortedKeys","sort","chain","toPairs","sortBy","_","indexOf","fromPairs","deepCleanObject","isNull","item","isUndefined","transform","result","deserializeFirebaseData","entryDeserializer","reduce","acc","parse","serializeFirebaseData","entrySerializer","getCurrentDateTime","now","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","sortItemsIds","itemsIds","orderBy","wait","duration","Promise","resolve","setTimeout"],"sourceRoot":""}