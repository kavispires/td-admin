{"version":3,"file":"static/js/ItemsQuartets.b01a932c.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/FilterEntries.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useResourceFirebaseData.ts","hooks/useTDResource.ts","hooks/useTableExpandableRows.tsx","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Quartets/ItemsQuartetTypeahead.tsx","components/Items/Quartets/InspirationSample.tsx","components/Items/Quartets/ItemsQuartetsTable.tsx","components/Items/Quartets/ItemsQuartetSearch.tsx","components/Items/Quartets/NewQuartetModal.tsx","components/Items/Quartets/ItemsQuartetsContent.tsx","components/Items/Quartets/ItemsQuartetsFilters.tsx","components/Items/Quartets/ItemsQuartetsSimulator.tsx","pages/Items/ItemsQuartets.tsx"],"sourcesContent":["import { Button, type ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | (() => PlainObject);\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport type { SegmentedValue } from 'antd/es/segmented';\nimport type { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          ),\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { togglePendingSave } from 'store/globalSave';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport type { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { AutoComplete, type AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport type { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n  onFinishMultiple?: (ids: string[]) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  onFinishMultiple,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !items && !isPending);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {},\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]);\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText],\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH),\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const ids = filteredOptions.map((opt) => namesDict[opt.value]).filter(Boolean);\n      if (onFinishMultiple && ids.length > 0) {\n        onFinishMultiple(ids); // Call the new prop with all matches\n      } else if (namesDict[filteredOptions[0].value] !== undefined) {\n        onFinish(namesDict[filteredOptions[0].value]); // Fallback to single onFinish\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseQueryOptions, useQuery } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>,\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import type { TableProps } from 'antd';\nimport type { ExpandableConfig } from 'antd/es/table/interface';\nimport { useState } from 'react';\n\ntype useTableExpandableRowsOptions<TRecord extends { id: string }> = {\n  /**\n   * The maximum number of expanded rows.\n   * To make sure only one row is expanded at a time, set this to 1.\n   */\n  maxExpandedRows?: number;\n} & TableProps<TRecord>['expandable'];\n\nexport function useTableExpandableRows<TRecord extends { id: string }>({\n  maxExpandedRows,\n  rowExpandable,\n  defaultExpandAllRows,\n  ...expandable\n}: useTableExpandableRowsOptions<TRecord>): ExpandableConfig<TRecord> {\n  const [expandedRowKeys, setExpandedRowKeys] = useState<string[]>([]);\n\n  const onExpand = (expanded: boolean, record: TRecord) => {\n    const newExpandedRowKeys = [...expandedRowKeys]; // Create a copy to avoid mutation\n\n    if (!expanded) {\n      return setExpandedRowKeys(newExpandedRowKeys.filter((key) => key !== record.id));\n    }\n\n    if (maxExpandedRows) {\n      while (newExpandedRowKeys.length >= maxExpandedRows) {\n        newExpandedRowKeys.shift();\n      }\n      newExpandedRowKeys.push(record.id);\n\n      setExpandedRowKeys(newExpandedRowKeys);\n    }\n  };\n\n  return {\n    expandedRowKeys,\n    rowExpandable: rowExpandable ?? (() => true),\n    defaultExpandAllRows: defaultExpandAllRows ?? false,\n    onExpand,\n    ...expandable,\n  };\n}\n","import type { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { type DocumentData, doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseMutationOptions, useMutation } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {},\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { AutoComplete, type AutoCompleteProps, Input } from 'antd';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport type { DailyQuartetSet } from 'types';\n\ntype ItemsQuartetTypeaheadProps = {\n  quartets?: Dictionary<DailyQuartetSet>;\n  isPending?: boolean;\n  onFinish: (id: string | null) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsQuartetTypeahead({\n  quartets,\n  isPending,\n  onFinish,\n  style,\n  ...rest\n}: ItemsQuartetTypeaheadProps) {\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const { titlesDict, options } = useMemo(() => {\n    console.log('Recomputing quartets tiles typeahead...');\n\n    const titlesDict = Object.values(quartets ?? {}).reduce((acc: Record<string, string>, quartet) => {\n      acc[quartet.title] = quartet.id;\n      return acc;\n    }, {});\n\n    const options = orderBy(Object.keys(titlesDict), [(title) => title.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { titlesDict, options };\n  }, [quartets, isPending]);\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      } else {\n        onFinish(null);\n      }\n    },\n    350,\n    [typedText],\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH),\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (titlesDict[key] !== undefined) {\n        onFinish(titlesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (titlesDict[key] !== undefined) {\n      onFinish(titlesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear\n      placeholder={'Search quartet by title...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No quartets found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, Flex, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { difference, sampleSize } from 'lodash';\nimport { useState } from 'react';\nimport type { DailyQuartetSet, Item as ItemT } from 'types';\n\ntype InspirationSampleProps = {\n  onUpdate: (itemId: string) => void;\n  quartet: DailyQuartetSet;\n  initialQuantity?: number;\n};\n\nexport function InspirationSample({ onUpdate, quartet, initialQuantity = 24 }: InspirationSampleProps) {\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const getSample = (quantity: number) => {\n    return difference(sampleSize(Object.keys(itemsTypeaheadQuery.data ?? {}), quantity), quartet.itemsIds);\n  };\n\n  const [sampledItems, setSampledItems] = useState<string[]>(getSample(initialQuantity));\n\n  const onSample = () => {\n    setSampledItems(getSample(24));\n  };\n\n  return (\n    <div className=\"mt-2\">\n      <Typography.Paragraph>\n        Inspiration Sample{' '}\n        <Button size=\"small\" onClick={onSample}>\n          Get\n        </Button>\n      </Typography.Paragraph>\n      <Flex gap={16} wrap=\"wrap\">\n        {sampledItems.map((itemId, index) => {\n          const item = itemsTypeaheadQuery.data?.[itemId];\n          return (\n            <Flex key={`sample-${itemId}-${index}`} gap={2} vertical>\n              <Item id={itemId} width={60} title={`${item.name.en} | ${item.name.pt}`} />\n              <Flex justify=\"center\" gap={6}>\n                <Typography.Text>{itemId}</Typography.Text>\n                <Button size=\"small\" shape=\"circle\" onClick={() => onUpdate(itemId)}>\n                  <PlusOutlined />\n                </Button>\n              </Flex>\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n}\n","import { Button, Flex, Popconfirm, Rate, Select, Space, Switch, Table, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport type { DailyQuartetSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { CheckCircleFilled, DeleteFilled, WarningOutlined } from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nimport type { TableProps } from 'antd';\nimport { useTableExpandableRows } from 'hooks/useTableExpandableRows';\nimport { cloneDeep, orderBy } from 'lodash';\nimport { InspirationSample } from './InspirationSample';\n\nconst TYPES = orderBy(['general', 'visual', 'word', 'thematic', 'attribute']).map((t) => ({\n  label: t,\n  value: t,\n}));\n\ntype ItemsQuartetsTableProps = {\n  rows: DailyQuartetSet[];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyQuartetSet>['addEntryToUpdate'];\n  expandedRowKeys?: string[];\n};\n\nexport function ItemsQuartetsTable({ rows, addEntryToUpdate }: ItemsQuartetsTableProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyQuartetSet>['columns'] = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      render(id, record) {\n        return (\n          <Flex align=\"center\" gap={3}>\n            {record.itemsIds.length >= 4 && !record.level && <WarningOutlined style={{ color: 'red' }} />}\n            <Typography.Text copyable>{id}</Typography.Text>\n          </Flex>\n        );\n      },\n    },\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <QuartetEditableCell\n          property=\"title\"\n          value={title}\n          quartet={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n      sorter: (a, b) => a.title.localeCompare(b.title),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <QuartetItemsCell\n          quartet={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n      sorter: (a, b) => a.itemsIds.length - b.itemsIds.length,\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      render: (type, record) => (\n        <Select\n          defaultValue={type}\n          options={TYPES}\n          size=\"small\"\n          style={{ width: 100 }}\n          onChange={(type) => addEntryToUpdate(record.id, { ...record, type })}\n        />\n      ),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      render: (level, record) => (\n        <Rate\n          count={3}\n          value={level}\n          onChange={(v) => addEntryToUpdate(record.id, { ...record, level: v })}\n        />\n      ),\n      sorter: (a, b) => a.level - b.level,\n    },\n    {\n      title: 'Perfect Quartet',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => {\n        const uniqueItems = removeDuplicates(itemsIds).filter(Boolean);\n        return uniqueItems.length === 4 && <CheckCircleFilled style={{ color: 'dodgerblue' }} />;\n      },\n    },\n    {\n      title: 'Flagged',\n      dataIndex: 'flagged',\n      render: (flagged, record) => (\n        <Switch\n          checked={flagged}\n          checkedChildren={<WarningOutlined style={{ color: 'red' }} />}\n          onChange={(flagged) => {\n            if (flagged) {\n              addEntryToUpdate(record.id, { ...record, flagged });\n            } else {\n              const copy = cloneDeep(record);\n              // biome-ignore lint/performance/noDelete: <explanation>\n              delete copy.flagged;\n              addEntryToUpdate(record.id, copy);\n            }\n          }}\n        />\n      ),\n    },\n  ];\n\n  const expandableProps = useTableExpandableRows<DailyQuartetSet>({\n    maxExpandedRows: 1,\n    expandedRowRender: (record) => <AddItemFlow quartet={record} addEntryToUpdate={addEntryToUpdate} />,\n    rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n  });\n\n  return (\n    <Table\n      columns={columns}\n      rowKey=\"id\"\n      dataSource={rows}\n      expandable={expandableProps}\n      pagination={paginationProps}\n      rowClassName={(record) => (record.itemsIds.length >= 4 && !record.level ? 'table-row-error' : '')}\n    />\n  );\n}\n\ntype AddItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n};\n\nexport function AddItemFlow({ quartet, addEntryToUpdate }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: [...quartet.itemsIds, itemId],\n    });\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n      <InspirationSample quartet={quartet} onUpdate={onUpdate} initialQuantity={0} />\n    </div>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ quartet, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: quartet.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype QuartetItemsCellProps = {\n  quartet: DailyQuartetSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n};\n\nexport function QuartetItemsCell({\n  quartet,\n  itemsIds,\n  copyToClipboard,\n  addEntryToUpdate,\n}: QuartetItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${quartet.title}`}>\n      {itemsIds.map((itemId) => (\n        <Flex key={`${quartet.title}-${itemId}`} gap={2} vertical>\n          {itemId ? <Item id={String(itemId)} width={60} /> : <>\"ERROR\"</>}\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow quartet={quartet} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n\ntype QuartetEditableCellProps = {\n  value: string | number;\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n  property: keyof DailyQuartetSet;\n};\n\nexport function QuartetEditableCell({\n  value,\n  quartet,\n  addEntryToUpdate,\n  property,\n}: QuartetEditableCellProps) {\n  const handleChange = (newValue: string) => {\n    if (typeof value === 'number') {\n      return newValue !== String(value)\n        ? addEntryToUpdate(quartet.id, { ...quartet, [property]: Number(newValue) })\n        : null;\n    }\n\n    return newValue !== value\n      ? addEntryToUpdate(quartet.id, { ...quartet, [property]: newValue.trim() })\n      : null;\n  };\n\n  return (\n    <Space>\n      <Typography.Text\n        editable={{\n          onChange: handleChange,\n        }}\n      >\n        {String(value)}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\n\nimport { Space, Typography } from 'antd';\nimport type { DailyQuartetSet } from 'types';\n\nimport { useMemo, useState } from 'react';\nimport { ItemsQuartetTypeahead } from './ItemsQuartetTypeahead';\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\nexport function ItemsQuartetSearch({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const [activeQuartetId, setActiveQuartetId] = useState<string | null>(null);\n  const activeQuartet = useMemo(() => {\n    if (!activeQuartetId) return null;\n    return data[activeQuartetId];\n  }, [activeQuartetId, data]);\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>Search Quartet</Typography.Title>\n\n      <ItemsQuartetTypeahead quartets={data} onFinish={(id) => setActiveQuartetId(id)} />\n\n      {!!activeQuartet && <ItemsQuartetsTable rows={[activeQuartet]} addEntryToUpdate={addEntryToUpdate} />}\n    </Space>\n  );\n}\n","import { Modal } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { DailyQuartetSet } from 'types';\nimport { createUUID, removeDuplicates, wait } from 'utils';\nimport { InspirationSample } from './InspirationSample';\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\ntype NewQuartetModalProps = {\n  data: UseResourceFirebaseDataReturnType<DailyQuartetSet>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyQuartetSet>['addEntryToUpdate'];\n};\n\nexport function NewQuartetModal({ data, addEntryToUpdate }: NewQuartetModalProps) {\n  const { is, removeParam } = useQueryParams();\n  const newId = useMemo(() => {\n    return createUUID(Object.keys(data));\n  }, [data]);\n\n  const createNewQuartetPlaceholder = () => {\n    return cloneDeep({\n      id: newId,\n      title: '',\n      itemsIds: [],\n      level: 0,\n    });\n  };\n\n  const [activeQuartet, setActiveQuartet] = useState<DailyQuartetSet>(createNewQuartetPlaceholder());\n\n  const onLocalUpdate = (_: string, value: DailyQuartetSet) => {\n    setActiveQuartet({ ...value });\n  };\n\n  const onAddSampledItem = (itemId: string) => {\n    setActiveQuartet((prev) => ({\n      ...prev,\n      itemsIds: removeDuplicates([...prev.itemsIds, itemId]),\n    }));\n  };\n\n  const onEntry = async () => {\n    addEntryToUpdate(activeQuartet.id, cloneDeep(activeQuartet));\n    removeParam('newQuartet');\n    await wait(250);\n    setActiveQuartet(createNewQuartetPlaceholder());\n  };\n\n  return (\n    <Modal\n      title=\"Add Quartet\"\n      open={is('newQuartet')}\n      width={'80vw'}\n      onCancel={() => removeParam('newQuartet')}\n      okButtonProps={{ disabled: !activeQuartet.title, onClick: onEntry }}\n      maskClosable={false}\n    >\n      {Boolean(activeQuartet) && (\n        <>\n          <ItemsQuartetsTable\n            rows={[activeQuartet]}\n            addEntryToUpdate={onLocalUpdate}\n            expandedRowKeys={[activeQuartet.id]}\n          />\n          <InspirationSample onUpdate={onAddSampledItem} quartet={activeQuartet} />\n        </>\n      )}\n    </Modal>\n  );\n}\n","import { Space, Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type { DailyQuartetSet } from 'types';\n\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\nimport { NewQuartetModal } from './NewQuartetModal';\n\nexport function ItemsQuartetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const rows = useMemo(() => {\n    if (showOnlyEmpty) {\n      return orderBy(\n        Object.values(data).filter((s) => s.itemsIds.length < 4),\n        ['id'],\n        ['asc'],\n      );\n    }\n    return orderBy(Object.values(data), ['id'], ['asc']);\n  }, [data, showOnlyEmpty]);\n\n  const completeQuartetsCount = rows.filter((s) => s.itemsIds.length === 4).length;\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>\n        Total Quartets: {rows.length} | Complete Quartets: {completeQuartetsCount}\n      </Typography.Title>\n      <ItemsQuartetsTable rows={rows} addEntryToUpdate={addEntryToUpdate} />\n      <NewQuartetModal data={data} addEntryToUpdate={addEntryToUpdate} />\n    </Space>\n  );\n}\n","import { GlobalOutlined, TableOutlined } from '@ant-design/icons';\nimport { Button, Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport type { DailyQuartetSet } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsQuartetsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is, addParam, queryParams, addParams } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-quartet-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSwitch\n        label=\"Pending Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n\n      <Button block onClick={() => addParam('newQuartet', 'true', false)} disabled={is('newQuartet')}>\n        Add New Quartet\n      </Button>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'table'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1, display: 'table' })}\n        options={[\n          {\n            title: 'Table',\n            icon: <TableOutlined />,\n            value: 'table',\n          },\n          {\n            title: 'Simulator',\n            icon: <GlobalOutlined />,\n            value: 'simulator',\n          },\n        ]}\n      />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(quartets: Dictionary<DailyQuartetSet>) {\n  // let latestId = 1;\n  // console.log(quartets);\n  // const clearedIds = Object.values(quartets).reduce((acc: Dictionary<DailyQuartetSet>, quartet) => {\n  //   const { id, ...rest } = quartet;\n  //   if (!rest.title) {\n  //     return acc;\n  //   }\n\n  //   const newId = `dqs-${String(latestId).padStart(4, '0')}-pt`;\n  //   acc[newId] = { ...rest, id: newId };\n  //   console.log(rest.title);\n  //   latestId += 1;\n  //   return acc;\n  // }, {});\n  // console.log(clearedIds);\n\n  return sortJsonKeys(quartets);\n}\n","import { Button, Flex, Rate, Space, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep, intersection, orderBy, sample, sampleSize } from 'lodash';\nimport { useState } from 'react';\nimport type { DailyQuartetSet } from 'types';\n\nimport { Item } from 'components/Sprites';\n\nexport function ItemsQuartetsSimulator({ data }: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const [simulation, setSimulation] = useState(simulateQuartetGame(data));\n\n  const onNewSimulation = () => {\n    setSimulation(simulateQuartetGame(data));\n  };\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>Quarteto Simulator</Typography.Title>\n      <Button onClick={onNewSimulation}>New Simulation</Button>\n\n      <Flex gap={24} vertical>\n        <QuartetRow quartet={simulation.perfectQuartet} />\n\n        {simulation.nonPerfectQuartets.map((quartet) => (\n          <QuartetRow key={quartet.id} quartet={quartet} />\n        ))}\n      </Flex>\n    </Space>\n  );\n}\n\ntype QuartetRowProps = {\n  quartet: DailyQuartetSet;\n};\n\nfunction QuartetRow({ quartet }: QuartetRowProps) {\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Text strong>\n        {quartet.title} <Rate count={3} value={quartet.level} disabled />\n      </Typography.Text>\n      <Flex gap={8}>\n        {quartet.itemsIds.map((itemId) => (\n          <Item key={itemId} id={itemId} width={60} />\n        ))}\n      </Flex>\n    </Space>\n  );\n}\n\nfunction simulateQuartetGame(allQuartets: UseResourceFirebaseDataReturnType<DailyQuartetSet>['data']) {\n  const quartetsArray = Object.values(allQuartets);\n\n  // Step 1: Find a random perfect quartet (has exactly 4 items and a type)\n  const perfectQuartets = quartetsArray.filter((q) => q.itemsIds.length === 4 && q.type);\n\n  if (perfectQuartets.length === 0) {\n    throw new Error('No perfect quartets found.');\n  }\n\n  const perfectQuartet = cloneDeep(sample(perfectQuartets));\n\n  if (!perfectQuartet) {\n    throw new Error('No random perfect quartet found.');\n  }\n\n  const perfectItemIds = new Set(perfectQuartet.itemsIds);\n  const usedItemIds = new Set(perfectQuartet.itemsIds);\n\n  // Step 2: Find 3 non-perfect quartets that share exactly one itemId with the perfect quartet and have more than 4 items\n  const otherQuartets = quartetsArray.filter((q) => q.itemsIds.length > 4);\n\n  const getQuartetOptions = (index: number) =>\n    otherQuartets.filter(\n      (q) =>\n        q.itemsIds.includes(perfectQuartet.itemsIds[index]) &&\n        intersection(q.itemsIds, Array.from(perfectItemIds)).length === 1,\n    );\n\n  const matchZeroQuartets = getQuartetOptions(0);\n  const matchOneQuartets = getQuartetOptions(1);\n  const matchTwoQuartets = getQuartetOptions(2);\n  const matchThreeQuartets = getQuartetOptions(3);\n\n  const orderedMatches = orderBy(\n    [matchZeroQuartets, matchOneQuartets, matchTwoQuartets, matchThreeQuartets],\n    'length',\n  ).filter((quartets) => quartets.length > 0);\n\n  const nonPerfectQuartets = orderedMatches.map((quartets) => {\n    const sampledQuartet = sample(quartets);\n    if (!sampledQuartet) {\n      throw new Error('No random quartet found in ordered matches.');\n    }\n    return cloneDeep(sampledQuartet);\n  });\n\n  // Ensure we only have 3 non-perfect quartets\n  const selectedNonPerfectQuartets = nonPerfectQuartets.slice(0, 3);\n\n  selectedNonPerfectQuartets.forEach((quartet) => {\n    quartet.itemsIds.forEach((id) => usedItemIds.add(id));\n\n    const filteredItemIds = quartet.itemsIds.filter((id) => !perfectItemIds.has(id));\n    const randomItemIds = sampleSize(filteredItemIds, 4);\n\n    quartet.itemsIds = randomItemIds;\n  });\n\n  let tries = 0;\n\n  // If there are less than 3 selected non-perfect quartets, fill the rest with random quartets\n  while (selectedNonPerfectQuartets.length < 3 && tries < 100) {\n    console.log('Trying to complete simulation...');\n    const remainingQuartets = otherQuartets.filter(\n      (q) => intersection(q.itemsIds, Array.from(usedItemIds)).length === 0,\n    );\n\n    if (remainingQuartets.length === 0) {\n      throw new Error('Not enough quartets to complete the simulation.');\n    }\n\n    const sampledQuartet = sample(remainingQuartets);\n    if (!sampledQuartet) {\n      throw new Error('No random quartet found in remaining quartets.');\n    }\n    const randomQuartet = cloneDeep(sampledQuartet);\n    randomQuartet.itemsIds.forEach((id) => usedItemIds.add(id));\n\n    const randomItemIds = sampleSize(randomQuartet.itemsIds, 4);\n    randomQuartet.itemsIds = randomItemIds;\n\n    selectedNonPerfectQuartets.push(randomQuartet);\n    tries += 1;\n  }\n\n  if (tries === 100) {\n    throw new Error('Failed to complete simulation.');\n  }\n\n  return {\n    perfectQuartet: perfectQuartet,\n    nonPerfectQuartets: selectedNonPerfectQuartets,\n    usedItemIds: Array.from(usedItemIds),\n  };\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsQuartetSearch } from 'components/Items/Quartets/ItemsQuartetSearch';\nimport { ItemsQuartetsContent } from 'components/Items/Quartets/ItemsQuartetsContent';\nimport { ItemsQuartetsFilters } from 'components/Items/Quartets/ItemsQuartetsFilters';\nimport { ItemsQuartetsSimulator } from 'components/Items/Quartets/ItemsQuartetsSimulator';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { DailyQuartetSet } from 'types';\n\nexport function ItemsQuartets() {\n  const { queryParams } = useQueryParams();\n\n  const quartetsData = useResourceFirebaseData<DailyQuartetSet>({\n    tdrResourceName: 'daily-quartet-sets',\n    firebaseDataCollectionName: 'quartetSets',\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Quartet Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsQuartetsFilters {...quartetsData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={quartetsData.isLoading}\n            error={quartetsData.error}\n            hasResponseData={!isEmpty(quartetsData.data)}\n          >\n            {queryParams.get('display') === 'simulator' ? (\n              <ItemsQuartetsSimulator {...quartetsData} />\n            ) : (\n              <Flex vertical gap={24}>\n                <ItemsQuartetSearch {...quartetsData} />\n                <ItemsQuartetsContent {...quartetsData} />\n              </Flex>\n            )}\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsQuartets;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","FilterSelect","label","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","className","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","layout","length","block","option","arrow","trigger","title","icon","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","cancel","reset","useTimeoutFn","useEffect","togglePendingSave","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","danger","SectionTitle","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","ItemsTypeahead","items","isPending","allowClear","onFinish","onFinishMultiple","tdrItemsQuery","useTDResource","namesDict","useMemo","Object","values","reduce","acc","nameEn","name","en","id","namePt","pt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","String","includes","sorted","idMatch","match","index","indexOf","filterOption","inputValue","onSearch","notFoundContent","onSelect","key","undefined","onPressEnter","ids","opt","Boolean","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","App","info","truncate","omission","success","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","queryClient","useQueryClient","tdrQuery","firebaseQuery","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","mutation","useUpdateFirebaseDoc","onSuccess","refetchQueries","onError","description","isSuccess","cloneDeep","isEmpty","firebaseData","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","useTDResourceNonCollection","useTableExpandableRows","maxExpandedRows","rowExpandable","defaultExpandAllRows","expandable","expandedRowKeys","setExpandedRowKeys","onExpand","expanded","record","newExpandedRowKeys","shift","push","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","queryParams","addParam","useQueryParams","current","Number","get","pageSize","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","updateDoc","useMutation","mutationFn","ItemsQuartetTypeahead","quartets","titlesDict","quartet","InspirationSample","onUpdate","initialQuantity","itemsTypeaheadQuery","getSample","quantity","difference","sampleSize","itemsIds","sampledItems","setSampledItems","gap","wrap","itemId","vertical","justify","shape","PlusOutlined","TYPES","t","ItemsQuartetsTable","rows","paginationProps","columns","dataIndex","render","align","WarningOutlined","copyable","QuartetEditableCell","property","sorter","a","b","localeCompare","Table","QuartetItemsCell","removeDuplicates","defaultValue","count","CheckCircleFilled","flagged","checkedChildren","copy","expandableProps","expandedRowRender","AddItemFlow","rowKey","dataSource","pagination","rowClassName","RemoveItemFlow","onConfirm","okText","cancelText","DeleteFilled","editable","newValue","ItemsQuartetSearch","activeQuartetId","setActiveQuartetId","activeQuartet","direction","NewQuartetModal","is","removeParam","newId","createUUID","createNewQuartetPlaceholder","setActiveQuartet","open","onCancel","okButtonProps","wait","maskClosable","ItemsQuartetsContent","showOnlyEmpty","s","completeQuartetsCount","ItemsQuartetsFilters","addParams","JSON","stringify","prepareFileForDownload","sortJsonKeys","mode","display","TableOutlined","GlobalOutlined","ItemsQuartetsSimulator","simulation","setSimulation","simulateQuartetGame","QuartetRow","perfectQuartet","nonPerfectQuartets","strong","allQuartets","quartetsArray","perfectQuartets","q","Error","sample","perfectItemIds","Set","usedItemIds","otherQuartets","getQuartetOptions","intersection","Array","from","matchZeroQuartets","matchOneQuartets","matchTwoQuartets","matchThreeQuartets","selectedNonPerfectQuartets","sampledQuartet","slice","add","filteredItemIds","has","randomItemIds","tries","remainingQuartets","randomQuartet","ItemsQuartets","quartetsData","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}