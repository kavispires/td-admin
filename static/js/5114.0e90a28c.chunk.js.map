{"version":3,"file":"static/js/5114.0e90a28c.chunk.js","mappings":"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","sources":["components/Daily/utils/constants.ts","components/Daily/hooks/useDailyHistoryQuery.ts","hooks/useLoadWordLibrary.tsx","components/Daily/utils/utils.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\n/**\n * Calculates the next day based on the given date string.\n *\n * @param dateString - The date string in the format 'YYYY-MM-DD'.\n * @returns The next day in the format 'YYYY-MM-DD'.\n */\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\n/**\n * Checks if a given date is a Saturday.\n *\n * @param {string} dateString - The date in 'YYYY-MM-DD' format.\n * @returns {boolean} True if the date is a Saturday, false otherwise.\n */\nexport function checkSaturday(dateString: string): boolean {\n  const date = moment(dateString, 'YYYY-MM-DD');\n  return date.day() === 6; // 6 represents Saturday in moment.js\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","import { useLoadDrawings } from 'components/Daily/hooks';\nimport { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.warn('Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport { getNextDay, checkSaturday } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[]\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isSaturday = checkSaturday(id);\n    const size = isSaturday ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isSaturday ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4\n) => {\n  const shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = shuffledWords.pop() ?? '';\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[]) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = [0, 5, 10, 15];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 192;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo } from 'react';\nimport { DailyDiscSet, ArteRuimCard, DailyMovieSet } from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets');\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets');\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  // SET 7: Controle de Estoque\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiscSet } from 'types';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { ArteRuimCard } from 'types';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[]\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId)\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyMovieSet } from 'types';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  let baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2496;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 256,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>,\n  /**\n   * Ignore attributes that are UNRELATED or UNCLEAR\n   */\n  onlyRelevant?: boolean\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED)),\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR)),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n\n/**\n * Pauses the execution for a specified duration.\n * @param duration - The duration to wait in milliseconds. Default is 1000ms.\n */\nexport const wait = async (duration = 1000) => {\n  await new Promise((resolve) => setTimeout(resolve, duration));\n};\n"],"names":["LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","useLoadWordLibrary","wordLength","language","enabled","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","hasResponseData","isEmpty","data","getYesterday","moment","subtract","format","getNextDay","dateString","add","useParsedHistory","key","history","useMemo","latestDate","latestNumber","used","JSON","parse","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","shuffledWords","shuffle","difference","keyword","pop","selectedWords","i","newWord","getNewWord","push","letters","shuffleLetters","index","usedLetters","uniq","flatMap","map","word","split","shortList","filter","includes","sortBy","intersection","length","preservedIndexes","otherLetters","_","shuffledLetters","shift","generateControleDeEstoqueGame","id","num","year","month","day","Number","entry","number","type","title","Date","getDay","goods","orders","sampleSize","Array","fill","GOODS_SIZE","outOfStockGood","useLoadDailySetup","queryLanguage","drawingsCount","batchSize","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Boolean","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","arteRuimEntries","console","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","dataDrawing","cardId","drawing","trim","warn","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","buildDailyArteRuimGames","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","itemsIds","notUsedSets","setId","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isSaturday","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","palavreado","artista","filmaco","useSaveDailySetup","queryClient","useQueryClient","isDirty","setIsDirty","useState","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","save","mutateAsync","isPending","useTempDaily","DataLoadingWrapper","isIdle","children","tip","className","description","showIcon","Sprite","width","padding","response","paddedWidth","style","height","display","placeItems","svgContent","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","WarehouseGood","itemId","str","match","numId","parseInt","goodId","sourceId","Math","ceil","getSource","clsx","AlienSign","Emoji","emojiId","startsWith","memoize","glyphId","Glyph","Item","library","baseUrl","process","folder","path","join","docId","log","getCurrentDateTime","getDoc","useGetFirebaseDoc","useTDResourceNonCollection","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","DEFAULT_LANGUAGE","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","value","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","indexOf","fromPairs","deserializeFirebaseData","serializeFirebaseData","now","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","cloneDeep","merge","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","onlyRelevant","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","slice","filterMessage","showUnclear","showUnrelated","sortItemsIds","wait","duration","resolve","setTimeout"],"sourceRoot":""}