{"version":3,"file":"static/js/DailySetup.6f2802f6.chunk.js","mappings":"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","sources":["components/Common/FilterEntries.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Daily/CanvasSVG.tsx","components/Daily/DataPopulation.tsx","components/Daily/SideFilters.tsx","pages/DailySetup.tsx"],"sourcesContent":["import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { Alert, Button, Flex, Space, Table, TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { ArteRuimCard } from 'types';\n\nimport { UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport { DailyComunicacaoAlienigenaEntry, DailyEntry } from './utils/types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            {(entry.attributes as DailyComunicacaoAlienigenaEntry['attributes']).map((req) => (\n              <Space key={req.spriteId}>\n                <AlienSign id={`sign-${req.spriteId}`} width={50} />\n              </Space>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n"],"names":["FilterSelect","label","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","className","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","layout","length","block","option","arrow","trigger","title","icon","SectionTitle","children","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","CanvasSVG","drawing","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","lineArr","path","x","y","strokeWidthBySize","small","medium","large","xmlns","overflow","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DataPopulation","language","dataLoad","queryLanguage","columns","dataIndex","key","render","number","cardId","text","drawings","direction","split","l","i","join","wrap","setId","itemsIds","gap","id","words","letters","keyword","word","year","goods","WarehouseGood","intersectingThing","attributes","req","spriteId","message","type","cards","maxHeight","overflowY","card","save","isPending","useSaveDailySetup","justify","align","entries","onClick","loading","dataSource","SideFilters","setLanguage","drawingsCount","setDrawingsCount","batchSize","setBatchSize","DEFAULT_LANGUAGE","useState","useLoadDailySetup","Boolean","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}