{"version":3,"file":"static/js/336.81a663b4.chunk.js","mappings":"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","sources":["components/Daily/utils/constants.ts","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/utils/utils.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { difference, flatMap, intersection, sample, shuffle, sortBy, uniq } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n\nconst usedWords: string[] = [];\n\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[]) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = [0, 5, 10, 15];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n\nexport const generatePalavreadoGame = (words: string[], previouslyUsedWords: string[]) => {\n  const shuffledWords = shuffle(difference(words, usedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = shuffledWords.pop() ?? '';\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < 4; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  usedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords),\n  };\n};\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getToday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getToday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getToday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { sampleSize, shuffle } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyDiscSet, ArteRuimCard } from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport {\n  DailyAquiOEntry,\n  DailyArtistaEntry,\n  DailyEntry,\n  DailyPalavreadoEntry,\n  DataDrawing,\n} from '../utils/types';\nimport { generatePalavreadoGame, getNextDay } from '../utils/utils';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  // arteRuimHistory: ParsedDailyHistoryEntry;\n  // round5sample: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    console.count('Creating Arte Ruim...');\n    const drawings = (drawingsQuery ?? []).reduce(\n      (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n        const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n        Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n          const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n          if (dataDrawing.drawing.trim().length < 10) {\n            console.warn('Empty drawing', cardId);\n            return acc;\n          }\n\n          if (acc[cardId] === undefined) {\n            acc[cardId] = {\n              id: cardId,\n              type: 'arte-ruim',\n              language: queryLanguage ?? 'pt',\n              cardId: cardId,\n              text: dataDrawing.text,\n              drawings: [dataDrawing.drawing],\n              number: 0,\n              dataIds: [key],\n            };\n          } else {\n            acc[cardId].drawings.push(dataDrawing.drawing);\n            acc[cardId].dataIds.push(key);\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const atLeastTwoDrawingsList = Object.values(drawings).filter(\n      (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n    );\n\n    const shortList = Object.values(atLeastTwoDrawingsList).filter(\n      (e) => !arteRuimHistory.used.includes(e.cardId)\n    );\n\n    const shuffledShortList = sampleSize(shuffle(shortList), batchSize);\n\n    let lastDate = arteRuimHistory.latestDate;\n\n    return shuffledShortList.map((e, index) => {\n      const id = getNextDay(lastDate);\n\n      lastDate = id;\n      return {\n        ...e,\n        id,\n        number: arteRuimHistory.latestNumber + index + 1,\n      };\n    });\n  }, [drawingsQuery, queryLanguage, arteRuimHistory, batchSize, drawingsCount]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets');\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    console.count('Creating Aqui Ó...');\n    // Filter complete sets only\n    const completeSets = shuffle(\n      Object.values(aquiOSetsQuery.data).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n    );\n    // Filter not-used sets only\n    let notUsedSets = completeSets.filter((setEntry) => !aquiOHistory.used.includes(setEntry.id));\n\n    if (notUsedSets.length < batchSize) {\n      notUsedSets.push(...shuffle(completeSets));\n    }\n\n    let lastDate = aquiOHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyAquiOEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const setEntry = notUsedSets[i];\n      if (!setEntry) {\n        break;\n      }\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: aquiOHistory.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n\n    return entries;\n  }, [aquiOSetsQuery, aquiOHistory, batchSize]);\n\n  // STEP 4: Palavreado\n  const wordsQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (!wordsQuery.data || !wordsQuery.data.length) {\n      return {};\n    }\n    console.count('Creating Palavreado...');\n    let lastDate = palavreadoHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyPalavreadoEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'palavreado',\n        number: palavreadoHistory.latestNumber + i + 1,\n        ...generatePalavreadoGame(wordsQuery.data ?? [], [\n          ...Object.values(entries).map((e) => e.keyword),\n          ...palavreadoHistory.used,\n        ]),\n      };\n    }\n    return entries;\n  }, [wordsQuery, palavreadoHistory, batchSize]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    console.count('Creating Artista...');\n    let lastDate = artistaHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyArtistaEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      const availableCardsIds = Object.keys(arteRuimCardsQuery.data ?? {}).filter(\n        (cardId) => !arteRuimHistory.used.includes(cardId)\n      );\n      const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCardsQuery.data[cardId]);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'artista',\n        number: artistaHistory.latestNumber + i + 1,\n        cards,\n      };\n    }\n    return entries;\n  }, [arteRuimCardsQuery, arteRuimHistory, artistaHistory, batchSize]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n      };\n    });\n  }, [arteRuimEntries, aquiOEntries, palavreadoEntries, artistaEntries]);\n\n  return {\n    isLoading: areDrawingsLoading || historyQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('tdi');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'tdr' | 'tdi' | 'tdi-data') {\n  let baseUrl: string | undefined = '';\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'tdi':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_IMAGES;\n      break;\n    case 'tdi-data':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_DATA;\n      break;\n    default:\n      baseUrl =\n        process.env.NODE_ENV === 'development'\n          ? process.env.REACT_APP_LOCAL_URL\n          : process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TD_RESOURCES;\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? {},\n    hasResponseData,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 1418;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '',\n  DETERMINISTIC: '+',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n    ...sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED),\n    ...sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n"],"names":["LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","getToday","moment","format","getNextDay","dateString","add","usedWords","getNewWord","words","keyword","selectedWords","index","usedLetters","uniq","flatMap","map","word","split","shortList","shuffle","filter","includes","sortBy","intersection","length","shuffleLetters","letters","preservedIndexes","otherLetters","_","shuffledLetters","i","push","shift","generatePalavreadoGame","previouslyUsedWords","difference","pop","newWord","useParsedHistory","key","data","history","useMemo","latestDate","latestNumber","used","JSON","parse","useLoadDailySetup","enabled","queryLanguage","drawingsCount","batchSize","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Array","fill","Boolean","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","arteRuimEntries","console","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","dataDrawing","cardId","id","drawing","trim","warn","undefined","type","language","text","number","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","sampleSize","lastDate","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","completeSets","setEntry","itemsIds","notUsedSets","setId","title","wordsQuery","wordLength","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","hasResponseData","isEmpty","useLoadWordLibrary","palavreadoHistory","palavreadoEntries","arteRuimCardsQuery","artistaHistory","artistaEntries","availableCardsIds","keys","cards","arteRuim","palavreado","artista","useSaveDailySetup","queryClient","useQueryClient","isDirty","setIsDirty","useState","mutation","useMutation","mutationFn","saves","entry","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","save","mutateAsync","isPending","useTempDaily","DataLoadingWrapper","isIdle","children","tip","className","description","showIcon","Sprite","width","padding","response","paddedWidth","style","height","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","AlienSign","clsx","Emoji","emojiId","startsWith","getSource","memoize","str","match","numId","parseInt","glyphId","sourceId","Math","ceil","Glyph","itemId","Item","library","baseUrl","folder","process","path","join","docId","log","getCurrentDateTime","getDoc","useGetFirebaseDoc","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","value","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","indexOf","fromPairs","deserializeFirebaseData","serializeFirebaseData","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","cloneDeep","merge","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","slice","filterMessage","showUnclear","showUnrelated"],"sourceRoot":""}