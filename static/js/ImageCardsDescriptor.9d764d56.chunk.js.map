{"version":3,"file":"static/js/ImageCardsDescriptor.9d764d56.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/FullScreenModal.tsx","components/Common/SaveButton.tsx","components/Images/ImageCard.tsx","hooks/useGetFirebaseDoc.ts","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTDResource.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Images/ImageCards/hooks/useImageCardsDecks.ts","components/Images/ImageCards/ImageCardsDescriptorModal.tsx","components/Images/ImageCards/ImageCardsDescriptorTable.tsx","components/Images/ImageCards/ImageCardsDescriptorContent.tsx","components/Images/ImageCards/ImageCardsDescriptorFilters.tsx","pages/Images/ImageCardsDescriptor.tsx"],"sourcesContent":["import { Button, type ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | (() => PlainObject);\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","import { CloseOutlined } from '@ant-design/icons';\nimport { Button, Card, type CardProps } from 'antd';\nimport clsx from 'clsx';\n\ntype FullScreenModalProps = {\n  open: boolean;\n  onClose: () => void;\n} & Omit<CardProps, 'extra'>;\n\nexport function FullScreenModal({ open, onClose, ...props }: FullScreenModalProps) {\n  return (\n    <Card\n      className={clsx('full-screen-modal', !open && 'full-screen-modal--hidden')}\n      bordered={false}\n      extra={<Button onClick={onClose} type=\"text\" shape=\"circle\" icon={<CloseOutlined />} />}\n      {...props}\n    />\n  );\n}\n","import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","// Ant Design Resources\nimport { Image, type ImageProps } from 'antd';\nimport clsx from 'clsx';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseQueryOptions, useQuery } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>,\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffectOnce } from 'react-use';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffectOnce(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  });\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import type { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { type DocumentData, doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseMutationOptions, useMutation } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {},\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty, random, sample } from 'lodash';\n\nexport function useImageCardsDecks() {\n  const tdrImagesDecksQuery = useTDResource<number>('images-decks');\n  const decks = tdrImagesDecksQuery.data ?? {};\n\n  const onRandomCard = () => {\n    if (isEmpty(decks)) return 'td-d0-00';\n\n    const randomDeckNumber = sample(Object.keys(decks));\n    if (!randomDeckNumber) return 'td-d0-00';\n    const randomCardNumber = random(1, decks[randomDeckNumber]);\n    console.log({ randomDeckNumber, randomCardNumber });\n    return `${randomDeckNumber}-${randomCardNumber.toString().padStart(2, '0')}`;\n  };\n\n  const onRandomUniqueCard = (usedCards: string[]) => {\n    const randomCard: string | null = null;\n    let tries = 0;\n\n    while (!randomCard && tries < 30) {\n      const randomCard = onRandomCard();\n      if (usedCards.includes(randomCard)) {\n        tries++;\n        continue;\n      }\n      return randomCard;\n    }\n\n    if (tries > 30) {\n      throw new Error('Could not find a unique card');\n    }\n  };\n\n  const onRandomCards = (quantity = 10) => {\n    const randomCards: string[] = [];\n    let tries = 0;\n    while (Object.keys(randomCards).length < quantity && tries < 30) {\n      const randomCard = onRandomCard();\n      if (randomCards.includes(randomCard)) {\n        tries++;\n        continue;\n      }\n      randomCards.push(randomCard);\n      tries - 0;\n    }\n    if (tries > 30 && randomCards.length < quantity) {\n      throw new Error('Could not find enough unique cards');\n    }\n\n    return randomCards;\n  };\n\n  return {\n    ...tdrImagesDecksQuery,\n    decks,\n    decksList: Object.keys(decks),\n    onRandomCard,\n    onRandomUniqueCard,\n    onRandomCards,\n  };\n}\n","import { FullScreenModal } from 'components/Common/FullScreenModal';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport type { ImageCardDescriptor } from 'types';\nimport { ImageCard } from '../ImageCard';\nimport {\n  Button,\n  Flex,\n  Input,\n  type InputProps,\n  type ButtonProps,\n  type SelectProps,\n  Select,\n  Slider,\n} from 'antd';\nimport { HeartFilled, HeartOutlined } from '@ant-design/icons';\nimport { removeDuplicates } from 'utils';\n\nconst DEFAULT_CARD_SIZE = 200;\n\nexport function ImageCardsDescriptorModal({\n  data,\n  addEntryToUpdate,\n  onClose,\n  onNewCard,\n}: UseResourceFirebaseDataReturnType<ImageCardDescriptor> & {\n  onNewCard: () => void;\n  onClose: () => void;\n}) {\n  const { queryParams, removeParam, addParam } = useQueryParams();\n  const cardSize = Number(queryParams.get('cardSize') ?? DEFAULT_CARD_SIZE);\n\n  const cardId = queryParams.get('cardId');\n  const imageCard = data[cardId ?? ''] ?? {\n    id: cardId,\n    keywords: [],\n  };\n\n  return (\n    <FullScreenModal\n      title={`Image Card Descriptor for ${cardId}`}\n      open={!!cardId}\n      onClose={() => removeParam('cardId')}\n      cover={\n        <Flex justify=\"center\" align=\"center\" style={{ width: '100vw' }}>\n          <ImageCard id={cardId ?? ''} width={cardSize} />\n        </Flex>\n      }\n      actions={[\n        <Button key=\"cancel\" className=\"my-10\" onClick={onClose}>\n          Close\n        </Button>,\n        <Button key=\"cancel\" className=\"my-10\" onClick={onNewCard}>\n          New Card\n        </Button>,\n      ]}\n    >\n      <Flex gap={8} vertical key={cardId} style={{ maxWidth: '500px' }}>\n        <Slider\n          value={cardSize}\n          min={100}\n          max={500}\n          step={25}\n          style={{ maxWidth: 500, width: '100%' }}\n          onChange={(v) => addParam('cardSize', v, DEFAULT_CARD_SIZE)}\n        />\n        <FavoriteImageCardButton imageCard={imageCard} addEntryToUpdate={addEntryToUpdate} size=\"large\" />\n        <ImageCardKeywordsField imageCard={imageCard} addEntryToUpdate={addEntryToUpdate} size=\"large\" />\n        <ImageCardTriggersField imageCard={imageCard} addEntryToUpdate={addEntryToUpdate} size=\"large\" />\n      </Flex>\n    </FullScreenModal>\n  );\n}\n\ntype FavoriteImageCardButtonProps = {\n  imageCard: ImageCardDescriptor;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<ImageCardDescriptor>['addEntryToUpdate'];\n} & Omit<ButtonProps, 'onClick' | 'icon' | 'shape'>;\n\nexport function FavoriteImageCardButton({\n  imageCard,\n  addEntryToUpdate,\n  ...buttonProps\n}: FavoriteImageCardButtonProps) {\n  const isHearted = imageCard.favorite;\n  return (\n    <Button\n      shape=\"circle\"\n      icon={isHearted ? <HeartFilled style={{ color: 'red' }} /> : <HeartOutlined />}\n      type=\"text\"\n      onClick={() => addEntryToUpdate(imageCard.id, { ...imageCard, favorite: !isHearted })}\n      {...buttonProps}\n    />\n  );\n}\n\ntype ImageCardKeywordsFieldProps = {\n  imageCard: ImageCardDescriptor;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<ImageCardDescriptor>['addEntryToUpdate'];\n} & Omit<InputProps, 'onSearch' | 'icon' | 'shape'>;\n\nexport function ImageCardKeywordsField({\n  imageCard,\n  addEntryToUpdate,\n  style,\n  ...inputProps\n}: ImageCardKeywordsFieldProps) {\n  const onUpdateKeywords = (keywords: string) => {\n    addEntryToUpdate(imageCard.id, {\n      ...imageCard,\n      keywords: removeDuplicates(\n        keywords\n          .toLocaleLowerCase()\n          .split(/, |,| /)\n          .filter(Boolean)\n          .map((v) => v.trim())\n          .sort(),\n      ),\n    });\n  };\n\n  return (\n    <Input.Search\n      defaultValue={imageCard.keywords.join(' ')}\n      onSearch={(v) => onUpdateKeywords(v)}\n      style={{ maxWidth: 500, width: '100%', ...style }}\n      enterButton=\"Update\"\n      {...inputProps}\n    />\n  );\n}\n\ntype ImageCardTriggersFieldProps = {\n  imageCard: ImageCardDescriptor;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<ImageCardDescriptor>['addEntryToUpdate'];\n} & Omit<SelectProps, 'onClick' | 'icon' | 'shape'>;\n\nexport function ImageCardTriggersField({\n  imageCard,\n  addEntryToUpdate,\n  style,\n  ...selectProps\n}: ImageCardTriggersFieldProps) {\n  const onUpdateTriggers = (triggers: string[]) => {\n    addEntryToUpdate(imageCard.id, {\n      ...imageCard,\n      triggers,\n    });\n  };\n\n  return (\n    <Select\n      mode=\"multiple\"\n      allowClear\n      style={{ width: '100%', ...style }}\n      placeholder=\"Please select\"\n      defaultValue={imageCard?.triggers}\n      onChange={onUpdateTriggers}\n      options={[\n        { label: 'aliens', value: 'aliens' },\n        { label: 'insets', value: 'insets' },\n        { label: 'snakes', value: 'snakes' },\n        { label: 'spiders', value: 'spiders' },\n        { label: 'scarry', value: 'scarry' },\n      ]}\n      {...selectProps}\n    />\n  );\n}\n","import { Button, Flex, Table, type TableProps } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport type { ImageCardDescriptor } from 'types';\nimport { ImageCard } from '../ImageCard';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { FavoriteImageCardButton } from './ImageCardsDescriptorModal';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ImageCardsDescriptorTable({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<ImageCardDescriptor>) {\n  const { addParam } = useQueryParams();\n\n  const columns: TableProps<ImageCardDescriptor>['columns'] = [\n    {\n      title: 'CardId',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => Number(a.id) - Number(b.id),\n    },\n    {\n      title: 'Image',\n      dataIndex: 'id',\n      key: 'image',\n      render: (id: string) => <ImageCard id={id} width={50} />,\n    },\n    {\n      title: 'Keywords',\n      dataIndex: 'keywords',\n      key: 'keywords',\n      render: (keywords: string[]) => keywords?.join(', '),\n    },\n    {\n      title: 'Triggers',\n      dataIndex: 'triggers',\n      key: 'triggers',\n      render: (triggers: string[]) => triggers?.join(', '),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_, record) => (\n        <Flex>\n          <FavoriteImageCardButton imageCard={record} addEntryToUpdate={addEntryToUpdate} />\n          <Button icon={<EditOutlined />} onClick={() => addParam('cardId', record.id)}>\n            Edit\n          </Button>\n        </Flex>\n      ),\n    },\n  ];\n\n  const rows = Object.values(data);\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  return <Table dataSource={rows} columns={columns} rowKey=\"id\" pagination={paginationProps} />;\n}\n","import { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport type { ImageCardDescriptor } from 'types';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { useImageCardsDecks } from './hooks/useImageCardsDecks';\nimport { ImageCardsDescriptorTable } from './ImageCardsDescriptorTable';\nimport { ImageCardsDescriptorModal } from './ImageCardsDescriptorModal';\n\nexport function ImageCardsDescriptorContent(query: UseResourceFirebaseDataReturnType<ImageCardDescriptor>) {\n  const imageCardsDecksQuery = useImageCardsDecks();\n  const tdrImagesCredoQuery = useTDResource('images-credo');\n  const { addParam, removeParam } = useQueryParams();\n\n  return (\n    <DataLoadingWrapper\n      isLoading={imageCardsDecksQuery.isLoading || tdrImagesCredoQuery.isLoading}\n      hasResponseData={imageCardsDecksQuery.hasResponseData || tdrImagesCredoQuery.hasResponseData}\n      error={tdrImagesCredoQuery.error ?? imageCardsDecksQuery.error}\n    >\n      <ImageCardsDescriptorTable {...query} />\n      <ImageCardsDescriptorModal\n        {...query}\n        onNewCard={() => addParam('cardId', imageCardsDecksQuery.onRandomCard())}\n        onClose={() => removeParam('cardId')}\n      />\n    </DataLoadingWrapper>\n  );\n}\n","import { Button, Divider, Flex } from 'antd';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep } from 'lodash';\nimport type { ImageCardDescriptor } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { useImageCardsDecks } from './hooks/useImageCardsDecks';\n\nexport function ImageCardsDescriptorFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<ImageCardDescriptor>) {\n  const { addParam } = useQueryParams();\n  const { onRandomCard } = useImageCardsDecks();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"image-cards.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <Button onClick={() => addParam('cardId', onRandomCard())} block>\n        Random Card\n      </Button>\n\n      <Divider />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(diagramItems: Dictionary<ImageCardDescriptor>) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(diagramItems);\n  return sortJsonKeys(copy);\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ImageCardsDescriptorContent } from 'components/Images/ImageCards/ImageCardsDescriptorContent';\nimport { ImageCardsDescriptorFilters } from 'components/Images/ImageCards/ImageCardsDescriptorFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { ImageCardDescriptor } from 'types';\n\nexport function ImageCardsDescriptor() {\n  const imageCardsQuery = useResourceFirebaseData<ImageCardDescriptor>({\n    tdrResourceName: 'image-cards',\n    firebaseDataCollectionName: 'imageCards',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Image Cards Descriptor\" subtitle=\"Teenage Student Cards\">\n      <Layout hasSider>\n        <PageSider>\n          <ImageCardsDescriptorFilters {...imageCardsQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={imageCardsQuery.isLoading}\n            error={imageCardsQuery.error}\n            hasResponseData={!isEmpty(imageCardsQuery.data)}\n          >\n            <ImageCardsDescriptorContent {...imageCardsQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsDescriptor;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","FullScreenModal","open","onClose","className","clsx","bordered","extra","type","shape","icon","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","size","disabled","danger","block","ImageCard","id","width","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","options","useQuery","queryKey","queryFn","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","value","defaultValue","undefined","delete","set","String","addParams","params","defaultValues","Object","entries","forEach","removeParam","is","get","useEffectOnce","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","onError","error","description","useMemo","isSuccess","isPending","cloneDeep","isEmpty","firebaseData","isLoading","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","resourceName","enabled","query","res","fetch","json","hasResponseData","useTDResourceNonCollection","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","updateDoc","useMutation","mutationFn","useImageCardsDecks","tdrImagesDecksQuery","decks","onRandomCard","randomDeckNumber","sample","keys","randomCardNumber","random","padStart","decksList","onRandomUniqueCard","usedCards","tries","randomCard","includes","Error","onRandomCards","quantity","randomCards","length","push","ImageCardsDescriptorModal","onNewCard","cardSize","cardId","imageCard","keywords","title","cover","justify","align","style","actions","gap","vertical","maxWidth","min","max","step","v","FavoriteImageCardButton","ImageCardKeywordsField","ImageCardTriggersField","isHearted","favorite","HeartFilled","color","HeartOutlined","inputProps","join","onSearch","onUpdateKeywords","removeDuplicates","toLocaleLowerCase","split","filter","Boolean","map","trim","sort","enterButton","selectProps","mode","allowClear","placeholder","triggers","label","ImageCardsDescriptorTable","columns","dataIndex","sorter","a","b","render","record","EditOutlined","rows","values","paginationProps","dataSource","rowKey","pagination","ImageCardsDescriptorContent","imageCardsDecksQuery","tdrImagesCredoQuery","DataLoadingWrapper","ImageCardsDescriptorFilters","JSON","stringify","diagramItems","copy","sortJsonKeys","prepareFileForDownload","ImageCardsDescriptor","imageCardsQuery","subtitle","hasSider","PageSider"],"sourceRoot":""}