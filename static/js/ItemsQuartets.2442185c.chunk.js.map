{"version":3,"file":"static/js/ItemsQuartets.2442185c.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTDResource.ts","hooks/useTableExpandableRows.tsx","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Quartets/InspirationSample.tsx","components/Items/Quartets/ItemsQuartetsTable.tsx","components/Items/Quartets/NewQuartetModal.tsx","components/Items/Quartets/ItemsQuartetsContent.tsx","components/Items/Quartets/ItemsQuartetTypeahead.tsx","components/Items/Quartets/ItemsQuartetSearch.tsx","components/Items/Quartets/ItemsQuartetsFilters.tsx","components/Items/Quartets/ItemsQuartetsSimulator.tsx","pages/Items/ItemsQuartets.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { TableProps } from 'antd';\nimport { ExpandableConfig } from 'antd/es/table/interface';\nimport { useState } from 'react';\n\ntype useTableExpandableRowsOptions<TRecord extends { id: string }> = {\n  /**\n   * The maximum number of expanded rows.\n   * To make sure only one row is expanded at a time, set this to 1.\n   */\n  maxExpandedRows?: number;\n} & TableProps<TRecord>['expandable'];\n\nexport function useTableExpandableRows<TRecord extends { id: string }>({\n  maxExpandedRows,\n  rowExpandable,\n  defaultExpandAllRows,\n  ...expandable\n}: useTableExpandableRowsOptions<TRecord>): ExpandableConfig<TRecord> {\n  const [expandedRowKeys, setExpandedRowKeys] = useState<string[]>([]);\n\n  const onExpand = (expanded: boolean, record: TRecord) => {\n    const newExpandedRowKeys = [...expandedRowKeys]; // Create a copy to avoid mutation\n\n    if (!expanded) {\n      return setExpandedRowKeys(newExpandedRowKeys.filter((key) => key !== record.id));\n    }\n\n    if (maxExpandedRows) {\n      while (newExpandedRowKeys.length >= maxExpandedRows) {\n        newExpandedRowKeys.shift();\n      }\n      newExpandedRowKeys.push(record.id);\n\n      setExpandedRowKeys(newExpandedRowKeys);\n    }\n  };\n\n  return {\n    expandedRowKeys,\n    rowExpandable: rowExpandable ?? (() => true),\n    defaultExpandAllRows: defaultExpandAllRows ?? false,\n    onExpand,\n    ...expandable,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { Button, Flex, Typography } from 'antd';\nimport { useState } from 'react';\nimport { DailyQuartetSet, Item as ItemT } from 'types';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { difference, sampleSize } from 'lodash';\nimport { Item } from 'components/Sprites';\nimport { PlusOutlined } from '@ant-design/icons';\n\ntype InspirationSampleProps = {\n  onUpdate: (itemId: string) => void;\n  quartet: DailyQuartetSet;\n  initialQuantity?: number;\n};\n\nexport function InspirationSample({ onUpdate, quartet, initialQuantity = 24 }: InspirationSampleProps) {\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const getSample = (quantity: number) => {\n    return difference(sampleSize(Object.keys(itemsTypeaheadQuery.data ?? {}), quantity), quartet.itemsIds);\n  };\n\n  const [sampledItems, setSampledItems] = useState<string[]>(getSample(initialQuantity));\n\n  const onSample = () => {\n    setSampledItems(getSample(24));\n  };\n\n  return (\n    <div className=\"mt-2\">\n      <Typography.Paragraph>\n        Inspiration Sample{' '}\n        <Button size=\"small\" onClick={onSample}>\n          Get\n        </Button>\n      </Typography.Paragraph>\n      <Flex gap={16} wrap=\"wrap\">\n        {sampledItems.map((itemId, index) => {\n          const item = itemsTypeaheadQuery.data?.[itemId];\n          return (\n            <Flex key={`sample-${itemId}-${index}`} gap={2} vertical>\n              <Item id={itemId} width={60} title={`${item.name.en} | ${item.name.pt}`} />\n              <Flex justify=\"center\" gap={6}>\n                <Typography.Text>{itemId}</Typography.Text>\n                <Button size=\"small\" shape=\"circle\" onClick={() => onUpdate(itemId)}>\n                  <PlusOutlined />\n                </Button>\n              </Flex>\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n}\n","import { Button, Flex, Popconfirm, Rate, Select, Space, Table, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { DailyQuartetSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { CheckCircleFilled, DeleteFilled } from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nimport type { TableProps } from 'antd';\nimport { useTableExpandableRows } from 'hooks/useTableExpandableRows';\nimport { InspirationSample } from './InspirationSample';\n\nconst TYPES = ['general', 'visual', 'word', 'thematic', 'attribute'].map((t) => ({ label: t, value: t }));\n\ntype ItemsQuartetsTableProps = {\n  rows: DailyQuartetSet[];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyQuartetSet>['addEntryToUpdate'];\n  expandedRowKeys?: string[];\n};\n\nexport function ItemsQuartetsTable({ rows, addEntryToUpdate, expandedRowKeys }: ItemsQuartetsTableProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyQuartetSet>['columns'] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <QuartetEditableCell\n          property=\"title\"\n          value={title}\n          quartet={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <QuartetItemsCell\n          quartet={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      render: (type, record) => (\n        <Select\n          defaultValue={type}\n          options={TYPES}\n          size=\"small\"\n          style={{ width: 100 }}\n          onChange={(type) => addEntryToUpdate(record.id, { ...record, type })}\n        />\n      ),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      render: (level, record) => (\n        <Rate\n          count={3}\n          value={level}\n          onChange={(v) => addEntryToUpdate(record.id, { ...record, level: v })}\n        />\n      ),\n    },\n    {\n      title: 'Perfect Quartet',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => {\n        const uniqueItems = removeDuplicates(itemsIds).filter(Boolean);\n        return uniqueItems.length === 4 && <CheckCircleFilled style={{ color: 'dodgerblue' }} />;\n      },\n    },\n  ];\n\n  const expandableProps = useTableExpandableRows<DailyQuartetSet>({\n    maxExpandedRows: 1,\n    expandedRowRender: (record) => <AddItemFlow quartet={record} addEntryToUpdate={addEntryToUpdate} />,\n    rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n  });\n\n  return (\n    <Table\n      columns={columns}\n      rowKey=\"id\"\n      dataSource={rows}\n      expandable={expandableProps}\n      pagination={paginationProps}\n    />\n  );\n}\n\ntype AddItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n};\n\nexport function AddItemFlow({ quartet, addEntryToUpdate }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: [...quartet.itemsIds, itemId],\n    });\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n      <InspirationSample quartet={quartet} onUpdate={onUpdate} initialQuantity={0} />\n    </div>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ quartet, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: quartet.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype QuartetItemsCellProps = {\n  quartet: DailyQuartetSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n};\n\nexport function QuartetItemsCell({\n  quartet,\n  itemsIds,\n  copyToClipboard,\n  addEntryToUpdate,\n}: QuartetItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${quartet.title}`}>\n      {itemsIds.map((itemId) => (\n        <Flex key={`${quartet.title}-${itemId}`} gap={2} vertical>\n          {!!itemId ? <Item id={String(itemId)} width={60} /> : <>{console.log(itemId)}</>}\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow quartet={quartet} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n\ntype QuartetEditableCellProps = {\n  value: string | number;\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n  property: keyof DailyQuartetSet;\n};\n\nexport function QuartetEditableCell({\n  value,\n  quartet,\n  addEntryToUpdate,\n  property,\n}: QuartetEditableCellProps) {\n  const handleChange = (newValue: string) => {\n    if (typeof value === 'number') {\n      return newValue !== String(value)\n        ? addEntryToUpdate(quartet.id, { ...quartet, [property]: Number(newValue) })\n        : null;\n    }\n\n    return newValue !== value\n      ? addEntryToUpdate(quartet.id, { ...quartet, [property]: newValue.trim() })\n      : null;\n  };\n\n  return (\n    <Space>\n      <Typography.Text\n        editable={{\n          onChange: handleChange,\n        }}\n      >\n        {String(value)}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import { Modal } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMemo, useState } from 'react';\nimport { DailyQuartetSet } from 'types';\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\nimport { removeDuplicates } from 'utils';\nimport { InspirationSample } from './InspirationSample';\n\ntype NewQuartetModalProps = {\n  data: UseResourceFirebaseDataReturnType<DailyQuartetSet>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyQuartetSet>['addEntryToUpdate'];\n};\n\nexport function NewQuartetModal({ data, addEntryToUpdate }: NewQuartetModalProps) {\n  const { is, removeParam } = useQueryParams();\n  const newId = useMemo(() => {\n    let latestIdNum = 0;\n    Object.keys(data).forEach((id) => {\n      const idNum = Number(id.split('-')[1]);\n      if (idNum > latestIdNum) {\n        latestIdNum = idNum;\n      }\n    });\n\n    return `dqs-${String(latestIdNum + 1).padStart(4, '0')}-pt`;\n  }, [data]);\n\n  const [activeQuartet, setActiveQuartet] = useState<DailyQuartetSet>({\n    id: newId,\n    title: '',\n    itemsIds: [],\n    level: 0,\n  });\n\n  const onLocalUpdate = (_: string, value: DailyQuartetSet) => {\n    setActiveQuartet({ ...value });\n  };\n\n  const onAddSampledItem = (itemId: string) => {\n    setActiveQuartet((prev) => ({\n      ...prev,\n      itemsIds: removeDuplicates([...prev.itemsIds, itemId]),\n    }));\n  };\n\n  const onEntry = () => {\n    addEntryToUpdate(activeQuartet.id, activeQuartet);\n    removeParam('newQuartet');\n  };\n\n  return (\n    <Modal\n      title=\"Add Quartet\"\n      open={is('newQuartet')}\n      width={'80vw'}\n      onCancel={() => removeParam('newQuartet')}\n      okButtonProps={{ disabled: !activeQuartet.title, onClick: onEntry }}\n      maskClosable={false}\n    >\n      {Boolean(activeQuartet) && (\n        <>\n          <ItemsQuartetsTable\n            rows={[activeQuartet]}\n            addEntryToUpdate={onLocalUpdate}\n            expandedRowKeys={[activeQuartet.id]}\n          />\n          <InspirationSample onUpdate={onAddSampledItem} quartet={activeQuartet} />\n        </>\n      )}\n    </Modal>\n  );\n}\n","import { Space, Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyQuartetSet } from 'types';\n\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\nimport { NewQuartetModal } from './NewQuartetModal';\n\nfunction orderSets(givenSets: DailyQuartetSet[]) {\n  return orderBy(givenSets, [\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length !== 4,\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length === 0,\n    (s) => s.title,\n  ]).map((s) => ({\n    ...s,\n    itemsIds: orderBy(s.itemsIds, (id) => Number(id)),\n  }));\n}\n\nexport function ItemsQuartetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const rows = useMemo(() => {\n    const sets = data ? orderSets(Object.values(data)) : [];\n    return showOnlyEmpty ? sets.filter((s) => s.itemsIds.length === 0) : sets;\n  }, [data, showOnlyEmpty]);\n\n  const completeQuartetsCount = rows.filter((s) => s.itemsIds.length === 4).length;\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>\n        Total Quartets: {rows.length} | Complete Quartets: {completeQuartetsCount}\n      </Typography.Title>\n      <ItemsQuartetsTable rows={rows} addEntryToUpdate={addEntryToUpdate} />\n      <NewQuartetModal data={data} addEntryToUpdate={addEntryToUpdate} />\n    </Space>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { DailyQuartetSet } from 'types';\n\ntype ItemsQuartetTypeaheadProps = {\n  quartets?: Dictionary<DailyQuartetSet>;\n  isPending?: boolean;\n  onFinish: (id: string | null) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsQuartetTypeahead({\n  quartets,\n  isPending,\n  onFinish,\n  style,\n  ...rest\n}: ItemsQuartetTypeaheadProps) {\n  const { titlesDict, options } = useMemo(() => {\n    console.log('Recomputing quartets tiles typeahead...');\n\n    const titlesDict = Object.values(quartets ?? {}).reduce((acc: Record<string, string>, quartet) => {\n      acc[quartet.title] = quartet.id;\n      return acc;\n    }, {});\n\n    const options = orderBy(Object.keys(titlesDict), [(title) => title.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { titlesDict, options };\n  }, [quartets, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      } else {\n        onFinish(null);\n      }\n    },\n    350,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (titlesDict[key] !== undefined) {\n        onFinish(titlesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (titlesDict[key] !== undefined) {\n      onFinish(titlesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear\n      placeholder={'Search quartet by title...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No quartets found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\n\nimport { DailyQuartetSet } from 'types';\nimport { Space, Typography } from 'antd';\n\nimport { useMemo, useState } from 'react';\nimport { ItemsQuartetTypeahead } from './ItemsQuartetTypeahead';\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\nexport function ItemsQuartetSearch({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const [activeQuartetId, setActiveQuartetId] = useState<string | null>(null);\n  const activeQuartet = useMemo(() => {\n    if (!activeQuartetId) return null;\n    return data[activeQuartetId];\n  }, [activeQuartetId, data]);\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>Search Quartet</Typography.Title>\n\n      <ItemsQuartetTypeahead quartets={data} onFinish={(id) => setActiveQuartetId(id)} />\n\n      {Boolean(activeQuartet) && (\n        <ItemsQuartetsTable rows={[activeQuartet!]} addEntryToUpdate={addEntryToUpdate} />\n      )}\n    </Space>\n  );\n}\n","import { GlobalOutlined, TableOutlined } from '@ant-design/icons';\nimport { Button, Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { DailyQuartetSet } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsQuartetsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is, addParam, queryParams, addParams } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-quartet-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSwitch\n        label=\"Pending Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n\n      <Button block onClick={() => addParam('newQuartet', 'true', false)} disabled={is('newQuartet')}>\n        Add New Quartet\n      </Button>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'table'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1, display: 'table' })}\n        options={[\n          {\n            title: 'Table',\n            icon: <TableOutlined />,\n            value: 'table',\n          },\n          {\n            title: 'Simulator',\n            icon: <GlobalOutlined />,\n            value: 'simulator',\n          },\n        ]}\n      />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(quartets: Dictionary<DailyQuartetSet>) {\n  // let latestId = 1;\n  // console.log(quartets);\n  // const clearedIds = Object.values(quartets).reduce((acc: Dictionary<DailyQuartetSet>, quartet) => {\n  //   const { id, ...rest } = quartet;\n  //   if (!rest.title) {\n  //     return acc;\n  //   }\n\n  //   const newId = `dqs-${String(latestId).padStart(4, '0')}-pt`;\n  //   acc[newId] = { ...rest, id: newId };\n  //   console.log(rest.title);\n  //   latestId += 1;\n  //   return acc;\n  // }, {});\n  // console.log(clearedIds);\n\n  return sortJsonKeys(quartets);\n}\n","import { Button, Flex, Rate, Space, Typography } from 'antd';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep, intersection, orderBy, sample, sampleSize } from 'lodash';\nimport { useState } from 'react';\nimport { DailyQuartetSet } from 'types';\n\nimport { Item } from 'components/Sprites';\n\nexport function ItemsQuartetsSimulator({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const [simulation, setSimulation] = useState(simulateQuartetGame(data));\n\n  const onNewSimulation = () => {\n    setSimulation(simulateQuartetGame(data));\n  };\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>Simulator</Typography.Title>\n      <Button onClick={onNewSimulation}>New Simulation</Button>\n\n      <Flex gap={24} vertical>\n        <QuartetRow quartet={simulation.perfectQuartet} />\n\n        {simulation.nonPerfectQuartets.map((quartet) => (\n          <QuartetRow key={quartet.id} quartet={quartet} />\n        ))}\n      </Flex>\n    </Space>\n  );\n}\n\ntype QuartetRowProps = {\n  quartet: DailyQuartetSet;\n};\n\nfunction QuartetRow({ quartet }: QuartetRowProps) {\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Text strong>\n        {quartet.title} <Rate count={3} value={quartet.level} disabled />\n      </Typography.Text>\n      <Flex gap={8}>\n        {quartet.itemsIds.map((itemId) => (\n          <Item key={itemId} id={itemId} width={60} />\n        ))}\n      </Flex>\n    </Space>\n  );\n}\n\nfunction simulateQuartetGame(allQuartets: UseResourceFirebaseDataReturnType<DailyQuartetSet>['data']) {\n  const quartetsArray = Object.values(allQuartets);\n\n  // Step 1: Find a random perfect quartet (has exactly 4 items and a type)\n  const perfectQuartets = quartetsArray.filter((q) => q.itemsIds.length === 4 && q.type);\n\n  if (perfectQuartets.length === 0) {\n    throw new Error('No perfect quartets found.');\n  }\n\n  const perfectQuartet = cloneDeep(sample(perfectQuartets));\n\n  if (!perfectQuartet) {\n    throw new Error('No random perfect quartet found.');\n  }\n\n  const perfectItemIds = new Set(perfectQuartet.itemsIds);\n  const usedItemIds = new Set(perfectQuartet.itemsIds);\n\n  // Step 2: Find 3 non-perfect quartets that share exactly one itemId with the perfect quartet and have more than 4 items\n  const otherQuartets = quartetsArray.filter((q) => q.itemsIds.length > 4);\n\n  const getQuartetOptions = (index: number) =>\n    otherQuartets.filter(\n      (q) =>\n        q.itemsIds.includes(perfectQuartet.itemsIds[index]) &&\n        intersection(q.itemsIds, Array.from(perfectItemIds)).length === 1\n    );\n\n  const matchZeroQuartets = getQuartetOptions(0);\n  const matchOneQuartets = getQuartetOptions(1);\n  const matchTwoQuartets = getQuartetOptions(2);\n  const matchThreeQuartets = getQuartetOptions(3);\n\n  const orderedMatches = orderBy(\n    [matchZeroQuartets, matchOneQuartets, matchTwoQuartets, matchThreeQuartets],\n    'length'\n  ).filter((quartets) => quartets.length > 0);\n\n  const nonPerfectQuartets = orderedMatches.map((quartets) => cloneDeep(sample(quartets)!));\n\n  // Ensure we only have 3 non-perfect quartets\n  const selectedNonPerfectQuartets = nonPerfectQuartets.slice(0, 3);\n\n  selectedNonPerfectQuartets.forEach((quartet) => {\n    quartet.itemsIds.forEach((id) => usedItemIds.add(id));\n\n    const filteredItemIds = quartet.itemsIds.filter((id) => !perfectItemIds.has(id));\n    const randomItemIds = sampleSize(filteredItemIds, 4);\n\n    quartet.itemsIds = randomItemIds;\n  });\n\n  let tries = 0;\n\n  // If there are less than 3 selected non-perfect quartets, fill the rest with random quartets\n  while (selectedNonPerfectQuartets.length < 3 && tries < 100) {\n    console.log('Trying to complete simulation...');\n    const remainingQuartets = otherQuartets.filter(\n      (q) => intersection(q.itemsIds, Array.from(usedItemIds)).length === 0\n    );\n\n    if (remainingQuartets.length === 0) {\n      throw new Error('Not enough quartets to complete the simulation.');\n    }\n\n    const randomQuartet = cloneDeep(sample(remainingQuartets)!);\n    randomQuartet.itemsIds.forEach((id) => usedItemIds.add(id));\n\n    const randomItemIds = sampleSize(randomQuartet.itemsIds, 4);\n    randomQuartet.itemsIds = randomItemIds;\n\n    selectedNonPerfectQuartets.push(randomQuartet);\n    tries += 1;\n  }\n\n  if (tries === 100) {\n    throw new Error('Failed to complete simulation.');\n  }\n\n  return {\n    perfectQuartet: perfectQuartet,\n    nonPerfectQuartets: selectedNonPerfectQuartets,\n    usedItemIds: Array.from(usedItemIds),\n  };\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsQuartetsContent } from 'components/Items/Quartets/ItemsQuartetsContent';\nimport { ItemsQuartetSearch } from 'components/Items/Quartets/ItemsQuartetSearch';\nimport { ItemsQuartetsFilters } from 'components/Items/Quartets/ItemsQuartetsFilters';\nimport { ItemsQuartetsSimulator } from 'components/Items/Quartets/ItemsQuartetsSimulator';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport { DailyQuartetSet } from 'types';\n\nexport function ItemsQuartets() {\n  const { queryParams } = useQueryParams();\n\n  const quartetsData = useResourceFirebaseData<DailyQuartetSet>({\n    tdrResourceName: 'daily-quartet-sets',\n    firebaseDataCollectionName: 'quartetSets',\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Quartet Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsQuartetsFilters {...quartetsData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={quartetsData.isLoading}\n            error={quartetsData.error}\n            hasResponseData={!isEmpty(quartetsData.data)}\n          >\n            {queryParams.get('display') === 'simulator' ? (\n              <ItemsQuartetsSimulator {...quartetsData} />\n            ) : (\n              <Flex vertical gap={24}>\n                <ItemsQuartetSearch {...quartetsData} />\n                <ItemsQuartetsContent {...quartetsData} />\n              </Flex>\n            )}\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsQuartets;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","disabled","danger","block","SectionTitle","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","label","ItemsTypeahead","items","isPending","style","placeholder","allowClear","onFinish","tdrItemsQuery","useTDResource","Boolean","namesDict","options","useMemo","Object","values","reduce","acc","entry","nameEn","name","en","id","namePt","pt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","option","String","includes","sorted","idMatch","match","index","indexOf","width","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","key","undefined","onPressEnter","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","App","info","truncate","omission","success","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","get","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","queryClient","useQueryClient","tdrQuery","firebaseQuery","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","mutation","useUpdateFirebaseDoc","onSuccess","refetchQueries","onError","description","isSuccess","cloneDeep","isEmpty","firebaseData","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","useTDResourceNonCollection","useTableExpandableRows","maxExpandedRows","rowExpandable","defaultExpandAllRows","expandable","expandedRowKeys","setExpandedRowKeys","onExpand","expanded","record","newExpandedRowKeys","shift","push","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","updateDoc","useMutation","mutationFn","InspirationSample","onUpdate","quartet","initialQuantity","itemsTypeaheadQuery","getSample","quantity","difference","sampleSize","itemsIds","sampledItems","setSampledItems","gap","wrap","itemId","vertical","title","justify","shape","PlusOutlined","TYPES","t","ItemsQuartetsTable","rows","paginationProps","columns","dataIndex","render","QuartetEditableCell","property","Table","QuartetItemsCell","removeDuplicates","count","v","CheckCircleFilled","expandableProps","expandedRowRender","AddItemFlow","rowKey","dataSource","pagination","RemoveItemFlow","onConfirm","okText","cancelText","DeleteFilled","editable","newValue","NewQuartetModal","newId","latestIdNum","idNum","split","padStart","activeQuartet","setActiveQuartet","open","onCancel","okButtonProps","maskClosable","ItemsQuartetsContent","showOnlyEmpty","sets","givenSets","s","completeQuartetsCount","direction","ItemsQuartetTypeahead","quartets","titlesDict","ItemsQuartetSearch","activeQuartetId","setActiveQuartetId","ItemsQuartetsFilters","JSON","stringify","prepareFileForDownload","sortJsonKeys","mode","display","TableOutlined","GlobalOutlined","ItemsQuartetsSimulator","simulation","setSimulation","simulateQuartetGame","QuartetRow","perfectQuartet","nonPerfectQuartets","strong","allQuartets","quartetsArray","perfectQuartets","q","Error","sample","perfectItemIds","Set","usedItemIds","otherQuartets","getQuartetOptions","intersection","Array","from","matchZeroQuartets","matchOneQuartets","matchTwoQuartets","matchThreeQuartets","selectedNonPerfectQuartets","slice","add","filteredItemIds","randomItemIds","tries","remainingQuartets","randomQuartet","ItemsQuartets","quartetsData","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}