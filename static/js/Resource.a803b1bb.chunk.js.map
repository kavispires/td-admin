{"version":3,"file":"static/js/Resource.a803b1bb.chunk.js","mappings":"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","sources":["components/CopyToClipboardButton.tsx","components/Resource/ResourceSelectionFilters.tsx","components/SearchDuplicates.tsx","hooks/useQueryParams.ts","hooks/useResourceState.ts","components/ResourceCards/Entry.tsx","components/ResourceCards/CardEntry.tsx","components/Resource/ResourceCards.tsx","components/Resource/ResourceDisplayMode.tsx","components/Resource/ResourceJson.tsx","components/Resource/ResourceTable.tsx","pages/Resource.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\n\nimport { CopyOutlined } from '@ant-design/icons';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype CopyToClipboardButtonProps = {\n  content: string;\n} & ButtonProps;\n\nexport function CopyToClipboardButton({\n  content,\n  shape,\n  icon,\n  size,\n  ...buttonProps\n}: CopyToClipboardButtonProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Button\n      shape={shape ?? 'circle'}\n      icon={icon ?? <CopyOutlined />}\n      size={size ?? 'small'}\n      onClick={() => copyToClipboard(content)}\n      {...buttonProps}\n    />\n  );\n}\n","import { Button, Form, Select } from 'antd';\nimport { useState } from 'react';\n\nimport { useQueryParams } from '../../hooks/useQueryParams';\nimport { DUAL_LANGUAGE_RESOURCES, LANGUAGES } from '../../utils/constants';\nimport { SiderContent } from 'components/Layout';\n\ntype ResourceSelectionFiltersProps = {\n  resourceNames: string[];\n};\n\nexport function ResourceSelectionFilters({ resourceNames }: ResourceSelectionFiltersProps) {\n  const { queryParams, addParam } = useQueryParams();\n  const [form] = Form.useForm();\n  const [currentResourceName, setCurrentResourceName] = useState(queryParams.resourceName);\n\n  const onFinish = (v: any) => {\n    const isDualLanguageResource = DUAL_LANGUAGE_RESOURCES.includes(v.resourceName);\n\n    addParam('language', isDualLanguageResource ? null : v.language);\n    addParam('resourceName', v.resourceName);\n  };\n\n  return (\n    <SiderContent>\n      <Form\n        layout=\"vertical\"\n        onFinish={onFinish}\n        size=\"small\"\n        form={form}\n        initialValues={{\n          resourceName: queryParams.resourceName ?? '',\n          language: queryParams.language ?? '',\n        }}\n      >\n        <Form.Item label=\"Resource\" name=\"resourceName\">\n          <Select\n            style={{ minWidth: '150px' }}\n            value={queryParams.resourceName}\n            onChange={(e: string) => setCurrentResourceName(e)}\n          >\n            {resourceNames.map((resourceName) => (\n              <Select.Option key={resourceName} value={resourceName}>\n                {resourceName}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"Language\" name=\"language\">\n          <Select\n            style={{ minWidth: '150px' }}\n            disabled={DUAL_LANGUAGE_RESOURCES.includes(currentResourceName)}\n          >\n            {LANGUAGES.map((entry) => (\n              <Select.Option key={entry} value={entry}>\n                {entry}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Load\n          </Button>\n        </Form.Item>\n      </Form>\n    </SiderContent>\n  );\n}\n","import { Input } from 'antd';\nimport { useState } from 'react';\nimport { findSimilar, stringRemoveAccents } from '../utils';\nimport { SEARCH_THRESHOLD } from '../utils/constants';\nimport { SectionTitle } from './Common/SectionTitle';\n\ntype SearchDuplicatesProps = {\n  response: ObjectDictionary;\n  property: string;\n};\n\nexport function SearchDuplicates({ response, property }: SearchDuplicatesProps) {\n  const [searchResults, setSearchResults] = useState({});\n\n  const onSearchSimilar = (e: any) => {\n    const { value = '' } = e.target;\n    const str = stringRemoveAccents(value.trim().toLowerCase());\n\n    if (str && str.length >= SEARCH_THRESHOLD) {\n      setSearchResults(findSimilar(str, response, property));\n    } else {\n      setSearchResults({});\n    }\n  };\n\n  return (\n    <div className=\"parser-flex-column\">\n      <SectionTitle>Search Similar</SectionTitle>\n      <Input type=\"text\" onChange={onSearchSimilar} placeholder=\"Type here\" />\n      <Input.TextArea\n        name=\"search-results\"\n        id=\"\"\n        cols={10}\n        rows={10}\n        readOnly\n        value={JSON.stringify(searchResults, null, 4)}\n      />\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown) => {\n    if (value === undefined || value === '') {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string, value: unknown) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    addParam,\n    removeParam,\n    queryParams,\n  };\n}\n","import { DUAL_LANGUAGE_RESOURCES } from 'utils/constants';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\nimport { useQueryParams } from './useQueryParams';\n\ntype ResourceState = {\n  resourceName: string | null;\n  language?: Language | null;\n  response: any;\n  isLoading: boolean;\n  error?: ResponseError | null;\n  hasResponseData: boolean;\n  enabled: boolean;\n};\n\nexport function useResourceState(availableResources: AvailableResources): ResourceState {\n  const {\n    queryParams: { resourceName = '', language = '' },\n  } = useQueryParams();\n  const { getUrl } = useBaseUrl('tdr');\n\n  const enabled = !!resourceName && availableResources.includes(resourceName);\n\n  const { data, isLoading, error } = useQuery<any, ResponseError>({\n    queryKey: ['resource', resourceName, language],\n    queryFn: async () => {\n      const url =\n        language && !DUAL_LANGUAGE_RESOURCES.includes(resourceName)\n          ? getUrl(`${resourceName}-${language}.json`)\n          : getUrl(`${resourceName}.json`);\n\n      const res = await fetch(url);\n\n      const result = res.body ? await res.json() : {};\n\n      return result;\n    },\n    enabled,\n  });\n\n  return {\n    resourceName,\n    language: (language as Language) || null,\n    response: data,\n    isLoading,\n    enabled,\n    error,\n    hasResponseData: Boolean(data),\n  };\n}\n","import { Flex, Tag } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { ReactNode } from 'react';\n\nimport { FireFilled } from '@ant-design/icons';\n\ntype LabelProps = {\n  children: ReactNode;\n};\n\nexport function Label({ children }: LabelProps) {\n  return <Tag>{children}</Tag>;\n}\n\nexport function Value({ children }: LabelProps) {\n  return <span>{children}</span>;\n}\n\ntype EntryProps = {\n  label: string;\n  children: ReactNode;\n};\n\nexport function Entry({ label, children }: EntryProps) {\n  return (\n    <Flex>\n      <div>\n        <Label>{label}</Label>\n      </div>\n      <Value>{children}</Value>\n    </Flex>\n  );\n}\n\nexport function EntryList({ label, children }: EntryProps) {\n  return (\n    <Flex>\n      <div>\n        <Label>{label}</Label>\n      </div>\n      <ul className=\"resource-card__list\">{children}</ul>\n    </Flex>\n  );\n}\n\nexport function EntryListItem({ children }: LabelProps) {\n  return <li>{children}</li>;\n}\n\ntype EntryDualLanguageProps = {\n  label?: string;\n  children: DualLanguageValue;\n};\n\nexport function EntryDualLanguage({ label, children }: EntryDualLanguageProps) {\n  const value = (\n    <>\n      <div>\n        <LanguageFlag language=\"en\" width=\"1em\" /> {children.en}\n      </div>\n\n      <div>\n        <LanguageFlag language=\"pt\" width=\"1em\" /> {children.pt}\n      </div>\n    </>\n  );\n\n  if (label) {\n    return (\n      <Flex>\n        <div>\n          <Label>{label}</Label>\n        </div>\n        <Value>{value}</Value>\n      </Flex>\n    );\n  }\n\n  return <Value>{value}</Value>;\n}\n\ntype EntryLanguageProps = {\n  label?: string;\n  children?: string;\n};\n\nexport function EntryLanguage({ label = 'language', children }: EntryLanguageProps) {\n  if (!children) return <></>;\n\n  return (\n    <Flex>\n      <div>\n        <Label>{label}</Label>\n      </div>\n      <Value>\n        <LanguageFlag language={children as Language} width=\"1em\" />\n      </Value>\n    </Flex>\n  );\n}\n\ntype EntryNSFWProps = {\n  value?: boolean;\n};\n\nexport function EntryNSFW({ value }: EntryNSFWProps) {\n  if (!value) return <></>;\n\n  return (\n    <Entry label=\"nsfw\">\n      <FireFilled style={{ color: 'hotpink' }} />\n    </Entry>\n  );\n}\n\ntype EntryListTextProps = {\n  label: string;\n  children?: string[];\n};\n\nexport function EntryListText({ label, children }: EntryListTextProps) {\n  if (!children) return <></>;\n\n  return <Entry label={label}>{children.join(', ')}</Entry>;\n}\n","import { Card } from 'antd';\nimport { Entry, EntryDualLanguage, EntryLanguage, EntryList, EntryListItem, EntryNSFW } from './Entry';\nimport { useMemo } from 'react';\n\ntype CardEntryProps = {\n  entry: PlainObject & { id: string };\n  kind?: string;\n};\n\nexport function CardEntry({ entry, kind }: CardEntryProps) {\n  const keys = Object.keys(entry).filter((key) => key !== 'id');\n\n  const entries = useMemo(() => {\n    return keys.map((key) => {\n      // Ignore id\n      if (key === 'id') return <></>;\n\n      const value = entry[key];\n\n      // Ignore nullish values\n      if (value === null || value === undefined) return <></>;\n\n      // Prioritize nsfw\n      if (key === 'nsfw') {\n        return <EntryNSFW value={value} />;\n      }\n\n      // Render dual value\n      if (isDualLanguage(value)) {\n        return <EntryDualLanguage label={key}>{value}</EntryDualLanguage>;\n      }\n\n      // Render language\n      if (isLanguage(value)) {\n        return <EntryLanguage label={key}>{value}</EntryLanguage>;\n      }\n\n      // Render strings\n      if (isPrimitive(value)) {\n        return <Entry label={key}>{value}</Entry>;\n      }\n\n      if (isArrayOfStrings(value)) {\n        return (\n          <EntryList label={key}>\n            {value.map((text: string, index: number) => (\n              <EntryListItem key={`${entry.id}-${text}-${index}`}>{text}</EntryListItem>\n            ))}\n          </EntryList>\n        );\n      }\n\n      if (isArrayOfDualLanguage(value)) {\n        return (\n          <EntryList label={key}>\n            {Object.values(entry.values).map((text, index) => (\n              <EntryListItem key={`${entry.id}-${text}-${index}`}>\n                <EntryDualLanguage>{text as DualLanguageValue}</EntryDualLanguage>\n              </EntryListItem>\n            ))}\n          </EntryList>\n        );\n      }\n\n      console.log('Skip', key, value);\n      return <></>;\n    });\n  }, [kind]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Card title={entry.id} className=\"resource-card\" size=\"small\">\n      {entries}\n    </Card>\n  );\n}\n\nconst isDualLanguage = (value: any) => {\n  return typeof value === 'object' && value.pt && value.en;\n};\n\nconst isPrimitive = (value: any) => {\n  return typeof value === 'string' || typeof value === 'number';\n};\n\nconst isArray = (value: any) => {\n  return Array.isArray(value);\n};\n\nconst isArrayOfStrings = (value: any) => {\n  return isArray(value) && typeof value[0] === 'string';\n};\n\nconst isLanguage = (value: any) => {\n  return value === 'pt' || value === 'en';\n};\n\nconst isArrayOfDualLanguage = (value: any) => {\n  return isArray(value) && isDualLanguage(value[0]);\n};\n","import { Col, Row, Typography } from 'antd';\nimport { CardEntry } from 'components/ResourceCards';\n\ntype ResourceCardsProps = {\n  response: any;\n  resourceName: string | null;\n};\n\nexport function ResourceCards({ response, resourceName }: ResourceCardsProps) {\n  const list: any[] = Object.values(response);\n\n  return (\n    <>\n      <Typography.Title level={2}>Cards ({list.length})</Typography.Title>\n\n      <Row gutter={[16, 16]}>\n        {list.map((entry) => {\n          return (\n            <Col xs={6} sm={6} md={4} lg={8} xl={6} key={entry.id}>\n              <CardEntry entry={entry} kind={resourceName ?? ''} />\n            </Col>\n          );\n        })}\n      </Row>\n    </>\n  );\n}\n","import { AppstoreOutlined, FileTextOutlined, TableOutlined } from '@ant-design/icons';\nimport { Form, Segmented, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ResourceDisplayMode() {\n  const { queryParams, addParam } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Form.Item label=\"Display\">\n        <Segmented\n          block\n          value={queryParams.display ?? 'json'}\n          onChange={(mode: SegmentedValue) => addParam('display', mode)}\n          options={[\n            {\n              label: (\n                <Tooltip title=\"JSON\">\n                  <FileTextOutlined />\n                </Tooltip>\n              ),\n              value: 'json',\n            },\n            {\n              label: (\n                <Tooltip title=\"Table\">\n                  <TableOutlined />\n                </Tooltip>\n              ),\n              value: 'table',\n            },\n            {\n              label: (\n                <Tooltip title=\"Cards\">\n                  <AppstoreOutlined />\n                </Tooltip>\n              ),\n              value: 'cards',\n            },\n          ]}\n        />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Col, Input, Row, Typography } from 'antd';\nimport { CopyToClipboardButton } from 'components/CopyToClipboardButton';\n\nimport { useMemo } from 'react';\n\nimport { SearchDuplicates } from '../SearchDuplicates';\n\nimport { SEARCH_PROPERTY } from '../../utils/constants';\n\ntype ResourceJsonProps = {\n  response: any;\n  resourceName: string | null;\n};\n\nexport function ResourceJson({ response, resourceName }: ResourceJsonProps) {\n  const property = resourceName ? SEARCH_PROPERTY[resourceName] : 'text';\n\n  const jsonString = useMemo(() => JSON.stringify(response, null, 4), [response]);\n\n  return (\n    <>\n      <Typography.Title level={2}>\n        JSON <CopyToClipboardButton content={jsonString} />\n      </Typography.Title>\n\n      <Row gutter={16}>\n        <Col span={16}>\n          <Input.TextArea name=\"output\" id=\"\" cols={15} rows={30} readOnly value={jsonString} />\n        </Col>\n        <Col span={8}>\n          <SearchDuplicates response={response} property={property} />\n        </Col>\n      </Row>\n    </>\n  );\n}\n","import { Col, Row, Table, Typography } from 'antd';\n\nimport { useMemo } from 'react';\n\ntype ResourceCardsProps = {\n  response: any;\n  resourceName: string | null;\n};\n\nexport function ResourceTable({ response, resourceName }: ResourceCardsProps) {\n  const list: any[] = Object.values(response);\n\n  const columns = useMemo(() => {\n    const keys: Record<string, boolean> = {};\n\n    list.forEach((entry) => {\n      Object.keys(entry).forEach((key) => {\n        if (keys[key] === undefined) {\n          keys[key] = true;\n        }\n      });\n    });\n\n    return Object.keys(keys).map((key) => ({\n      title: key,\n      dataIndex: key,\n      key,\n      render: (v: any) => (typeof v === 'string' ? v : JSON.stringify(v)),\n    }));\n  }, [list]);\n\n  return (\n    <>\n      <Typography.Title level={2}>Table ({list.length})</Typography.Title>\n\n      <Row gutter={16}>\n        <Col span={24}>\n          <Table columns={columns} dataSource={list} />\n        </Col>\n      </Row>\n    </>\n  );\n}\n","import { Layout } from 'antd';\nimport { PageLayout } from 'components/Layout';\nimport { ResourceCards } from 'components/Resource/ResourceCards';\nimport { ResourceDisplayMode } from 'components/Resource/ResourceDisplayMode';\nimport { ResourceJson } from 'components/Resource/ResourceJson';\nimport { ResponseState } from 'components/Common';\nimport { ResourceTable } from 'components/Resource/ResourceTable';\n\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ResourceSelectionFilters } from 'components/Resource/ResourceSelectionFilters';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceState } from 'hooks/useResourceState';\nimport { RESOURCE_NAMES } from 'utils/constants';\nimport { PageSider } from 'components/Layout/PageSider';\n\nconst resourceNames = Object.values(RESOURCE_NAMES);\n\nfunction Resource() {\n  const {\n    resourceName = '',\n    language = '',\n    isLoading,\n    enabled,\n    error,\n    hasResponseData,\n    response,\n  } = useResourceState(resourceNames);\n\n  const {\n    queryParams: { display = 'json' },\n  } = useQueryParams();\n\n  return (\n    <PageLayout\n      title=\"Resource\"\n      subtitle={Boolean(resourceName && language) ? `Data for ${resourceName}-${language}` : ''}\n    >\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState\n            hasResponseData={hasResponseData}\n            isLoading={isLoading}\n            error={error}\n            isIdle={!enabled}\n          />\n          <ResourceSelectionFilters resourceNames={resourceNames} />\n          <ResourceDisplayMode />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={isLoading}\n            error={error}\n            hasResponseData={hasResponseData}\n            isIdle={!enabled}\n          >\n            {display === 'json' && (\n              <ResourceJson response={response ?? {}} resourceName={resourceName ?? ''} />\n            )}\n\n            {display === 'table' && (\n              <ResourceTable response={response ?? {}} resourceName={resourceName ?? ''} />\n            )}\n\n            {display === 'cards' && (\n              <ResourceCards response={response ?? {}} resourceName={resourceName ?? ''} />\n            )}\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default Resource;\n"],"names":["CopyToClipboardButton","content","shape","icon","size","buttonProps","copyToClipboard","useCopyToClipboardFunction","onClick","ResourceSelectionFilters","resourceNames","queryParams","addParam","useQueryParams","form","Form","currentResourceName","setCurrentResourceName","useState","resourceName","layout","onFinish","v","isDualLanguageResource","DUAL_LANGUAGE_RESOURCES","language","initialValues","label","name","style","minWidth","value","onChange","e","map","disabled","LANGUAGES","entry","type","htmlType","SearchDuplicates","response","property","searchResults","setSearchResults","className","target","str","stringRemoveAccents","trim","toLowerCase","length","SEARCH_THRESHOLD","findSimilar","placeholder","id","cols","rows","readOnly","JSON","stringify","defaultParams","searchParams","setSearchParams","useSearchParams","key","undefined","delete","set","String","removeParam","useEffect","Object","entries","forEach","has","toString","split","reduce","qp","useResourceState","availableResources","getUrl","useBaseUrl","enabled","includes","data","isLoading","error","useQuery","queryKey","queryFn","async","url","res","fetch","body","json","hasResponseData","Boolean","Label","children","Value","Entry","EntryList","EntryListItem","EntryDualLanguage","LanguageFlag","width","en","pt","EntryLanguage","EntryNSFW","FireFilled","color","CardEntry","kind","keys","filter","useMemo","isDualLanguage","isLanguage","isPrimitive","isArrayOfStrings","text","index","isArrayOfDualLanguage","values","console","log","title","isArray","Array","ResourceCards","list","level","gutter","xs","sm","md","lg","xl","ResourceDisplayMode","block","display","mode","options","FileTextOutlined","TableOutlined","AppstoreOutlined","ResourceJson","SEARCH_PROPERTY","jsonString","span","ResourceTable","columns","dataIndex","render","dataSource","RESOURCE_NAMES","subtitle","hasSider","PageSider","isIdle","DataLoadingWrapper"],"sourceRoot":""}