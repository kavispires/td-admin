{"version":3,"file":"static/js/ItemsDiagramSets.7f70c307.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/SaveButton.tsx","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Diagram/ItemsDiagramFilters.tsx","components/Items/Diagram/EditThingModal.tsx","components/Items/Diagram/AddNewThingFlow.tsx","components/Items/Diagram/Thing.tsx","components/Items/Diagram/RulesByThing.tsx","components/Items/Diagram/ThingsByRule.tsx","components/Items/Diagram/ItemUpdateGuard.tsx","components/Items/Diagram/DiagramGameSample.tsx","components/Items/Diagram/GameSimulator.tsx","components/Items/Diagram/ItemsDiagramSetsContent.tsx","pages/Items/ItemsDiagramSets.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterSegments } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep } from 'lodash';\nimport { DailyDiagramItem } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsDiagramFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const { addParams, queryParams } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-diagram-items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'rule'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Rule',\n            icon: <ClusterOutlined />,\n            value: 'rule',\n          },\n          {\n            title: 'By Thing',\n            icon: <TableOutlined />,\n            value: 'thing',\n          },\n        ]}\n      />\n\n      <Divider />\n\n      <Button size=\"small\" block onClick={() => addParams({ display: 'simulator' })}>\n        Simulator\n      </Button>\n\n      <Typography.Paragraph type=\"secondary\" className=\"my-6\">\n        v2.0.1\n      </Typography.Paragraph>\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(diagramItems: Dictionary<DailyDiagramItem>) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(diagramItems);\n  // Object.values(copy).forEach((item) => {\n  //   item.syllables = (item.syllables ?? '').replace(/·/g, SYLLABLE_SEPARATOR);\n  // });\n  // console.log(copy);\n\n  return sortJsonKeys(copy);\n}\n","import { Affix, Button, Flex, Form, Input, Modal, Radio, Switch } from 'antd';\nimport clsx from 'clsx';\nimport { Item } from 'components/Sprites';\nimport { orderBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\n\nimport {\n  separateSyllables,\n  stressSyllableDependencyVerifier,\n  SYLLABLE_SEPARATOR,\n  syllableDependencyVerifier,\n  verifiers,\n} from './utils';\n\nexport type ThingFormValues = Record<string, boolean | string | number>;\n\ntype EditThingModalProps = {\n  isModalOpen: boolean;\n  onSaveThing: (item: DailyDiagramItem) => void;\n  onCancel: () => void;\n  thing: DailyDiagramItem;\n  rules: Dictionary<DailyDiagramRule>;\n  width?: number | string;\n  itemAliases?: string[];\n  subtitle?: string;\n  okButtonText?: string;\n  onGiveAnotherThing?: () => void;\n};\n\nexport function EditThingModal({\n  isModalOpen,\n  onSaveThing,\n  onCancel,\n  thing,\n  rules,\n  width,\n  itemAliases,\n  subtitle,\n  okButtonText,\n  onGiveAnotherThing,\n}: EditThingModalProps) {\n  // Sort rules properly by type\n  const orderedRules = useMemo(() => {\n    return orderBy(Object.values(rules), [\n      // Not auto\n      (r) => {\n        const index = ['manual', 'dependency', 'auto'].indexOf(r.method);\n        return index === -1 ? Infinity : index;\n      },\n      // Sort by type\n      (r) => {\n        const index = ['grammar', 'comparison', 'order', 'count', 'contains', 'ends'].indexOf(r.type);\n        return index === -1 ? Infinity : index;\n      },\n      // Sort by partial title\n      (r) => r.title.slice(0, 7),\n      // Sort by id\n      (r) => Number(r.id.split('-')[1]),\n    ]);\n  }, [rules]);\n\n  // Build initial values\n  const [form] = Form.useForm();\n  const values = Form.useWatch([], form);\n  const hasUndefinedValues = !values || Object.values(values ?? {}).some((value) => value === undefined);\n\n  // Automation: If name is changed, recalculates all rules\n  const nameWatch = Form.useWatch('name', form);\n  useEffect(() => {\n    // If initial state where name is still undefined, ignore\n    if (!nameWatch) return;\n\n    if (thing.name && thing.syllables && nameWatch === thing.name) return;\n\n    // If name changes, recalculate all rules\n    const fields: Record<string, boolean | string | number | undefined> = {\n      syllables: separateSyllables(nameWatch),\n      stressedSyllable: (thing.stressedSyllable ?? nameWatch.includes(' ')) ? -1 : 0,\n    };\n    Object.keys(rules).forEach((ruleId) => {\n      if (verifiers[ruleId]) {\n        fields[ruleId] = verifiers[ruleId](nameWatch);\n      } else {\n        fields[ruleId] = thing.rules.length > 0 ? thing.rules.includes(ruleId) : undefined;\n      }\n    });\n    form.setFieldsValue(fields);\n  }, [nameWatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Automation: Syllables\n  const syllables = Form.useWatch('syllables', form);\n  const isAcronym = form.getFieldValue('ddr-51-pt');\n\n  useEffect(() => {\n    if (isAcronym) {\n      form.setFieldsValue({ stressedSyllable: undefined });\n      form.setFieldsValue({ 'ddr-43-pt': false });\n      form.setFieldsValue({ 'ddr-44-pt': false });\n      form.setFieldsValue({ 'ddr-45-pt': false });\n      form.setFieldsValue({ 'ddr-46-pt': false });\n    }\n    if (isAcronym === undefined) {\n      form.setFieldsValue({ 'ddr-51-pt': false });\n    }\n  }, [isAcronym]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (syllables) {\n      const syllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (syllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = syllableDependencyVerifier[ruleId](nameWatch, syllables, isAcronym);\n        }\n        return acc;\n      }, {});\n      form.setFieldsValue({\n        ...syllableRulesUpdate,\n        stressedSyllable:\n          syllables === thing.syllables\n            ? thing.stressedSyllable\n            : (thing.stressedSyllable ?? nameWatch.includes(' '))\n              ? -1\n              : undefined,\n      });\n    }\n  }, [nameWatch, syllables, isAcronym]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Automation: Stressed syllable\n  const stressedSyllable = Form.useWatch('stressedSyllable', form);\n  useEffect(() => {\n    if (!isAcronym && stressedSyllable !== undefined) {\n      const stressSyllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (stressSyllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = stressSyllableDependencyVerifier[ruleId](nameWatch, syllables, stressedSyllable);\n        }\n        return acc;\n      }, {});\n\n      form.setFieldsValue({\n        ...stressSyllableRulesUpdate,\n      });\n    }\n  }, [stressedSyllable]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Automation: Male vs Female nouns vs Both genders\n  const rule1 = form.getFieldValue('ddr-1-pt');\n  const rule2 = form.getFieldValue('ddr-2-pt');\n  const rule5 = form.getFieldValue('ddr-50-pt');\n  useEffect(() => {\n    if (rule1 === true) {\n      form.setFieldsValue({ 'ddr-2-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule1]); // eslint-disable-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    if (rule2 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule2]); // eslint-disable-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    if (rule5 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-2-pt': false });\n    }\n  }, [rule5]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Automation: syllable count\n  const rule3 = form.getFieldValue('ddr-3-pt');\n  useEffect(() => {\n    if (rule3 === true) {\n      form.setFieldsValue({ 'ddr-4-pt': false });\n    }\n  }, [rule3]); // eslint-disable-line react-hooks/exhaustive-deps\n  const rule4 = form.getFieldValue('ddr-4-pt');\n  useEffect(() => {\n    if (rule4 === true) {\n      form.setFieldsValue({ 'ddr-3-pt': false });\n    }\n  }, [rule4]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Automation: has hyphen\n  useEffect(() => {\n    const hasHyphen = nameWatch?.includes('-');\n    if (hasHyphen) {\n      form.setFieldsValue({ 'ddr-5-pt': true });\n    }\n  }, [nameWatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const onFinish = (values: any) => {\n    const preparedThing = serializeThing(values);\n    onSaveThing(preparedThing);\n  };\n\n  const splitSyllables: string[] = useMemo(() => (syllables ?? '').split(SYLLABLE_SEPARATOR), [syllables]);\n\n  return (\n    <Modal\n      width={width}\n      title={\n        <>\n          Edit {thing.name} {subtitle && <small>{subtitle}</small>}\n        </>\n      }\n      open={isModalOpen}\n      onOk={form.submit}\n      onCancel={onCancel}\n      maskClosable={false}\n      okButtonProps={{ disabled: hasUndefinedValues, htmlType: 'submit', size: 'large' }}\n      okText={okButtonText ?? 'Add Item'}\n    >\n      <Form\n        form={form}\n        name={`new-item-${thing.itemId}`}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        initialValues={deserializeThing(thing, rules)}\n        layout=\"vertical\"\n        size=\"small\"\n        labelWrap\n      >\n        <div className=\"diagram-container\">\n          <div>\n            <Item id={thing.itemId} width={50} />\n          </div>\n\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"itemId\" label=\"Item\">\n            <Input readOnly />\n          </Form.Item>\n\n          <Form.Item name=\"syllables\" label=\"Syllables\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"stressedSyllable\" label=\"Stressed Syllable\">\n            <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n              {splitSyllables.map((syllable, index) => (\n                <Radio key={index} value={splitSyllables.length - index - 1}>\n                  {syllable}\n                </Radio>\n              ))}\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item name=\"updatedAt\" label=\"Updated At\">\n            <Input value={new Date(thing.updatedAt).toLocaleString()} readOnly />\n          </Form.Item>\n\n          {(itemAliases || onGiveAnotherThing) && (\n            <div>\n              {itemAliases && <span>Options: {itemAliases?.join(', ')}</span>}\n              {onGiveAnotherThing && (\n                <Button size=\"small\" onClick={onGiveAnotherThing} type=\"dashed\" className=\"mt-2\">\n                  Give me another thing\n                </Button>\n              )}\n            </div>\n          )}\n\n          <div>\n            <Affix offsetTop={50}>\n              <Flex justify=\"center\" align=\"center\">\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\" disabled={hasUndefinedValues}>\n                  {okButtonText ?? 'Add Item'}\n                </Button>\n              </Flex>\n            </Affix>\n          </div>\n        </div>\n        <div className=\"diagram-container\">\n          {orderedRules.map((rule) => {\n            if (rule.method === 'auto' && verifiers[rule.id]) {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            if (rule.method === 'dependency') {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            return (\n              <Form.Item\n                key={rule.id}\n                name={rule.id}\n                label={rule.title}\n                className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n              >\n                <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n                  <Radio value={true}>✅</Radio>\n                  <Radio value={false}>❌</Radio>\n                </Radio.Group>\n              </Form.Item>\n            );\n          })}\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n\nconst deserializeThing = (\n  thing: DailyDiagramItem,\n  rules: Dictionary<DailyDiagramRule>\n): Record<string, boolean | string | number> => {\n  let wasAnyRuleUpdated = false;\n  return {\n    name: thing.name,\n    itemId: thing.itemId,\n    syllables: thing.syllables ?? separateSyllables(thing.name),\n    stressedSyllable: thing.stressedSyllable ?? 0,\n\n    ...Object.keys(rules).reduce((acc: Record<string, boolean | undefined>, ruleId) => {\n      // Only re-verify if rule is older than the last update\n      if (thing.updatedAt < rules[ruleId].updatedAt) {\n        if (verifiers[ruleId]) {\n          const reVerify = verifiers[ruleId](thing.name);\n          if (reVerify && thing.rules.includes(ruleId)) {\n            wasAnyRuleUpdated = true;\n          }\n          acc[ruleId] = reVerify;\n        } else {\n          acc[ruleId] = undefined;\n        }\n      } else {\n        acc[ruleId] = thing.rules.includes(ruleId);\n      }\n\n      return acc;\n    }, {}),\n    updatedAt: wasAnyRuleUpdated ? Date.now() : thing.updatedAt,\n  };\n};\n\nconst serializeThing = (values: Record<string, boolean | string | number>): DailyDiagramItem => {\n  const { itemId, name, updatedAt, syllables, stressedSyllable, ...thingRules } = values;\n\n  return {\n    itemId: itemId as string,\n    name: name as string,\n    updatedAt: Date.now(),\n    syllables: syllables as string,\n    stressedSyllable: stressedSyllable as number,\n    rules: Object.keys(thingRules).filter((key) => thingRules[key] === true),\n  };\n};\n","import { App, Button } from 'antd';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { sample } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\n\ntype AddNewThingFlowProps = {\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  width: number;\n};\n\nexport function AddNewThingFlow({ addEntryToUpdate, availableThings, rules, width }: AddNewThingFlowProps) {\n  const { notification } = App.useApp();\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  const onActivateThing = () => {\n    const randomItem = sample(availableThings);\n    if (randomItem) {\n      setActiveThing({\n        itemId: randomItem.id,\n        name: chooseNameThatIsASingleWord(randomItem),\n        updatedAt: Date.now(),\n        syllables: '',\n        stressedSyllable: 0,\n        rules: [],\n      });\n    } else {\n      setActiveThing(null);\n    }\n  };\n\n  const aliases = useMemo(() => {\n    if (!activeThing) return [];\n    const item = availableThings.find((thing) => thing.id === activeThing.itemId);\n    return [item?.name.pt, ...(item?.aliasesPt ?? [])].filter(Boolean);\n  }, [activeThing, availableThings]);\n\n  const onAddItem = async (newThing: DailyDiagramItem) => {\n    if (!activeThing) return;\n    if (!newThing.name || !newThing.itemId) {\n      notification.error({ message: 'Name and Item ID are required' });\n    }\n\n    addEntryToUpdate(newThing.itemId, newThing);\n\n    console.log('COMPLETED SAVE');\n\n    setActiveThing(null);\n\n    await wait(250);\n\n    onActivateThing();\n  };\n\n  const onGiveAnotherThing = async () => {\n    setActiveThing(null);\n    await wait(100);\n    onActivateThing();\n  };\n\n  return (\n    <>\n      <Button size=\"large\" onClick={onActivateThing}>\n        Classify New Item\n      </Button>\n      {!!activeThing && (\n        <EditThingModal\n          isModalOpen={activeThing !== null}\n          onSaveThing={onAddItem}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          width={width * 0.9}\n          itemAliases={aliases as string[]}\n          onGiveAnotherThing={onGiveAnotherThing}\n        />\n      )}\n    </>\n  );\n}\n\nconst chooseNameThatIsASingleWord = (item: ItemT) => {\n  if (item.name.pt.split(' ').length === 1) return item.name.pt;\n\n  if (item.aliasesPt) {\n    return item.aliasesPt.find((alias) => alias.split(' ').length === 1) ?? item.name.pt;\n  }\n  return item.name.pt;\n};\n","import { Flex, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { Item } from 'components/Sprites';\nimport { DailyDiagramItem } from 'types';\n\ntype ThingProps = {\n  itemId: string;\n  name: string;\n  width?: number;\n};\n\nexport function Thing({ itemId, name, width = 50 }: ThingProps) {\n  return (\n    <Flex vertical align=\"center\">\n      <Item id={itemId} width={width} />\n      <Typography.Text code key={itemId}>\n        {name}\n      </Typography.Text>\n    </Flex>\n  );\n}\n\ntype ThingButtonProps = {\n  thing: DailyDiagramItem;\n  onActivateThing: (thing: DailyDiagramItem) => void;\n  width?: number;\n};\n\nexport function ThingButton({ thing, width = 50, onActivateThing }: ThingButtonProps) {\n  return (\n    <TransparentButton onClick={() => onActivateThing(thing)}>\n      <Thing itemId={thing.itemId} name={thing.name} width={width} />\n    </TransparentButton>\n  );\n}\n","import { Divider, Flex, Space, Table, TableColumnsType, Tag, Tooltip, Typography } from 'antd';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMeasure } from 'react-use';\nimport { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { useMemo } from 'react';\nimport { ThingButton } from './Thing';\nimport { useTablePagination } from 'hooks/useTablePagination';\n\ntype RulesByThingProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n};\n\nexport function RulesByThing({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  setActiveThing,\n  thingsByRules,\n}: RulesByThingProps) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const rows = useMemo(() => Object.values(things), [things]);\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableColumnsType<DailyDiagramItem> = [\n    {\n      title: 'ItemId',\n      dataIndex: 'itemId',\n      key: 'itemId',\n      sorter: (a, b) => Number(a.itemId) - Number(b.itemId),\n      render: (itemId: string) => <Tag>{itemId}</Tag>,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (name: string) => <Typography.Text>{name}</Typography.Text>,\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'itemId',\n      key: 'sprite',\n      render: (itemId: string) => (\n        <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n      ),\n    },\n    {\n      title: 'Rules',\n      dataIndex: 'rules',\n      key: 'rules',\n      render: (itemRules: string[], record) => (\n        <Space wrap>\n          {itemRules.map((ruleId) => (\n            <Tooltip title={rules[ruleId].title} key={ruleId}>\n              <Tag color={rules[ruleId].updatedAt > record.updatedAt ? 'red' : undefined}>{ruleId}</Tag>\n            </Tooltip>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'rules',\n      key: 'count',\n      sorter: (a, b) => a.rules.length - b.rules.length,\n      render: (rules: string[]) => rules.length,\n    },\n  ];\n\n  const duplicatedThings = useMemo(() => {\n    const dict: Dictionary<string[]> = {};\n\n    Object.values(things).forEach((item) => {\n      if (!dict[item.name]) {\n        dict[item.name] = [];\n      }\n      dict[item.name].push(item.itemId);\n    });\n    return Object.values(dict).filter((ids) => ids.length > 1);\n  }, [things]);\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>\n        Rules By Items <Divider type=\"vertical\" /> Added: <Tag>{Object.keys(things).length}</Tag> Available to\n        add <Tag>{availableThings.length}</Tag>\n      </Typography.Title>\n\n      <AddNewThingFlow\n        addEntryToUpdate={addEntryToUpdate}\n        availableThings={availableThings}\n        rules={rules}\n        width={containerWidth}\n      />\n\n      <Divider />\n\n      <Table dataSource={rows} columns={columns} rowKey=\"itemId\" pagination={paginationProps} />\n\n      <Divider />\n\n      <Typography.Title level={5}>Duplicated Things</Typography.Title>\n      <Space wrap>\n        {duplicatedThings.length === 0 && <Typography.Text>No duplicated things</Typography.Text>}\n        {duplicatedThings.map((ids) => (\n          <Flex key={ids[0]} align=\"center\">\n            <Tag color=\"red\">{ids.length}</Tag>\n            {ids.map((itemId) => (\n              <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n            ))}\n          </Flex>\n        ))}\n      </Space>\n    </Space>\n  );\n}\n","import { Divider, Rate, Space, Switch, Table, TableColumnsType, Tag, Typography } from 'antd';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMemo } from 'react';\nimport { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useTablePagination } from 'hooks/useTablePagination';\n\ntype ThingsByRuleProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n  containerWidth: number;\n};\n\nexport function ThingsByRule({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  thingsByRules,\n  setActiveThing,\n  containerWidth,\n}: ThingsByRuleProps) {\n  const { is, addParam } = useQueryParams();\n\n  const rows = useMemo(\n    () =>\n      Object.values(rules).map((r) => ({\n        ...r,\n        thingsCount: thingsByRules[r.id].length,\n      })),\n    [rules, thingsByRules]\n  );\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const stats = useMemo(() => {\n    const quantities = Object.values(thingsByRules).map((things) => things.length);\n\n    return {\n      maxThings: Math.max(...quantities),\n      minThings: Math.min(...quantities),\n      averageThings: Math.round(\n        Object.values(thingsByRules).reduce((sum, things) => sum + things.length, 0) /\n          Object.keys(thingsByRules).length\n      ),\n    };\n  }, [thingsByRules]);\n\n  const columns: TableColumnsType<DailyDiagramRule & { thingsCount: number }> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => Number(a.id.split('-')[1]) - Number(b.id.split('-')[1]),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Rule',\n      dataIndex: 'title',\n      key: 'title',\n      sorter: (a, b) => a.title.localeCompare(b.title),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n    },\n    {\n      title: 'Method',\n      dataIndex: 'method',\n      key: 'method',\n      sorter: (a, b) => a.method.localeCompare(b.method),\n    },\n    {\n      title: 'Things',\n      dataIndex: 'thingsCount',\n      key: 'thingsCount',\n      render: (thingsCount: number, record) => (\n        <Space size=\"small\">\n          <Tag>{thingsCount}</Tag>\n          {is('showThings') ? (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 20).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 20 && (\n                <Typography.Text>+{thingsCount - 20} more</Typography.Text>\n              )}\n            </Space>\n          ) : (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 5).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 5 && (\n                <Typography.Text>+{thingsCount - 5} more</Typography.Text>\n              )}\n            </Space>\n          )}\n        </Space>\n      ),\n      sorter: (a, b) => a.thingsCount - b.thingsCount,\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      sorter: (a, b) => a.level - b.level,\n      render: (level: number) => <Rate value={level} count={3} disabled />,\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={4}>\n        Things By Rule (Added: {Object.keys(things).length} | {availableThings.length}){' '}\n      </Typography.Title>\n\n      <Space split={<Divider type=\"vertical\" />} wrap>\n        <AddNewThingFlow\n          addEntryToUpdate={addEntryToUpdate}\n          availableThings={availableThings}\n          rules={rules}\n          width={containerWidth}\n        />\n\n        <Typography.Text strong>\n          Average Things: <Tag>{stats.averageThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Max Things: <Tag>{stats.maxThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Min Things: <Tag>{stats.minThings}</Tag>\n        </Typography.Text>\n\n        <Switch\n          checked={is('showThings')}\n          onChange={(e) => addParam('showThings', e)}\n          checkedChildren=\"Hide things\"\n          unCheckedChildren=\"Show things\"\n        />\n      </Space>\n\n      <Table dataSource={rows} columns={columns} pagination={paginationProps} />\n    </Space>\n  );\n}\n","import { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { EditThingModal } from './EditThingModal';\nimport { wait } from 'utils';\nimport { getLatestRuleUpdate, SYLLABLE_SEPARATOR } from './utils';\n\ntype ItemUpdateGuardProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  rules: Dictionary<DailyDiagramRule>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  children: ReactNode;\n};\n\nexport function ItemUpdateGuard({ children, things, rules, addEntryToUpdate }: ItemUpdateGuardProps) {\n  // If any rules has been added or updated AFTER the last time the user has updated the item, the user will be warned to update the item\n  const toUpdateThings = useMemo(() => {\n    const latestRuleUpdate = getLatestRuleUpdate(rules);\n\n    return Object.values(things).filter((item) => {\n      const latestThingUpdate = item.updatedAt;\n\n      // Prevent updating items that have the syllables field but it's not correct\n      if (\n        item.syllables &&\n        item.syllables.split(SYLLABLE_SEPARATOR).join('') !== item.name.replace(/\\s/g, '')\n      ) {\n        console.log('❗️ Name and syllables do not match', item.name, item.syllables);\n        return true;\n      }\n\n      // if (item.syllables.endsWith('ie') && item.updatedAt < 1724527674296) {\n      //   return true;\n      // }\n\n      return latestRuleUpdate > latestThingUpdate;\n    });\n  }, [things, rules]);\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  useEffect(() => {\n    const updateThings = async (i: DailyDiagramItem) => {\n      console.log('Found things that need to update...');\n      setActiveThing(null);\n\n      // Await the wait function here\n      await wait(250);\n\n      if (toUpdateThings.length > 0) {\n        setActiveThing(toUpdateThings[0]);\n      }\n    };\n\n    console.count('Checking for things that need to update...');\n    if (toUpdateThings.length > 0) {\n      updateThings(toUpdateThings[0]);\n    }\n  }, [toUpdateThings]);\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <>\n      {activeThing && (\n        <EditThingModal\n          subtitle={`(${toUpdateThings.length} left to update)`}\n          isModalOpen={activeThing !== null}\n          onSaveThing={onUpdateThing}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          okButtonText=\"Update\"\n          width=\"90vw\"\n        />\n      )}\n      <>{children}</>\n    </>\n  );\n}\n","import { Collapse, Rate, Space, Typography } from 'antd';\nimport { DailyTeoriaDeConjuntosEntry } from 'components/Daily/utils/types';\nimport { Thing } from './Thing';\nimport { ReactNode, useState } from 'react';\nimport { TransparentButton } from 'components/Common';\n\ntype DiagramGameSampleProps = {\n  game: DailyTeoriaDeConjuntosEntry;\n};\n\ntype TThing = {\n  id: string;\n  name: string;\n  rule: number;\n};\n\nexport function DiagramGameSample({ game }: DiagramGameSampleProps) {\n  const [leftRing, setLeftRing] = useState<TThing[]>([\n    {\n      id: game.rule1.thing.id,\n      name: game.rule1.thing.name,\n      rule: 1,\n    },\n  ]);\n  const [rightRing, setRightRing] = useState<TThing[]>([\n    {\n      id: game.rule2.thing.id,\n      name: game.rule2.thing.name,\n      rule: 2,\n    },\n  ]);\n  const [intersection, setIntersection] = useState<TThing[]>([\n    {\n      id: game.intersectingThing.id,\n      name: game.intersectingThing.name,\n      rule: 0,\n    },\n  ]);\n\n  const [playerOptions, setPlayerOptions] = useState<TThing[]>(game.things.slice(0, 4));\n\n  const [selectedThing, setSelectedThing] = useState<TThing | null>(game.things[0]);\n\n  // const\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Typography.Title level={4}>Game Sample</Typography.Title>\n      <Typography.Title level={5}>\"{game.title}\"</Typography.Title>\n      <Rate value={game.level} count={game.level} disabled />\n      <Typography.Paragraph style={{ maxWidth: '500px' }}>\n        O círculo amarelo tem uma regra gramatical secreta e o circulo vermelho tem outra regra gramatical\n        secreta. O quadrado do meio representa a interseção entre a regra amarela e a regra vermelha.\n      </Typography.Paragraph>\n\n      <Space>\n        <VennDiagram\n          width={600}\n          leftCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {leftRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          rightCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {rightRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          intersectionChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {intersection.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n        />\n      </Space>\n      <Typography.Text>Coloque os objetos nos círculos corretos:</Typography.Text>\n      <Space className=\"space--center\">\n        {playerOptions.map((thing) => (\n          <TransparentButton\n            style={thing.id === selectedThing?.id ? { outline: '3px solid hotPink' } : {}}\n            onClick={() => setSelectedThing(thing)}\n          >\n            <Thing key={thing.id} itemId={thing.id} name={thing.name} />\n          </TransparentButton>\n        ))}\n      </Space>\n\n      <Collapse\n        items={[\n          {\n            key: '1',\n            label: 'Resposta',\n            children: (\n              <Space direction=\"vertical\">\n                <Typography.Text strong>Regra Amarela</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule1.text}</Typography.Text>\n                  </li>\n                </ul>\n\n                <Typography.Text strong>Regra Vermelha</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule2.text}</Typography.Text>\n                  </li>\n                </ul>\n              </Space>\n            ),\n          },\n        ]}\n      />\n\n      <div style={{ height: '200px' }}></div>\n    </Space>\n  );\n}\n\ntype VennDiagramProps = {\n  leftCircleChildren: ReactNode;\n  rightCircleChildren: ReactNode;\n  intersectionChildren: ReactNode;\n} & React.SVGProps<SVGSVGElement>;\n\nfunction VennDiagram({\n  leftCircleChildren,\n  rightCircleChildren,\n  intersectionChildren,\n  ...props\n}: VennDiagramProps) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 760 500\" {...props}>\n      <path\n        fill=\"#fbb03b\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M252.78 3.5c-136.42 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.59-247-247-247zm.99 483.07C123.39 486.57 17.7 380.88 17.7 250.5S123.39 14.43 253.77 14.43 489.84 120.12 489.84 250.5 384.15 486.57 253.77 486.57z\"\n      ></path>\n      <path\n        fill=\"#f15a24\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M508.22 3.5c-136.41 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.58-247-247-247zm.99 483.07c-130.38 0-236.07-105.69-236.07-236.07S378.84 14.43 509.22 14.43 745.29 120.12 745.29 250.5 639.6 486.57 509.22 486.57z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M487.34 250.5c0-62.39-24.29-121.04-68.41-165.16a235.9 235.9 0 00-37.43-30.47 235.35 235.35 0 00-37.43 30.47c-44.12 44.11-68.41 102.77-68.41 165.16s24.29 121.04 68.41 165.16a235.9 235.9 0 0037.43 30.47 235.35 235.35 0 0037.43-30.47c44.12-44.11 68.41-102.77 68.41-165.16z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M258.72 250.5c0-66.64 25.95-129.3 73.08-176.42a253.125 253.125 0 0134.1-28.57c-33.98-18.65-72.29-28.57-112.13-28.57-62.39 0-121.04 24.29-165.16 68.41C44.5 129.46 20.2 188.11 20.2 250.5s24.29 121.04 68.41 165.16c44.11 44.12 102.77 68.41 165.16 68.41 39.84 0 78.15-9.92 112.13-28.57a252.507 252.507 0 01-34.1-28.57c-47.12-47.12-73.08-109.78-73.08-176.42zM674.37 85.34C630.25 41.22 571.6 16.93 509.21 16.93c-40.27 0-78.98 10.14-113.24 29.18 11.74 8.26 22.86 17.6 33.22 27.96 47.12 47.12 73.08 109.78 73.08 176.42s-25.95 129.3-73.08 176.42a252.312 252.312 0 01-33.22 27.96c34.25 19.04 72.96 29.18 113.24 29.18 62.39 0 121.04-24.29 165.16-68.41 44.12-44.11 68.41-102.77 68.41-165.16s-24.29-121.04-68.41-165.16z\"\n      ></path>\n      <foreignObject x=\"30\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-left\">{leftCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"480\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-right\">{rightCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"290\" y=\"65\" width=\"182\" height=\"370\">\n        <div className=\"venn-diagram__circle-content-intersection\">{intersectionChildren}</div>\n      </foreignObject>\n    </svg>\n  );\n}\n","import { Button, Space, Typography } from 'antd';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMeasure } from 'react-use';\nimport { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { DailyTeoriaDeConjuntosEntry } from 'components/Daily/utils/types';\nimport { useState } from 'react';\nimport { buildDailyTeoriaDeConjuntosGames } from 'components/Daily/utils/games/daily-teoria-de-conjuntos';\nimport { DiagramGameSample } from './DiagramGameSample';\nimport './GameSimulator.scss';\n\ntype GameSimulatorProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n};\n\nexport function GameSimulator({ things, rules }: GameSimulatorProps) {\n  const [ref] = useMeasure<HTMLDivElement>();\n\n  const [simulation, setSimulation] = useState<DailyTeoriaDeConjuntosEntry | null>(null);\n\n  const onSimulate = () => {\n    setSimulation(\n      Object.values(\n        buildDailyTeoriaDeConjuntosGames(\n          1,\n          {\n            latestDate: '2023/01/01',\n            latestNumber: 0,\n            used: [],\n          },\n          rules,\n          things\n        )\n      )[0]\n    );\n  };\n\n  const onGenerateDemoGames = () => {\n    let demos: any = null;\n    try {\n      demos = buildDailyTeoriaDeConjuntosGames(\n        25,\n        {\n          latestDate: '2023/01/01',\n          latestNumber: 0,\n          used: [],\n        },\n        rules,\n        things\n      );\n\n      console.log(demos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>Game Simulator</Typography.Title>\n\n      <Button size=\"large\" onClick={onSimulate}>\n        Simulate\n      </Button>\n\n      <Button size=\"large\" onClick={onGenerateDemoGames}>\n        Generate Demos (log)\n      </Button>\n\n      {simulation && <DiagramGameSample game={simulation} key={JSON.stringify(simulation)} />}\n    </Space>\n  );\n}\n","import { Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMemo, useState } from 'react';\nimport { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { useTDResource } from 'hooks/useTDResource';\n\nimport { RulesByThing } from './RulesByThing';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ThingsByRule } from './ThingsByRule';\nimport { orderBy } from 'lodash';\nimport { ItemUpdateGuard } from './ItemUpdateGuard';\nimport { GameSimulator } from './GameSimulator';\nimport { EditThingModal } from './EditThingModal';\nimport { useMeasure } from 'react-use';\n\nexport function ItemsDiagramSetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const tdrItemsQuery = useTDResource<ItemT>('items');\n  const tdrDiagramRulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules');\n\n  const availableThings = useMemo(() => {\n    return Object.values(tdrItemsQuery.data ?? {}).filter((item) => {\n      if (data && data[item.id] !== undefined) return false;\n      if (item.nsfw) return false;\n      const isNameSingleWord = item.name.pt.split(' ').length === 1;\n\n      if (item.decks?.includes('thing')) return true;\n      if (item.decks?.includes('alien') && isNameSingleWord) return true;\n      if (item.decks?.includes('manufactured') && isNameSingleWord) return true;\n\n      return false;\n    });\n  }, [data, tdrItemsQuery.data]);\n\n  const rules = useMemo(() => {\n    return tdrDiagramRulesQuery.data ?? {};\n  }, [tdrDiagramRulesQuery.data]);\n\n  const thingsByRules = useMemo(() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    orderBy(Object.values(data), ['updatedAt'], ['desc']).forEach((entry) => {\n      entry.rules.forEach((ruleId) => {\n        dict[ruleId].push(entry.itemId);\n      });\n    });\n    return dict;\n  }, [data, rules]);\n\n  const { is, queryParams } = useQueryParams();\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  if (tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading) {\n    return <Typography.Text>Loading...</Typography.Text>;\n  }\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading}\n      hasResponseData={tdrItemsQuery.hasResponseData || tdrDiagramRulesQuery.hasResponseData}\n    >\n      <div ref={ref}>\n        <ItemUpdateGuard things={data} rules={rules} addEntryToUpdate={addEntryToUpdate}>\n          {activeThing && (\n            <EditThingModal\n              isModalOpen={activeThing !== null}\n              onSaveThing={(at) => {\n                onUpdateThing(at);\n                setActiveThing(null);\n              }}\n              onCancel={() => setActiveThing(null)}\n              thing={activeThing}\n              rules={rules}\n              okButtonText=\"Update\"\n              width={containerWidth}\n            />\n          )}\n\n          {(is('display', 'rule') || !queryParams.has('display')) && (\n            <ThingsByRule\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n              containerWidth={containerWidth}\n            />\n          )}\n\n          {is('display', 'thing') && (\n            <RulesByThing\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n            />\n          )}\n\n          {is('display', 'simulator') && (\n            <GameSimulator\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n            />\n          )}\n        </ItemUpdateGuard>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsDiagramFilters } from 'components/Items/Diagram/ItemsDiagramFilters';\nimport { ItemsDiagramSetsContent } from 'components/Items/Diagram/ItemsDiagramSetsContent';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport { DailyDiagramItem } from 'types';\n\nexport function ItemsDiagramSets() {\n  const diagramData = useResourceFirebaseData<DailyDiagramItem>({\n    tdrResourceName: 'daily-diagram-items',\n    firebaseDataCollectionName: 'diagramItems',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Diagram Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsDiagramFilters {...diagramData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={diagramData.isLoading || diagramData.isSaving}\n            error={diagramData.error}\n            hasResponseData={!isEmpty(diagramData.data)}\n          >\n            <Flex vertical gap={24}>\n              <ItemsDiagramSetsContent {...diagramData} />\n            </Flex>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsDiagramSets;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","disabled","danger","block","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","value","defaultValue","undefined","delete","set","String","addParams","params","defaultValues","Object","entries","forEach","removeParam","is","get","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","error","description","useMemo","isSuccess","isPending","cloneDeep","isEmpty","firebaseData","isLoading","save","mutate","serializeFirebaseData","addEntryToUpdate","id","item","prev","entriesToUpdate","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","path","docId","docRef","doc","firestore","updateDoc","options","useMutation","mutationFn","async","ItemsDiagramFilters","vertical","gap","JSON","stringify","diagramItems","copy","sortJsonKeys","prepareFileForDownload","label","mode","display","title","ClusterOutlined","TableOutlined","className","EditThingModal","isModalOpen","onSaveThing","onCancel","thing","rules","width","itemAliases","subtitle","okButtonText","onGiveAnotherThing","orderedRules","orderBy","values","r","index","indexOf","method","Infinity","slice","split","form","Form","hasUndefinedValues","some","nameWatch","name","syllables","fields","separateSyllables","stressedSyllable","includes","keys","ruleId","verifiers","length","setFieldsValue","isAcronym","getFieldValue","syllableRulesUpdate","reduce","acc","syllableDependencyVerifier","stressSyllableRulesUpdate","stressSyllableDependencyVerifier","rule1","rule2","rule5","rule3","rule4","splitSyllables","SYLLABLE_SEPARATOR","open","onOk","submit","maskClosable","okButtonProps","htmlType","okText","itemId","onFinish","preparedThing","serializeThing","autoComplete","initialValues","deserializeThing","layout","labelWrap","readOnly","optionType","buttonStyle","map","syllable","updatedAt","toLocaleString","join","offsetTop","justify","align","rule","valuePropName","clsx","checkedChildren","unCheckedChildren","wasAnyRuleUpdated","reVerify","thingRules","filter","AddNewThingFlow","availableThings","activeThing","setActiveThing","onActivateThing","randomItem","sample","chooseNameThatIsASingleWord","aliases","find","pt","aliasesPt","Boolean","newThing","wait","alias","Thing","code","ThingButton","RulesByThing","things","thingsByRules","ref","containerWidth","useMeasure","rows","paginationProps","columns","dataIndex","sorter","a","b","render","localeCompare","itemRules","record","wrap","color","duplicatedThings","dict","push","ids","direction","level","dataSource","rowKey","pagination","ThingsByRule","thingsCount","stats","quantities","maxThings","Math","max","minThings","min","averageThings","round","sum","count","strong","checked","e","ItemUpdateGuard","toUpdateThings","latestRuleUpdate","getLatestRuleUpdate","latestThingUpdate","replace","updateThings","DiagramGameSample","game","leftRing","setLeftRing","rightRing","setRightRing","intersection","setIntersection","intersectingThing","playerOptions","setPlayerOptions","selectedThing","setSelectedThing","style","maxWidth","VennDiagram","leftCircleChildren","height","arr","rightCircleChildren","intersectionChildren","outline","items","text","xmlns","viewBox","fill","stroke","strokeMiterlimit","strokeWidth","d","x","y","GameSimulator","simulation","setSimulation","buildDailyTeoriaDeConjuntosGames","latestDate","latestNumber","used","demos","ItemsDiagramSetsContent","tdrItemsQuery","tdrDiagramRulesQuery","nsfw","isNameSingleWord","decks","entry","DataLoadingWrapper","hasResponseData","at","ItemsDiagramSets","diagramData","hasSider","PageSider"],"sourceRoot":""}