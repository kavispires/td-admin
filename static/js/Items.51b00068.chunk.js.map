{"version":3,"file":"static/js/Items.51b00068.chunk.js","mappings":"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","sources":["components/Items/ItemsTypeahead.tsx","context/ItemsContext.tsx","components/Items/ItemCard.tsx","hooks/useItemUpdate.ts","components/Items/ItemListing.tsx","components/Items/AddNewItem.tsx","components/Items/ItemListingFilters.tsx","components/Items/ItemRandomized.tsx","components/Items/ItemSearch.tsx","pages/Items/Items.tsx"],"sourcesContent":["import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n        // console.log(value);\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { createContext, ReactNode, useContext, useMemo } from 'react';\nimport { Item } from 'types';\n\nexport type ItemsContextType = {\n  items: Dictionary<Item>;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  decksDict: Dictionary<string>;\n  decks: { value: string }[];\n  listing: Item[];\n  isDirty: boolean;\n  addItemToUpdate: (id: string, item: Item) => void;\n  itemsToUpdate: Dictionary<Item>;\n  isSaving: boolean;\n  save: () => void;\n  newId: string;\n};\n\nconst ItemsContext = createContext<ItemsContextType>({\n  items: {},\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  decksDict: {},\n  decks: [],\n  listing: [],\n  isDirty: false,\n  addItemToUpdate: () => {},\n  itemsToUpdate: {},\n  isSaving: false,\n  save: () => {},\n  newId: '-1',\n});\n\ntype ItemsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsProvider = ({ children }: ItemsProviderProps) => {\n  const { queryParams } = useQueryParams();\n\n  const {\n    data: items,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addEntryToUpdate: addItemToUpdate,\n    entriesToUpdate: itemsToUpdate,\n    isDirty,\n  } = useResourceFirebaseData<Item>({\n    tdrResourceName: 'items',\n    firebaseDataCollectionName: 'items',\n  });\n\n  const { decksDict, decks } = useMemo(() => {\n    console.log('Recomputing item decks typeahead...');\n    const decksDict: Dictionary<string> = {};\n    const duplicationCheckEn: Dictionary<string> = {};\n    const duplicationCheckPt: Dictionary<string> = {};\n    const duplicatedNames: string[][] = [];\n\n    Object.values(items).forEach((entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n\n      if (duplicationCheckEn[entry.name.en]) {\n        duplicatedNames.push([`${entry.name.en} (${duplicationCheckEn[entry.name.en]})`, nameEn]);\n      } else {\n        duplicationCheckEn[entry.name.en] = entry.id;\n      }\n      if (duplicationCheckPt[entry.name.pt]) {\n        duplicatedNames.push([`${entry.name.pt} (${duplicationCheckPt[entry.name.pt]})`, namePt]);\n      } else {\n        duplicationCheckPt[entry.name.pt] = entry.id;\n      }\n\n      entry?.decks?.forEach((deck) => {\n        decksDict[deck] = deck;\n      });\n    });\n\n    const decks = orderBy(Object.keys(decksDict)).map((name) => ({ value: name }));\n\n    if (duplicatedNames.length > 0) {\n      console.warn('Possible duplicated items', duplicatedNames);\n    }\n\n    return { decksDict, decks };\n  }, [items, isSaving, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const deck = queryParams.get('deck') ?? 'all';\n  const listing = useMemo(() => {\n    const orderedList = orderBy(Object.values(items), [(item) => Number(item.id)], 'asc');\n\n    switch (deck) {\n      case 'all':\n        return orderedList;\n      case '!all':\n        return orderedList.filter((item) => !item?.decks?.length ?? true);\n      case 'nsfw':\n        return orderedList.filter((item) => item.nsfw);\n      case '!nsfw':\n        return orderedList.filter((item) => !item.nsfw);\n      default:\n        if (deck.startsWith('!')) {\n          return orderedList.filter((item) => !item?.decks?.includes(deck.slice(1)));\n        }\n        return orderedList.filter((item) => item?.decks?.includes(deck));\n    }\n  }, [items, deck]);\n\n  // Handle id for new items\n  const newId = useMemo(() => {\n    const newIds = orderBy(Object.keys(itemsToUpdate), [(id) => Number(id)], 'asc');\n    const latestSavedId = listing[listing.length - 1]?.id;\n    const newestId = orderBy([...newIds, latestSavedId], [(id) => Number(id)], 'desc')[0];\n    return String(Number(newestId) + 1);\n  }, [listing, itemsToUpdate]);\n\n  return (\n    <ItemsContext.Provider\n      value={{\n        items,\n        listing,\n        isLoading,\n        error,\n        decksDict,\n        decks,\n        hasResponseData: listing.length > 0,\n        isDirty,\n        addItemToUpdate,\n        isSaving,\n        save,\n        itemsToUpdate,\n        newId,\n      }}\n    >\n      {children}\n    </ItemsContext.Provider>\n  );\n};\n\nexport const useItemsContext = () => useContext(ItemsContext);\n","import { Button, Card, Flex, Form, Input, Popover, Select, Space, Switch, Typography } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useItemUpdate } from 'hooks/useItemUpdate';\nimport { memoize, snakeCase } from 'lodash';\nimport { Item as ItemT } from 'types';\n\nimport { EditOutlined, FireFilled, MenuOutlined, RollbackOutlined, SaveOutlined } from '@ant-design/icons';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useToggle } from 'react-use';\n\ntype ItemCardProps = {\n  item: ItemT;\n  editMode?: boolean;\n  simplified?: boolean;\n};\n\nexport function ItemCard({ item, editMode = false, simplified }: ItemCardProps) {\n  const { decks } = useItemsContext();\n  const { isEditing, toggleEditMode, onEdit, isDirty, onModify, onReset, editableItem } = useItemUpdate(\n    item,\n    editMode\n  );\n  const copyToClipboard = useCopyToClipboardFunction();\n  const { is } = useQueryParams();\n\n  return (\n    <Card\n      title={<Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>}\n      extra={<ItemPopoverOptions item={item} />}\n      style={{ maxWidth: 250 }}\n      size={simplified ? 'small' : 'default'}\n      actions={\n        simplified\n          ? undefined\n          : isDirty\n            ? [\n                <RollbackOutlined key=\"reset\" onClick={onReset} />,\n                <SaveOutlined key=\"save\" onClick={onModify} />,\n              ]\n            : [<EditOutlined key=\"edit\" onClick={toggleEditMode} />]\n      }\n    >\n      <Item id={item.id} width={simplified ? 75 : 125} title={`${item.name.en} | ${item.name.pt}`} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <Input\n          prefix={<LanguageFlag language=\"en\" width=\"1em\" />}\n          placeholder=\"Name in EN\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.en}\n          readOnly={!isEditing}\n          key={`en-${item.name.en}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, en: e.target.value } })}\n        />\n        <Input\n          prefix={<LanguageFlag language=\"pt\" width=\"1em\" />}\n          placeholder=\"Name in PT\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.pt}\n          readOnly={!isEditing}\n          key={`pt-${item.name.pt}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, pt: e.target.value } })}\n        />\n        {!simplified && (\n          <>\n            <div>\n              <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Select a deck\"\n                defaultValue={item.decks}\n                disabled={!isEditing}\n                options={decks}\n                variant={isEditing ? 'outlined' : 'borderless'}\n                size=\"small\"\n                key={String(item.decks)}\n                onChange={(value) => onEdit({ decks: value.sort() })}\n              />\n            </div>\n            {is('showVerifyThing') && (\n              <div>\n                <VerifyIfThing item={item} />\n              </div>\n            )}\n            {(isEditing || item.nsfw) && (\n              <div>\n                <Form.Item label=\"nsfw\" valuePropName=\"checked\">\n                  <Switch\n                    checked={item.nsfw}\n                    onChange={(checked) => onEdit({ nsfw: checked })}\n                    size=\"small\"\n                    checkedChildren={<FireFilled style={{ color: 'hotpink' }} />}\n                    disabled={!isEditing}\n                  />\n                </Form.Item>\n              </div>\n            )}\n          </>\n        )}\n      </Space>\n    </Card>\n  );\n}\n\ntype VerifyIfThingProps = {\n  item: ItemT;\n};\n\nconst verifyIfThingCheck = memoize((item: ItemT) => {\n  const hasThing = !!item.decks?.includes('thing');\n  const hasManufactured = !!item.decks?.includes('manufactured');\n  const singleWordNameEn = item.name.en.split(' ').length === 1;\n  const singleWordNamePt = item.name.pt.split(' ').length === 1;\n\n  const result = {\n    en: hasThing || (singleWordNameEn && hasManufactured),\n    pt: hasThing || (singleWordNamePt && hasManufactured),\n  };\n\n  if (!result.pt && !result.en) return '';\n\n  return (\n    <>\n      {result.en && <LanguageFlag language=\"en\" width=\"1em\" />}\n      {result.pt && <LanguageFlag language=\"pt\" width=\"1em\" />}\n    </>\n  );\n});\n\nconst VerifyIfThing = ({ item }: VerifyIfThingProps) => {\n  const result = verifyIfThingCheck(item);\n\n  if (result) {\n    return <Flex gap={6}>Thing: {result}</Flex>;\n  }\n\n  return <></>;\n};\n\nexport type EscapeRoomItemCard = {\n  /**\n   * The unique identifier of the card.\n   * Usually used to verify the end game played cards condition.\n   */\n  id: string;\n  /**\n   * The type of the card.\n   */\n  type: 'item';\n  /**\n   * The header of the card\n   */\n  header: {\n    /**\n     * The title of the header in both languages.\n     */\n    title: DualLanguageValue;\n    /**\n     * Illustrative small icon in the header.\n     */\n    iconId?: string;\n  };\n  /**\n   * The metadata of the card.\n   */\n  metadata?: {\n    /**\n     * The level of the card to determine the difficulty.\n     */\n    level: 'basic';\n    /**\n     * When played, adds this keyword to the result.\n     */\n    keyword?: string;\n  };\n  content: {\n    /**\n     * The item id for the Item Sprite\n     */\n    itemId: string;\n    /**\n     * Descriptive text of the item, usually its name\n     */\n    caption?: DualLanguageValue;\n  };\n};\n\nconst buildEscapeRoomItemCard = (item: ItemT): EscapeRoomItemCard => ({\n  id: item.id,\n  type: 'item',\n  header: {\n    title: {\n      en: 'Item',\n      pt: 'Item',\n    },\n    iconId: '2077',\n  },\n  metadata: {\n    level: 'basic',\n    keyword: snakeCase(item.name.en).toUpperCase(),\n  },\n  content: {\n    itemId: item.id,\n    caption: item.name,\n  },\n});\n\nexport function ItemPopoverOptions({ item }: Pick<ItemCardProps, 'item'>) {\n  const [open, toggleOpen] = useToggle(false);\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <Popover\n      content={\n        <Space direction=\"vertical\">\n          <Button size=\"small\" onClick={() => copyToClipboard(JSON.stringify(item, null, 2))}>\n            Complete Item\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.en)}>\n            EN Name\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.pt)}>\n            PT Name\n          </Button>\n          <Button\n            size=\"small\"\n            onClick={() => copyToClipboard(JSON.stringify(buildEscapeRoomItemCard(item), null, 2))}\n          >\n            Escape Room Item\n          </Button>\n        </Space>\n      }\n      title=\"Copy\"\n      trigger=\"click\"\n      open={open}\n      onOpenChange={toggleOpen}\n    >\n      <Button type=\"text\" icon={<MenuOutlined />} />\n    </Popover>\n  );\n}\n","import { cloneDeep } from 'lodash';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\nimport { useItemsContext } from 'context/ItemsContext';\n\nexport function useItemUpdate(currentItem: ItemT, editMode = false) {\n  const { addItemToUpdate, itemsToUpdate } = useItemsContext();\n  const [isEditing, setEditing] = useState(editMode);\n  const [editableItem, setEditableItem] = useState<ItemT>(cloneDeep(currentItem));\n  const originalItem = itemsToUpdate[currentItem.id] ?? currentItem;\n\n  const onEdit = (change: Partial<ItemT>) => {\n    const newItem = { ...cloneDeep(editableItem), ...change };\n    if (Object.keys(change).includes('nsfw') && change.nsfw === false) {\n      delete newItem.nsfw;\n    }\n    setEditableItem(newItem);\n  };\n\n  const onModify = async () => {\n    addItemToUpdate(editableItem.id, editableItem);\n  };\n\n  const onReset = () => {\n    setEditableItem(cloneDeep(currentItem));\n    setEditing(false);\n  };\n\n  const isDirty = JSON.stringify(originalItem) !== JSON.stringify(editableItem);\n\n  return {\n    isEditing,\n    toggleEditMode: () => setEditing((e) => !e),\n    editableItem,\n    onEdit,\n    isDirty,\n    onModify,\n    onReset,\n  };\n}\n","import { Col, Row, Typography } from 'antd';\n\nimport { ItemCard } from './ItemCard';\nimport { capitalize } from 'lodash';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemListing() {\n  const { queryParams } = useQueryParams();\n  const listingType = queryParams.get('type') ?? 'all';\n  const { listing } = useItemsContext();\n\n  const { page, pagination } = useGridPagination({ data: listing, resetter: listingType });\n\n  return (\n    <>\n      <Typography.Title level={2}>\n        Listing - {capitalize(listingType)} items ({listing.length})\n      </Typography.Title>\n\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemCard item={item} />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Button, Modal } from 'antd';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useState } from 'react';\nimport { ItemCard } from './ItemCard';\nimport { cloneDeep } from 'lodash';\n\nconst PLACEHOLDER_ITEM = {\n  id: '',\n  name: {\n    en: '',\n    pt: '',\n  },\n  groups: [],\n};\n\ntype NewItemModalProps = {\n  isModalOpen: boolean;\n  handleOk: () => void;\n  handleCancel: () => void;\n  newId: string;\n};\n\nfunction NewItemModal({ isModalOpen, handleOk, handleCancel, newId }: NewItemModalProps) {\n  const [newItem] = useState(cloneDeep({ ...PLACEHOLDER_ITEM, id: newId }));\n  return (\n    <Modal title=\"Add new item\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n      <ItemCard item={newItem} editMode />\n    </Modal>\n  );\n}\n\nexport function AddNewItem() {\n  const [isModalOpen, setOpenModal] = useState(false);\n\n  const { newId } = useItemsContext();\n\n  const showModal = () => {\n    setOpenModal(true);\n  };\n\n  const handleOk = () => {\n    setOpenModal(false);\n  };\n\n  const handleCancel = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <Button block onClick={showModal}>\n        Add New Item\n      </Button>\n      {isModalOpen && (\n        <NewItemModal\n          isModalOpen={isModalOpen}\n          handleOk={handleOk}\n          handleCancel={handleCancel}\n          newId={newId}\n          key={newId}\n        />\n      )}\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { capitalize, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { AddNewItem } from './AddNewItem';\nimport { Item } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { SaveButton } from 'components/Common/SaveButton';\n\nexport function ItemListingFilters() {\n  const { isDirty, save, items, decks, itemsToUpdate, isSaving } = useItemsContext();\n  const { queryParams, is, addParam } = useQueryParams();\n\n  const deckOptions = useMemo(() => {\n    const includingOptions = orderBy(\n      decks.map(({ value }) => ({ label: capitalize(value), value })),\n      'label'\n    );\n    const excludingOptions = includingOptions.map(({ label, value }) => ({\n      label: `NOT ${label}`,\n      value: `!${value}`,\n    }));\n    return [...includingOptions, ...excludingOptions];\n  }, [decks]);\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={6}>\n        <SaveButton\n          isDirty={isDirty}\n          dirt={JSON.stringify(itemsToUpdate)}\n          onSave={save}\n          isSaving={isSaving}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(items)}\n          fileName=\"items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSwitch\n        label=\"Show Search\"\n        value={!is('hideSearch')}\n        onChange={(v) => addParam('hideSearch', v ? '' : 'true', '')}\n      />\n\n      <FilterSwitch\n        label=\"Show Randomizer\"\n        value={is('showRandomizer')}\n        onChange={(v) => addParam('showRandomizer', v ? 'true' : '', '')}\n      />\n\n      <FilterSwitch\n        label=\"Verify Thing\"\n        value={is('showVerifyThing')}\n        onChange={(v) => addParam('showVerifyThing', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n\n      <FilterSelect\n        label=\"Deck\"\n        value={queryParams.get('deck') ?? 'all'}\n        onChange={(value) => addParam('deck', value, 'all')}\n        options={[\n          { label: 'All', value: 'all' },\n          { label: 'NSFW', value: 'nsfw' },\n          { label: 'SFW', value: '!nsfw' },\n          ...deckOptions,\n          { label: 'No decks', value: '!all' },\n        ]}\n      />\n\n      <Divider />\n\n      <AddNewItem />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(items: Dictionary<Item>) {\n  return sortJsonKeys(\n    Object.values(items).reduce((acc: Dictionary<Item>, item) => {\n      // Sort deck\n      item.decks = (item?.decks ?? []).sort();\n\n      // Remove decks if no deck is present\n      if (item.decks.length === 0) {\n        delete item.decks;\n\n        acc[item.id] = item;\n        return acc;\n      }\n\n      // Remove thing from deck if either evidence, dream, alien, or manufactured is present and both pt and en names are single words\n      if (\n        item.decks.includes('thing') &&\n        item.name.en.split(' ').length === 1 &&\n        item.name.pt.split(' ').length === 1\n      ) {\n        if (\n          item.decks.includes('evidence') ||\n          item.decks.includes('dream') ||\n          item.decks.includes('alien') ||\n          item.decks.includes('manufactured')\n        ) {\n          item.decks = item.decks.filter((deck) => deck !== 'thing');\n        }\n\n        acc[item.id] = item;\n      }\n\n      acc[item.id] = item;\n\n      return acc;\n    }, {})\n  );\n}\n","import { Button, Divider, Space, Typography } from 'antd';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { sampleSize } from 'lodash';\n\nexport function ItemRandomized() {\n  const { listing } = useItemsContext();\n  const [randomItems, setRandomItems] = useState<ItemT[]>([]);\n\n  const onRandomSample = () => {\n    setRandomItems(sampleSize(listing, 5));\n  };\n\n  return (\n    <div>\n      <Typography.Title level={2}>Randomized Sample</Typography.Title>\n\n      <div>\n        <Button onClick={onRandomSample}>Get Sample</Button>\n      </div>\n\n      <Space wrap className=\"my-4\">\n        {randomItems.map((item) => (\n          <ItemCard key={item.id} item={item} simplified />\n        ))}\n      </Space>\n\n      <Divider />\n    </div>\n  );\n}\n","import { Divider, Space, Typography } from 'antd';\nimport { Fragment, useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nexport function ItemSearch() {\n  const { items, isLoading, isSaving } = useItemsContext();\n  const [activeItem, setActiveItem] = useState<ItemT | null>(null);\n\n  return (\n    <Fragment key={`item-search-${isLoading}`}>\n      <Typography.Title level={2}>Search for an item</Typography.Title>\n\n      <div>\n        <ItemsTypeahead\n          items={items}\n          isPending={isLoading || isSaving}\n          onFinish={(id) => setActiveItem(items[id])}\n        />\n      </div>\n\n      {Boolean(activeItem) && (\n        <Space direction=\"vertical\" className=\"my-4\" key={activeItem?.id}>\n          <ItemCard item={activeItem!} />\n        </Space>\n      )}\n      <Divider />\n    </Fragment>\n  );\n}\n","import { Layout, Space } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemListing } from 'components/Items/ItemListing';\nimport { ItemListingFilters } from 'components/Items/ItemListingFilters';\nimport { ItemRandomized } from 'components/Items/ItemRandomized';\nimport { ItemSearch } from 'components/Items/ItemSearch';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ItemsProvider, useItemsContext } from 'context/ItemsContext';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nfunction ItemsPage() {\n  const { isLoading, error, hasResponseData } = useItemsContext();\n  const { is } = useQueryParams();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Listing\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemListingFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            {!isLoading && (\n              <Space size=\"large\">\n                {!is('hideSearch') && <ItemSearch />}\n                {is('showRandomizer') && <ItemRandomized />}\n              </Space>\n            )}\n            <ItemListing />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction Items() {\n  return (\n    <ItemsProvider>\n      <ItemsPage />\n    </ItemsProvider>\n  );\n}\n\nexport default Items;\n"],"names":["ItemsTypeahead","items","isPending","style","size","placeholder","allowClear","onFinish","rest","tdrItemsQuery","useTDResource","Boolean","namesDict","options","useMemo","console","log","Object","values","data","reduce","acc","entry","nameEn","name","en","id","namePt","pt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","option","String","includes","sorted","idMatch","match","index","indexOf","width","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","key","undefined","onPressEnter","ItemsContext","createContext","isLoading","error","hasResponseData","decksDict","decks","listing","isDirty","addItemToUpdate","itemsToUpdate","isSaving","save","newId","ItemsProvider","children","queryParams","useQueryParams","addEntryToUpdate","entriesToUpdate","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","duplicationCheckEn","duplicationCheckPt","duplicatedNames","forEach","push","deck","warn","get","orderedList","item","Number","nsfw","startsWith","slice","newIds","latestSavedId","newestId","Provider","useItemsContext","useContext","ItemCard","editMode","simplified","isEditing","toggleEditMode","onEdit","onModify","onReset","editableItem","currentItem","setEditing","setEditableItem","cloneDeep","originalItem","change","newItem","async","JSON","stringify","e","useItemUpdate","copyToClipboard","useCopyToClipboardFunction","is","title","onClick","extra","ItemPopoverOptions","maxWidth","actions","RollbackOutlined","SaveOutlined","EditOutlined","direction","className","prefix","LanguageFlag","language","variant","defaultValue","readOnly","onChange","target","mode","disabled","sort","VerifyIfThing","label","valuePropName","checked","checkedChildren","FireFilled","color","verifyIfThingCheck","memoize","hasThing","hasManufactured","singleWordNameEn","split","singleWordNamePt","result","gap","open","toggleOpen","useToggle","content","type","header","iconId","metadata","level","keyword","snakeCase","itemId","caption","buildEscapeRoomItemCard","trigger","onOpenChange","icon","MenuOutlined","ItemListing","listingType","page","pagination","useGridPagination","resetter","capitalize","PaginationWrapper","gutter","xs","sm","md","lg","xl","PLACEHOLDER_ITEM","groups","NewItemModal","isModalOpen","handleOk","handleCancel","onOk","onCancel","AddNewItem","setOpenModal","block","ItemListingFilters","addParam","deckOptions","includingOptions","excludingOptions","vertical","SaveButton","dirt","onSave","DownloadButton","sortJsonKeys","prepareFileForDownload","fileName","v","ItemRandomized","randomItems","setRandomItems","sampleSize","wrap","ItemSearch","activeItem","setActiveItem","Fragment","ItemsPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}