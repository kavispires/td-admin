{"version":3,"file":"static/js/DailySetup.80b4869e.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","components/Daily/utils/constants.ts","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/utils/utils.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/CanvasSVG.tsx","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx","utils/constants.ts","utils/index.ts"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: <Tooltip title={option.title}>{option.icon}</Tooltip>,\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('tdi');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'tdr' | 'tdi' | 'tdi-data') {\n  let baseUrl: string | undefined = '';\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'tdi':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_IMAGES;\n      break;\n    case 'tdi-data':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_DATA;\n      break;\n    default:\n      baseUrl =\n        process.env.NODE_ENV === 'development'\n          ? process.env.REACT_APP_LOCAL_URL\n          : process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TD_RESOURCES;\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? {},\n    hasResponseData,\n  };\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { difference, flatMap, intersection, sample, shuffle, sortBy, uniq } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n\nconst usedWords: string[] = [];\n\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[]) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = [0, 5, 10, 15];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n\nexport const generatePalavreadoGame = (words: string[], previouslyUsedWords: string[]) => {\n  const shuffledWords = shuffle(difference(words, usedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = shuffledWords.pop() ?? '';\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < 4; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  usedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords),\n  };\n};\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getToday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getToday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getToday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { sampleSize, shuffle } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyDiscSet, ArteRuimCard } from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport {\n  DailyAquiOEntry,\n  DailyArtistaEntry,\n  DailyEntry,\n  DailyPalavreadoEntry,\n  DataDrawing,\n} from '../utils/types';\nimport { generatePalavreadoGame, getNextDay } from '../utils/utils';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  // arteRuimHistory: ParsedDailyHistoryEntry;\n  // round5sample: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    console.count('Creating Arte Ruim...');\n    const drawings = (drawingsQuery ?? []).reduce(\n      (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n        const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n        Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n          const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n          if (dataDrawing.drawing.trim().length < 10) {\n            console.warn('Empty drawing', cardId);\n            return acc;\n          }\n\n          if (acc[cardId] === undefined) {\n            acc[cardId] = {\n              id: cardId,\n              type: 'arte-ruim',\n              language: queryLanguage ?? 'pt',\n              cardId: cardId,\n              text: dataDrawing.text,\n              drawings: [dataDrawing.drawing],\n              number: 0,\n              dataIds: [key],\n            };\n          } else {\n            acc[cardId].drawings.push(dataDrawing.drawing);\n            acc[cardId].dataIds.push(key);\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const atLeastTwoDrawingsList = Object.values(drawings).filter(\n      (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n    );\n\n    const shortList = Object.values(atLeastTwoDrawingsList).filter(\n      (e) => !arteRuimHistory.used.includes(e.cardId)\n    );\n\n    const shuffledShortList = sampleSize(shuffle(shortList), batchSize);\n\n    let lastDate = arteRuimHistory.latestDate;\n\n    return shuffledShortList.map((e, index) => {\n      const id = getNextDay(lastDate);\n\n      lastDate = id;\n      return {\n        ...e,\n        id,\n        number: arteRuimHistory.latestNumber + index + 1,\n      };\n    });\n  }, [drawingsQuery, queryLanguage, arteRuimHistory, batchSize, drawingsCount]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets');\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    console.count('Creating Aqui Ó...');\n    // Filter complete sets only\n    const completeSets = shuffle(\n      Object.values(aquiOSetsQuery.data).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n    );\n    // Filter not-used sets only\n    let notUsedSets = completeSets.filter((setEntry) => !aquiOHistory.used.includes(setEntry.id));\n\n    if (notUsedSets.length < batchSize) {\n      notUsedSets.push(...shuffle(completeSets));\n    }\n\n    let lastDate = aquiOHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyAquiOEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const setEntry = notUsedSets[i];\n      if (!setEntry) {\n        break;\n      }\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: aquiOHistory.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n\n    return entries;\n  }, [aquiOSetsQuery, aquiOHistory, batchSize]);\n\n  // STEP 4: Palavreado\n  const wordsQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (!wordsQuery.data || !wordsQuery.data.length) {\n      return {};\n    }\n    console.count('Creating Palavreado...');\n    let lastDate = palavreadoHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyPalavreadoEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'palavreado',\n        number: palavreadoHistory.latestNumber + i + 1,\n        ...generatePalavreadoGame(wordsQuery.data ?? [], [\n          ...Object.values(entries).map((e) => e.keyword),\n          ...palavreadoHistory.used,\n        ]),\n      };\n    }\n    return entries;\n  }, [wordsQuery, palavreadoHistory, batchSize]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    console.count('Creating Artista...');\n    let lastDate = artistaHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyArtistaEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      const availableCardsIds = Object.keys(arteRuimCardsQuery.data ?? {}).filter(\n        (cardId) => !arteRuimHistory.used.includes(cardId)\n      );\n      const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCardsQuery.data[cardId]);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'artista',\n        number: artistaHistory.latestNumber + i + 1,\n        cards,\n      };\n    }\n    return entries;\n  }, [arteRuimCardsQuery, arteRuimHistory, artistaHistory, batchSize]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n      };\n    });\n  }, [arteRuimEntries, aquiOEntries, palavreadoEntries, artistaEntries]);\n\n  return {\n    isLoading: areDrawingsLoading || historyQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","// Ant Design Resources\nimport { TableColumnsType, Table, Button, Flex, Space } from 'antd';\n// Components\n\nimport { UseLoadDailySetup, useSaveDailySetup } from './hooks';\n\nimport { DailyEntry } from './utils/types';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { ArteRuimCard } from 'types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { LANGUAGES } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={LANGUAGES}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[5, 15, 30, 45]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(2);\n  const [batchSize, setBatchSize] = useState(45);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 1418;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '',\n  DETERMINISTIC: '+',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n    ...sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED),\n    ...sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","FilterSegments","block","option","title","icon","DataLoadingWrapper","tip","message","description","type","showIcon","Sprite","id","source","padding","getUrl","useBaseUrl","data","useQuery","queryKey","queryFn","async","response","fetch","text","enabled","paddedWidth","height","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","AlienSign","Emoji","emojiId","startsWith","getSource","memoize","str","match","numId","parseInt","glyphId","sourceId","Math","ceil","Glyph","itemId","Item","library","baseUrl","folder","process","path","join","getDocQueryFunction","docId","console","log","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useTDResource","resourceName","query","res","json","isEmpty","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","useDailyHistoryQuery","notification","App","historyQuery","useEffect","isSuccess","printFirebase","placement","getToday","moment","format","getNextDay","dateString","add","usedWords","getNewWord","words","keyword","selectedWords","index","usedLetters","uniq","flatMap","word","split","shortList","shuffle","filter","includes","sortBy","intersection","length","shuffleLetters","letters","preservedIndexes","otherLetters","_","shuffledLetters","i","push","shift","generatePalavreadoGame","previouslyUsedWords","difference","pop","newWord","useParsedHistory","key","history","useMemo","latestDate","latestNumber","used","JSON","parse","useLoadDailySetup","queryLanguage","drawingsCount","batchSize","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Array","fill","Boolean","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","arteRuimHistory","arteRuimEntries","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","dataDrawing","cardId","drawing","trim","warn","undefined","language","number","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","sampleSize","lastDate","aquiOSetsQuery","aquiOHistory","aquiOEntries","completeSets","setEntry","itemsIds","notUsedSets","setId","wordsQuery","wordLength","selected","useLoadWordLibrary","palavreadoHistory","palavreadoEntries","arteRuimCardsQuery","artistaHistory","artistaEntries","availableCardsIds","keys","cards","arteRuim","palavreado","artista","CanvasSVG","strokeWidth","konvaLines","paths","lineArr","strokeWidthBySize","small","medium","large","xmlns","overflow","d","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","card","save","isPending","queryClient","useQueryClient","setIsDirty","useState","mutation","useMutation","mutationFn","saves","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","mutateAsync","useSaveDailySetup","justify","align","onClick","loading","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","LANGUAGES","hasSider","PageSider","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","indexOf","fromPairs","deserializeFirebaseData","serializeFirebaseData","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","cloneDeep","merge","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","slice","filterMessage","showUnclear","showUnrelated"],"sourceRoot":""}