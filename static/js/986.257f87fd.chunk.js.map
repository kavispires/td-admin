{"version":3,"file":"static/js/986.257f87fd.chunk.js","mappings":"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","sources":["components/Daily/utils/constants.ts","components/Daily/utils/utils.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getToday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getToday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getToday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { sampleSize, shuffle } from 'lodash';\nimport { useMemo } from 'react';\nimport { AquiOSet, ArteRuimCard } from 'types';\n\nimport { QueryKey, useQuery } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport {\n  DailyAquiOEntry,\n  DailyArtistaEntry,\n  DailyEntry,\n  DailyHistory,\n  DailyPalavreadoEntry,\n  DataDrawing,\n} from '../utils/types';\nimport { getNextDay } from '../utils/utils';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  // arteRuimHistory: ParsedDailyHistoryEntry;\n  // round5sample: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  const { notification } = App.useApp();\n\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    enabled,\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    console.log('Creating Arte Ruim...');\n    const drawings = (drawingsQuery ?? []).reduce(\n      (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n        const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n        Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n          if (dataDrawing.drawing.trim().length < 10) {\n            console.log('Empty drawing', dataDrawing.cardId);\n            return acc;\n          }\n          if (acc[dataDrawing.cardId] === undefined) {\n            acc[dataDrawing.cardId] = {\n              id: dataDrawing.cardId,\n              type: 'arte-ruim',\n              language: queryLanguage ?? 'pt',\n              cardId: dataDrawing.cardId,\n              text: dataDrawing.text,\n              drawings: [dataDrawing.drawing],\n              number: 0,\n              dataIds: [key],\n            };\n          } else {\n            acc[dataDrawing.cardId].drawings.push(dataDrawing.drawing);\n            acc[dataDrawing.cardId].dataIds.push(key);\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const atLeastTwoDrawingsList = Object.values(drawings).filter(\n      (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n    );\n\n    const shortList = Object.values(atLeastTwoDrawingsList).filter(\n      (e) => !arteRuimHistory.used.includes(e.cardId)\n    );\n\n    const shuffledShortList = sampleSize(shuffle(shortList), batchSize);\n\n    let lastDate = arteRuimHistory.latestDate;\n\n    return shuffledShortList.map((e, index) => {\n      const id = getNextDay(lastDate);\n\n      lastDate = id;\n      return {\n        ...e,\n        id,\n        number: arteRuimHistory.latestNumber + index + 1,\n      };\n    });\n  }, [drawingsQuery, queryLanguage, arteRuimHistory, batchSize, drawingsCount]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<AquiOSet>('aqui-o-sets');\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    console.log('Creating Aqui Ó...');\n    // Filter complete sets only\n    const completeSets = shuffle(\n      Object.values(aquiOSetsQuery.data).filter((setEntry) => setEntry.itemsIds.length >= 20)\n    );\n    // Filter not-used sets only\n    let notUsedSets = completeSets.filter((setEntry) => !aquiOHistory.used.includes(setEntry.id));\n\n    if (notUsedSets.length < batchSize) {\n      notUsedSets.push(...shuffle(completeSets));\n    }\n\n    let lastDate = aquiOHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyAquiOEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const setEntry = notUsedSets[i];\n      if (!setEntry) {\n        break;\n      }\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: aquiOHistory.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n\n    return entries;\n  }, [aquiOSetsQuery, aquiOHistory, batchSize]);\n\n  // STEP 4: Palavreado\n  const wordsQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    console.log('Creating Palavreado...');\n    let lastDate = palavreadoHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyPalavreadoEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const words = sampleSize(wordsQuery.data, 4);\n      const letters = shuffle(words.join('').split(''));\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'palavreado',\n        number: palavreadoHistory.latestNumber + i + 1,\n        words,\n        letters,\n      };\n    }\n    return entries;\n  }, [wordsQuery, palavreadoHistory, batchSize]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    console.log('Creating Artista...');\n    let lastDate = artistaHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyArtistaEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      const availableCardsIds = Object.keys(arteRuimCardsQuery.data ?? {}).filter(\n        (cardId) => !arteRuimHistory.used.includes(cardId)\n      );\n      const cards = sampleSize(availableCardsIds, 12).map((cardId) => arteRuimCardsQuery.data[cardId]);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'artista',\n        number: artistaHistory.latestNumber + i + 1,\n        cards,\n      };\n    }\n    return entries;\n  }, [arteRuimCardsQuery, arteRuimHistory, artistaHistory, batchSize]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    console.log('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n      };\n    });\n  }, [arteRuimEntries, aquiOEntries, palavreadoEntries, artistaEntries]);\n\n  return {\n    isLoading: areDrawingsLoading || historyQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled: enabled,\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Suffix Counts loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading suffix counts',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { QueryKey, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry, DailyHistory, DataSuffixCounts } from '../utils/types';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>(source, 'history'),\n    enabled: Boolean(source),\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  const mutation = useMutation<any, Error, DailyEntry[], QueryKey>(\n    async (data) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data as DailyHistory;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: '[]',\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n    {\n      onSuccess: () => {\n        notification.info({\n          message: 'Data saved',\n          placement: 'bottomLeft',\n        });\n        queryClient.invalidateQueries([source, 'history']);\n        setIsDirty(false);\n      },\n      onError: () => {\n        notification.error({\n          message: 'Error saving data',\n          placement: 'bottomLeft',\n        });\n      },\n    }\n  );\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isLoading: mutation.isLoading,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, useQuery } from '@tanstack/react-query';\n\nimport { DailyHistory, DataSuffixCounts } from '../utils/types';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>(source, 'history'),\n    enabled,\n    onSuccess: (data) => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n\n  // useQuery<any, Error, string[], QueryKey>({\n  //   queryKey: [source, 'allDocs'],\n  //   queryFn: async () => {\n  //     const querySnapshot = await getDocs(collection(firestore, source));\n  //     const ids: string[] = [];\n  //     querySnapshot.forEach((doc) => {\n  //       const snapshot = doc.data() as DailyEntry;\n  //       console.log('Getting', snapshot.id);\n  //       if (snapshot.dataIds) {\n  //         ids.push(...snapshot.dataIds.map((e) => e.split('::')[0]));\n  //       }\n  //     });\n  //     return removeDuplicates(ids);\n  //   },\n  //   enabled: Boolean(historyQuery.data?.used),\n  //   onSuccess: (data) => {\n  //     const history = historyQuery.data as DailyHistory;\n\n  //     mutation.mutateAsync({\n  //       ...history,\n  //       used: data,\n  //     });\n  //   },\n  // });\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('tdi');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'tdr' | 'tdi' | 'tdi-data') {\n  let baseUrl: string | undefined = '';\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'tdi':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_IMAGES;\n      break;\n    case 'tdi-data':\n      baseUrl = process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TDI_DATA;\n      break;\n    default:\n      baseUrl =\n        process.env.NODE_ENV === 'development'\n          ? process.env.REACT_APP_LOCAL_URL\n          : process.env.REACT_APP_TD_BASE_URL;\n      folder = process.env.REACT_APP_TD_RESOURCES;\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: UseQueryOptions<any, Error, TData, QueryKey>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? {},\n    hasResponseData,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 1418;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '',\n  DETERMINISTIC: '+',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n    ...sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED),\n    ...sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n"],"names":["LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","getToday","moment","format","getNextDay","dateString","add","useParsedHistory","key","data","history","useMemo","latestDate","latestNumber","used","JSON","parse","useLoadDailySetup","enabled","queryLanguage","drawingsCount","batchSize","notification","App","source","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","onSuccess","info","message","placement","onError","error","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Array","fill","map","_","index","Boolean","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","arteRuimEntries","console","log","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","dataDrawing","drawing","trim","length","cardId","undefined","id","type","language","text","number","dataIds","push","atLeastTwoDrawingsList","values","filter","e","includes","shortList","shuffledShortList","sampleSize","shuffle","lastDate","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","completeSets","setEntry","itemsIds","notUsedSets","i","setId","title","wordsQuery","wordLength","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","hasResponseData","isEmpty","useLoadWordLibrary","palavreadoHistory","palavreadoEntries","words","letters","join","split","arteRuimCardsQuery","artistaHistory","artistaEntries","availableCardsIds","keys","cards","arteRuim","palavreado","artista","useSaveDailySetup","queryClient","useQueryClient","isDirty","setIsDirty","useState","mutation","useMutation","saves","entry","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","save","mutateAsync","useTempDaily","mutationFn","DataLoadingWrapper","isIdle","children","tip","className","description","showIcon","Sprite","width","padding","isError","response","paddedWidth","style","height","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","AlienSign","clsx","Emoji","emojiId","startsWith","getSource","memoize","str","match","numId","parseInt","glyphId","sourceId","Math","ceil","Glyph","itemId","Item","library","baseUrl","folder","process","path","docId","getCurrentDateTime","getDoc","useGetFirebaseDoc","options","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","value","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","sortBy","indexOf","fromPairs","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","cloneDeep","merge","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","slice","filterMessage","showUnclear","showUnrelated"],"sourceRoot":""}