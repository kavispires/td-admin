{"version":3,"file":"static/js/ImageCardsRelationships.f21f135f.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","components/Images/ImageCard.tsx","components/Images/ImageCards/ImagesRelationshipsContext.tsx","components/Images/ImageCards/RelationshipCountTag.tsx","components/Images/ImageCards/RelationshipsStats.tsx","components/Images/ImageCards/hooks.ts","components/Images/ImageCards/constants.ts","hooks/useQueryParams.ts","components/Images/ImageCards/RelationshipsContent.tsx","components/Images/ImageCards/RelationshipsFilters.tsx","pages/Images/ImageCardsRelationships.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { ReactNode, useContext, createContext, useState } from 'react';\nimport {\n  UseImageCardsRelationshipDataReturnValue,\n  UseRandomGroupReturnValue,\n  useImageCardsRelationshipData,\n  useRandomGroups,\n} from './hooks';\n\nexport type ImagesRelationshipsContextType = {\n  sampleSize: number;\n  setSampleSize: (size: number) => void;\n  tagThreshold: number;\n  setTagThreshold: (threshold: number) => void;\n  cardSize: number;\n  setCardSize: (size: number) => void;\n  showIds: boolean;\n  setShowIds: (show: boolean) => void;\n  randomGroups: UseRandomGroupReturnValue;\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nconst ImagesRelationshipsContext = createContext<ImagesRelationshipsContextType | PlainObject>({});\n\ntype ImagesRelationshipsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ImagesRelationshipsProvider = ({ children }: ImagesRelationshipsProviderProps) => {\n  const query = useImageCardsRelationshipData();\n\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(150);\n  const [showIds, setShowIds] = useState(false);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const randomGroups = useRandomGroups(query.data, query.setDirty, sampleSize, tagThreshold);\n\n  return (\n    <ImagesRelationshipsContext.Provider\n      value={{\n        sampleSize,\n        setSampleSize,\n        tagThreshold,\n        setTagThreshold,\n        cardSize,\n        setCardSize,\n        showIds,\n        setShowIds,\n        randomGroups,\n        query,\n      }}\n    >\n      {children}\n    </ImagesRelationshipsContext.Provider>\n  );\n};\n\nexport const useImagesRelationshipsContext = () => useContext(ImagesRelationshipsContext);\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","import { BarChartOutlined } from '@ant-design/icons';\nimport { Form, Avatar } from 'antd';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\n\nexport function RelationshipsStats() {\n  const {\n    query: { stats },\n  } = useImagesRelationshipsContext();\n\n  return (\n    <Form.Item\n      label={\n        <>\n          <Avatar icon={<BarChartOutlined />} shape=\"square\" size=\"small\" style={{ marginRight: 6 }} />\n          Stats\n        </>\n      }\n    >\n      <ul className=\"statistic__list\">\n        <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n        <li>Total Relationships: {stats.total}</li>\n        <li>Complete: {stats.complete}</li>\n        <li>Overdone: {stats.overdone}</li>\n        <li>Single Match: {stats.single}</li>\n      </ul>\n    </Form.Item>\n  );\n}\n","import { App } from 'antd';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { cloneDeep, merge, padStart, random } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { firestore, printFirebase } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { UseMutateFunction, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { CARDS_PER_DECK, DEFAULT_ENTRY, TOTAL_DECKS } from './constants';\nimport { FirebaseImageCardLibrary, ImageCardData, ImageCardRelationship } from './types';\nimport { cleanupData } from './utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nconst getRandomCardNumber = () => padStart(String(random(1, CARDS_PER_DECK)), 2, '0');\n\nconst getRandomDeck = () => random(1, TOTAL_DECKS);\n\nconst getRandomCardId = () => `td-d${getRandomDeck()}-${getRandomCardNumber()}`;\n\nexport type UseRandomCardReturnValue = {\n  cardId: string;\n  deck: number;\n  onRandomCard: () => void;\n  card: ImageCardData;\n  add: (key: keyof ImageCardData, value: string) => void;\n  remove: (key: keyof ImageCardData, value: string) => void;\n  update: (key: keyof ImageCardData, value: string[]) => void;\n  toggleHighlight: () => void;\n};\n\nexport function useRandomCard(\n  cardData: FirebaseImageCardLibrary,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n): UseRandomCardReturnValue {\n  const [deck, setDeck] = useState(getRandomDeck());\n  const [cardNumber, setCardNumber] = useState(getRandomCardNumber());\n  const cardId = `td-d${deck}-${cardNumber}`;\n\n  const onRandomCard = () => {\n    setDeck(getRandomDeck());\n    setCardNumber(getRandomCardNumber());\n  };\n\n  const card = merge(cloneDeep(DEFAULT_ENTRY), cardData?.[cardId] ?? {});\n\n  const add = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      card[key]!.push(value);\n      setDirty(true);\n    }\n  };\n\n  const remove = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      const entry = card[key] ?? [];\n      entry.splice(entry.indexOf(value), 1);\n      setDirty(true);\n    }\n  };\n\n  const update = (key: keyof ImageCardData, value: string[]) => {\n    if (key !== 'highlight') {\n      card[key] = value.map((v) => v.trim().toLowerCase());\n      setDirty(true);\n    }\n  };\n\n  const toggleHighlight = () => {\n    card.highlight = !card.highlight;\n    setDirty(true);\n  };\n\n  useEffect(() => {\n    cardData[cardId] = card;\n  }, [card]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    cardId,\n    deck,\n    onRandomCard,\n    card,\n    add,\n    remove,\n    update,\n    toggleHighlight,\n  };\n}\n\nexport function useImageCardsData() {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCards'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    refetch,\n  } = useQuery<any>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as FirebaseImageCardLibrary;\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      printFirebase('Loaded data/imageCards');\n    }\n  }, [isSuccess]);\n\n  useEffect(() => {\n    if (isError) {\n      notification.error({\n        message: 'Error loading data/imageCards',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, FirebaseImageCardLibrary, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const cleanData = cleanupData(data);\n      await setDoc(docRef, cleanData);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n  };\n}\n\nexport function useRandomCards(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n) {\n  const [deckA, setDeckA] = useState(getRandomDeck());\n  const [cardNumberA, setCardNumberA] = useState(getRandomCardNumber());\n  const [deckB, setDeckB] = useState(getRandomDeck());\n  const [cardNumberB, setCardNumberB] = useState(getRandomCardNumber());\n  const cardAId = `td-d${deckA}-${cardNumberA}`;\n  const cardBId = `td-d${deckB}-${cardNumberB}`;\n  const [unrelatedCount, setUnrelatedCount] = useState(0);\n  const { queryParams } = useQueryParams();\n  const unrelatedThreshold = Number(queryParams.get('cycle') ?? 3);\n\n  const cardA = cardData?.[cardAId] ?? [];\n  const cardB = cardData?.[cardBId] ?? [];\n\n  const onRandomCards = () => {\n    setUnrelatedCount(0);\n    setDeckA(getRandomDeck());\n    setCardNumberA(getRandomCardNumber());\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const relate = () => {\n    setUnrelatedCount(0);\n    cardA.push(cardBId);\n    cardData[cardAId] = removeDuplicates(cardA);\n    cardB.push(cardAId);\n    cardData[cardBId] = removeDuplicates(cardB);\n    setDirty(true);\n    setDeckA(deckB);\n    setCardNumberA(cardNumberB);\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const unrelate = () => {\n    if (unrelatedCount >= unrelatedThreshold) {\n      setUnrelatedCount(0);\n      onRandomCards();\n    } else {\n      setUnrelatedCount((ps) => ps + 1);\n      setDeckB(getRandomDeck());\n      setCardNumberB(getRandomCardNumber());\n    }\n  };\n\n  useEffect(() => {\n    if (cardAId === cardBId) {\n      setCardNumberB(getRandomCardNumber());\n    }\n  }, [cardAId, cardBId]);\n\n  return {\n    cardAId,\n    cardA,\n    cardBId,\n    cardB,\n    relate,\n    unrelate,\n    areRelated: cardA.includes(cardBId),\n    onRandomCards,\n  };\n}\n\ntype Stats = {\n  total: number;\n  overdone: number;\n  complete: number;\n  single: number;\n};\n\nexport type UseImageCardsRelationshipDataReturnValue = {\n  data: ImageCardRelationship;\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  error: Error | null;\n  hasData: boolean;\n  refetch: () => void;\n  isSaving: boolean;\n  isMutationError: boolean;\n  isSaved: boolean;\n  save: UseMutateFunction<{}, unknown, ImageCardRelationship, unknown>;\n  setDirty: (value: React.SetStateAction<boolean>) => void;\n  isDirty: boolean;\n  stats: Stats;\n};\n\nexport function useImageCardsRelationshipData(): UseImageCardsRelationshipDataReturnValue {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCardsRelationships'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n  const [stats, setStats] = useState<Stats>({ total: 0, overdone: 0, complete: 0, single: 0 });\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    isFetched,\n    isRefetching,\n    refetch,\n  } = useQuery<Record<string, string[]>>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as ImageCardRelationship;\n    },\n  });\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, ImageCardRelationship, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n\n      await setDoc(docRef, data);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  useEffect(() => {\n    if (!isRefetching && isFetched) {\n      const total = Object.keys(data).length;\n      let overdone = 0;\n      let complete = 0;\n      let single = 0;\n      Object.values(data).forEach((v) => {\n        if (v.length > 8) {\n          overdone += 1;\n        }\n        if (v.length === 1) {\n          single += 1;\n        }\n        if (v.length > 2) {\n          complete += 1;\n        }\n      });\n      setStats({ total, overdone, complete, single });\n    }\n  }, [isFetched, isRefetching]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n    stats,\n  };\n}\n\nexport type UseRandomGroupReturnValue = {\n  cardIds: string[];\n  cards: string[][];\n  selection: string[];\n  onSelect: (id: string) => void;\n  relate: () => void;\n  nextSet: () => void;\n  deselectAll: () => void;\n  cycles: number;\n  filters: { useCycles: boolean; toggleUseCycles: () => void };\n};\n\nexport function useRandomGroups(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n  sampleSize: number,\n  tagThreshold: number\n): UseRandomGroupReturnValue {\n  const [cardIds, setCardIds] = useState<string[]>([]);\n  const [cards, setCards] = useState<string[][]>([]);\n  const [cycledCards, setCycleCards] = useState<string[]>([]);\n  const [cycles, setCycles] = useState(0);\n  const [filterUseCycles, setFIlterUseCycles] = useState(true);\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  const updateCards = (ids?: string[]) => {\n    setCards((ids ?? cardIds).map((id) => cardData?.[id] ?? []));\n  };\n\n  const onRandomCards = () => {\n    // setSelection([]);\n    const ids: string[] = [...selection];\n    let cycleCount = 0;\n    const cycledCardsSample = cycledCards.length < 2000 ? cycledCards : [];\n\n    // Avoid infinite loop failsafe\n    let tries = 0;\n    while (tries < 400 && ids.length < sampleSize) {\n      const id = getRandomCardId();\n      const card = cardData[id] ?? [];\n      const isNew = tagThreshold > 0 ? card.length < tagThreshold : true;\n      const isCycled = filterUseCycles ? cycledCardsSample.includes(id) : false;\n      if (!ids.includes(id) && !isCycled && isNew) {\n        ids.push(id);\n        cycleCount += 1;\n      }\n      tries += 1;\n    }\n    setCardIds(ids);\n    setCycleCards((pv) => [...pv, ...ids]);\n    updateCards(ids);\n    setCycles((ps) => ps + cycleCount);\n  };\n\n  // On Load get sample of cards\n  useEffect(() => {\n    if (cardIds.length === 0) {\n      onRandomCards();\n    }\n  }, [cardIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Selects or deselects a card\n   */\n  const onSelect = (id: string) => {\n    setSelection((ps) => {\n      const copy = [...ps];\n      const index = copy.indexOf(id);\n      if (index > -1) {\n        copy.splice(index, 1);\n      } else {\n        copy.push(id);\n      }\n      return copy;\n    });\n  };\n\n  /**\n   * Relates all selected cards in the selection array\n   */\n  const relate = () => {\n    selection.forEach((id) => {\n      const card = cardData[id] ?? [];\n\n      card.push(...selection.filter((s) => s !== id));\n      cardData[id] = removeDuplicates(card);\n    });\n    setDirty(true);\n    setSelection([]);\n    updateCards();\n    setCycleCards([]);\n    setCycles(0);\n  };\n\n  /**\n   * Deselects all cards\n   */\n  const deselectAll = () => {\n    setSelection([]);\n  };\n\n  const toggleFilterUseCycles = () => {\n    setFIlterUseCycles((ps) => !ps);\n  };\n\n  return {\n    cardIds,\n    cards,\n    selection,\n    onSelect,\n    relate,\n    nextSet: onRandomCards,\n    deselectAll,\n    cycles,\n    filters: {\n      useCycles: filterUseCycles,\n      toggleUseCycles: toggleFilterUseCycles,\n    },\n  };\n}\n","import { ImageCardData } from './types';\n\nexport const TOTAL_DECKS = 12;\n\nexport const CARDS_PER_DECK = 252;\n\nexport const SUGGESTED_MOODS = [\n  'anxious',\n  'bright',\n  'chaotic',\n  'colorful',\n  'confusion',\n  'cozy',\n  'creepy',\n  'dark',\n  'dramatic',\n  'dreamy',\n  'fear',\n  'gloomy',\n  'happy',\n  'intense',\n  'magical',\n  'melancholic',\n  'muted',\n  'mysterious',\n  'professional',\n  'reflective',\n  'scary',\n  'serene',\n  'surreal',\n  'tension',\n  'vibrant',\n  'warm',\n  'whimsical',\n];\n\nexport const SUGGESTED_COLORS = [\n  'beige',\n  'black',\n  'blue',\n  'brown',\n  'colorful',\n  'gray',\n  'green',\n  'mixed',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'white',\n  'yellow',\n];\n\nexport const DEFAULT_ENTRY: ImageCardData = {\n  focus: [],\n  actions: [],\n  colors: [],\n  mood: [],\n  elements: [],\n  highlight: false,\n};\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { isEmpty } from 'lodash';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { Card, FloatButton, Image, Tag } from 'antd';\nimport {\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { ImageCard } from '../ImageCard';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { TransparentButton } from 'components/Common';\nimport { useMemo, useRef } from 'react';\nimport { useMeasure } from 'react-use';\n\nexport function RelationshipsContent() {\n  const {\n    query: { isDirty, isSaving, save, stats, ...query },\n    randomGroups: { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles },\n    showIds,\n    cardSize,\n  } = useImagesRelationshipsContext();\n\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const [cardQuantity, cardWidth] = useMemo(() => {\n    const cq = Math.floor(containerWidth / cardSize) + 1;\n    const cw = Math.floor(containerWidth / cq);\n    return [cq, cw];\n  }, [cardSize, containerWidth]);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={query.isLoading}\n      error={query.error}\n      hasResponseData={!isEmpty(query.data)}\n    >\n      <div ref={ref} className=\"my-6\">\n        <Card\n          title=\"Card Relationship Matching\"\n          extra={\n            <span>\n              <FileImageOutlined /> {cycles}\n            </span>\n          }\n          className=\"image-card-categorizer-card\"\n          ref={cardRef}\n        >\n          <Image.PreviewGroup>\n            <div\n              className=\"image-cards-group\"\n              style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n            >\n              {cardIds.map((cardId: string, index: number) => {\n                const isSelected = selection.includes(cardId);\n                const card = cards[index];\n\n                return (\n                  <div className=\"image-card-card__image\" key={cardId}>\n                    <TransparentButton\n                      onClick={() => onSelect(cardId)}\n                      active={isSelected}\n                      className=\"image-cards-group__button\"\n                      activeClass=\"image-cards-group__button--active\"\n                    >\n                      <ImageCard id={cardId} width={cardWidth - 24} preview={false} />\n                      <div>\n                        {showIds && <Tag>{cardId}</Tag>}\n                        {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                        <RelationshipCountTag card={card} />\n                      </div>\n                    </TransparentButton>\n                  </div>\n                );\n              })}\n            </div>\n          </Image.PreviewGroup>\n          <Actions\n            isSaving={isSaving}\n            isDirty={isDirty}\n            selection={selection}\n            relate={relate}\n            deselectAll={deselectAll}\n            onNextSet={onNextSet}\n          />\n        </Card>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    // </FloatButton.Group>\n    (<>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>)\n  );\n};\n","import { Flex } from 'antd';\nimport { FilterSelect, FilterSwitch, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\nimport { CARD_SIZE_OPTIONS, SAMPLE_SIZE_OPTIONS, TAGS_SELECTOR_OPTIONS } from 'utils/constants';\n\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipsStats } from './RelationshipsStats';\n\nexport function RelationshipsFilters() {\n  const {\n    query: { isDirty, isSaving, save, data, isLoading, isError },\n    randomGroups: { filters },\n    showIds,\n    setShowIds,\n    tagThreshold,\n    setTagThreshold,\n    sampleSize,\n    setSampleSize,\n    cardSize,\n    setCardSize,\n  } = useImagesRelationshipsContext();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Flex vertical gap={6}>\n          <SaveButton\n            isDirty={isDirty}\n            dirt={JSON.stringify(data)}\n            onSave={() => save({})}\n            isSaving={isSaving}\n          />\n\n          <DownloadButton\n            data={data}\n            fileName=\"imageCardsRelationships.json\"\n            loading={isSaving}\n            disabled={isEmpty(data)}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <FilterSwitch\n          label=\"Use Cycles\"\n          value={filters.useCycles}\n          onChange={() => filters.toggleUseCycles()}\n        />\n\n        <FilterSwitch label=\"Show Ids\" value={showIds} onChange={(c) => setShowIds(c)} />\n\n        <FilterSelect\n          onChange={(value) => setTagThreshold(value)}\n          value={tagThreshold}\n          options={TAGS_SELECTOR_OPTIONS}\n          label=\"Tag Count\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setSampleSize(value)}\n          value={sampleSize}\n          options={SAMPLE_SIZE_OPTIONS}\n          label=\"Sample Size\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setCardSize(value)}\n          value={cardSize}\n          options={CARD_SIZE_OPTIONS}\n          label=\"Card Size\"\n        />\n      </SiderContent>\n\n      <SiderContent>\n        <RelationshipsStats />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { ImagesRelationshipsProvider } from 'components/Images/ImageCards/ImagesRelationshipsContext';\nimport { RelationshipsContent } from 'components/Images/ImageCards/RelationshipsContent';\nimport { RelationshipsFilters } from 'components/Images/ImageCards/RelationshipsFilters';\n\nimport { PageLayout } from 'components/Layout';\n\nfunction ImageCardsRelationships() {\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Relationships\">\n      <ImagesRelationshipsProvider>\n        <Layout hasSider>\n          <RelationshipsFilters />\n\n          <Layout.Content className=\"content\">\n            <RelationshipsContent />\n          </Layout.Content>\n        </Layout>\n      </ImagesRelationshipsProvider>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsRelationships;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","ImageCard","id","width","className","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","clsx","src","fallback","ImagesRelationshipsContext","createContext","ImagesRelationshipsProvider","children","query","useImageCardsRelationshipData","sampleSize","setSampleSize","useState","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","randomGroups","useRandomGroups","data","setDirty","Provider","value","useImagesRelationshipsContext","useContext","RelationshipCountTag","card","color","length","undefined","RelationshipsStats","stats","label","shape","style","marginRight","Math","floor","total","complete","overdone","single","getRandomCardNumber","padStart","String","random","getRandomDeck","useRandomCards","cardData","deckA","setDeckA","cardNumberA","setCardNumberA","deckB","setDeckB","cardNumberB","setCardNumberB","cardAId","cardBId","unrelatedCount","setUnrelatedCount","queryParams","useQueryParams","unrelatedThreshold","Number","get","cardA","cardB","onRandomCards","relate","push","removeDuplicates","unrelate","ps","areRelated","includes","queryKey","queryClient","useQueryClient","notification","App","setStats","isLoading","isSuccess","isError","error","isFetched","isRefetching","refetch","useQuery","queryFn","async","docRef","doc","firestore","getDoc","isPending","isMutationError","isSaved","mutate","save","useMutation","mutationKey","mutationFn","setDoc","onSuccess","success","placement","refetchQueries","Object","keys","values","forEach","v","hasData","cardIds","setCardIds","cards","setCards","cycledCards","setCycleCards","cycles","setCycles","filterUseCycles","setFIlterUseCycles","selection","setSelection","updateCards","ids","map","cycleCount","cycledCardsSample","tries","isNew","isCycled","pv","onSelect","copy","index","indexOf","splice","filter","s","nextSet","deselectAll","filters","useCycles","toggleUseCycles","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","has","RelationshipsContent","cardRef","useRef","ref","containerWidth","useMeasure","cardQuantity","cardWidth","useMemo","cq","DataLoadingWrapper","hasResponseData","isEmpty","title","extra","FileImageOutlined","gridTemplateColumns","max","cardId","isSelected","active","activeClass","Actions","onNextSet","current","scrollIntoView","behavior","LoadingOutlined","WarningOutlined","right","ExpandOutlined","ForkOutlined","badge","count","SyncOutlined","RelationshipsFilters","vertical","gap","JSON","stringify","DownloadButton","fileName","onChange","c","options","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","subtitle","hasSider"],"sourceRoot":""}