{"version":3,"file":"static/js/DailySetup.79890fbc.chunk.js","mappings":"kIAKA,MA0CaA,EAAY,IAOF,IAAD,QAPI,QACxBC,EAAU,GADc,UAExBC,EAAY,GAFY,MAGxBC,EAAQ,IAHgB,OAIxBC,EAJwB,YAKxBC,EAAc,SALU,QAMxBC,EAAU,eACU,EACpB,MAAMC,EAAaC,KAAKC,MAAMR,GACxBS,EAA8BH,EAlDfI,KAAKC,IACxB,IAAIC,EAAO,GACX,IAAK,IAAIC,EAAI,EAAGC,EAAI,EAAGA,EAAIH,EAAQI,OAAQF,GAAK,EAAGC,GAAK,EAClDH,EAAQE,EAAI,IAAMF,EAAQG,EAAI,KAChCF,GAAI,WAAQD,EAAQE,GAAhB,YAAsBF,EAAQG,GAA9B,aAAqCH,EAAQE,EAAI,GAAjD,YAAuDF,EAAQG,EAAI,KAI3E,OAAOF,CAAP,IA4CF,MAAMI,EAAiB,oBACrB,CACEC,MAAO,EACPC,OAAQ,EACRC,MAAO,UAJY,aACrB,EAIIf,UALiB,QAKD,EAEtB,OACE,iBACEgB,MAAM,6BACNf,QAASA,EACTgB,SAAS,SACTpB,UAAWA,EACXqB,MAAO,CAAEpB,MAAM,GAAD,OAAKA,EAAL,MAAgBC,OAAO,GAAD,OAAKA,GAAUD,EAAf,OALtC,WAOE,oBACCO,EAAMC,KAAI,CAACE,EAAMW,KAChB,iBAEEC,EAAGZ,EACHa,KAAK,OACLC,OAAO,OACPtB,YAAaY,EACbW,cAAc,QACdC,eAAe,QACfC,iBAAiB,MARnB,UACU7B,EADV,YACqBuB,QAX3B,C,iGCxDK,SAASO,EACdC,GAEC,IADDC,EACA,uDAD0F,CAAC,EAE3F,MAAM,aAAEC,GAAiBC,EAAAA,EAAAA,SAEnBC,GAAeC,EAAAA,EAAAA,IAAQ,QAC3BC,SAAU,CAACN,EAAQ,WACnBO,SAASC,EAAAA,EAAAA,GAAkCR,EAAQ,YAChDC,IAmBL,OAhBAQ,EAAAA,EAAAA,YAAU,KACJL,EAAaM,YACfC,EAAAA,EAAAA,IAAc,uBACf,GACA,CAACP,EAAaM,aAGjBD,EAAAA,EAAAA,YAAU,KACJL,EAAaQ,SACfV,EAAaW,MAAM,CACjBC,QAAS,8BACTC,UAAW,cAEd,GACA,CAACX,EAAaQ,UAEVR,CACR,C,0DClCM,SAASY,EACdC,EACAC,GAEA,MAAMC,GAAUC,EAAAA,EAAAA,UACd,mCACEF,QADF,IACEA,OADF,EACEA,EAAOD,UADT,QACiB,CACbI,YAAYC,EAAAA,EAAAA,MACZC,aAAc,EACdC,KAAM,KAJV,GAMA,CAACN,EAAMD,IAWT,MAAO,EARwCG,EAAAA,EAAAA,UAAQ,KAAO,IAAD,MAC3D,MAAO,CACLG,aAAY,iBAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAASI,oBAAX,QAA2B,EACvCF,WAAU,iBAAEF,QAAF,IAAEA,OAAF,EAAEA,EAASE,kBAAX,SAAyBC,EAAAA,EAAAA,MACnCE,KAAMhD,KAAKC,MAAL,iBAAW0C,QAAX,IAAWA,OAAX,EAAWA,EAASK,YAApB,QAA4B,MAHpC,GAKC,CAACL,IAEmBA,EACxB,C,0CC3BM,MAAMM,EAAkB,CAC7BC,YAAa,CACXC,GAAI,aACJC,GAAI,cAENC,MAAO,CACLF,GAAI,SACJC,GAAI,UAIKE,EAAmB,CAC9BC,UAAW,YACXC,QAAS,UACTC,OAAQ,SACRC,uBAAwB,yBACxBC,oBAAqB,sBACrBC,QAAS,UACTC,WAAY,aACZC,oBAAqB,sB,sFCThB,SAASC,EAAT,GAMsB,IANM,UACjCC,EADiC,OAEjCC,EAFiC,MAGjC5B,EAHiC,gBAIjC6B,EAJiC,SAKjCC,GAC0B,EAC1B,OAAKF,GAAUD,GACN,SAAC,IAAD,CAAMI,IAAI,UAAV,SAAqBD,IAG1B9B,GAEA,SAAC,YAAD,CAAgB3C,UAAU,yBAA1B,UACE,SAAC,IAAD,CAAO4C,QAAQ,QAAQ+B,YAAahC,EAAMC,QAASgC,KAAK,QAAQC,UAAQ,MAK1EN,IAA8B,IAApBC,GAEV,SAAC,YAAD,CAAgBxE,UAAU,yBAA1B,UACE,SAAC,IAAD,OAKC,8BAAGyE,GACX,C,+FCDM,SAASK,EAAT,GAAyF,IAAzE,GAAEC,EAAF,OAAMjD,EAAN,MAAc7B,EAAQ,GAAtB,QAA0B+E,EAAU,EAApC,MAAuCC,EAAvC,UAA8CjF,GAA0B,EAC7F,MAAM,OAAEkF,IAAWC,EAAAA,EAAAA,GAAW,YAExB,UAAEb,EAAF,KAAatB,EAAb,QAAmBN,IAAYP,EAAAA,EAAAA,GAAS,CAC5CC,SAAU,CAAC,SAAUN,GACrBO,QAAS+C,UACP,MAAMC,QAAiBC,MAAM,GAAD,OAAIJ,EAAO,WAAX,YAAyBpD,EAAzB,SAC5B,aAAauD,EAASE,MAAtB,EAEFC,UAAWT,KAAQjD,IAGf2D,EAAcxF,EAAQ,GAE5B,GAAIqE,EACF,OACE,iBACEjD,MAAO,CACLpB,MAAM,GAAD,OAAKwF,EAAL,MACLvF,OAAO,GAAD,OAAKuF,EAAL,MACNT,UACAU,QAAS,OACTC,WAAY,UAEd3F,UAAWA,EARb,UAUE,SAAC,IAAD,MAKN,MAAM4F,EAAa5C,EAEnB,OAAIN,IAAYkD,GAEZ,iBACEvE,MAAO,CACLpB,MAAM,GAAD,OAAKwF,EAAL,MACLvF,OAAO,GAAD,OAAKuF,EAAL,MACNT,UACAU,QAAS,OACTC,WAAY,UAEd3F,UAAWA,EARb,UAUE,SAAC,IAAD,OAMJ,iBACEI,QAAQ,cACRiB,MAAO,CAAEpB,MAAM,GAAD,OAAKwF,EAAL,MAAsBvF,OAAO,GAAD,OAAKuF,EAAL,MAAsBT,WAChEhF,UAAWA,EAHb,WAKE,gBAAK6F,UAAS,WAAMd,GAAMe,wBAAyB,CAAEC,OAAQH,MAC7D,0BAAehF,EAAE,IAAIC,EAAE,IAAIZ,MAAM,OAAOC,OAAO,OAA/C,SACG+E,IACC,SAAC,IAAD,CAASA,MAAOA,EAAhB,UACE,gBAAK5D,MAAO,CAAE2E,WAAY,cAAe/F,MAAO,OAAQC,OAAQ,iBAM3E,C,mECjEM,SAAS+F,EAAT,GAA2E,IAApD,GAAElB,EAAF,MAAM9E,EAAQ,GAAd,UAAkBD,GAAiC,EAC/E,MAAO8B,EAAQoE,GAbSC,KACxB,MAAMC,EAAQD,EAAIC,MAAM,OAClBC,EAAQD,EAAQE,OAAOC,SAASH,EAAM,GAAI,IAAM,EAChDI,EAAM,eAAWH,GACjBI,EAZK,GAYMC,KAAKC,KAAKN,EAZhB,IAcX,MAAO,CADK,0BAAsBI,GAClBD,EAAhB,EAOyBI,CAAU7B,GAEnC,OACE,gBAAK/E,WAAW6G,EAAAA,EAAAA,GAAK,SAAU7G,GAAYqB,MAAO,CAAEpB,MAAM,GAAD,OAAKA,EAAL,MAAgBC,OAAO,GAAD,OAAKD,EAAL,OAA/E,UACE,SAAC,IAAD,CAAQ6B,OAAQA,EAAQiD,GAAImB,EAAQjG,MAAOA,KAGhD,C,+FCpBM,SAAS6G,EAAT,GAAqF,IAAlE,GAAE/B,EAAF,MAAM9E,EAAQ,GAAd,QAAkB+E,EAAU,EAA5B,UAA+BhF,EAAY,IAAsB,EACzF,OACE,gBAAKA,WAAW6G,EAAAA,EAAAA,GAAK,SAAU7G,GAAYqB,MAAO,CAAEpB,MAAM,GAAD,OAAKA,EAAL,MAAgBC,OAAO,GAAD,OAAKD,EAAL,MAAgB+E,WAA/F,UACE,gBACE5E,QAAQ,cACRiB,MAAO,CAAEpB,MAAM,GAAD,OAAKA,EAAkB,EAAV+E,EAAb,MAA8B9E,OAAO,GAAD,OAAKD,EAAkB,EAAV+E,EAAb,OAFpD,UAIE,SAACF,EAAA,EAAD,CAAQhD,OAAO,cAAciD,GAAIA,EAAI9E,MAAOA,OAInD,CCfM,SAAS8G,EAAT,GAAmE,IAApD,GAAEhC,EAAF,MAAM9E,EAAN,UAAaD,GAAsC,EACvE,MAAMgH,EAAUjC,EAAGkC,WAAW,SAAWlC,EAAzB,gBAAuCA,GAEvD,OACE,gBAAK/E,WAAW6G,EAAAA,EAAAA,GAAK,SAAU7G,GAAYqB,MAAO,CAAEpB,MAAM,GAAD,OAAKA,EAAL,MAAgBC,OAAO,GAAD,OAAKD,EAAL,OAA/E,UACE,SAAC6E,EAAA,EAAD,CAAQhD,OAAO,SAASiD,GAAIiC,EAAS/G,MAAOA,KAGjD,C,aCVD,MAQM2G,GAAYM,EAAAA,EAAAA,UAASf,IACzB,MAAMC,EAAQD,EAAIC,MAAM,OAClBC,EAAQD,EAAQE,OAAOC,SAASH,EAAM,GAAI,IAAM,EAChDe,EAAO,gBAAYd,GACnBI,EAZK,IAYMC,KAAKC,KAAKN,EAZhB,KAcX,MAAO,CADK,iBAAaI,GACTU,EAAhB,IAMK,SAASC,EAAT,GAAsD,IAAvC,GAAErC,EAAF,MAAM9E,EAAN,UAAaD,GAAyB,EAC1D,MAAO8B,EAAQqF,GAAWP,EAAU7B,GAEpC,OACE,gBAAK/E,WAAW6G,EAAAA,EAAAA,GAAK,SAAU7G,GAAYqB,MAAO,CAAEpB,MAAM,GAAD,OAAKA,EAAL,MAAgBC,OAAO,GAAD,OAAKD,EAAL,OAA/E,UACE,SAAC6E,EAAA,EAAD,CAAQhD,OAAQA,EAAQiD,GAAIoC,EAASlH,MAAOA,EAAO+E,QAAS,KAGjE,CCxBD,MAQM4B,GAAYM,EAAAA,EAAAA,UAASf,IACzB,MAAMC,EAAQD,EAAIC,MAAM,OAClBC,EAAQD,EAAQE,OAAOC,SAASH,EAAM,GAAI,IAAM,EAChDF,EAAM,eAAWG,GACjBI,EAZK,GAYMC,KAAKC,KAAKN,EAZhB,IAcX,MAAO,CADK,gBAAYI,GACRP,EAAhB,IAMK,SAASmB,EAAT,GAA2D,IAA7C,GAAEtC,EAAF,MAAM9E,EAAN,UAAaD,EAAb,MAAwBiF,GAAoB,EAC/D,MAAOnD,EAAQoE,GAAUU,EAAU7B,GAEnC,OACE,gBACE/E,WAAW6G,EAAAA,EAAAA,GAAK,SAAU7G,GAC1BqB,MAAO,CAAEpB,MAAM,GAAD,cAAKA,QAAL,IAAKA,EAAAA,EAAS,GAAd,MAAsBC,OAAO,GAAD,cAAKD,QAAL,IAAKA,EAAAA,EAAS,GAAd,OAF5C,UAIE,SAAC6E,EAAA,EAAD,CAAQhD,OAAQA,EAAQiD,GAAImB,EAAQjG,MAAOA,EAAOgF,MAAOA,KAG9D,C,iBCjDM,SAASE,EAAWmC,GACzB,MAAMC,EAA8BC,6BACpC,IAAIC,EAA6B,GAEjC,OAAQH,GACN,IAAK,SACHG,EAASD,mBACT,MACF,IAAK,UACHC,EAASD,aACT,MACF,IAAK,YACHC,EAASD,yBACT,MACF,IAAK,UACHC,EAASD,oBACT,MACF,QAOE,MAAM,IAAIE,MAAM,mBAGpB,MAAO,CACLH,UACArC,OAASvE,GAAiB,CAAC4G,EAASE,EAAQ9G,GAAMgH,KAAK,KAE1D,C,yJCmDM,SAASC,EAAwBpC,EAAkBqC,GACxD,MAAMC,EAvED,SAAiCtC,EAAkBuC,GAA0B,IAAD,IAMjF,MAKM,aAAE/F,GAAiBC,EAAAA,EAAAA,SAEnB+F,GAAoB7F,EAAAA,EAAAA,GAAiD,CACzEC,SAAU,CAAC,OAAQ,gBACnBC,SAASC,EAAAA,EAAAA,GAAsC,OAAQ,gBACvDkD,aAGFjD,EAAAA,EAAAA,YAAU,KACJyF,EAAkBxF,YACpBC,EAAAA,EAAAA,IAAc,2BACf,GACA,CAACuF,EAAkBxF,aAGtBD,EAAAA,EAAAA,YAAU,KACJyF,EAAkBtF,SACpBV,EAAaW,MAAM,CACjBC,QAAS,kCACTC,UAAW,cAEd,GACA,CAACmF,EAAkBtF,UAEtB,MAAMuF,EA7BsB,CAC1BxE,GAAI,aACJC,GAAI,cA2BgC,OAACqE,QAAD,IAACA,EAAAA,EAAiB,MAElDG,EAAY,oBAAGF,EAAkBhF,YAArB,aAAG,EAAyBiF,UAA5B,QAAqE,EAEjFE,EAAS,kBAAgC,OAAlBJ,EAAyB,KAAO,MAEvDK,GAA6BlF,EAAAA,EAAAA,UAAQ,IAClC,IAAImF,MAAMH,GAAc1G,KAAK,GAAGf,KAAI,CAAC6H,EAAGhH,KACtC,CACLc,SAAU,CAAC,OAAD,UAAY+F,GAAZ,OAAwB7G,EAAQ,IAC1Ce,SAASC,EAAAA,EAAAA,GAAoB,OAAD,UAAY6F,GAAZ,OAAwB7G,EAAQ,IAC5DkE,QAASA,GAAW+C,QAAQL,GAC5BM,UAAW,KACTxG,EAAayG,KAAK,CAChB7F,QAAQ,iBAAD,OAAmBuF,GAAnB,OAA+B7G,EAAQ,EAAvC,WACPuB,UAAW,cAFb,OAOL,CAACqF,EAAcC,EAAW3C,IAE7B,OAAOkD,EAAAA,EAAAA,GAAW,CAAEN,WACrB,CAaiCO,CAAwBnD,EAASqC,GAC3De,GAAmBC,EAAAA,EAAAA,GAAa,6BAAoChB,GAAYrC,GAEhFsD,EAAoBhB,EAAwBiB,MAAMC,GAAMA,EAAE1E,YAC1D2E,EAAoBnB,EAAwBoB,OAAOF,GAAMA,EAAExG,YAE3D2G,GAAWjG,EAAAA,EAAAA,UAAQ,KAAO,IAAD,EAC7B,IAAK+F,EAAmB,MAAO,CAAC,EAChC,IAAKL,EAAiBpG,UAAW,MAAO,CAAC,EAEzC,MAAM4G,EAAW,UAAGR,EAAiB5F,YAApB,QAA4B,CAAC,EAgD9C,OA9CA,OAAC8E,QAAD,IAACA,EAAAA,EAA2B,IAAIuB,SAASC,IAAkB,IAAD,EACxD,MAAMC,EAAe,UAAID,EAAatG,YAAjB,QAAyB,CAAC,EAE/CwG,OAAOC,QAAQF,GAAiBF,SAAQ,IAAyB,IAAD,QAAtBtG,EAAK2G,GAAiB,EAC9D,MAAMC,EAAM,UAAGD,EAAYC,cAAf,QAAyBD,EAAY3E,GAGjD,UAAI4E,QAAJ,IAAIA,GAAAA,EAAQC,SAAS,MACnB,OAIF,GAAIF,EAAY3J,QAAQ8J,OAAO/I,OAAS,GAEtC,YADAgJ,QAAQC,IAAI,6BAAoBJ,GAIlC,MAAMK,EAxCd,SAA0BjH,GACxB,MACMkH,EADQlH,EAAImH,MAAM,YACI,GACtBF,EAAY1D,OAAO2D,GAIzB,OAHI3D,OAAO6D,MAAMH,IACfF,QAAQC,IAAI,iCAAwBhH,EAAKiH,GAEpC1D,OAAO6D,MAAMH,GAAa,WAAgBA,CAClD,CAgCyBI,CAAiBrH,GAC7BsH,EAAQ,UAAGX,EAAYY,gBAAf,QAA2B,UAEnChB,EAA6B,CACjCvE,GAFc,CAAC4E,EAAQU,EAAUL,GAAWrC,KAAK4C,EAAAA,IAGjDxK,QAAS2J,EAAY3J,QACrBsK,WACAL,kBAG0BQ,IAAxBpB,EAAYO,GACdP,EAAYO,GAAU,CACpB5E,GAAI4E,EACJpE,KAAMmE,EAAYnE,KAClB4D,SAAU,CAACG,GACXmB,UAAWnB,EAAaU,WAGrBZ,EAAYO,GAAQR,SAASJ,MAAMxH,GAAMA,EAAEwD,KAAOuE,EAAavE,OAClEqE,EAAYO,GAAQR,SAASuB,KAAKpB,GAE9BA,EAAaU,UAAYZ,EAAYO,GAAQc,YAC/CrB,EAAYO,GAAQc,UAAYnB,EAAaU,WAGlD,GAvCH,IA2CKZ,CAAP,GACC,CAACtB,EAAyBmB,EAAmBL,EAAiB5F,KAAM4F,EAAiBpG,YAElFmI,GAAoBzH,EAAAA,EAAAA,UAAQ,IACzBsG,OAAOoB,OAAOzB,GAAU0B,QAAO,CAACC,EAAuC/K,KAC5EA,EAAQoJ,SAASE,SAASC,IACxB,MAAMe,EAAWf,EAAae,cACRG,IAAlBM,EAAIT,GACNS,EAAIT,GAAY,CACdA,WACAU,cAAe,EACfC,eAAgB1B,EAAaU,UAC7BiB,cAAe3B,EAAaU,YAG9Bc,EAAIT,GAAUU,eAAiB,EAE3BzB,EAAaU,UAAYc,EAAIT,GAAUW,iBACzCF,EAAIT,GAAUW,eAAiB1B,EAAaU,WAE1CV,EAAaU,UAAYc,EAAIT,GAAUY,gBACzCH,EAAIT,GAAUY,cAAgB3B,EAAaU,WAE9C,IAGIc,IACN,CAAC,IACH,CAAC3B,IAEJ,MAAO,CACL7E,UAAWwE,GAAqBF,EAAiBtE,UACjD3B,MAAOiG,EAAiBjG,MACxB6B,kBAAkB0G,EAAAA,EAAAA,SAAQ/B,GAC1BA,WACAwB,kBAAmBnB,OAAOoB,OAAOD,GAEpC,CASM,MAAMQ,EAA0C,CACrD,QAAS,WACT,QAAS,QACTC,MAAO,QACP,QAAS,SACTC,MAAO,QACPC,MAAO,YACPC,MAAO,UACPC,MAAO,UACPC,MAAO,UACPC,MAAO,WACPC,MAAO,YACPC,MAAO,QACPC,MAAO,QACPC,MAAO,QACPC,MAAO,UACPC,MAAO,QACP,QAAS,U,8OC7MJ,SAASC,EACdC,EACArE,GAGC,IAAD,MAFArC,IAEA,yDADA2G,EACA,uCACA,MAAM,OAAEjH,IAAWC,EAAAA,EAAAA,GAAW,aAExBiH,EAAeD,EAAQ,gBAChBD,EADgB,6BACerE,GADf,gBAEhBqE,EAFgB,oBAEMrE,GAC7BwE,GAAQlK,EAAAA,EAAAA,GAAkC,CAC9CC,SAAU,CAACgK,GACX/J,QAAS+C,UACP,MAAMkH,QAAYhH,MAAMJ,EAAO,GAAD,OAAIkH,EAAJ,WAC9B,aAAcE,EAAIC,MAAlB,EAEF/G,QAASA,KAAa0G,KAAgBrE,IAElCrD,IAAmB0G,EAAAA,EAAAA,SAAQmB,EAAMrJ,MAEvC,OAAO,kBACFqJ,GADL,IAEErJ,KAAI,UAAEqJ,EAAMrJ,YAAR,QAAgB,GACpBwB,mBAEH,C,0DCxBM,MAgDDgI,EAAoC,CACxCC,EACAC,KAEA,MAAMC,GAA0BC,EAAAA,EAAAA,SAAQF,GAElCG,GAAYD,EAAAA,EAAAA,UAAQE,EAAAA,EAAAA,IAAU,GAAI,IAGlCC,GAAqBC,EAAAA,EAAAA,YAAWP,EAAY,GAAGhM,KAAKwM,IAAD,QAAC,UACrDA,GADoD,IAEvDC,SAAS,GAAD,OAAKL,EAAUM,WAEnBC,EAAuB,GACvBC,EAAuB,GACvBC,EAAuB,GACvBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAyB,GACzBC,EAAiB,GAEvBhB,EAAwBtD,SAASuE,IAC/B,MAAMC,EAAW,CAACC,EAAAA,GAAAA,cAA+BA,EAAAA,GAAAA,SAC3CC,EAAeH,EAAKnB,WAAWM,EAAmB,GAAGhI,MAAQ+I,EAAAA,GAAAA,cAC7DE,EAAWH,EAASjE,SAASgE,EAAKnB,WAAWM,EAAmB,GAAGhI,KACnEkJ,EAAcL,EAAKnB,WAAWM,EAAmB,GAAGhI,MAAQ+I,EAAAA,GAAAA,UAC5DI,EAAeN,EAAKnB,WAAWM,EAAmB,GAAGhI,MAAQ+I,EAAAA,GAAAA,cAC7DK,EAAWN,EAASjE,SAASgE,EAAKnB,WAAWM,EAAmB,GAAGhI,KACnEqJ,EAAcR,EAAKnB,WAAWM,EAAmB,GAAGhI,MAAQ+I,EAAAA,GAAAA,UAC5DO,EAAeT,EAAKnB,WAAWM,EAAmB,GAAGhI,MAAQ+I,EAAAA,GAAAA,cAC7DQ,EAAWT,EAASjE,SAASgE,EAAKnB,WAAWM,EAAmB,GAAGhI,KACnEwJ,EAAcX,EAAKnB,WAAWM,EAAmB,GAAGhI,MAAQ+I,EAAAA,GAAAA,UAElE,GAAIG,GAAeG,GAAeG,EAChC,OAAOZ,EAAKjD,KAAKkD,EAAK7I,IAEpBgJ,GAAgBK,GAAeG,GACjCnB,EAAW1C,KAAKkD,EAAK7I,IAEnBkJ,GAAeC,GAAgBK,GACjClB,EAAW3C,KAAKkD,EAAK7I,IAEnBkJ,GAAeG,GAAeC,GAChCf,EAAW5C,KAAKkD,EAAK7I,IAEnBiJ,GAAYG,GAAYI,GAC1BhB,EAAY7C,KAAKkD,EAAK7I,IAEpBiJ,GAAYI,GAAeE,GAC7Bd,EAAY9C,KAAKkD,EAAK7I,IAEpBkJ,GAAeE,GAAYG,GAC7Bb,EAAY/C,KAAKkD,EAAK7I,IAEpBiJ,GAAYG,GAAYG,GAC1BZ,EAAahD,KAAKkD,EAAK7I,GACxB,IAGH,MAAMyJ,EAAgEzB,EAAmBtM,KAAKwM,IAAD,CAC3FlI,GAAIkI,EAAKlI,GACT0J,KAAMxB,EAAKwB,KAAKhL,GAChBkB,YAAasI,EAAKtI,YAAYlB,GAC9ByJ,SAAUD,EAAKC,SACfwB,SAAU,OAEZF,EAAe,GAAGE,UAAW1B,EAAAA,EAAAA,YAC3BI,EACAA,EAAWtM,OAAS,EAAI,EAAI4F,KAAKiI,IAAIvB,EAAWtM,OAAS,EAAG,IAE9D0N,EAAe,GAAGE,UAAW1B,EAAAA,EAAAA,YAC3BK,EACAA,EAAWvM,OAAS,EAAI,EAAI4F,KAAKiI,IAAIvB,EAAWtM,OAAS,EAAG,IAE9D0N,EAAe,GAAGE,UAAW1B,EAAAA,EAAAA,YAC3BM,EACAA,EAAWxM,OAAS,EAAI,EAAI4F,KAAKiI,IAAIvB,EAAWtM,OAAS,EAAG,IAG9D,MAAM8N,EAAyB,GAC/BJ,EAAenF,SAAS4D,IACtB2B,EAAalE,QAAQuC,EAAKyB,SAA1B,IAGF,MAAMG,EAA+D,GAExC,IAAD,EAOA,EAOA,EAOC,EArBzBtB,EAAYzM,OAAS,GACvB+N,EAAgBnE,KAAK,CACnBoE,WAAY,CAAC/B,EAAmB,GAAGG,SAAUH,EAAmB,GAAGG,UACnEhH,OAAM,WAAE6I,EAAAA,EAAAA,QAAOxB,UAAT,QAAyB,KAI/BC,EAAY1M,OAAS,GACvB+N,EAAgBnE,KAAK,CACnBoE,WAAY,CAAC/B,EAAmB,GAAGG,SAAUH,EAAmB,GAAGG,UACnEhH,OAAM,WAAE6I,EAAAA,EAAAA,QAAOvB,UAAT,QAAyB,KAI/BC,EAAY3M,OAAS,GACvB+N,EAAgBnE,KAAK,CACnBoE,WAAY,CAAC/B,EAAmB,GAAGG,SAAUH,EAAmB,GAAGG,UACnEhH,OAAM,WAAE6I,EAAAA,EAAAA,QAAOtB,UAAT,QAAyB,KAI/BC,EAAa5M,OAAS,GACxB+N,EAAgBnE,KAAK,CACnBoE,WAAY/B,EAAmBtM,KAAKwM,GAASA,EAAKC,WAClDhH,OAAM,WAAE6I,EAAAA,EAAAA,QAAOrB,UAAT,QAA0B,KAGpC,MAAMsB,EAA8D,GAEhE5B,EAAWtM,OAAS,GACtBkO,EAAetE,KAAK,CAClBoE,WAAY,CAAC/B,EAAmB,GAAGG,UACnChH,OAAQkH,EAAW6B,QAAQlK,IAAQ6J,EAAahF,SAAS7E,KAAK,KAI9DsI,EAAWvM,OAAS,GACtBkO,EAAetE,KAAK,CAClBoE,WAAY,CAAC/B,EAAmB,GAAGG,UAEnChH,OAAQmH,EAAW4B,QAAQlK,IAAQ6J,EAAahF,SAAS7E,KAAK,KAI9DuI,EAAWxM,OAAS,GACtBkO,EAAetE,KAAK,CAClBoE,WAAY,CAAC/B,EAAmB,GAAGG,UACnChH,OAAQoH,EAAW2B,QAAQlK,IAAQ6J,EAAahF,SAAS7E,KAAK,KAIlE,IAAImK,GAAWlC,EAAAA,EAAAA,YAAW6B,EAAiB,GAEvCK,EAASpO,OAAS,GACpBoO,EAASxE,SAAQsC,EAAAA,EAAAA,YAAWgC,EAAgB,EAAIE,EAASpO,SAGvDoO,EAASpO,OAAS,GACpBgJ,QAAQC,IAAI,mFAGdmF,GAAWtC,EAAAA,EAAAA,SAAQsC,GAEnB,MAAMC,EAA4BD,EAASzO,KAAK2O,GAAQA,EAAIlJ,SAEtDmJ,EAA0C,CAC9CtK,GAAI,aACJuK,MAAOd,EACJ/N,KAAKwM,GAASA,EAAKlI,KACnBwK,OACA5H,KAAK,KACR6H,OAAQ,EACR5K,KAAM,kCACN6H,WAAY+B,EACZU,WACAO,SAAUN,EAAgBxH,KAAK,KAC/B+G,UAAU9B,EAAAA,EAAAA,SAAQ,IACbuC,MACAnC,EAAAA,EAAAA,YAAW,CAACW,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,KAAK+B,EAAAA,EAAAA,QAAO,EAAG,MAC7DT,OAAO1G,SACVoH,OAAO,GAYT,OARAN,EAAOM,MAAQ,CACgB,IAA7BN,EAAO5C,WAAW3L,OACS,IAA3BuO,EAAOH,SAASpO,OAChBuO,EAAOX,SAAS5N,OAAS,EACzBuO,EAAO5C,WAAWvD,OAAO+D,GAASA,EAAKyB,SAAS5N,OAAS,IACzDuO,EAAOH,SAAShG,OAAOkG,GAAQA,EAAIlJ,UACnCgD,MAAMX,SAED8G,CAAP,ECpMWO,EAAgC,CAAC7K,EAAY8K,KACxD,MAAOC,EAAMC,EAAOC,GAAOjL,EAAGmF,MAAM,KAAKzJ,IAAI6F,QAevC2J,EAAqC,CACzClL,KACAyK,OAAQK,EACRjL,KAAM,sBACNiD,SAAU,KACV5C,MAfmB,CACnB,UACA,gBACA,iBACA,eACA,eACA,cACA,aAXW,IAAIiL,KAAKJ,EAAMC,EAAQ,EAAGC,GAEXG,UAkB1BC,MAAO,GACPC,OAAQ,IAGJD,GAAQpD,EAAAA,EAAAA,YACZ3E,MAtCgB,KAuCb7G,KAAK,IACLf,KAAI,CAAC6H,EAAGgI,IAAJ,eAAkBA,EAAI,KAC7BC,IAEIC,EAAiBJ,EAAMjD,MAK7B,GAHA8C,EAAMG,MAAQA,EACdH,EAAMI,QAASrD,EAAAA,EAAAA,YAAWiD,EAAMG,MA5Cf,IA8CZI,EACH,MAAM,IAAI9I,MAAM,wBAKlB,OAHAuI,EAAMI,OAAO3F,KAAK8F,GAClBP,EAAMI,QAASzD,EAAAA,EAAAA,SAAQqD,EAAMI,QAEtBJ,CAAP,EC7BWQ,EAAyB,SACpCC,EACAC,EACAC,GAGI,IAAD,MAFHC,EAEG,uDAFI,EACPC,EACG,uCACCC,GAAgBnE,EAAAA,EAAAA,UAAQoE,EAAAA,EAAAA,YAAWN,EAAOE,EAAcD,IAG5D,MAAMM,EAAUH,IAAY,UAAmBC,EAAc5D,aAAjC,QAA0C,IAClE2D,IACFC,GAAgBC,EAAAA,EAAAA,YAAWD,EAAe,CAACD,KAG7C,MAAMI,EAA0B,GAChC,IAAK,IAAIZ,EAAI,EAAGA,EAAIO,EAAMP,IAAK,CAC7B,MAAMa,EAAUC,EAAWV,EAAOO,EAASC,EAAeZ,GAC1DY,EAAcxG,KAAKyG,EACpB,CAID,OAFAP,EAAalG,KAAKuG,KAAYC,GAEvB,CACLD,UACAP,MAAOQ,EACPG,QAASC,EAAeJ,EAAeD,EAAQnQ,QAElD,EAWKsQ,EAAa,CAACV,EAAiBO,EAAiBC,EAAyB5P,KAC7E,MAAMiQ,GAAcC,EAAAA,EAAAA,MAAK,KAAIC,EAAAA,EAAAA,SAAQP,EAAczQ,KAAKiR,GAASA,EAAKxH,MAAM,UAAU+G,EAAQ/G,MAAM,MAE9FyH,GAAY/E,EAAAA,EAAAA,SAChB8D,EAAMzB,QAAQyC,GAASA,EAAKpQ,KAAW2P,EAAQ3P,KAAW4P,EAActH,SAAS8H,MAQnF,OANmBE,EAAAA,EAAAA,QAAOD,GAAYD,IACjBG,EAAAA,EAAAA,cAAaH,EAAKxH,MAAM,IAAKqH,GAAazQ,SAK7C,EAAlB,EAGIwQ,EAAiB,CAACJ,EAAyBL,KAC/C,MAAMQ,GAAUI,EAAAA,EAAAA,SAAQP,EAAczQ,KAAKiR,GAASA,EAAKxH,MAAM,OACzD4H,EAA4B,IAATjB,EAAa,CAAC,EAAG,EAAG,GAAI,IAAM,CAAC,EAAG,EAAG,GAAI,GAAI,IAChEkB,GAAenF,EAAAA,EAAAA,SAAQyE,EAAQpC,QAAO,CAAC3G,EAAGhH,KAAWwQ,EAAiBlI,SAAStI,MAE/E0Q,EAA4B,GAClC,IAAK,IAAI1B,EAAI,EAAGA,EAAIe,EAAQvQ,OAAQwP,IAAK,CAG/B,IAAD,EAFP,GAAIwB,EAAiBlI,SAAS0G,GAC5B0B,EAAgBtH,KAAK2G,EAAQf,SAE7B0B,EAAgBtH,KAAhB,UAAqBqH,EAAaE,eAAlC,QAA6C,GAEhD,CAED,OAAOD,CAAP,E,kCC9EK,SAASE,EACd1M,EACAuC,EACAgD,EACAoH,GAGA,MAAMrQ,EAASyB,EAAAA,EAAAA,MAAA,OAAsBwE,QAAtB,IAAsBA,EAAAA,EAAiB,MAChD7F,GAAeL,EAAAA,EAAAA,GAAqBC,EAAQ,CAAE0D,aAC7C4M,EAAUC,IAAeC,EAAAA,EAAAA,UAAmB,IAC7CC,GAAgB1J,EAAAA,EAAAA,GAA6B,QAASrD,GAEtDgN,EAAkBC,IACtBJ,GAAaK,GAAS,IAAIA,EAAMD,IAAhC,GAIFlQ,EAAAA,EAAAA,YAAU,KACR8P,EAAY,GAAZ,GACC,CAACF,EAAWpK,IAGf,MAAM4K,GAAgB/K,EAAAA,EAAAA,IAAwBpC,EAASuC,GAEjD6K,EAAqBD,EAAcrO,WAClCuO,IAAmB/P,EAAAA,EAAAA,GAAiBc,EAAAA,EAAAA,UAA4B1B,EAAac,MAC9E8P,GAAkB5P,EAAAA,EAAAA,UAAQ,IAC1B0P,IAAuB1Q,EAAaM,UAC/B,GCvD0B,EACrC2P,EACAlP,EACA0P,EACA5K,EACAgD,KAEAjB,QAAQiJ,MAAM,yBACd,MAAM5J,EAAsCK,OAAOoB,OAAO+H,EAAcxJ,UACrE8F,QAAQ1N,IAEH0B,EAAQK,KAAKsG,SAASrI,EAAEwD,OAKxBxD,EAAE4H,SAASrI,OAASiK,KAMzBtK,KAAKc,IAAD,CACHwD,GAAIxD,EAAEwD,GACNH,KAAM,YACNiD,SAAQ,OAAEE,QAAF,IAAEA,EAAAA,EAAiB,KAC3B4B,OAAQpI,EAAEwD,GACVQ,KAAMhE,EAAEgE,KACR4D,SAAU5H,EAAE4H,SAAS1I,KAAKV,GAAYA,EAAQA,UAC9CyP,OAAQ,EACRwD,QAASzR,EAAE4H,SAAS1I,KAAKV,GAAYA,EAAQgF,SAI3CkO,GAAoBjG,EAAAA,EAAAA,aAAWJ,EAAAA,EAAAA,SAAQzD,GAAWgJ,GAExD,IAAIe,EAAWjQ,EAAQE,WAavB,OAXsC8P,EAAkBxS,KAAI,CAAC0S,EAAG7R,KAC9D,MAAMyD,GAAKqO,EAAAA,EAAAA,IAAWF,GAGtB,OADAA,EAAWnO,GACJ,kBACFoO,GADL,IAEEpO,KACAyK,OAAQvM,EAAQI,aAAe/B,EAAQ,GAHzC,GAOF,EDSS+R,CAAwBlB,EAAWU,EAAiBF,EAAe5K,EAAegD,IACxF,CACD4H,EACA5K,EACA8K,EACAV,EACApH,EACA6H,EACA1Q,EAAaM,YAIT8Q,GAAiBzK,EAAAA,EAAAA,GAA4B,kBAAmBrD,IAC/D+N,IAAgBzQ,EAAAA,EAAAA,GAAiBc,EAAAA,EAAAA,OAAyB1B,EAAac,MAExEwQ,GAAetQ,EAAAA,EAAAA,UAAQ,IACtBoQ,EAAe9Q,WAAcN,EAAaM,WAAc+P,EAAc/P,UE5E3C,EAClC2P,EACAlP,EACAwQ,EACAC,EACAlB,KAEA1I,QAAQiJ,MAAM,yBAEd,MAAMY,GAAe/G,EAAAA,EAAAA,SACnBpD,OAAOoB,OAAO6I,GAAUxE,QAAQ2E,GAAaA,EAASlF,SAASO,OAAO1G,SAASzH,QAAU,MAGrF+S,EAAcF,EAAa1E,QAAQ2E,IAAc3Q,EAAQK,KAAKsG,SAASgK,EAAS7O,MAElF8O,EAAY/S,OAASqR,IACvBrI,QAAQC,IAAI,0DACZyI,EAAe,+BACfqB,EAAYnJ,SAAQkC,EAAAA,EAAAA,SAAQ+G,KAG9B,MAAMG,EAAiBtK,OAAOoB,OAAO8I,GAAOzE,QAAQrB,IAAU,IAAD,EAC3D,cAAIA,QAAJ,IAAIA,IAAAA,EAAMmG,QACHlC,EAAAA,EAAAA,cAAY,UAACjE,EAAKoG,aAAN,QAAe,GAAI,CAAC,QAAS,QAAS,UAAUlT,OAAS,CAA5E,IAGF,IAAIoS,EAAWjQ,EAAQE,WAEvB,MAAMsG,EAAuC,CAAC,EAC9C,IAAK,IAAI6G,EAAI,EAAGA,EAAI6B,EAAW7B,IAAK,CAClC,MAAMsD,EAAWC,EAAYvD,GACxBsD,GACH9J,QAAQnH,MAAM,uBAEhB,MAAMoC,GAAKqO,EAAAA,EAAAA,IAAWF,GAChBe,GAAYC,EAAAA,EAAAA,IAAanP,GAC/BmO,EAAWnO,EAGT0E,EAAQ1E,GADNkP,EACY,CACZlP,KACAH,KAAM,SACN4K,OAAQvM,EAAQI,aAAeiN,EAAI,EACnChB,MAAO,UACPrK,MAAO,CACLxB,GAAI,yBACJC,GAAI,mBAENgL,SAAU,CAAC,QAAQ1B,EAAAA,EAAAA,YAAW8G,EAAgB,IAAIrT,KAAKmN,GAASA,EAAK7I,OAGzD,CACZA,KACAH,KAAM,SACN4K,OAAQvM,EAAQI,aAAeiN,EAAI,EACnChB,MAAOsE,EAAS7O,GAChBE,MAAO2O,EAAS3O,MAChByJ,SAAU,CAAC,QAAQ1B,EAAAA,EAAAA,YAAW4G,EAASlF,SAAU,KAGtD,CAED,OAAOjF,CAAP,EFkBS0K,CACLhC,EACAoB,EACAD,EAAetQ,KACfuP,EAAcvP,KACdwP,GARO,CAAC,GAUT,CAACc,EAAgBC,EAAcpB,EAAWjQ,EAAaM,UAAW+P,IAG/D6B,EAAiBnI,EAAmB,EAAGlE,GAAe,GAAM,GAC5DsM,EAAiBpI,EAAmB,EAAGlE,GAAe,GAAM,IAC3DuM,IAAqBxR,EAAAA,EAAAA,GAAiBc,EAAAA,EAAAA,WAA6B1B,EAAac,MACjFuR,GAAoBrR,EAAAA,EAAAA,UAAQ,IAE7BkR,EAAepR,MACfoR,EAAepR,KAAKlC,QACpBuT,EAAerR,MACfqR,EAAerR,KAAKlC,QACpBoB,EAAaM,UDpGqB,EACvC2P,EACAlP,EACAuR,EACAC,KAEA3K,QAAQiJ,MAAM,0BACd,IAAIG,EAAWjQ,EAAQE,WACvB,MAAMuR,EAAsB,GAEtBjL,EAA4C,CAAC,EACnD,IAAK,IAAI6G,EAAI,EAAGA,EAAI6B,EAAW7B,IAAK,CAClC,MAAMvL,GAAKqO,EAAAA,EAAAA,IAAWF,GAChBe,GAAYC,EAAAA,EAAAA,IAAanP,GACzB8L,EAAOoD,EAAY,EAAI,EAC7Bf,EAAWnO,EACX0E,EAAQ1E,IAAR,QACEA,KACAH,KAAM,aACN4K,OAAQvM,EAAQI,aAAeiN,EAAI,GAChCG,EACDwD,EAAYQ,EAAkBD,EAC9B,IAAIhL,OAAOoB,OAAOnB,GAAShJ,KAAK0S,GAAMA,EAAElC,aAAahO,EAAQK,MAC7DoR,EACA7D,GAGL,CACD,OAAOpH,CAAP,EC6ESkL,CAA0BxC,EAAWmC,EAAmBF,EAAepR,KAAMqR,EAAerR,MAH1F,CAAC,GAIT,CAACoR,EAAgBC,EAAgBC,EAAmBnC,EAAWjQ,EAAaM,YAGzEoS,GAAqB/L,EAAAA,EAAAA,GAAa,0BAAkCd,GAAiBvC,IACpFqP,IAAkB/R,EAAAA,EAAAA,GAAiBc,EAAAA,EAAAA,QAA0B1B,EAAac,MAC3E8R,GAAiB5R,EAAAA,EAAAA,UAAQ,KAC7B,IAAK0R,EAAmBpS,YAAcN,EAAaM,UACjD,MAAO,CAAC,EAGV,MAAMuS,EAAkBjC,EAAgBrS,KAAKuU,GAAaA,EAASrL,SAEnE,MG5HkC,EACpCwI,EACAlP,EACA4P,EACAoC,EACAC,EACA/L,KAEAW,QAAQiJ,MAAM,uBAEd,IAAIG,EAAWjQ,EAAQE,WAEvB,MAAMsG,EAAyC,CAAC,EAChD,IAAK,IAAI6G,EAAI,EAAGA,EAAI6B,EAAW7B,IAAK,CAClC,MAAMvL,GAAKqO,EAAAA,EAAAA,IAAWF,GAChBiC,EAAoB3L,OAAO4L,KAAP,OAAYH,QAAZ,IAAYA,EAAAA,EAAiB,CAAC,GAAGhG,QACxDtF,IAAD,eACGkJ,EAAgBvP,KAAKsG,SAASD,KAC9BuL,EAAgBtL,SAASD,KAClB,OAARR,QAAQ,IAARA,GAAA,UAAAA,EAAWQ,UAAX,mBAAoBR,gBAApB,eAA8BrI,QAAS,CAHzC,IAKIuU,GAAQrI,EAAAA,EAAAA,YAAWmI,EAAmB,IAAI1U,KAAKkJ,GAAWsL,EAActL,KAC9EuJ,EAAWnO,EACX0E,EAAQ1E,GAAM,CACZA,KACAH,KAAM,UACN4K,OAAQvM,EAAQI,aAAeiN,EAAI,EACnC+E,QAEH,CACD,OAAO5L,CAAP,EH8FS6L,CACLnD,EACA0C,EACAhC,EACA+B,EAAmB5R,KACnB+R,EACApC,EAAcxJ,SANhB,GAQC,CACDyL,EACA/B,EACAgC,EACA1C,EACAjQ,EAAaM,UACbsQ,EACAH,EAAcxJ,WAIVoM,GAAiB1M,EAAAA,EAAAA,GAA6B,mBAAoBrD,IACjEgQ,IAAkB1S,EAAAA,EAAAA,GAAiBc,EAAAA,EAAAA,QAA0B1B,EAAac,MAC3EyS,GAAiBvS,EAAAA,EAAAA,UAAQ,IACxBqS,EAAe/S,WAAcN,EAAaM,UI3Ib,EACpC2P,EACAlP,EACAyS,KAEA5L,QAAQiJ,MAAM,0BAEd,MAAMY,GAAe/G,EAAAA,EAAAA,SACnBpD,OAAOoB,OAAO8K,GAAQzG,QAAQ2E,GAAaA,EAASlF,SAASO,OAAO1G,SAASzH,OAAS,KAGlF+S,EAAcF,EAAa1E,QAAQ2E,IAAc3Q,EAAQK,KAAKsG,SAASgK,EAAS7O,MAElF8O,EAAY/S,OAASqR,GACvB0B,EAAYnJ,SAAQkC,EAAAA,EAAAA,SAAQ+G,IAG9B,IAAIT,EAAWjQ,EAAQE,WAEvB,MAAMsG,EAAyC,CAAC,EAChD,IAAK,IAAI6G,EAAI,EAAGA,EAAI6B,EAAW7B,IAAK,CAClC,MAAMsD,EAAWC,EAAYvD,GAC7B,IAAKsD,EAAU,CACb9J,QAAQnH,MAAM,2BACd,KACD,CACD,MAAMoC,GAAKqO,EAAAA,EAAAA,IAAWF,GACtBA,EAAWnO,EACX0E,EAAQ1E,GAAM,CACZA,KACAH,KAAM,UACN4K,OAAQvM,EAAQI,aAAeiN,EAAI,EACnChB,MAAOsE,EAAS7O,GAChBE,MAAO2O,EAAS3O,MAChByJ,SAAUkF,EAASlF,SACnBoB,KAAM8D,EAAS9D,KAElB,CAED,OAAOrG,CAAP,EJwGSkM,CAAuBxD,EAAWqD,EAAgBD,EAAevS,MAH/D,CAAC,GAIT,CAACuS,EAAgBC,EAAgBrD,EAAWjQ,EAAaM,aAGrDoT,IAA4B9S,EAAAA,EAAAA,GACjCc,EAAAA,EAAAA,oBACA1B,EAAac,MAET6S,GAA2B3S,EAAAA,EAAAA,UAAQ,IAClChB,EAAaM,UF1J0B,EAAC2P,EAAmBlP,KAClE6G,QAAQiJ,MAAM,mCAEd,IAAIG,EAAWjQ,EAAQE,WAGvB,MAAMsG,EAAmD,CAAC,EAC1D,IAAK,IAAI6G,EAAI,EAAGA,EAAI6B,EAAW7B,IAAK,CAClC,MAAMvL,GAAKqO,EAAAA,EAAAA,IAAWF,GACtBA,EAAWnO,EAEX0E,EAAQ1E,GAAM6K,EAA8B7K,EAAI9B,EAAQI,aAAeiN,EAAI,EAC5E,CACD,OAAO7G,CAAP,EEiJSqM,CAAiC3D,EAAWyD,GAH1C,CAAC,GAIT,CAACzD,EAAWjQ,EAAaM,UAAWoT,KAGhCG,IAA4BjT,EAAAA,EAAAA,GACjCc,EAAAA,EAAAA,oBACA1B,EAAac,MAETgT,GAAcnN,EAAAA,EAAAA,GAAgC,sBAAuBrD,GACrEyQ,GAAapN,EAAAA,EAAAA,GAAgC,sBAAuBrD,GACpE0Q,GAAkChT,EAAAA,EAAAA,UAAQ,IACzChB,EAAaM,WAAcwT,EAAYxT,WAAcyT,EAAWzT,WAI9D2T,EAAAA,EAAAA,GACLhE,EACA4D,EACAE,EAAWjT,KACXgT,EAAYhT,MAPL,CAAC,GAST,CAACmP,EAAWjQ,EAAaM,UAAWuT,EAA0BE,EAAYD,KAGtEI,IAAgCtT,EAAAA,EAAAA,GACrCc,EAAAA,EAAAA,uBACA1B,EAAac,MAETqT,GAAqBxN,EAAAA,EAAAA,GAA6B,mBAAoBrD,GACtE8Q,GAAgCzN,EAAAA,EAAAA,GACpC,yBACArD,GAGI+Q,GAA+BrT,EAAAA,EAAAA,UAAQ,IAExChB,EAAaM,WACb6T,EAAmB7T,WACnB8T,EAA8B9T,WAC9B+P,EAAc/P,UHzM+B,EAClD2P,EACAlP,EACAwJ,EACAC,EACAgH,EACAlB,KAEA1I,QAAQiJ,MAAM,sCACd,IAAIG,EAAWjQ,EAAQE,WAEvB,MAAMqT,GAAgB5L,EAAAA,EAAAA,QAAO6B,GAAYwC,QAAQhC,IAAD,aAAWA,EAAKwJ,UAAsC,KAAtB,OAAL/C,QAAK,IAALA,GAAA,UAAAA,EAAQzG,EAAKlI,WAAb,eAAkBgP,KAA7C,IAC1C2C,GAAsB9L,EAAAA,EAAAA,QAAO8B,GAAiBuC,QAAQqB,GAAMA,EAAEqG,WAE9DC,EAAkE,CAAC,EACzE,IAAIC,EAAQ,EACZ,MAAOzB,EAAAA,EAAAA,MAAKwB,GAAoB9V,OAASqR,GAAa0E,EAAQ,KAAK,CACjE,MAAM5G,EAAQzD,EAAkCgK,EAAeE,GAI/D,IAHIzG,EAAMN,OAAUiH,EAAmB3G,EAAMX,QAAWrM,EAAQK,KAAKsG,SAASqG,EAAMX,SAClFsH,EAAmB3G,EAAMX,OAASW,IAEhCmF,EAAAA,EAAAA,MAAKwB,GAAoB9V,QAAUqR,EACrC,MAEF0E,GAAS,CACV,CAED/M,QAAQC,IAAR,kDAA6C8M,EAA7C,WAEIA,GAAS,KACXrE,EAAe,qEAGjB,MAAM/I,EAAuD,CAAC,EAY9D,OAXAD,OAAOoB,OAAOgM,GAAoBvN,SAAQ,CAAC4G,EAAO3O,KAChD,MAAMyD,GAAKqO,EAAAA,EAAAA,IAAWF,GACtBA,EAAWnO,EAEX0E,EAAQ1E,IAAR,kBACKkL,GADL,IAEElL,KACAyK,OAAQvM,EAAQI,aAAe/B,EAAQ,GAHzC,IAOKmI,CAAP,EGiKSqN,CACL3E,EACAiE,EACAC,EAAmBrT,KACnBsT,EAA8BtT,KAC9BuP,EAAcvP,KACdwP,GATO,CAAC,GAWT,CACDL,EACAjQ,EAAaM,UACb4T,EACAC,EACAC,EACA/D,IAII9I,GAAUvG,EAAAA,EAAAA,UAAQ,IACS,IAA3B4P,EAAgBhS,OACX,IAETgJ,QAAQiJ,MAAM,uBACPD,EAAgBrS,KAAKuU,IACnB,CACLjQ,GAAIiQ,EAASjQ,GACb,YAAaiQ,EACb,SAAUxB,EAAawB,EAASjQ,IAChCgS,WAAYxC,EAAkBS,EAASjQ,IACvCiS,QAASlC,EAAeE,EAASjQ,IACjCkS,QAASxB,EAAeT,EAASjQ,IACjC,sBAAuB8Q,EAAyBb,EAASjQ,IACzD,sBAAuBmR,EAAgClB,EAASjQ,IAChE,yBAA0BwR,EAA6BvB,EAASjQ,UAGnE,CACD+N,EACAU,EACAe,EACAO,EACAW,EACAI,EACAK,EACAK,IAGF,MAAO,CACLjS,UACEsO,GACA1Q,EAAaoC,WACb8P,EAAe9P,WACf+P,EAAe/P,WACfsQ,EAAmBtQ,WACnBgP,EAAehP,WACfiR,EAAejR,WACf0R,EAAY1R,WACZ2R,EAAW3R,WACX+R,EAAmB/R,WACnBgS,EAA8BhS,UAChCmF,UACA2I,WAEH,C,+CKtQM,SAAS8E,EAAT,GAAsE,IAAD,QAA7C,SAAErP,EAAF,SAAYsP,GAAiC,EAC1E,MAAMpP,EAAgBF,EAEhBuP,EAAwC,CAC5C,CACEnS,MAAO,KACPoS,UAAW,KACXtU,IAAK,MAEP,CACEkC,MAAO,YACPoS,UAAW,YACXtU,IAAK,YACLuU,OAAQ,IAAyC,IAAxC,OAAE9H,EAAF,OAAU7F,EAAV,KAAkBpE,EAAlB,SAAwB4D,GAAe,EAC9C,OACE,UAAC,IAAD,CAAOoO,UAAU,WAAjB,WACE,UAAC,IAAD,YACE,gCAAQ/H,MACR,uCAAe7F,MACf,sCAAcR,EAASrI,cAEzB,+BAEGyE,EACE2E,MAAM,IACNzJ,KAAI,CAAC+W,EAAWlH,IAAeA,EAAI,GAAW,MAANkH,EAAYA,EAAI,WACxD7P,KAAK,IALV,QAQA,SAAC,IAAD,CAAO8P,MAAI,EAAX,SACGtO,EAAS1I,KAAKc,IACb,SAACzB,EAAA,EAAD,CAAmBC,QAASwB,EAAGtB,MAAO,GAAIC,OAAQ,GAAIF,UAAU,UAAhDuB,SAjBxB,GAwBJ,CACE0D,MAAO,SACPoS,UAAW,SACXtU,IAAK,SACLuU,OAAQ,IAAyC,IAAxC,OAAE9H,EAAF,MAAUF,EAAV,MAAiBrK,EAAjB,SAAwByJ,GAAe,EAC9C,OACE,UAAC,IAAD,CAAO6I,UAAU,WAAjB,WACE,gCAAQ/H,MACR,sCAAcF,MACd,sCAAcrK,EAAM4C,OACpB,UAAC,IAAD,CAAM6P,IAAK,EAAGD,MAAI,EAAlB,WACE,SAAC,KAAD,CAAM1S,GAAI2J,EAAS,GAAIzO,MAAO,MAC9B,SAAC,KAAD,CAAM8E,GAAI2J,EAAS,GAAIzO,MAAO,MAC9B,SAAC,KAAD,CAAM8E,GAAI2J,EAAS,IAAKzO,MAAO,UARrC,GAcJ,CACEgF,MAAO,aACPoS,UAAW,aACXtU,IAAK,aACLuU,OAAQ,IAA0C,IAAzC,OAAE9H,EAAF,MAAUkB,EAAV,QAAiBW,EAAjB,QAA0BJ,GAAc,EAC/C,OACE,UAAC,IAAD,CAAOsG,UAAU,WAAjB,WACE,gCAAQ/H,MACR,wCAAgB6B,EAAQvQ,WACxB,wCAAgBmQ,MAChB,SAAC,IAAD,CAAOsG,UAAU,WAAjB,SACG7G,EAAMjQ,KAAI,CAACiR,EAAcpQ,KACxB,0BACGoQ,EACExH,MAAM,IACNzJ,KAAI,CAAC+W,EAAWlH,IAAeA,IAAMhP,GAAe,MAANkW,EAAYA,EAAI,WAC9D7P,KAAK,KAJV,UAAc6H,EAAd,YAAwBkC,UAPhC,GAmBJ,CACEzM,MAAO,aACPoS,UAAW,UACXtU,IAAK,UACLuU,OAAQ,IAAqC,IAApC,OAAE9H,EAAF,MAAUF,EAAV,KAAiBQ,EAAjB,MAAuB7K,GAAY,EAC1C,OACE,UAAC,IAAD,CAAOsS,UAAU,WAAjB,WACE,gCAAQ/H,MACR,sCAAcF,MACd,qCAAaQ,MACb,qCACS,IACN7K,EACEiF,MAAM,IACNzJ,KAAI,CAAC+W,EAAWlH,IAAeA,EAAI,GAAW,MAANkH,EAAYA,EAAI,WACxD7P,KAAK,SAVd,GAgBJ,CACE1C,MAAO,sBACPoS,UAAW,sBACXtU,IAAK,sBACLuU,OAAQ,IAA+B,IAA9B,OAAE9H,EAAF,MAAUvK,EAAV,MAAiBmL,GAAY,EACpC,OACE,UAAC,IAAD,CAAOmH,UAAU,WAAjB,WACE,gCAAQ/H,MACR,sCAAcvK,MACd,UAAC,IAAD,CAAMyS,IAAK,EAAGD,MAAI,EAAlB,WACE,SAACxR,EAAA,EAAD,CAAelB,GAAIqL,EAAM,GAAInQ,MAAO,MACpC,SAACgG,EAAA,EAAD,CAAelB,GAAIqL,EAAM,GAAInQ,MAAO,MACpC,SAACgG,EAAA,EAAD,CAAelB,GAAIqL,EAAM,GAAInQ,MAAO,UAP1C,GAaJ,CACEgF,MAAO,sBACPoS,UAAW,sBACXtU,IAAK,sBACLuU,OAAQ,IAA2C,IAA1C,OAAE9H,EAAF,MAAUvK,EAAV,kBAAiB0S,GAAwB,EAChD,OACE,UAAC,IAAD,CAAOJ,UAAU,WAAjB,WACE,gCAAQ/H,MACR,sCAAcvK,MACd,SAAC,IAAD,CAAMyS,IAAK,EAAGD,MAAI,EAAlB,UACE,SAAC,KAAD,CAAM1S,GAAI4S,EAAkB5S,GAAI9E,MAAO,SAL7C,GAWJ,CACEgF,MAAO,kCACPoS,UAAW,yBACXtU,IAAK,yBACLuU,OAASrH,GACFA,GAKH,UAAC,IAAD,CAAOsH,UAAU,WAAjB,WACE,gCAAQtH,EAAMT,WACd,4BAAOS,EAAMvB,SAAS5N,OAAtB,aACA,UAAC,IAAD,YACE,SAAC,IAAD,CAAOyW,UAAU,WAAjB,SACGtH,EAAMxD,WAAWhM,KAAK2O,IACrB,SAAC,KAAD,CAA8BrK,GAAE,eAAUqK,EAAIlC,UAAYjN,MAAO,IAAjDmP,EAAIlC,eAGxB,SAAC,IAAD,CAAOqK,UAAU,WAAjB,SACGtH,EAAMvB,SAASjO,KAAKyF,IACnB,SAAC,KAAD,CAAmBnB,GAAImB,EAAQjG,MAAO,IAA3BiG,cAfZ,SAAC,IAAD,CAAOtD,QAAQ,WAAWgC,KAAK,WAuB5C,CACEK,MAAO,UACPoS,UAAW,UACXtU,IAAK,UACLuU,OAAQ,IAAwB,IAAvB,OAAE9H,EAAF,MAAU6F,GAAY,EAC7B,OACE,UAAC,IAAD,CAAOkC,UAAU,WAAWlW,MAAO,CAAEuW,UAAW,IAAKC,UAAW,QAAhE,WACE,gCAAQrI,KACP6F,EAAM5U,KAAI,CAACqX,EAAoBxW,KAC9B,0BAAmCwW,EAAKvS,MAAxC,UAAcuS,EAAK/S,GAAnB,YAAyBzD,QAJ/B,KAYA,KAAEyW,EAAF,UAAQC,GClLT,SAA2BjQ,GAChC,MAAM,aAAE/F,GAAiBC,EAAAA,EAAAA,SACnBgW,GAAcC,EAAAA,EAAAA,MAEdpW,EAASyB,EAAAA,EAAAA,MAAA,OAAsBwE,QAAtB,IAAsBA,EAAAA,EAAiB,OAE/CoQ,EAASC,IAAc9F,EAAAA,EAAAA,WAAS,GAEjCpQ,GAAeL,EAAAA,EAAAA,GAAqBC,EAAQ,CAAE0D,QAAS+C,QAAQzG,KAE/DuW,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,WAAYnT,UAAwB,IAAD,cACjC,MAAMoT,EAAQxV,EAAKvC,KAAKwP,IACtB,MAAMwI,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAD,UAAe7W,EAAf,YAAyBmO,EAAMlL,KACjD,OAAO6T,EAAAA,EAAAA,IAAOH,EAAQxI,EAAtB,IAGI4I,GAASH,EAAAA,EAAAA,IAAIC,EAAAA,GAAD,UAAe7W,EAAf,aACZgX,EAAkB5W,EAAac,KAErC,IAAK8V,EACH,MAAM,IAAIpR,MAAM,uBAGlB,MAAMqR,GAAwB,kBACzBD,GADyB,IAE5B,CAAClV,EAAAA,EAAAA,WAA6B,CAC5BT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,WAA4B4L,OAChElM,KAAMhD,KAAK0Y,WACTC,EAAAA,EAAAA,IAAiB,IACZ3Y,KAAKC,MAAMuY,EAAgBlV,EAAAA,EAAAA,WAA4BN,SACvDN,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,WAA4B+F,aAIvD,CAAC/F,EAAAA,EAAAA,QAA0B,CACzBT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,QAAyB4L,OAC7DlM,KAAMhD,KAAK0Y,WACTC,EAAAA,EAAAA,IAAiB,IACZ3Y,KAAKC,MAAL,UAAWuY,EAAgBlV,EAAAA,EAAAA,QAAyBN,YAApD,QAA4D,SAC5DN,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,QAAyB0L,YAIpD,CAAC1L,EAAAA,EAAAA,YAA8B,CAC7BT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,YAA6B4L,OACjElM,KAAMhD,KAAK0Y,WACTC,EAAAA,EAAAA,IAAiB,IACZ3Y,KAAKC,MAAMuY,EAAgB/B,WAAWzT,SACtCN,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,YAA6BqN,cAIxD,CAACrN,EAAAA,EAAAA,SAA2B,CAC1BT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,SAA0B4L,OAC9DlM,KAAM,MAER,CAACM,EAAAA,EAAAA,SAA2B,CAC1BT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,SAA0B4L,OAC9DlM,KAAMhD,KAAK0Y,WACTC,EAAAA,EAAAA,IAAiB,IACZ3Y,KAAKC,MAAL,iBAAWuY,QAAX,IAAWA,GAAX,UAAWA,EAAkBlV,EAAAA,EAAAA,gBAA7B,aAAW,EAA6CN,YAAxD,QAAgE,SAChEN,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,SAA0B0L,YAIrD,CAAC1L,EAAAA,EAAAA,qBAAuC,CACtCT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,qBAAsC4L,OAC1ElM,KAAM,MAER,CAACM,EAAAA,EAAAA,qBAAuC,CACtCT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,qBAAsC4L,OAC1ElM,KAAMhD,KAAK0Y,WACTC,EAAAA,EAAAA,IAAiB,IACZ3Y,KAAKC,MAAL,iBAAWuY,QAAX,IAAWA,GAAX,UAAWA,EAAkBlV,EAAAA,EAAAA,4BAA7B,aAAW,EAAyDN,YAApE,QAA4E,SAC5EN,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,qBAAsC0L,WACxDtM,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,qBAAsC+T,kBAAkB5S,SAInF,CAACnB,EAAAA,EAAAA,wBAA0C,CACzCT,WAAYH,EAAKA,EAAKlC,OAAS,GAAGiE,GAClC1B,aAAcL,EAAKA,EAAKlC,OAAS,GAAG8C,EAAAA,EAAAA,wBAAyC4L,OAC7ElM,KAAMhD,KAAK0Y,WACTC,EAAAA,EAAAA,IAAiB,IACZ3Y,KAAKC,MAAL,iBAAWuY,QAAX,IAAWA,GAAX,UAAWA,EAAkBlV,EAAAA,EAAAA,+BAA7B,aAAW,EAA4DN,YAAvE,QAA+E,SAC/EN,EAAKvC,KAAK0S,GAAMA,EAAEvP,EAAAA,EAAAA,wBAAyC0L,cAOtE,OAFAsJ,EAAAA,EAAAA,IAAOC,EAAQE,GAERG,QAAQC,IAAIX,EAAnB,EAGFhQ,UAAW,KACTxG,EAAayG,KAAK,CAChB7F,QAAS,aACTC,UAAW,eAEboV,EAAYmB,kBAAkB,CAC5BhX,SAAU,CAACN,EAAQ,aAErBsW,GAAW,EAAX,EAGFiB,QAAS,KACPrX,EAAaW,MAAM,CACjBC,QAAS,oBACTC,UAAW,cAFb,IAOJ,MAAO,CACLsV,UACAC,aACAL,KAAMM,EAASiB,YACftB,UAAWK,EAASL,UAEvB,CDkD6BuB,CAAiB,OAACxR,QAAD,IAACA,EAAAA,EAAiB,MAE/D,OACE,2BACGoP,EAAS7S,YAAa,wCACtB6S,EAAS/E,SAAS3R,KAAK+Y,IACtB,SAAC,IAAD,CAAqB5W,QAAS4W,EAAS5U,KAAK,UAAUC,UAAQ,GAAlD2U,MAEd,UAAC,IAAD,CAAMC,QAAQ,gBAAgBC,MAAM,SAApC,WACE,oCAAYvC,EAAS1N,QAAQ3I,WAC7B,SAAC,KAAD,CACE6Y,QAAS,IAAM5B,EAAKZ,EAAS1N,SAC7BmQ,QAAS5B,EACT6B,SAA8C,KAApC,UAAC1C,EAAS1N,eAAV,QAAqB,IAAI3I,OACnC8D,KAAK,UACLiM,KAAK,QALP,sBAUF,SAAC,IAAD,CAAOuG,QAASA,EAAS0C,WAAU,UAAE3C,EAAS1N,eAAX,QAAsB,OAG9D,C,cE9MM,SAASsQ,EAAT,GAOe,IAPM,SAC1BlS,EAD0B,YAE1BmS,EAF0B,cAG1BjP,EAH0B,iBAI1BkP,EAJ0B,UAK1B9H,EAL0B,aAM1B+H,GACmB,EACnB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,MAAM,WACNC,MAAOvS,EACPwS,SAAUL,EACVjY,QAAS,CAACuY,EAAAA,IACVC,YAAY,uBAEd,SAAC,KAAD,CACEJ,MAAM,mBACNC,MAAOrP,EACPsP,SAAUJ,EACVlY,QAAS,CAAC,EAAG,EAAG,GAChBwY,YAAY,qBAEd,SAAC,KAAD,CACEJ,MAAM,aACNC,MAAOjI,EACPkI,SAAUH,EACVnY,QAAS,CAAC,EAAG,EAAG,GAAI,GAAI,IACxBwY,YAAY,sBAInB,C,wBCCD,QArCA,WACE,MAAO1S,EAAUmS,IAAe1H,EAAAA,EAAAA,UAAS,KAClCvH,EAAekP,IAAoB3H,EAAAA,EAAAA,UAAS,IAC5CH,EAAW+H,IAAgB5H,EAAAA,EAAAA,UAAS,GAErC6E,EAAWjF,EAAkB3J,QAAQV,GAAWA,EAAsBkD,EAAeoH,GAE3F,OACE,SAAC,KAAD,CAAYlN,MAAM,cAAlB,UACE,UAAC,IAAD,CAAQuV,UAAQ,EAAhB,WACE,UAACC,EAAA,EAAD,YACE,SAAC,KAAD,CAAenW,UAAW6S,EAAS7S,UAAW3B,MAAO,KAAM6B,iBAAkB2S,EAAS7S,aACtF,SAACyV,EAAD,CACElS,SAAUA,EACVmS,YAAaA,EACbjP,cAAeA,EACfkP,iBAAkBA,EAClB9H,UAAWA,EACX+H,aAAcA,QAIlB,SAAC,YAAD,CAAgBla,UAAU,UAA1B,UACE,UAACqE,EAAA,EAAD,CACEC,UAAW6S,EAAS7S,UACpB3B,MAAO,KACP6B,iBAAkB2S,EAAS7S,UAH7B,WAKE,SAAC,UAAD,CAAkBoW,MAAO,EAAzB,8BACA,SAACxD,EAAD,CAAgBrP,SAAUA,EAAUsP,SAAUA,aAMzD,C,iMCzCM,MAAMwD,EAA2B,EAE3BC,EAAiB,CAC5BC,WAAY,aACZC,YAAa,cACbC,gBAAiB,kBACjBC,iBAAkB,mBAClBC,gBAAiB,kBACjBC,WAAY,aACZC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,eAAgB,iBAChBC,OAAQ,SACRC,SAAU,WACVC,WAAY,aACZC,eAAgB,iBAChBC,aAAc,eACdC,cAAe,gBACfC,iBAAkB,mBAClBC,wBAAyB,0BACzBC,uBAAwB,yBACxBC,eAAgB,iBAChBC,SAAU,WACVC,cAAe,gBACfC,SAAU,WACVC,gBAAiB,kBACjBC,iBAAkB,mBAClBC,oBAAqB,sBACrBC,cAAe,gBACfC,OAAQ,SACRC,eAAgB,iBAChBC,gBAAiB,kBACjBC,uBAAwB,yBACxBC,UAAW,YACXC,aAAc,eACdC,UAAW,YACXC,cAAe,gBACfC,cAAe,gBACfC,SAAU,WACVC,eAAgB,iBAChBC,iBAAkB,mBAClBC,oBAAqB,sBACrBC,YAAa,cACbC,cAAe,gBACfC,iBAAkB,mBAClBC,OAAQ,SACRC,WAAY,aACZC,OAAQ,SACRC,qBAAsB,uBACtBC,0BAA2B,4BAC3BC,uBAAwB,0BAGbC,EAA0B,CACrClD,EAAeE,YACfF,EAAeU,eACfV,EAAea,WACfb,EAAec,eACfd,EAAee,aACff,EAAegB,cACfhB,EAAekB,wBACflB,EAAemB,uBACfnB,EAAeyB,iBACfzB,EAAe0B,oBACf1B,EAAe8B,gBACf9B,EAAeqC,SACfrC,EAAesC,eACftC,EAAeuC,kBAGJY,EAAwB,CAAC,KAAM,MAE/BzD,EAA6B,KAE7B0D,EAA0C,CACrDC,WAAY,OACZ,kBAAmB,OACnB,mBAAoB,QACpB,kBAAmB,SACnBC,WAAY,OACZC,WAAY,OACZC,WAAY,OACZC,WAAY,GACZ,cAAe,GACf,iBAAkB,OAClB,oBAAqB,OACrB,kBAAmB,OACnB,kBAAmB,OACnB,iBAAkB,OAClBC,UAAW,GACX,eAAgB,OAChB,gBAAiB,GACjB,gBAAiB,GACjB,sBAAuB,WACvB,gBAAiB,OACjBC,OAAQ,QAKGC,GAAiBC,EAAAA,EAAAA,OAC5B,CACE,CACE1b,IAAK,cACL0L,KAAM,cACNiQ,OAAQ,OACRC,SAAU,GACVC,QAAS,EACTC,UAAW/X,EAAAA,IAEb,CACE/D,IAAK,SACL0L,KAAM,SACNiQ,OAAQ,QACRC,SAAU,GACVC,QAAS,EACTC,UAAW9X,EAAAA,IAEb,CACEhE,IAAK,SACL0L,KAAM,SACNiQ,OAAQ,QACRC,SAAU,IACVC,QAAS,EACTC,UAAWzX,EAAAA,IAEb,CACErE,IAAK,kBACL0L,KAAM,kBACNiQ,OAAQ,OACRC,SAAU,IACVC,QAAS,EACTC,UAAW5Y,EAAAA,IAGf,OAMW6Y,EAAwB,CACnC,CAAE3E,MAAO,MAAOC,MAAO,IACvB,CAAED,MAAO,MAAOC,MAAO,GACvB,CAAED,MAAO,MAAOC,MAAO,GACvB,CAAED,MAAO,MAAOC,MAAO,GACvB,CAAED,MAAO,OAAQC,MAAO,KAMb2E,EAAsB,CACjC,CACE5E,MAAO,IACPC,MAAO,GAET,CACED,MAAO,KACPC,MAAO,IAET,CACED,MAAO,KACPC,MAAO,IAET,CACED,MAAO,KACPC,MAAO,IAET,CACED,MAAO,MACPC,MAAO,MAOE4E,EAAoB,CAC/B,CACE7E,MAAO,QACPC,MAAO,KAET,CACED,MAAO,SACPC,MAAO,KAET,CACED,MAAO,QACPC,MAAO,KAET,CACED,MAAO,UACPC,MAAO,MAIEtM,EAAkB,CAC7BmR,UAAW,GACXC,WAAY,EACZC,SAAU,EACVC,QAAS,EACTC,cAAe,IAKJC,IAFkBC,EAAAA,EAAAA,QAAOzR,GAEA,CACpCmR,SAAU,IACVC,UAAW,IACXC,QAAS,IACTC,QAAS,IACTC,cAAe,MAGJG,EAAyBhW,OAAO4L,KAAKtH,GAAiBrN,KAAKsC,IAAD,CACrEqX,MAAOrX,EAAI0c,cACXtF,OAAOuF,EAAAA,EAAAA,YAAW3c,OAKP4c,EAAmC,CAAEjc,GAAI,GAAID,GAAI,IAEjD8G,EAAY,I,yLCxNlB,SAASqV,EAAoBzZ,GAElC,OAAOA,EAAI0Z,UAAU,OAAOC,QAAQ,mBAAoB,GACzD,CAWM,MAAMC,EAAqB,SAAC/c,GAA0C,IAAvBgd,EAAsB,uDAAX,OAC/D,MAAMC,EAAsB,CAAC,EACvBC,EAA0B,CAAC,EAmBjC,OAjBA1W,OAAOoB,OAAO5H,GAAMqG,SAAS4G,IACtBA,EAAM+P,IACTlW,QAAQnH,MAAR,mBAA0Bqd,EAA1B,8BAAwD/P,IAG1D,MAAMkQ,EAAWP,EAAoB3P,EAAM+P,GAAUP,eAEjDQ,EAAOE,SACoB3V,IAAzB0V,EAAWC,KACbD,EAAWC,GAAY,CAACF,EAAOE,GAAUpb,KAE3Cmb,EAAWC,GAAUzV,KAAKuF,EAAMlL,KAEhCkb,EAAOE,GAAYlQ,CACpB,IAGIiQ,CACR,EAUYE,EAAc,SAACja,EAAanD,GAA0C,IAAvBgd,EAAsB,uDAAX,OACrE,MAAMK,EAAuB,CAAC,EACxBjG,EAAQwF,EAAoBzZ,EAAI0D,OAAO4V,eAC7C,OAAKrF,GAASA,EAAMtZ,OAAS6Z,EAAAA,GAAyB,CAAC,GAEvDnR,OAAOoB,OAAO5H,GAAMqG,SAAS4G,IAC3B,MAAMqQ,EAAiC,kBAApBrQ,EAAM+P,GAAyB/P,EAAM+P,GAAY1f,KAAK0Y,UAAU/I,EAAM+P,IACnFO,EAAWX,EAAoBU,EAAIb,gBAErCc,EAAS3W,SAASwQ,IAAUoG,IAAAA,kBAAmCra,EAAKoa,GAAY,MAClFF,EAAQpQ,EAAMlL,IAAMub,EACrB,IAGID,EACR,EAQYvT,EAAY,eAAChM,EAAD,uDAAU,EAAG8d,EAAb,uDAAuB,EAAvB,OACvB,IAAIvW,MAAMvH,GAAQU,KAAK,GAAGf,KAAI,CAAC0S,EAAG7C,IAAM6C,EAAI7C,EAAIsO,GADzB,EAQZ3F,EAAuBwH,GAC3BpY,MAAMqY,KAAK,IAAIC,IAAIF,IAkBrB,SAASG,EAAqBC,EAAkBC,GACrD,MAAMC,EAAO,IAAIC,KAAK,CAAC1gB,KAAK0Y,UAAU6H,EAAK,KAAM,IAAK,CAAEjc,KAAM,qBACxDqc,EAAgBC,SAASC,cAAc,KAC7CF,EAAcG,KAAOC,OAAOC,IAAIC,gBAAgBR,GAChDE,EAAcO,SAAWV,EACzBG,EAAcQ,QACdJ,OAAOC,IAAII,gBAAgBT,EAAcG,KAC1C,CAUM,MAAMO,EAAe,SAACra,GAAgE,IAA1Csa,EAAyC,uDAApB,GACtE,SAASC,EAAShB,GAChB,IAAIiB,EAAAA,EAAAA,UAASjB,KAASxY,MAAM0Z,QAAQlB,GAAM,CACxC,MAAMmB,EAAaxY,OAAO4L,KAAKyL,GAC5B5R,QAAQlM,GAAQ,CAAC,KAAM,OAAQ,QAAS,QAAQ6G,SAAS7G,KACzDkM,QAAQlM,GAAQ6e,EAAShY,SAAS7G,KAClCkf,OACCzY,OAAO4L,KAAKyL,GACT5R,QAAQlM,IAAS,CAAC,KAAM,OAAQ,QAAS,QAAQ6G,SAAS7G,KAC1DwM,QAGP,OAAO2S,EAAAA,EAAAA,OAAMrB,GACVsB,UACAvQ,QAAO,QAAE7O,EAAKuF,GAAP,SAAc0Z,EAAWI,QAAQrf,EAAjC,IACPtC,KAAI,QAAEsC,EAAKqX,GAAP,QAAkB,CAACrX,EAAK8e,EAASzH,GAAjC,IACJiI,YACAjI,OACJ,CACD,OAAOyG,CACR,CAED,OAAOgB,EAASva,EACjB,EAQYgb,EAAgCzB,KACtCiB,EAAAA,EAAAA,UAASjB,KAAQ0B,EAAAA,EAAAA,QAAO1B,GACpBA,EAILxY,MAAM0Z,QAAQlB,GACTA,EAAIpgB,KAAKmN,GAAS0U,EAAgB1U,KAAOqB,QAAQrB,KAAU4U,EAAAA,EAAAA,aAAY5U,MAIzE6U,EAAAA,EAAAA,WACL5B,GACA,CAACxR,EAAQ+K,EAAOrX,MACV+e,EAAAA,EAAAA,UAAS1H,KACXA,EAAQkI,EAAgBlI,KAIrBoI,EAAAA,EAAAA,aAAYpI,KACfsI,EAAAA,EAAAA,KAAIrT,EAAsBtM,EAAKqX,EAChC,GAEH,CAAC,GAWQuI,EAA0B,CACrC3f,EACA4f,IAEOpZ,OAAO4L,KAAKpS,GAAM6H,QAAO,CAACC,EAA8B/H,KAC7D+H,EAAI/H,GAAO6f,EAAoBA,EAAkBtiB,KAAKC,MAAMyC,EAAKD,KAASzC,KAAKC,MAAMyC,EAAKD,IACnF+H,IACN,CAAC,GASO+X,EAAwB,CACnC7f,EACA8f,IAEOtZ,OAAO4L,KAAKpS,GAAM6H,QAAO,CAACC,EAAyB/H,KACxD+H,EAAI/H,GAAOzC,KAAK0Y,UAAU8J,EAAkBA,EAAgB9f,EAAKD,IAAQC,EAAKD,IACvE+H,IACN,CAAC,GAGOiY,EAAqB,KAChC,MAAMC,EAAM,IAAI9S,KACVJ,EAAOkT,EAAIC,cACXlT,EAAQmT,OAAOF,EAAIG,WAAa,GAAGC,SAAS,EAAG,KAC/CpT,EAAMkT,OAAOF,EAAIK,WAAWD,SAAS,EAAG,KACxCE,EAAQJ,OAAOF,EAAIO,YAAYH,SAAS,EAAG,KAC3CI,EAAUN,OAAOF,EAAIS,cAAcL,SAAS,EAAG,KAErD,MAAM,GAAN,OAAUtT,EAAV,YAAkBC,EAAlB,YAA2BC,EAA3B,YAAkCsT,EAAlC,YAA2CE,EAA3C,EAGWE,EAAgBhV,IACpBiV,EAAAA,EAAAA,SAAQjV,GAAW3J,GAAOuB,OAAOvB,KAO7B6e,EAAOxe,iBAA4B,IAArBye,EAAoB,uDAAT,UAC9B,IAAI3K,SAAS4K,GAAYC,WAAWD,EAASD,IACpD,C,+JCzNYG,GAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAAAA,QAAN,cAKGC,EAAAA,EAWRC,YACEC,EACApiB,GAEAqiB,SADA,iHAPA,KAOA,sFAGA,OAAAC,KAAA,EAAeF,GACfE,KAAKC,WAAWviB,GAChBsiB,KAAKE,eACL,OAAAF,KAAA,UAAAA,KACF,CAEUE,cACRF,KAAKG,OAASH,KAAKG,OAAOC,KAAKJ,MAC/BA,KAAKK,MAAQL,KAAKK,MAAMD,KAAKJ,KAC/B,CAEAC,WACEviB,GACA,MACA,MAAM4iB,EAAcN,KAAKtiB,QAGzBsiB,KAAKtiB,SAAU,OAAAsiB,KAAA,GAAaO,uBAAuB7iB,IAC9C8iB,EAAAA,EAAAA,IAAoBR,KAAKtiB,QAAS4iB,KACrC,OAAAN,KAAA,GAAaS,mBAAmBC,OAAO,CACrCngB,KAAM,yBACNyT,UAAUA,EAAAA,EAAAA,GAAAgM,KAAV,GACAW,SAAUX,OAKZM,OAAAA,QAAAA,IAAAA,GAAAA,EAAaM,aACbZ,KAAKtiB,QAAQkjB,cACbC,EAAAA,EAAAA,IAAQP,EAAYM,gBAAiBC,EAAAA,EAAAA,IAAQb,KAAKtiB,QAAQkjB,aAE1DZ,KAAKK,QAC4C,aAAxC,kBAAAL,KAAA,yBAAuBc,MAAMC,UACtC,OAAAf,KAAA,GAAsBC,WAAWD,KAAKtiB,QAE1C,CAEUsjB,gBACkB,MAArBhB,KAAKiB,iBACR,kBAAAjB,KAAA,mBAAuBkB,eAAelB,MAE1C,CAEAmB,iBAAiBC,IACf,OAAApB,KAAA,UAAAA,OAEA,OAAAA,KAAA,UAAAA,KAAaoB,EACf,CAEAC,mBAME,OAAO,OAAArB,KAAP,EACF,CAEAK,QAAc,MAGZ,kBAAAL,KAAA,mBAAuBkB,eAAelB,OACtC,OAAAA,KAAA,OAAwB,IACxB,OAAAA,KAAA,UAAAA,OACA,OAAAA,KAAA,UAAAA,KACF,CAEAG,OACEmB,EACA5jB,GACgB,MAWhB,OAVA,OAAAsiB,KAAA,EAAsBtiB,GAEtB,kBAAAsiB,KAAA,mBAAuBkB,eAAelB,OAEtC,OAAAA,KAAA,GAAwB,OAAAA,KAAA,GACrBS,mBACAc,OAFqB,OAEfvB,KAFe,GAEDA,KAAKtiB,WAE5B,OAAAsiB,KAAA,GAAsBwB,YAAYxB,OAE3B,OAAAA,KAAA,GAAsByB,QAAQH,EACvC,I,aAEsB,QACpB,MAAMR,EAAA,QAAAA,EAAA,QAAAA,GAAAA,EAAAA,EAAAA,GACJd,KADI,uBACJ,EAAuBc,aADnB,SAEJY,EAAAA,EAAAA,MAEF,OAAA1B,KAAA,qBACKc,GADL,IAEEnN,UAA4B,YAAjBmN,EAAMC,OACjB5iB,UAA4B,YAAjB2iB,EAAMC,OACjB1iB,QAA0B,UAAjByiB,EAAMC,OACf7gB,OAAyB,SAAjB4gB,EAAMC,OACdZ,OAAQH,KAAKG,OACbE,MAAOL,KAAKK,QAEhB,C,WAEQe,GACNO,EAAAA,EAAAA,OAAoB,KAElB,IAAI,OAAA3B,KAAA,IAAuBA,KAAKiB,eAAgB,CAC9C,MAAMK,GAAY,OAAAtB,KAAA,GAAoBsB,UAChCM,GAAU,OAAA5B,KAAA,GAAoB4B,QAEJ,YAAhC,GAAqB,aAAjB,OAAAR,QAAA,IAAAA,OAAA,EAAAA,EAAQ7gB,MACV,qBAAAyf,KAAA,IAAoB7b,iBAApB,gBAAgCid,EAAOziB,KAAM2iB,EAAWM,GACxD,qBAAA5B,KAAA,IAAoB6B,iBAApB,gBAAgCT,EAAOziB,KAAM,KAAM2iB,EAAWM,QAChE,GAA4B,WAAjB,OAAAR,QAAA,IAAAA,OAAA,EAAAA,EAAQ7gB,MAAkB,aACnC,qBAAAyf,KAAA,IAAoBhL,eAApB,gBAA8BoM,EAAO9iB,MAAOgjB,EAAWM,GACvD,qBAAA5B,KAAA,IAAoB6B,iBAApB,qBACE,EACAT,EAAO9iB,MACPgjB,EACAM,EAEJ,CACF,CAGA5B,KAAK8B,UAAU9c,SAAS+c,IACtBA,GAASA,EAAAA,EAAAA,GAAA/B,KAAT,MADF,GAIJ,C,wBC3JK,SAAS/L,EAMdvW,EACAkW,GAEA,MAAMkM,GAASjM,EAAAA,EAAAA,IAAeD,IAEvB+M,GAAkBqB,EAAAA,UACvB,IACE,IAAIrC,EACFG,EACApiB,KAIAskB,EAAAA,WAAU,KACdrB,EAASV,WAAWviB,EAApB,GACC,CAACijB,EAAUjjB,IAEd,MAAMsN,EAAegX,EAAAA,qBACbA,EAAAA,aACHC,GACCtB,EAASuB,UAAUP,EAAAA,EAAAA,WAAyBM,KAC9C,CAACtB,KAEH,IAAMA,EAASU,qBACf,IAAMV,EAASU,qBAGXlB,EAAe6B,EAAAA,aAGnB,CAACV,EAAWa,KACVxB,EAASR,OAAOmB,EAAWa,GAAeC,MAAMC,EAAAA,EAAhD,GAEF,CAAC1B,IAGH,GACE3V,EAAO1M,QACPgkB,EAAAA,EAAAA,GAAiB3B,EAASjjB,QAAQ6kB,aAAc,CAACvX,EAAO1M,QAExD,MAAM0M,EAAO1M,MAGf,OAAO,kBAAK0M,GAAZ,IAAoBmV,SAAQlL,YAAajK,EAAOmV,QAClD,C","sources":["components/Daily/CanvasSVG.tsx","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","pages/ArteRuim/useArteRuimDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx","utils/constants.ts","utils/index.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { type QueryKey, type UseQueryOptions, useQuery } from '@tanstack/react-query';\n\nimport { printFirebase } from 'services/firebase';\nimport type { DailyHistory } from '../utils/types';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {},\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only the error should cause this notification\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]);\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport type { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory,\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key],\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n\nexport const DAILY_GAMES_KEYS = {\n  ARTE_RUIM: 'arte-ruim',\n  ARTISTA: 'artista',\n  AQUI_O: 'aqui-o',\n  COMUNICACAO_ALIENIGENA: 'comunicacao-alienigena',\n  CONTROLE_DE_ESTOQUE: 'controle-de-estoque',\n  FILMACO: 'filmaco',\n  PALAVREADO: 'palavreado',\n  TEORIA_DE_CONJUNTOS: 'teoria-de-conjuntos',\n};\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Optional padding\n   */\n  padding?: number;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, padding = 6, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px`, padding }}>\n      <svg\n        viewBox=\"0 0 512 512\"\n        style={{ width: `${width - padding * 2}px`, height: `${width - padding * 2}px` }}\n      >\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  const baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { type QueryKey, type UseQueryOptions, useQueries, useQuery } from '@tanstack/react-query';\nimport { App } from 'antd';\nimport type { FirebaseDataDrawing } from 'components/Daily/utils/types';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { printFirebase } from 'services/firebase';\nimport type { DrawingData, DrawingEntry } from 'types';\nimport { SEPARATOR } from 'utils/constants';\n\n/**\n * Custom hook for loading drawings.\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadFirebaseDrawings(enabled: boolean, queryLanguage: Language) {\n  type DataSuffixCounts = {\n    drawingsPT: number;\n    drawingsEN: number;\n  };\n\n  const DRAWING_SUFFIX_DATA = {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  };\n\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only notify on error\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]);\n\n  const suffixData = DRAWING_SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData as keyof DataSuffixCounts] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  // biome-ignore lint/correctness/useExhaustiveDependencies: notification function shouldn't trigger\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount, docPrefix, enabled]);\n\n  return useQueries({ queries });\n}\n\nfunction extractCreatedAt(key: string): number {\n  const parts = key.split(/::|:;|;;/); // Split by either '::' or ':;'\n  const createdAtPart = parts[1];\n  const createdAt = Number(createdAtPart);\n  if (Number.isNaN(createdAt)) {\n    console.log('🔆 Invalid createdAt', key, createdAt);\n  }\n  return Number.isNaN(createdAt) ? 1619161200000 : createdAt;\n}\n\nexport function useDrawingsResourceData(enabled: boolean, language: string) {\n  const firebaseDrawingsQueries = useLoadFirebaseDrawings(enabled, language as Language);\n  const tdrDrawingsQuery = useTDResource<DrawingData>(`arte-ruim-drawings-${language}`, enabled);\n\n  const isDrawingsLoading = firebaseDrawingsQueries.some((q) => q.isLoading);\n  const isDrawingsSuccess = firebaseDrawingsQueries.every((q) => q.isSuccess);\n\n  const drawings = useMemo(() => {\n    if (!isDrawingsSuccess) return {};\n    if (!tdrDrawingsQuery.isSuccess) return {};\n\n    const allDrawings = tdrDrawingsQuery.data ?? {};\n\n    (firebaseDrawingsQueries ?? []).forEach((drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, FirebaseDataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--')) {\n          return;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return;\n        }\n\n        const createdAt = extractCreatedAt(key);\n        const artistId = dataDrawing.playerId ?? 'unknown';\n        const entryId = [cardId, artistId, createdAt].join(SEPARATOR);\n        const drawingEntry: DrawingEntry = {\n          id: entryId,\n          drawing: dataDrawing.drawing,\n          artistId,\n          createdAt,\n        };\n\n        if (allDrawings[cardId] === undefined) {\n          allDrawings[cardId] = {\n            id: cardId,\n            text: dataDrawing.text,\n            drawings: [drawingEntry],\n            updatedAt: drawingEntry.createdAt,\n          };\n        } else {\n          if (!allDrawings[cardId].drawings.some((d) => d.id === drawingEntry.id)) {\n            allDrawings[cardId].drawings.push(drawingEntry);\n\n            if (drawingEntry.createdAt > allDrawings[cardId].updatedAt) {\n              allDrawings[cardId].updatedAt = drawingEntry.createdAt;\n            }\n          }\n        }\n      });\n    });\n\n    return allDrawings;\n  }, [firebaseDrawingsQueries, isDrawingsSuccess, tdrDrawingsQuery.data, tdrDrawingsQuery.isSuccess]);\n\n  const drawingsPerArtist = useMemo(() => {\n    return Object.values(drawings).reduce((acc: Record<string, DrawingPerArtist>, drawing) => {\n      drawing.drawings.forEach((drawingEntry) => {\n        const artistId = drawingEntry.artistId;\n        if (acc[artistId] === undefined) {\n          acc[artistId] = {\n            artistId,\n            drawingsCount: 1,\n            firstDrawingAt: drawingEntry.createdAt,\n            lastDrawingAt: drawingEntry.createdAt,\n          };\n        } else {\n          acc[artistId].drawingsCount += 1;\n\n          if (drawingEntry.createdAt < acc[artistId].firstDrawingAt) {\n            acc[artistId].firstDrawingAt = drawingEntry.createdAt;\n          }\n          if (drawingEntry.createdAt > acc[artistId].lastDrawingAt) {\n            acc[artistId].lastDrawingAt = drawingEntry.createdAt;\n          }\n        }\n      });\n\n      return acc;\n    }, {});\n  }, [drawings]);\n\n  return {\n    isLoading: isDrawingsLoading || tdrDrawingsQuery.isLoading,\n    error: tdrDrawingsQuery.error,\n    hasResponseData: !isEmpty(drawings),\n    drawings,\n    drawingsPerArtist: Object.values(drawingsPerArtist),\n  };\n}\n\nexport type DrawingPerArtist = {\n  artistId: string;\n  drawingsCount: number;\n  firstDrawingAt: DateMilliseconds;\n  lastDrawingAt: DateMilliseconds;\n};\n\nexport const ARTIST_ID_ALIAS: Record<string, string> = {\n  '3PkJr': 'Flaviane',\n  '3c4lY': 'Kavis',\n  BPTEL: 'Maris',\n  '0vuXf': 'Marcio',\n  Bm6dr: 'Livia',\n  QrfLz: 'Stephanie',\n  AlRvI: 'Unknown',\n  pK3OY: 'Unknown',\n  VF9iG: 'Zenaide',\n  WWUvD: 'Fernanda',\n  aec7L: 'Anonymous',\n  Xsimf: 'Carol',\n  fV5ns: 'Diego',\n  qQo9N: 'Laura',\n  yVAl7: 'Rodrigo',\n  O2IQm: 'Drica',\n  '24qec': 'Mariana',\n};\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean,\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport type { ItemAttributesValues, ItemAttribute, Item } from 'types';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport type { DailyComunicacaoAlienigenaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAttributesValues>,\n  items: Dictionary<Item>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes).filter((attr) => !attr.limited && items?.[attr.id]?.nsfw !== true);\n  const allAttributesValues = values(attributeValues).filter((i) => i.complete);\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId] && !history.used.includes(entry.setId)) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  if (tries >= 100) {\n    updateWarnings('Not enough valid comunicacao alienigena games (over 100 attempts)');\n  }\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAttributesValues[],\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB) ?? '',\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC) ?? '',\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC) ?? '',\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC) ?? '',\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE,\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  if (!outOfStockGood) {\n    throw new Error('No out of stock good');\n  }\n  entry.orders.push(outOfStockGood);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport type { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[],\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size,\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string,\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word)),\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  const shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useEffect, useMemo, useState } from 'react';\nimport type {\n  ArteRuimCard,\n  DailyDiagramItem,\n  DailyDiagramRule,\n  DailyDiscSet,\n  DailyMovieSet,\n  ItemAttributesValues,\n  ItemAttribute,\n} from 'types';\n\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyComunicacaoAlienigenaGames } from '../utils/games/daily-comunicacao-alienigena';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\nimport type { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useParsedHistory } from './useParsedHistory';\nimport { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  warnings: string[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number,\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n  const [warnings, setWarnings] = useState<string[]>([]);\n  const tdrItemsQuery = useTDResource<ItemAttribute>('items', enabled);\n\n  const updateWarnings = (newWarning: string) => {\n    setWarnings((prev) => [...prev, newWarning]);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: reset warnings on change of basic props\n  useEffect(() => {\n    setWarnings([]);\n  }, [batchSize, queryLanguage]);\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useDrawingsResourceData(enabled, queryLanguage);\n\n  const areDrawingsLoading = drawingsQuery.isLoading;\n  const [arteRuimHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTE_RUIM, historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory(DAILY_GAMES_KEYS.AQUI_O, historyQuery.data);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess || !tdrItemsQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(\n      batchSize,\n      aquiOHistory,\n      aquiOSetsQuery.data,\n      tdrItemsQuery.data,\n      updateWarnings,\n    );\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess, tdrItemsQuery]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory(DAILY_GAMES_KEYS.PALAVREADO, historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTISTA, historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds,\n      drawingsQuery.drawings,\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n    drawingsQuery.drawings,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory(DAILY_GAMES_KEYS.FILMACO, historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE,\n    historyQuery.data,\n  );\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS,\n    historyQuery.data,\n  );\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data,\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // SET 9: Comunicação Alienígena\n  const [comunicacaoAlienigenaHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA,\n    historyQuery.data,\n  );\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAttributesValues>(\n    'items-attribute-values',\n    enabled,\n  );\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const comunicacaoAlienigenaEntries = useMemo(() => {\n    if (\n      !historyQuery.isSuccess ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess ||\n      !tdrItemsQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data,\n      tdrItemsQuery.data,\n      updateWarnings,\n    );\n  }, [\n    batchSize,\n    historyQuery.isSuccess,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n    tdrItemsQuery,\n  ]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigenaEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n    comunicacaoAlienigenaEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading,\n    entries,\n    warnings,\n  };\n}\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyArteRuimEntry, DailyEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport type { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useDrawingsResourceData>,\n  queryLanguage: Language,\n  drawingsCount: number,\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings: DailyEntry['arte-ruim'][] = Object.values(drawingsQuery.drawings)\n    .filter((d) => {\n      // Remove used cards\n      if (history.used.includes(d.id)) {\n        return false;\n      }\n\n      // Remove cards with less than the required number of drawings\n      if (d.drawings.length < drawingsCount) {\n        return false;\n      }\n\n      return true;\n    })\n    .map((d) => ({\n      id: d.id,\n      type: 'arte-ruim',\n      language: queryLanguage ?? 'pt',\n      cardId: d.id,\n      text: d.text,\n      drawings: d.drawings.map((drawing) => drawing.drawing),\n      number: 0,\n      dataIds: d.drawings.map((drawing) => drawing.id),\n    }));\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(drawings), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { intersection, sampleSize, shuffle } from 'lodash';\nimport type { DailyDiscSet, Item } from 'types';\nimport type { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>,\n  items: Dictionary<Item>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    updateWarnings('Not enough aqui-o sets left');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  const availableItems = Object.values(items).filter((item) => {\n    if (item?.nsfw) return false;\n    return intersection(item.decks ?? [], ['alien', 'dream', 'thing']).length > 0;\n  });\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    lastDate = id;\n\n    if (isWeekend) {\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: history.latestNumber + i + 1,\n        setId: 'special',\n        title: {\n          pt: 'Especial Fim de Semana',\n          en: 'Weekend Special',\n        },\n        itemsIds: ['0', ...sampleSize(availableItems, 25).map((item) => item.id)],\n      };\n    } else {\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: history.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n  }\n\n  return entries;\n};\n","import { sampleSize } from 'lodash';\nimport type { ArteRuimCard } from 'types';\nimport type { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport type { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[],\n  drawings: ReturnType<typeof useDrawingsResourceData>['drawings'],\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) =>\n        !arteRuimHistory.used.includes(cardId) &&\n        !recentlyUsedIds.includes(cardId) &&\n        drawings?.[cardId]?.drawings?.length < 4,\n    );\n    const cards = sampleSize(availableCardsIds, 20).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { shuffle } from 'lodash';\nimport type { DailyMovieSet } from 'types';\nimport type { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>,\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { Alert, Button, Flex, Space, Table, type TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport type { ArteRuimCard } from 'types';\n\nimport { type UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport type { DailyComunicacaoAlienigenaEntry, DailyEntry } from './utils/types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry: DailyComunicacaoAlienigenaEntry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <span>{entry.itemsIds.length} items</span>\n            <Space>\n              <Space direction=\"vertical\">\n                {entry.attributes.map((req) => (\n                  <AlienSign key={req.spriteId} id={`sign-${req.spriteId}`} width={50} />\n                ))}\n              </Space>\n              <Space direction=\"vertical\">\n                {entry.itemsIds.map((itemId) => (\n                  <Item key={itemId} id={itemId} width={50} />\n                ))}\n              </Space>\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      {dataLoad.warnings.map((warning) => (\n        <Alert key={warning} message={warning} type=\"warning\" showIcon />\n      ))}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport type { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        [DAILY_GAMES_KEYS.ARTE_RUIM]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTE_RUIM].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.ARTE_RUIM].used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.ARTE_RUIM].cardId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.AQUI_O]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.AQUI_O].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.AQUI_O].used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.AQUI_O].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.PALAVREADO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.PALAVREADO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.PALAVREADO].keyword),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.ARTISTA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTISTA].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.FILMACO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.FILMACO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.FILMACO]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.FILMACO].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].setId),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].intersectingThing.id),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].setId),\n            ]),\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { ResponseState } from 'components/Common';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CITY_LOCATIONS: 'city-locations',\n  COLORS: 'colors',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_SCENES: 'crime-scenes',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  EMOTIONS: 'emotions',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SINGLE_WORDS: 'single-words',\n  SPECTRUMS: 'spectrums',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TEENAGE_RUMORS: 'teenage-rumors',\n  TEENAGE_STUDENTS: 'teenage-students',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n  WAREHOUSE_BOSS_IDEAS: 'warehouse-boss-ideas',\n  WARNING_SIGNS_DESCRIPTORS: 'warning-signs-descriptors',\n  WARNING_SIGNS_SUBJECTS: 'warning-signs-subjects',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CITY_LOCATIONS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_SCENES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n  RESOURCE_NAMES.TEENAGE_RUMORS,\n  RESOURCE_NAMES.TEENAGE_STUDENTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2496;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 256,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key',\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nexport const PLACEHOLDER_DUAL_LANGUAGE_OBJECT = { en: '', pt: '' };\n\nexport const SEPARATOR = ';;';\n","import { chain, isNull, isObject, isUndefined, orderBy, set, transform } from 'lodash';\nimport stringSimilarity from 'string-similarity';\nimport { SEARCH_THRESHOLD } from './constants';\n\n/**\n * Removes accents from a given string.\n *\n * This function normalizes the input string to its decomposed form (NFD)\n * and then removes any combining diacritical marks (accents).\n *\n * @param str - The input string from which to remove accents.\n * @returns The input string with accents removed.\n */\nexport function stringRemoveAccents(str: string) {\n  // biome-ignore lint/suspicious/noMisleadingCharacterClass: the regex is used to remove accents\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n * Checks for duplicate entries in the provided data based on a specified property.\n *\n * @param data - The data to check for duplicates.\n * @param [property='text'] - The property to check for duplicates. Defaults to 'text'.\n * @returns An object containing the duplicates found. The keys are the normalized property values, and the values are arrays of IDs of the duplicate entries.\n *\n * @throws {Error} If the specified property does not exist in an entry.\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n * Finds and returns similar entries from a given data object based on a provided string.\n *\n * @param str - The string to compare against the data entries.\n * @param data - The data object containing entries to search through.\n * @param property - The property of the data entries to compare the string with. Defaults to 'text'.\n * @returns An object containing entries that are similar to the provided string.\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Checks if an array has any duplicate elements.\n * @param arr - The array to check for duplicates.\n * @returns A boolean indicating whether the array has duplicates.\n * @template T - The type of elements in the array.\n */\nexport const hasDuplicates = <T>(arr: T[]): boolean => {\n  return new Set(arr).size !== arr.length;\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject, keyOrder: string[] = []): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .filter((key) => keyOrder.includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort(),\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Recursively removes `undefined` values from an object or array.\n * @template T - The type of the object to clean.\n * @param {T} obj - The object to clean.\n * @returns {T} - The cleaned object with no `undefined` values.\n */\nexport const deepCleanObject = <T = unknown>(obj: T): T => {\n  if (!isObject(obj) || isNull(obj)) {\n    return obj;\n  }\n\n  // If the object is an array, filter out undefined values\n  if (Array.isArray(obj)) {\n    return obj.map((item) => deepCleanObject(item)).filter((item) => !isUndefined(item)) as unknown as T;\n  }\n\n  // Recursively process each key for objects\n  return transform(\n    obj,\n    (result, value, key) => {\n      if (isObject(value)) {\n        value = deepCleanObject(value);\n      }\n\n      // Only assign if the value is not undefined\n      if (!isUndefined(value)) {\n        set(result as Partial<T>, key, value);\n      }\n    },\n    {} as T,\n  );\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData, TParsedData = TData>(\n  data: Dictionary<string>,\n  entryDeserializer?: (e: TData) => TParsedData,\n): Dictionary<TParsedData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TParsedData>, key) => {\n    acc[key] = entryDeserializer ? entryDeserializer(JSON.parse(data[key])) : JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData, TParsedData = TData>(\n  data: Dictionary<TData>,\n  entrySerializer?: (e: TData) => TParsedData,\n): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(entrySerializer ? entrySerializer(data[key]) : data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n\n/**\n * Pauses the execution for a specified duration.\n * @param duration - The duration to wait in milliseconds. Default is 1000ms.\n */\nexport const wait = async (duration = 1000) => {\n  await new Promise((resolve) => setTimeout(resolve, duration));\n};\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["CanvasSVG","drawing","className","width","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","useParsedHistory","key","data","history","useMemo","latestDate","getYesterday","latestNumber","used","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","DAILY_GAMES_KEYS","ARTE_RUIM","ARTISTA","AQUI_O","COMUNICACAO_ALIENIGENA","CONTROLE_DE_ESTOQUE","FILMACO","PALAVREADO","TEORIA_DE_CONJUNTOS","DataLoadingWrapper","isLoading","isIdle","hasResponseData","children","tip","description","type","showIcon","Sprite","id","padding","title","getUrl","useBaseUrl","async","response","fetch","text","enabled","paddedWidth","display","placeItems","svgContent","xlinkHref","dangerouslySetInnerHTML","__html","background","WarehouseGood","itemId","str","match","numId","Number","parseInt","goodId","sourceId","Math","ceil","getSource","clsx","AlienSign","Emoji","emojiId","startsWith","memoize","glyphId","Glyph","Item","library","baseUrl","process","folder","Error","join","useDrawingsResourceData","language","firebaseDrawingsQueries","queryLanguage","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Array","_","Boolean","onSuccess","info","useQueries","useLoadFirebaseDrawings","tdrDrawingsQuery","useTDResource","isDrawingsLoading","some","q","isDrawingsSuccess","every","drawings","allDrawings","forEach","drawingEntry","drawingsLibrary","Object","entries","dataDrawing","cardId","includes","trim","console","log","createdAt","createdAtPart","split","isNaN","extractCreatedAt","artistId","playerId","SEPARATOR","undefined","updatedAt","push","drawingsPerArtist","values","reduce","acc","drawingsCount","firstDrawingAt","lastDrawingAt","isEmpty","ARTIST_ID_ALIAS","BPTEL","Bm6dr","QrfLz","AlRvI","pK3OY","VF9iG","WWUvD","aec7L","Xsimf","fV5ns","qQo9N","yVAl7","O2IQm","useLoadWordLibrary","wordLength","selected","resourceName","query","res","json","generateComunicacaoAlienigenaGame","attributes","attributeValues","shuffledAttributeValues","shuffle","spriteIDs","makeArray","selectedAttributes","sampleSize","attr","spriteId","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","item","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","name","itemsIds","max","usedItemsIds","complexRequests","spritesIds","sample","simpleRequests","filter","requests","requestItemsIds","req","result","setId","sort","number","solution","random","valid","generateControleDeEstoqueGame","num","year","month","day","entry","Date","getDay","goods","orders","i","GOODS_SIZE","outOfStockGood","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","fixedKeyword","shuffledWords","difference","keyword","selectedWords","newWord","getNewWord","letters","shuffleLetters","usedLetters","uniq","flatMap","word","shortList","sortBy","intersection","preservedIndexes","otherLetters","shuffledLetters","shift","useLoadDailySetup","batchSize","warnings","setWarnings","useState","tdrItemsQuery","updateWarnings","newWarning","prev","drawingsQuery","areDrawingsLoading","arteRuimHistory","arteRuimEntries","count","dataIds","shuffledShortList","lastDate","e","getNextDay","buildDailyArteRuimGames","aquiOSetsQuery","aquiOHistory","aquiOEntries","discSets","items","completeSets","setEntry","notUsedSets","availableItems","nsfw","decks","isWeekend","checkWeekend","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","comunicacaoAlienigenaEntries","allAttributes","limited","allAttributesValues","complete","preliminaryEntries","tries","buildDailyComunicacaoAlienigenaGames","palavreado","artista","filmaco","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","wrap","gap","intersectingThing","maxHeight","overflowY","card","save","isPending","queryClient","useQueryClient","isDirty","setIsDirty","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","mutateAsync","useSaveDailySetup","warning","justify","align","onClick","loading","disabled","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","label","value","onChange","DEFAULT_LANGUAGE","placeholder","hasSider","PageSider","level","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CITY_LOCATIONS","COLORS","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_SCENES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","EMOTIONS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SINGLE_WORDS","SPECTRUMS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TEENAGE_RUMORS","TEENAGE_STUDENTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","WAREHOUSE_BOSS_IDEAS","WARNING_SIGNS_DESCRIPTORS","WARNING_SIGNS_SUBJECTS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","PLACEHOLDER_DUAL_LANGUAGE_OBJECT","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","keyOrder","sortKeys","isObject","isArray","sortedKeys","concat","chain","toPairs","indexOf","fromPairs","deepCleanObject","isNull","isUndefined","transform","set","deserializeFirebaseData","entryDeserializer","serializeFirebaseData","entrySerializer","getCurrentDateTime","now","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","sortItemsIds","orderBy","wait","duration","resolve","setTimeout","MutationObserver","Subscribable","constructor","client","super","this","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","observer","mutationKey","hashKey","state","status","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","getDefaultState","notifyManager","context","onSettled","listeners","listener","React","onStoreChange","subscribe","mutateOptions","catch","noop","shouldThrowError","throwOnError"],"sourceRoot":""}