{"version":3,"file":"static/js/Contenders.bbe919ce.chunk.js","mappings":"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","sources":["components/Common/DataFilters.tsx","components/Common/EditableFields.tsx","components/Common/PaginationWrapper.tsx","components/Images/ImageCard.tsx","hooks/useGridPagination.tsx","components/Contenders/ContenderEditCard.tsx","components/Contenders/ContendersContent.tsx","components/Contenders/ContendersFilters.tsx","pages/Contenders.tsx"],"sourcesContent":["import { Flex } from 'antd';\nimport { useMemo } from 'react';\nimport { FilterSelect } from './FilterEntries';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { capitalize, orderBy } from 'lodash';\n\nexport function buildDataFilters<T extends PlainObject>(data: Dictionary<T>, ignoreKeys: string[] = []) {\n  const keys = Object.keys(\n    Object.values(data).reduce((acc: Dictionary<boolean>, entry) => {\n      Object.keys(entry).forEach((key) => {\n        if (!acc[key] && !ignoreKeys.includes(key)) {\n          acc[key] = true;\n        }\n      });\n\n      return acc;\n    }, {})\n  );\n\n  const sortableKeys: string[] = [];\n  const filters: { label: string; options: { label: string; value: any }[] }[] = [];\n\n  keys.forEach((key) => {\n    const values = Object.values(data).map((entry) => entry[key]);\n    const uniqueValues = Array.from(new Set(values));\n    const uniqueValueRatio = uniqueValues.length / values.length;\n\n    if (uniqueValueRatio >= 0.05) {\n      sortableKeys.push(key);\n    }\n\n    if (uniqueValueRatio <= 0.9) {\n      filters.push({\n        label: key,\n        options: [\n          { label: 'All', value: '' },\n          ...uniqueValues.sort().map((value) => ({ label: String(value), value })),\n        ],\n      });\n    }\n  });\n\n  return { filters, sortableKeys };\n}\n\ntype DataFiltersProps<T extends PlainObject> = {\n  data: Dictionary<T>;\n  ignoreKeys?: string[];\n};\n\nexport function DataFilters<T extends PlainObject>({ data, ignoreKeys = [] }: DataFiltersProps<T>) {\n  const { queryParams, addParam } = useQueryParams();\n  const filters = useMemo(() => buildDataFilters(data, ignoreKeys), [data, ignoreKeys]);\n\n  return (\n    <Flex vertical style={{ overflowY: 'auto' }}>\n      {filters.filters.map((filter) => (\n        <FilterSelect\n          key={filter.label}\n          label={capitalize(filter.label)}\n          options={filter.options}\n          onChange={(value) => addParam(filter.label.toLowerCase(), value)}\n          value={queryParams.get(filter.label.toLowerCase()) ?? ''}\n        />\n      ))}\n\n      <FilterSelect\n        label=\"Sort by\"\n        options={filters.sortableKeys.map((key) => ({ label: capitalize(key), value: key }))}\n        onChange={(value) => addParam('sort', value)}\n        value={queryParams.get('sort') ?? ''}\n      />\n\n      <FilterSelect\n        label=\"Order\"\n        options={[\n          { label: 'Ascending', value: 'asc' },\n          { label: 'Descending', value: 'desc' },\n        ]}\n        onChange={(value) => addParam('order', value)}\n        value={queryParams.get('order') ?? 'asc'}\n      />\n    </Flex>\n  );\n}\n\nexport function useFilterDataByDataFilters<T extends PlainObject>(data: Dictionary<T>) {\n  const { queryParams } = useQueryParams();\n  const filters = useMemo(() => buildDataFilters(data), [data]);\n  const activeQueryParams = useMemo(() => {\n    return Array.from(queryParams.entries())\n      .filter(([key]) => {\n        return filters.filters.some((filter) => filter.label.toLowerCase() === key);\n      })\n      .reduce((acc: Dictionary<any>, [key, value]) => {\n        acc[key] = value;\n        return acc;\n      }, {});\n  }, [queryParams, filters]);\n\n  const sortKey = queryParams.get('sort') ?? 'id';\n  const order = queryParams.get('order') === 'desc' ? 'desc' : 'asc';\n\n  return useMemo(() => {\n    const allValues = Object.values(data);\n\n    const filteredData = allValues.filter((entry) => {\n      return Object.entries(activeQueryParams).every(([key, value]) => {\n        return String(entry[key]) === value;\n      });\n    });\n    return orderBy(filteredData, sortKey, order);\n  }, [data, activeQueryParams, sortKey, order]);\n}\n","import { Input, InputProps, Switch, SwitchProps, Typography } from 'antd';\nimport { LanguageFlag } from './LanguageFlag';\nimport { TextProps } from 'antd/lib/typography/Text';\nimport { FireFilled } from '@ant-design/icons';\n\nexport function Label({ strong, ...props }: TextProps) {\n  return <Typography.Text strong={strong ?? true} {...props} />;\n}\n\ntype DualLanguageTextFieldProps = {\n  value: DualLanguageValue;\n  language: 'en' | 'pt';\n} & Omit<InputProps, 'name' | 'value'>;\n\nexport function DualLanguageTextField({ value, language, ...rest }: DualLanguageTextFieldProps) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Value in ${language.toUpperCase()}`}\n      defaultValue={value[language]}\n      size=\"small\"\n      {...rest}\n    />\n  );\n}\n\ntype NSFWFieldProps = {\n  value?: boolean;\n} & Omit<SwitchProps, 'checked' | 'checkedChildren'>;\n\nexport function NSFWField({ value, ...props }: NSFWFieldProps) {\n  return <Switch checked={value} checkedChildren={<FireFilled style={{ color: 'hotpink' }} />} {...props} />;\n}\n","import { Pagination, Space, SpaceProps, TableProps } from 'antd';\nimport { ReactNode } from 'react';\n\ntype PaginationWrapperProps = {\n  children: ReactNode;\n  pagination: TableProps['pagination'];\n} & SpaceProps;\n\nexport function PaginationWrapper({ children, pagination, ...spaceProps }: PaginationWrapperProps) {\n  const paginationComponent = <Pagination showQuickJumper {...pagination} className=\"fixed-pagination\" />;\n  return (\n    <Space direction=\"vertical\" {...spaceProps}>\n      {paginationComponent}\n      {children}\n      {paginationComponent}\n    </Space>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { TableProps } from 'antd';\nimport { useMemo } from 'react';\n\nimport { useQueryParams } from './useQueryParams';\nimport { usePrevious } from 'react-use';\n\n/**\n * Options for configuring table pagination.\n */\ntype UsePaginationOptions<TData> = {\n  /**\n   * The data array to be paginated.\n   */\n  data: TData[];\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n  /**\n   * The value that triggers the reset of the pagination.\n   */\n  resetter?: string;\n};\n\nexport function useGridPagination<TData>({\n  prefix = '',\n  data,\n  defaultCurrent = 1,\n  defaultPageSize = 64,\n  pageSizeOptions = [16, 32, 64, 128],\n  resetter,\n}: UsePaginationOptions<TData>): {\n  page: TData[];\n  pagination: TableProps['pagination'];\n} {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n  const previous = usePrevious(resetter);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return data.slice(start, end);\n  }, [currentPage, pageSize, data]);\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  if (resetter !== previous) {\n    onChange(defaultCurrent);\n  }\n\n  return {\n    page,\n    pagination: {\n      current: currentPage,\n      pageSize,\n      onChange,\n      onShowSizeChange,\n      defaultCurrent,\n      defaultPageSize,\n      pageSizeOptions,\n      total: data.length,\n      hideOnSinglePage: true,\n    },\n  };\n}\n","import { EditOutlined } from '@ant-design/icons';\nimport { Card, Flex, Popconfirm, Popover, Radio, Select } from 'antd';\nimport { DualLanguageTextField, Label, NSFWField } from 'components/Common/EditableFields';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { ImageCard } from 'components/Images/ImageCard';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { merge } from 'lodash';\nimport { ContenderCard } from 'types';\nimport { removeDuplicates } from 'utils';\nimport { PLACEHOLDER_DUAL_LANGUAGE_OBJECT } from 'utils/constants';\n\nexport const DECKS = [\n  { value: 'base', label: 'Base' },\n  { value: 'anime', label: 'Anime' },\n  { value: 'art', label: 'Art' },\n  { value: 'cartoon', label: 'Cartoon' },\n  { value: 'celebrities', label: 'Celebrities' },\n  { value: 'characters', label: 'Characters' },\n  { value: 'comics', label: 'Comics' },\n  { value: 'games', label: 'Games' },\n  { value: 'history', label: 'History' },\n  { value: 'internet', label: 'Internet' },\n  { value: 'literature', label: 'Literature' },\n  { value: 'movies', label: 'Movies' },\n  { value: 'music', label: 'Music' },\n  { value: 'mythology', label: 'Mythology' },\n  { value: 'pop-culture', label: 'Pop Culture' },\n  { value: 'random', label: 'Random' },\n  { value: 'sports', label: 'Sports' },\n  { value: 'television', label: 'Television' },\n  { value: 'special-td', label: 'Special TD' },\n  { value: 'special-td-bg', label: 'Special TD BG' },\n];\n\nconst checkInvalidDecks = (decks?: string[], exclusivity?: string) => {\n  if (!decks || decks.length === 0) return 'warning';\n\n  const isInvalid = decks.filter((deck) => !DECKS.some((d) => d.value === deck));\n  if (isInvalid.length > 0) return 'error';\n\n  if (exclusivity && decks.includes('base')) return 'error';\n\n  return undefined;\n};\n\ntype ContenderEditCardProps = {\n  contender: ContenderCard;\n  addEntryToUpdate: ReturnType<typeof useResourceFirebaseData<ContenderCard>>['addEntryToUpdate'];\n};\n\nexport function ContenderEditCard({ contender, addEntryToUpdate }: ContenderEditCardProps) {\n  const onUpdateDualText = (value: string, field: keyof ContenderCard, language: 'en' | 'pt') => {\n    addEntryToUpdate(\n      contender.id,\n      merge({ [field]: { en: '', pt: '' } }, contender, { [field]: { [language]: value } })\n    );\n  };\n\n  const onUpdateNSFW = (value: boolean) => {\n    addEntryToUpdate(contender.id, merge(contender, { nsfw: value }));\n  };\n\n  const onUpdateDecks = (value: string[]) => {\n    addEntryToUpdate(contender.id, { ...contender, decks: removeDuplicates(value).sort() });\n  };\n\n  return (\n    <Card\n      hoverable\n      style-={{ width: 240, maxWidth: 240 }}\n      cover={<ImageCard id={contender.id} width={240} />}\n    >\n      <Card.Meta\n        // avatar={getGenderIcon(contender)}\n        title={contender.id}\n        description={\n          <Flex vertical>\n            <Label>Name</Label>\n            <DualLanguageTextField\n              value={contender.name}\n              language=\"en\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'name', 'en')}\n            />\n            <DualLanguageTextField\n              value={contender.name}\n              language=\"pt\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'name', 'pt')}\n            />\n            <Label>Description</Label>\n            <DualLanguageTextField\n              value={contender.description ?? PLACEHOLDER_DUAL_LANGUAGE_OBJECT}\n              language=\"en\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'description', 'en')}\n            />\n            <DualLanguageTextField\n              value={contender.description ?? PLACEHOLDER_DUAL_LANGUAGE_OBJECT}\n              language=\"pt\"\n              onChange={(e) => onUpdateDualText(e.target.value, 'description', 'pt')}\n            />\n            <Label>Decks</Label>\n            <Select\n              mode=\"multiple\"\n              defaultValue={contender.decks ?? []}\n              size=\"small\"\n              options={DECKS}\n              onChange={(e) => onUpdateDecks(e)}\n              style={{ maxWidth: `calc(100vw / 9)` }}\n              status={checkInvalidDecks(contender.decks, contender.exclusivity)}\n            />\n            <Flex align=\"center\">\n              <Label>NSFW</Label>{' '}\n              <NSFWField value={contender.nsfw} size=\"small\" onChange={(e) => onUpdateNSFW(e)} />\n            </Flex>\n            <Flex align=\"center\" gap={8}>\n              <Label>Exclusivity</Label>{' '}\n              <Exclusivity contender={contender} addEntryToUpdate={addEntryToUpdate} />\n            </Flex>\n          </Flex>\n        }\n      />\n      <Card.Meta />\n    </Card>\n  );\n}\n\nfunction Exclusivity({ contender, addEntryToUpdate }: ContenderEditCardProps) {\n  const onUpdateExclusivity = (language?: string) => {\n    addEntryToUpdate(contender.id, merge(contender, { exclusivity: language }));\n  };\n\n  const options = [\n    { value: 'en', label: <LanguageFlag language=\"en\" style={{ width: 24 }} /> },\n    { value: 'pt', label: <LanguageFlag language=\"pt\" style={{ width: 24 }} /> },\n    { value: 'none', label: 'None' },\n  ];\n\n  const content = (\n    <Flex gap={8}>\n      <Radio.Group\n        options={options}\n        onChange={(e) => onUpdateExclusivity(e.target.value)}\n        value={contender?.exclusivity}\n      />\n    </Flex>\n  );\n\n  return (\n    <Flex gap={8}>\n      {contender?.exclusivity === 'en' && <LanguageFlag language=\"en\" style={{ width: 24 }} />}\n      {contender?.exclusivity === 'pt' && <LanguageFlag language=\"pt\" style={{ width: 24 }} />}\n      {!contender?.exclusivity && <>None</>}\n      <Popover title=\"Change exclusivity?\" content={content} trigger=\"click\">\n        <EditOutlined />\n      </Popover>\n    </Flex>\n  );\n}\n","import { ContenderCard, TeenageStudent } from 'types';\nimport './Contenders.scss';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { Flex, Typography } from 'antd';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { ContenderEditCard } from './ContenderEditCard';\nimport { useFilterDataByDataFilters } from 'components/Common/DataFilters';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\n\nexport type ContendersContentProps = ReturnType<typeof useResourceFirebaseData<ContenderCard>>;\n\nexport function ContendersContent({ data, addEntryToUpdate }: ContendersContentProps) {\n  const filteredData = useFilterDataByDataFilters(data);\n\n  const { page, pagination } = useGridPagination({\n    data: filteredData,\n    resetter: '',\n    defaultPageSize: 32,\n  });\n  return (\n    <>\n      <>\n        <Typography.Title level={2}>\n          Listing - Contenders ({filteredData.length} | {Object.values(data ?? {}).length})\n        </Typography.Title>\n\n        <PaginationWrapper pagination={pagination} className=\"full-width\">\n          <Flex gap={16} wrap=\"wrap\">\n            {page.map((entry) => (\n              <ContenderEditCard key={entry.id} contender={entry} addEntryToUpdate={addEntryToUpdate} />\n            ))}\n          </Flex>\n        </PaginationWrapper>\n      </>\n    </>\n  );\n}\n","import { Divider, Flex, Typography } from 'antd';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { cloneDeep } from 'lodash';\nimport { useMemo } from 'react';\nimport { ContenderCard } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { DataFilters } from 'components/Common/DataFilters';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { DECKS } from './ContenderEditCard';\n\nexport type ContendersFiltersProps = ReturnType<typeof useResourceFirebaseData<ContenderCard>>;\n\nexport function ContendersFilters({\n  data,\n  isDirty,\n  save,\n  isSaving,\n  entriesToUpdate,\n}: ContendersFiltersProps) {\n  return (\n    <>\n      <SiderContent>\n        <Flex vertical gap={12}>\n          <SaveButton\n            isDirty={isDirty}\n            onSave={save}\n            isSaving={isSaving}\n            dirt={JSON.stringify(entriesToUpdate)}\n          />\n\n          <DownloadButton\n            data={() => prepareFileForDownload(data)}\n            fileName=\"contenders.json\"\n            disabled={isDirty}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <SiderContent>\n        <DataFilters data={data} ignoreKeys={['description']} />\n      </SiderContent>\n\n      <SiderContent>\n        <DeckCounts data={data} />\n      </SiderContent>\n    </>\n  );\n}\n\nfunction prepareFileForDownload(entriesToUpdate: Dictionary<ContenderCard>) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(entriesToUpdate);\n  // Remove any undefined values of any keys in each entry\n  Object.values(copy).forEach((entry) => {\n    const exclusivity = entry.exclusivity as string;\n    if (entry.exclusivity === undefined || exclusivity === 'none') {\n      delete entry.exclusivity;\n    }\n  });\n\n  return sortJsonKeys(copy);\n}\n\nfunction DeckCounts({ data }: Pick<ContendersFiltersProps, 'data'>) {\n  const counts = useMemo(() => {\n    let englishExclusivity = 0;\n    let portugueseExclusivity = 0;\n    let bothExclusivity = 0;\n    const deckCounts = Object.values(data).reduce((acc: Dictionary<number>, contender) => {\n      (contender.decks ?? []).forEach((deck) => {\n        acc[deck] = acc[deck] ? acc[deck] + 1 : 1;\n      });\n      if (contender.exclusivity === 'en') {\n        englishExclusivity++;\n      }\n      if (contender.exclusivity === 'pt') {\n        portugueseExclusivity++;\n      }\n      if (!contender.exclusivity) {\n        bothExclusivity++;\n      }\n\n      return acc;\n    }, {});\n\n    const invalidDecks = Object.keys(deckCounts).filter((deck) => !DECKS.some((d) => d.value === deck));\n\n    return { deckCounts, invalidDecks, englishExclusivity, portugueseExclusivity, bothExclusivity };\n  }, [data]);\n\n  return (\n    <Flex vertical gap={8}>\n      <Typography.Text strong>Deck Counts</Typography.Text>\n\n      <Flex vertical gap={8} style={{ maxHeight: '300px', overflowY: 'auto' }}>\n        {DECKS.map((entry) => (\n          <Typography.Text key={entry.value}>\n            {entry.label}: {counts.deckCounts[entry.value] ?? 0}\n          </Typography.Text>\n        ))}\n      </Flex>\n\n      <Divider className=\"my-2\" />\n\n      <Typography.Text strong>Invalid Decks</Typography.Text>\n      <Flex vertical gap={8} style={{ maxHeight: '300px', overflowY: 'auto' }}>\n        {counts.invalidDecks.map((deck) => (\n          <Typography.Text key={deck}>{deck}</Typography.Text>\n        ))}\n      </Flex>\n\n      <Divider className=\"my-2\" />\n\n      <Typography.Text strong>Exclusivity</Typography.Text>\n      <Flex vertical gap={8}>\n        <Typography.Text>English: {counts.englishExclusivity}</Typography.Text>\n        <Typography.Text>Portuguese: {counts.portugueseExclusivity}</Typography.Text>\n        <Typography.Text>Both: {counts.bothExclusivity}</Typography.Text>\n      </Flex>\n    </Flex>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ContendersContent } from 'components/Contenders/ContendersContent';\n\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { isEmpty } from 'lodash';\nimport { ContenderCard } from 'types';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { ContendersFilters } from 'components/Contenders/ContendersFilters';\n\nexport function Contenders() {\n  const contendersQuery = useResourceFirebaseData<ContenderCard>({\n    tdrResourceName: 'contenders',\n    firebaseDataCollectionName: 'contenders',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Contenders\" subtitle=\"Characters, Celebrities, Personalities\">\n      <Layout hasSider>\n        <PageSider>\n          <ContendersFilters {...contendersQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={contendersQuery.isLoading}\n            error={contendersQuery.error}\n            hasResponseData={!isEmpty(contendersQuery.data)}\n          >\n            <ContendersContent {...contendersQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default Contenders;\n"],"names":["buildDataFilters","data","ignoreKeys","keys","Object","values","reduce","acc","entry","forEach","key","includes","sortableKeys","filters","map","uniqueValues","Array","from","Set","uniqueValueRatio","length","push","label","options","value","sort","String","DataFilters","queryParams","addParam","useQueryParams","useMemo","vertical","style","overflowY","filter","capitalize","onChange","toLowerCase","get","useFilterDataByDataFilters","activeQueryParams","entries","some","sortKey","order","filteredData","every","orderBy","Label","strong","props","DualLanguageTextField","language","rest","prefix","width","placeholder","toUpperCase","defaultValue","size","NSFWField","checked","checkedChildren","color","PaginationWrapper","children","pagination","spaceProps","paginationComponent","showQuickJumper","className","direction","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","clsx","src","fallback","useGridPagination","defaultCurrent","defaultPageSize","pageSizeOptions","resetter","currentPage","Number","pageSize","previous","usePrevious","page","start","end","slice","toString","current","onShowSizeChange","_","total","hideOnSinglePage","DECKS","checkInvalidDecks","decks","exclusivity","deck","d","ContenderEditCard","contender","addEntryToUpdate","onUpdateDualText","field","merge","en","pt","hoverable","maxWidth","cover","title","description","name","e","target","PLACEHOLDER_DUAL_LANGUAGE_OBJECT","mode","onUpdateDecks","removeDuplicates","status","align","nsfw","onUpdateNSFW","gap","Exclusivity","LanguageFlag","content","onUpdateExclusivity","trigger","EditOutlined","ContendersContent","level","wrap","ContendersFilters","isDirty","save","isSaving","entriesToUpdate","SaveButton","onSave","dirt","JSON","stringify","DownloadButton","console","log","copy","cloneDeep","undefined","sortJsonKeys","prepareFileForDownload","fileName","disabled","block","DeckCounts","counts","englishExclusivity","portugueseExclusivity","bothExclusivity","deckCounts","invalidDecks","maxHeight","Contenders","contendersQuery","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","subtitle","hasSider","PageSider","DataLoadingWrapper","isLoading","error","hasResponseData","isEmpty"],"sourceRoot":""}