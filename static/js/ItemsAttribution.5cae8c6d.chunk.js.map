{"version":3,"file":"static/js/ItemsAttribution.5cae8c6d.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/LanguageFlag.tsx","components/Common/SaveButton.tsx","components/Items/ItemBuildingBlocks.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useQueryParams.ts","hooks/useTDResource.ts","hooks/useUpdateFirebaseDoc.tsx","hooks/useItemQueryParams.ts","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","components/Items/Attributes/AttributionValueButtons.tsx","components/Items/Attributes/ItemAttributeDescription.tsx","components/Common/Stat.tsx","components/Items/Attributes/ItemAttributeStats.tsx","components/Items/Attributes/ItemAttributionCard.tsx","components/Items/Attributes/ItemAttributionNavigation.tsx","hooks/useItemSampler.ts","components/Items/Attributes/ItemSamplerCard.tsx","components/Common/GoToTopButton.tsx","components/Items/Attributes/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","components/Items/Attributes/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/Attributes/DailyAlienSimulator.tsx","components/Items/Attributes/ItemSimulation.tsx","components/Items/Attributes/ItemStats.tsx","components/Items/Attributes/ItemAttributionPageContent.tsx","components/Items/Attributes/ItemAttributionFiltersSections.tsx","components/Items/Attributes/ItemAttributionFilters.tsx","pages/Items/ItemsAttribution.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","function BrazilFlag(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 335.4\" {...props}>\n      <path\n        fill=\"#73af00\"\n        d=\"M473.6 0H38.3A38.3 38.3 0 000 38.3v258.8a38.4 38.4 0 0038.4 38.4h435.3A38.4 38.4 0 00512 297V38.3A38.3 38.3 0 00473.6 0z\"\n      ></path>\n      <path\n        fill=\"#ffe15a\"\n        d=\"M251.4 47l-186 113.2a8.8 8.8 0 000 15l186 113.3a8.8 8.8 0 009.2 0l186-113.2a8.8 8.8 0 000-15.1l-186-113.3a8.8 8.8 0 00-9.2 0z\"\n      ></path>\n      <circle cx=\"256\" cy=\"167.7\" r=\"70.6\" fill=\"#41479b\"></circle>\n      <path\n        fill=\"#f5f5f5\"\n        d=\"M195.4 131.6a70.2 70.2 0 00-7.6 18.1c39.1-3 97 8 134 43.8a70.4 70.4 0 004.5-19.5c-38-32.1-90.7-43.5-130.9-42.4zm63.6 60.2l1.8 5.7h6a.8.8 0 01.4 1.4l-4.8 3.5 1.8 5.7a.8.8 0 01-1.2.9l-4.8-3.5-4.9 3.5a.8.8 0 01-1.2-.9l1.8-5.7-4.8-3.5a.8.8 0 01.5-1.4h6l1.8-5.7a.8.8 0 011.5 0zm23 14.6l.8 2.4h2.6a.3.3 0 01.2.7l-2 1.5.7 2.4a.3.3 0 01-.5.4l-2.1-1.5-2.1 1.5a.3.3 0 01-.5-.4l.7-2.4-2-1.5a.3.3 0 01.2-.7h2.5l.9-2.4a.3.3 0 01.6 0zm-33-25.3l.7 2.4h2.6a.3.3 0 01.2.7l-2 1.5.7 2.5a.3.3 0 01-.5.3l-2-1.5-2.2 1.5a.3.3 0 01-.5-.4l.8-2.4-2-1.5a.3.3 0 01.1-.6h2.6l.8-2.5a.3.3 0 01.6 0zm-44.9-2.9l.8 2.4h2.6a.3.3 0 01.2.6l-2 1.5.7 2.5a.3.3 0 01-.5.4l-2.1-1.5-2 1.4a.3.3 0 01-.6-.3l.8-2.5-2-1.5a.3.3 0 01.1-.6h2.6l.8-2.4a.3.3 0 01.6 0zm37.5 27.4l.8 2.4h2.6a.3.3 0 01.2.6l-2 1.5.7 2.5a.3.3 0 01-.5.4l-2.1-1.5-2 1.5a.3.3 0 01-.6-.4l.7-2.5-2-1.5a.3.3 0 01.2-.6h2.5l.9-2.4a.3.3 0 01.6 0zM221 176.5l.7 2h2a.3.3 0 01.2.5l-1.7 1.2.7 2a.3.3 0 01-.5.3l-1.7-1.2-1.7 1.2a.3.3 0 01-.4-.3l.6-2-1.7-1.2a.3.3 0 01.2-.5h2.1l.7-2a.3.3 0 01.5 0zm62.8-41l.8 2.5h2.7a.3.3 0 01.2.6l-2.1 1.6.7 2.5a.3.3 0 01-.5.4l-2.1-1.5-2.1 1.5a.4.4 0 01-.6-.4l.8-2.5-2.1-1.6a.3.3 0 01.2-.6h2.6l.8-2.5a.3.3 0 01.7 0zM207 164.3l.7 2h2a.3.3 0 01.2.5l-1.7 1.3.7 2a.3.3 0 01-.5.3l-1.7-1.2-1.7 1.2a.3.3 0 01-.4-.3l.6-2-1.7-1.3a.3.3 0 01.2-.5h2.1l.7-2a.3.3 0 01.5 0zm10.1 28l1 3h3.2a.4.4 0 01.2.8L219 198l1 3a.4.4 0 01-.7.5l-2.5-1.9-2.6 1.9a.4.4 0 01-.7-.5l1-3-2.5-1.9a.4.4 0 01.2-.8h3.2l1-3a.4.4 0 01.7 0zm77.8 14.7l.6 2h2a.3.3 0 01.2.4l-1.6 1.2.6 1.9a.3.3 0 01-.4.3l-1.7-1.2-1.6 1.2a.3.3 0 01-.4-.3l.6-1.9-1.6-1.2a.3.3 0 01.1-.5h2l.7-1.9a.3.3 0 01.5 0zm7-14.4l.8 2.4h2.5a.3.3 0 01.3.7l-2.1 1.5.8 2.4a.3.3 0 01-.6.4l-2-1.5-2.1 1.5a.3.3 0 01-.6-.4l.8-2.4-2-1.5a.3.3 0 01.1-.6h2.6l.8-2.4a.3.3 0 01.7-.1z\"\n      ></path>\n    </svg>\n  );\n}\n\nfunction UnitedStatesFlag(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 335.45\" {...props}>\n      <path\n        fill=\"#f5f5f5\"\n        d=\"M473.65.01H38.35A38.34 38.34 0 000 38.35v258.76a38.35 38.35 0 0038.35 38.35h435.3A38.35 38.35 0 00512 297.11V38.35A38.34 38.34 0 00473.65.01z\"\n      ></path>\n      <path\n        fill=\"#ff4b55\"\n        d=\"M2.11 25.81h507.78A38.34 38.34 0 00473.66.01H38.35a38.35 38.35 0 00-36.24 25.8z\"\n      ></path>\n      <path fill=\"#ff4b55\" d=\"M0 103.22H512V129.02H0z\"></path>\n      <path fill=\"#ff4b55\" d=\"M0 51.61H512V77.41H0z\"></path>\n      <path fill=\"#ff4b55\" d=\"M0 171.8a8.83 8.83 0 008.83 8.83H512v-25.8H0z\"></path>\n      <path fill=\"#ff4b55\" d=\"M0 258.05H512V283.85H0z\"></path>\n      <path\n        fill=\"#ff4b55\"\n        d=\"M509.89 309.65H2.11a38.35 38.35 0 0036.24 25.8h435.3a38.35 38.35 0 0036.24-25.8z\"\n      ></path>\n      <path fill=\"#ff4b55\" d=\"M0 206.43H512V232.23000000000002H0z\"></path>\n      <path\n        fill=\"#41479b\"\n        d=\"M8.83 180.63h220.69a8.83 8.83 0 008.83-8.83V8.83A8.84 8.84 0 00229.52 0H38.35A38.36 38.36 0 000 38.35V171.8a8.83 8.83 0 008.83 8.83z\"\n      ></path>\n      <path\n        fill=\"#f5f5f5\"\n        d=\"M24.79 20.27l1.95 5.86h6.18a.84.84 0 01.49 1.51l-5 3.66 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.92l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6-.01zM24.79 50.92l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6 0zM24.79 81.58l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.92l1.86-5.89-5-3.67a.84.84 0 01.49-1.51h6.18l1.95-5.86a.83.83 0 011.6 0zM24.79 112.23l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.6-5 3.6a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6 0zM24.79 142.88l1.95 5.85 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6-.04zM48.58 35.3l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.5 0zM48.58 65.95l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.5 0zM48.58 96.61l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.8-5.8-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.56-.04zM48.58 127.26l2 5.86 6.17.05a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.5 0zM72.38 20.27l2 5.86h6.18a.83.83 0 01.44 1.6l-5 3.66 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.66a.84.84 0 01.49-1.51h6.17l2-5.86a.83.83 0 011.55-.09zM72.38 50.92l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM72.38 81.58l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM72.38 112.23l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM72.38 142.88l2 5.86 6.18.05a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.84.84 0 011.51 0zM96.17 35.3l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.27-.93l1.86-5.89-5.01-3.6a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.5-.07zM96.17 65.95l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.6-5 3.6a.83.83 0 01-1.27-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.49 0zM96.17 96.61l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.27-.93l1.79-5.8-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.56-.04zM96.17 127.26l2 5.86 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.6-5 3.6a.83.83 0 01-1.27-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.49 0zM120 20.27l2 5.86h6.17a.84.84 0 01.49 1.51l-5 3.66 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.88-5-3.67a.84.84 0 01.49-1.51h6.18l1.95-5.86a.83.83 0 011.55 0zM120 50.92l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.55 0zM120 81.58l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 1.95-5.86a.83.83 0 011.55.05zM120 112.23l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.55 0zM120 142.88l2 5.86 6.17.05a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 1.95-5.86a.84.84 0 011.55 0zM143.76 35.3l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM143.76 65.95l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM143.76 96.61l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.83.83 0 011.51.05zM143.76 127.26l2 5.86 6.18.05a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.83.83 0 011.51 0zM167.55 20.27l1.95 5.86h6.18a.84.84 0 01.49 1.51l-5 3.66 1.86 5.89a.83.83 0 01-1.27.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.66a.84.84 0 01.49-1.51h6.18l1.95-5.86a.83.83 0 011.59 0zM167.55 50.92l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.6-5 3.6a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.59 0zM167.55 81.58l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.59 0zM167.55 112.23l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.6-5 3.6a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.99-5.86a.83.83 0 011.55 0zM167.55 142.88l1.95 5.85 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 1.95-5.86a.84.84 0 011.6.01zM191.34 35.3l2 5.86h6.17a.83.83 0 01.49 1.57l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5h6.18l1.95-5.86a.83.83 0 011.56-.07zM191.34 65.95l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5h6.18l1.95-5.86a.83.83 0 011.56 0zM191.34 96.61l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.76 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5l6.18-.05 1.95-5.86a.83.83 0 011.56-.04zM191.34 127.26l2 5.86 6.17.05a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5l6.18-.05 1.95-5.86a.83.83 0 011.56 0zM215.14 20.27l2 5.86h6.18a.84.84 0 01.49 1.51l-5 3.66 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.66a.84.84 0 01.49-1.51h6.17l2-5.86a.83.83 0 011.5 0zM215.14 50.92l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.5 0zM215.14 81.58l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.5 0zM215.14 112.23l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.5 0zM215.14 142.88l2 5.86 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.84.84 0 011.5 0z\"\n      ></path>\n    </svg>\n  );\n}\n\ntype LanguageFlagProps = {\n  language: Language;\n} & React.SVGProps<SVGSVGElement>;\n\nexport function LanguageFlag({ language, ...props }: LanguageFlagProps) {\n  return language === 'pt' ? <BrazilFlag {...props} /> : <UnitedStatesFlag {...props} />;\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { deserializeFirebaseData, getNewItem, getNewItemAttributeValues, serializeFirebaseData } from 'utils';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAtributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAtributesValues>\n  >('tdr', 'itemsAttributeValues', {\n    select: deserializeFirebaseData,\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAtributesValues>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', 'itemsAttributeValues'],\n      });\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAtributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAtributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id'\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(serializeFirebaseData({ ...firebaseData, ...modifiedAttributeValues }));\n  };\n\n  // Filter items that have the alien deck only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.decks ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc'\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if ((tdrItemsQuery.data ?? {})?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n","import { App } from 'antd';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { ReactNode, useContext, createContext, useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues, sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAtributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAtributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAtributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAtributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAtributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n  attributesToUpdate: Dictionary<ItemAtributesValues>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n  attributesToUpdate: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n      } else {\n        message.error(`Item ${itemId} is not available for attribution.`);\n      }\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAtributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {})\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n        attributesToUpdate,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { Radio, RadioGroupProps, Tooltip } from 'antd';\nimport { ItemAttribute } from 'types';\n\nimport { CheckCircleFilled, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n  size?: RadioGroupProps['size'];\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n  size,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {attribute.name.en}{' '}\n        <Tooltip title={attribute.description.en}>\n          <QuestionCircleOutlined />\n        </Tooltip>\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from 'utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAtributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated]\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { Tag, Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAtributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n          acc += v / 2;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Stat label=\"Reliability\">{relevancy}%</Stat>\n      </Flex>\n    </div>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute, index) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group className=\"my-4\">\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Title\">\n        <Button>Go To</Button>\n      </Popover>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return <ItemsTypeahead isPending={false} onFinish={(itemId) => jumpToItem('goTo', itemId)} />;\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  const getSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    return {\n      selectedAttribute,\n      selected,\n    };\n  };\n\n  // Create sample\n  const onGetSample = () => {\n    let tempSample = getSample();\n    let attempts = 0;\n    while (tempSample.selected.length === 0 && attempts < 30) {\n      tempSample = getSample();\n      attempts++;\n    }\n\n    setAttribute(tempSample.selectedAttribute);\n    setSampleIds(tempSample.selected);\n  };\n\n  const itemsLeftForAttribute = useMemo(() => {\n    if (!attribute) return 0;\n\n    return availableItemIds.filter((id) => !getItemAttributeValues(id).attributes[attribute?.id]).length;\n  }, [attribute, availableItemIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    itemsLeftForAttribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { Button, Card, Divider, Empty, Flex, Modal, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { useToggle } from 'react-use';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { wait } from 'utils';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue, itemsLeftForAttribute } = useItemSampler();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n\n        <Divider />\n\n        <SingleSampleModalFlow />\n      </Card>\n    );\n  }\n\n  const sample = sampleIds.map((itemId) => ({\n    itemAttributes: getItemAttributeValues(itemId),\n    item: getItem(itemId),\n  }));\n\n  const unsetItems = sample.filter(({ itemAttributes }) => !itemAttributes.attributes[attribute!.id]);\n\n  const onMarkRestAsUnrelated = () => {\n    unsetItems.forEach(({ item }) => {\n      updateAttributeValue(item.id, attribute!.id, -3);\n    });\n  };\n\n  return (\n    <>\n      <SingleSampleModalFlow />\n      <Card\n        className=\"my-4\"\n        title={\n          <Typography.Text>\n            {attribute?.name.en} - {attribute?.description.en} ({itemsLeftForAttribute} items left)\n          </Typography.Text>\n        }\n        actions={[\n          <Button onClick={onMarkRestAsUnrelated} danger disabled={unsetItems.length === 0}>\n            Mark rest as unrelated\n          </Button>,\n          <Button type=\"primary\" ghost onClick={onGetSample}>\n            Get New Sample\n          </Button>,\n        ]}\n        extra={\n          <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n            Get New Sample\n          </Button>\n        }\n      >\n        <Flex vertical gap={6}>\n          {sample.length === 0 && (\n            <Empty\n              description=\"No unset items found for this attribute.\"\n              image={Empty.PRESENTED_IMAGE_SIMPLE}\n            />\n          )}\n          {sample.map(({ item, itemAttributes }) => {\n            return (\n              <Fragment key={`${item.id}-${itemAttributes.updatedAt}`}>\n                <Flex gap={6}>\n                  <ItemSprite item={item} width={75} />\n                  <Flex vertical gap={6}>\n                    <Flex gap={6}>\n                      <ItemId item={item} />\n                      <ItemGoTo item={item} />\n                    </Flex>\n                    <ItemName item={item} language=\"en\" />\n                    <ItemName item={item} language=\"pt\" />\n                  </Flex>\n                  <AttributionValueButtons\n                    attribute={attribute!}\n                    value={itemAttributes.attributes[attribute!.id]}\n                    onChange={(attributeId: string, value: number) =>\n                      updateAttributeValue(item.id, attributeId, value)\n                    }\n                  />\n                </Flex>\n                <Divider className=\"my-1\" />\n              </Fragment>\n            );\n          })}\n        </Flex>\n      </Card>\n    </>\n  );\n}\n\nexport function SingleSampleModalFlow() {\n  const [open, toggleOpen] = useToggle(false);\n  const { addQueryParam, removeQueryParam } = useItemQueryParams();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue } = useItemSampler();\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n\n  const handleOpenSingleSampler = () => {\n    addQueryParam('size', '1');\n    toggleOpen(true);\n    onGetSample();\n  };\n\n  const onClose = () => {\n    removeQueryParam('size');\n    toggleOpen(false);\n  };\n\n  const itemId = sampleIds[0];\n  const item = getItem(itemId);\n  const itemAttributes = getItemAttributeValues(itemId);\n\n  return (\n    <Flex className=\"mt-4\">\n      <Button type=\"primary\" onClick={handleOpenSingleSampler}>\n        Single Sampler\n      </Button>\n      <Modal\n        title={\n          <Typography>\n            Single Sampler: <strong>{attribute?.name.en}</strong>\n          </Typography>\n        }\n        open={open}\n        width=\"100vw\"\n        maskClosable={false}\n        onOk={onClose}\n        onClose={onClose}\n        onCancel={onClose}\n        cancelButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        {itemId && item && itemAttributes && attribute && (\n          <Flex gap={6} className=\"my-10\" wrap=\"wrap\">\n            <ItemSprite item={item} width={150} />\n            <Flex vertical gap={6}>\n              <Flex gap={6}>\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n              </Flex>\n              <ItemName item={item} language=\"en\" />\n              <ItemName item={item} language=\"pt\" />\n            </Flex>\n            <AttributionValueButtons\n              size=\"large\"\n              attribute={attribute!}\n              value={itemAttributes.attributes[attribute!.id]}\n              onChange={async (attributeId: string, value: number) => {\n                updateAttributeValue(item.id, attributeId, value);\n                await wait(500);\n                onGetSample();\n              }}\n            />\n          </Flex>\n        )}\n        <Button onClick={onGetSample}>Another Sample</Button>\n      </Modal>\n    </Flex>\n  );\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { ButtonProps } from 'antd/lib/button';\nimport { useEffect, useState } from 'react';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.pageYOffset > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { Button, Card, Empty, Flex, Pagination, Popconfirm, Select, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\n\nconst getStatSentence = (stats: Record<string, number>, scope: string | null) => {\n  if (scope === 'unset' || !scope) {\n    return `${100 - stats.percent}% done, ${stats.group} left`;\n  }\n\n  return `${stats.percent}%  - ${stats.group} items`;\n};\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n\n  const { attribute, pageIds, updateAttributeValue, updatePageItemsAsUnrelated, pagination, stats, sorting } =\n    useItemGrouping();\n  const { searchParams } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const sortingComponent = (\n    <Flex align=\"center\">\n      <Typography.Text className=\"mr-2\">Sort by</Typography.Text>\n      <Select style={{ width: 120 }} value={sorting.sortBy} onChange={(v) => sorting.setSortBy(v)}>\n        <Select.Option value={null}>Last Updated</Select.Option>\n        {attributesList.map((a) => (\n          <Select.Option key={a.id} value={a.id}>\n            {a.name.en}\n          </Select.Option>\n        ))}\n      </Select>\n    </Flex>\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({getStatSentence(stats, searchParams.get('scope'))}) -{' '}\n          {attribute.description.en}\n        </Typography.Text>\n      }\n      extra={\n        <Flex align=\"center\">\n          {sortingComponent}\n\n          {paginationComponent}\n        </Flex>\n      }\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.length === 0 && (\n        <Empty\n          description=\"No items found in this scope for this attribute.\"\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n        />\n      )}\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute!}\n                value={itemAttributes.attributes[attribute!.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { orderBy } from 'lodash';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const [sortBy, setSortBy] = useState<string | null>(null);\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    return orderBy(\n      filteredItemIds,\n      [\n        (id) => (sortBy ? getItemAttributeValues(id)?.attributes?.[sortBy] : true),\n        (id) => getItemAttributeValues(id)?.updatedAt,\n        (id) => Number(id),\n      ],\n      [sortOrder, 'desc', 'asc']\n    );\n  }, [attributeKey, scope, sortBy, sortOrder]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      })\n    );\n  };\n\n  return {\n    group,\n    stats: {\n      total: availableItemIds.length,\n      group: group.length,\n      percent: Math.round((group.length / availableItemIds.length) * 100),\n    },\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    sorting: {\n      sortBy,\n      setSortBy,\n      sortOrder,\n      setSortOrder,\n    },\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { Flex, Table, TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport { Item } from 'types';\n\nimport { AttributeSprite } from './ItemAttributeDescription';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <ItemGoTo item={item} />\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : '0'}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} pagination={{ showQuickJumper: true }} />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { filterMessage, getItemAttributePriorityResponse } from 'utils';\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { Item, ItemAtributesValues } from 'types';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAtributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc']\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { Alert, Button, Divider, Flex, Space, Typography } from 'antd';\nimport { keys, sample, sampleSize, shuffle, values } from 'lodash';\nimport { useState } from 'react';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { makeArray } from 'utils';\n\nexport function DailyAliemSimulator() {\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n\n  const [simulation, setSimulation] = useState<DailyAlienGame | null>(null);\n\n  // Choose 3 random attributes that are not limited\n  // Get examples for each attribute of items that have value 10 in that attribute but are -3 in the other two\n\n  const onSimulate = () => {\n    setSimulation(generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data));\n  };\n\n  const onSimulateMany = () => {\n    const simulations: Dictionary<DailyAlienGame> = {};\n    let tries = 0;\n    while (tries < 300 || keys(simulations).length === 15) {\n      const simulation = generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data);\n      if (simulation.valid && !simulations[simulation.setId]) {\n        simulations[simulation.setId] = simulation;\n      }\n      if (keys(simulations).length >= 15) {\n        break;\n      }\n      tries += 1;\n    }\n    console.log('TRIES', tries);\n    console.log(Object.values(simulations).map((e, i) => ({ ...e, number: e.number - i })));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Daily Simulator</Typography.Title>\n\n      <Typography.Paragraph>Generates a daily game for Alien Communication</Typography.Paragraph>\n\n      <Space>\n        <Button type=\"primary\" onClick={onSimulate}>\n          Generate\n        </Button>\n        <Button onClick={onSimulateMany}>Generate List</Button>\n      </Space>\n\n      <div>\n        {Boolean(simulation) && (\n          <Space direction=\"vertical\" key={simulation?.setId}>\n            <Typography.Title level={5}>{simulation?.setId}</Typography.Title>\n            {!simulation?.valid && <Alert type=\"error\" message=\"Invalid game\" />}\n            <Space direction=\"vertical\">\n              {simulation?.attributes.map((attr) => (\n                <Flex key={attr.id} gap={8}>\n                  <AlienSign id={attr.spriteId} width={50} />\n                  {attr.itemsIds.map((itemId) => (\n                    <Item id={itemId || '0'} width={50} />\n                  ))}\n                </Flex>\n              ))}\n            </Space>\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.requests.map((req) => (\n                <Flex key={req.itemId} vertical>\n                  <AlienSign id={req.spritesIds[2]} width={50} />\n                  <AlienSign id={req.spritesIds[1]} width={50} />\n                  <AlienSign id={req.spritesIds[0]} width={50} />\n                </Flex>\n              ))}\n            </Space>\n\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.itemsIds.map((itemId) => <Item id={itemId || '0'} width={50} />)}\n            </Space>\n          </Space>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype DailyAlienGameAttribute = {\n  id: string;\n  name: string;\n  description: string;\n  spriteId: string;\n  itemsIds: string[];\n};\n\ntype DailyAlienGameRequest = {\n  spritesIds: string[];\n  itemId: string;\n};\n\ntype DailyAlienGame = {\n  id: string;\n  setId: string;\n  number: number;\n  type: 'comunicação-alienígena';\n  attributes: DailyAlienGameAttribute[];\n  requests: DailyAlienGameRequest[];\n  solution: string;\n  itemsIds: string[];\n  valid: boolean;\n};\n\nconst generateDailyAlienGame = (\n  attributes: Dictionary<ItemAttribute>,\n  itemsAttributesValues: Dictionary<ItemAtributesValues>\n): DailyAlienGame => {\n  const allAttributes = values(attributes).filter((attr) => !attr.limited || attr.id === 'sol');\n  const allItems = shuffle(values(itemsAttributesValues).filter((i) => i.complete));\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(allAttributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  allItems.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyAlienGameAttribute[] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1)\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyAlienGameRequest[] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB)!,\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC)!,\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC)!,\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC)!,\n    });\n  }\n  const simpleRequests: DailyAlienGameRequest[] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  console.log({\n    attributeA,\n    attributeB,\n    attributeC,\n    attributeAB,\n    attributeAC,\n    attributeBC,\n    attributeABC,\n  });\n\n  console.log('COMPLEX REQUEST SIZE', complexRequests.length);\n  console.log('SIMPLE REQUEST SIZE', simpleRequests.length);\n  let requests = sampleSize(complexRequests, 4);\n  console.log('REQUEST SIZE', requests.length);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.warn('Not enough requests');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyAlienGame = {\n    id: '2024-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([...requestItemsIds, none[0], none[1], none[2], none[3]]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    // TODO: verify if it should be 6\n    result.itemsIds.length > 5,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  console.log(result);\n\n  return result;\n};\n","import { App, Button, Flex, InputNumber, Space, Typography } from 'antd';\nimport {\n  FilterCheckBox,\n  FilterNumber,\n  FilterSelect,\n  FilterSwitch,\n  TransparentButton,\n} from 'components/Common';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keys, sampleSize, shuffle, sortBy } from 'lodash';\nimport { useState } from 'react';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport clsx from 'clsx';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport {\n  CheckSquareOutlined,\n  CloseSquareOutlined,\n  LineChartOutlined,\n  PlusSquareOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { DailyAliemSimulator } from './DailyAlienSimulator';\n\nconst ROMAN_NUMERALS = ['', 'I', 'II', 'III', 'IV', 'V'];\n\ntype AttributeSummary = {\n  relatedCount: number;\n  deterministicCount: number;\n  unclearCount: number;\n  oppositeCount: number;\n} & ItemAttribute;\n\nexport function ItemSimulation() {\n  const { attributes, availableItemIds, getItemAttributeValues, getItem } = useItemsAttributeValuesContext();\n  const { message } = App.useApp();\n\n  const [gridSize, setGridSize] = useState<16 | 25>(25);\n  const [reliabilityThreshold, setReliabilityThreshold] = useState<number>(90);\n  const [nsfw, setNsfw] = useState<boolean>(false);\n  const [selectedItemsIds, setSelectedItemsIds] = useState<string[]>([]);\n  const [selectedAttributes, setSelectedAttributes] = useState<AttributeSummary[]>([]);\n  const [highlightedAttributeKey, setHighlightedAttributeKey] = useState<string | null>(null);\n  const [displays, setDisplays] = useState<BooleanDictionary>({\n    id: true,\n    nameEn: true,\n    namePt: true,\n    reliability: true,\n  });\n\n  const onGetSample = () => {\n    const keysDict: Record<string, string> = {};\n\n    const shuffledIds = shuffle(availableItemIds);\n\n    while (Object.values(keysDict).length < gridSize) {\n      const itemId = shuffledIds.pop();\n      if (!itemId) break;\n\n      const itemAttributeValues = getItemAttributeValues(itemId);\n\n      if (!itemAttributeValues) continue;\n      if (\n        !itemAttributeValues.complete ||\n        !itemAttributeValues.reliability ||\n        itemAttributeValues.reliability < reliabilityThreshold\n      )\n        continue;\n\n      if (!nsfw && getItem(itemId).nsfw) continue;\n\n      if (itemAttributeValues.key && !keysDict[itemAttributeValues.key]) {\n        keysDict[itemAttributeValues.key] = itemId;\n      } else {\n        console.log('Item has identical key to another item. Skipping.', getItem(itemId).name.en);\n      }\n    }\n    const result = Object.values(keysDict);\n    if (result.length < gridSize) {\n      message.error(`Could not generate sample. Got only ${result.length} items`);\n    }\n\n    setSelectedItemsIds(sortBy(result, (itemId) => Number(itemId)));\n\n    // Get the most common attributes\n    const attributesResult = getHighestAttributeKeys(\n      result.map((itemId) => getItemAttributeValues(itemId)),\n      25,\n      attributes\n    );\n\n    // If less than 25 attributes are found, add more by priority\n    if (attributesResult.length < 25) {\n      const remainingAttributes = keys(attributes).filter((key) => !attributesResult.includes(key));\n      const remainingAttributesByPriority = sortBy(remainingAttributes, (key) => attributes[key].priority);\n      const toBeAdded = remainingAttributesByPriority.slice(0, 25 - attributesResult.length);\n      console.log('Adding more attributes by priority', toBeAdded);\n      attributesResult.push(...toBeAdded);\n    }\n\n    const dicts = attributesResult.reduce(\n      (\n        acc: {\n          relatedCount: NumberDictionary;\n          deterministicCount: NumberDictionary;\n          unclearCount: NumberDictionary;\n          oppositeCount: NumberDictionary;\n        },\n        key\n      ) => {\n        result.forEach((itemId) => {\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          if (!itemAttributeValues) return;\n          switch (itemAttributeValues.attributes[key]) {\n            case ATTRIBUTE_VALUE.RELATED:\n              acc.relatedCount[key] = (acc.relatedCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.DETERMINISTIC:\n              acc.deterministicCount[key] = (acc.deterministicCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.UNCLEAR:\n              acc.unclearCount[key] = (acc.unclearCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.OPPOSITE:\n              acc.oppositeCount[key] = (acc.oppositeCount[key] || 0) + 1;\n              break;\n          }\n        });\n\n        return acc;\n      },\n      { relatedCount: {}, deterministicCount: {}, unclearCount: {}, oppositeCount: {} }\n    );\n\n    setSelectedAttributes(\n      attributesResult.sort().map((key) => ({\n        ...attributes[key],\n        relatedCount: dicts.relatedCount[key],\n        deterministicCount: dicts.deterministicCount[key],\n        unclearCount: dicts.unclearCount[key],\n        oppositeCount: dicts.oppositeCount[key],\n      }))\n    );\n  };\n\n  const onUpdateDisplays = (key: string) => {\n    setDisplays((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Simulator</Typography.Title>\n\n      <Typography.Paragraph>\n        Generates a board with items different enough to get Deterministic values in all selected attributes.\n      </Typography.Paragraph>\n\n      <Flex wrap gap={12}>\n        <FilterSelect\n          label=\"Grid Size\"\n          value={gridSize}\n          onChange={(value) => setGridSize(value)}\n          options={[16, 25]}\n        />\n        <FilterNumber\n          label=\"Reliability Threshold\"\n          value={reliabilityThreshold}\n          onChange={(value) => setReliabilityThreshold(value)}\n          step={5}\n          min={10}\n          max={100}\n        />\n        <FilterSwitch label=\"NSFW\" value={nsfw} onChange={setNsfw} />\n        <Button onClick={onGetSample} type=\"primary\">\n          Get Sample Board\n        </Button>\n      </Flex>\n      <Flex wrap gap={12}>\n        <FilterCheckBox label=\"Show Id\" value={!!displays.id} onChange={() => onUpdateDisplays('id')} />\n        <FilterCheckBox\n          label=\"Show Name (EN)\"\n          value={!!displays.nameEn}\n          onChange={() => onUpdateDisplays('nameEn')}\n        />\n        <FilterCheckBox\n          label=\"Show Name (PT)\"\n          value={!!displays.namePt}\n          onChange={() => onUpdateDisplays('namePt')}\n        />\n        <FilterCheckBox\n          label=\"Show Reliability\"\n          value={!!displays.reliability}\n          onChange={() => onUpdateDisplays('reliability')}\n        />\n      </Flex>\n\n      <div className=\"simulator-grid\" style={{ gridTemplateColumns: `repeat(${Math.sqrt(gridSize)}, 1fr)` }}>\n        {selectedItemsIds.map((itemId) => {\n          const item = getItem(itemId);\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          return (\n            <Space\n              key={itemId}\n              direction=\"vertical\"\n              className={clsx(\n                'simulator-grid__entry',\n                highlightedAttributeKey &&\n                  itemAttributeValues.attributes[highlightedAttributeKey] > 0 &&\n                  'simulator-grid__entry--highlighted'\n              )}\n              align=\"center\"\n            >\n              <Space>\n                <Flex vertical>\n                  {displays.id && <ItemId item={item} />}\n\n                  {displays.reliability && (\n                    <span>\n                      <InputNumber\n                        prefix={<LineChartOutlined />}\n                        placeholder=\"Reliability\"\n                        variant=\"borderless\"\n                        size=\"small\"\n                        value={itemAttributeValues.reliability}\n                        readOnly\n                        style={{ width: '8ch' }}\n                        formatter={(value) => `${value}%`}\n                      />\n                    </span>\n                  )}\n\n                  {displays.id && <ItemGoTo item={item} />}\n                </Flex>\n\n                <ItemSprite item={item} width={50} />\n              </Space>\n\n              {displays.nameEn && <ItemName item={item} language=\"en\" />}\n              {displays.namePt && <ItemName item={item} language=\"pt\" />}\n            </Space>\n          );\n        })}\n      </div>\n\n      <div className=\"simulator-grid my-4\">\n        {selectedAttributes.map((attributeSummary) => (\n          <TransparentButton\n            key={attributeSummary.id}\n            className={clsx(\n              'simulator-grid__entry',\n              'simulator-grid__button',\n              highlightedAttributeKey === attributeSummary.id && 'simulator-grid__entry--highlighted'\n            )}\n            onClick={() => setHighlightedAttributeKey(attributeSummary.id)}\n          >\n            {attributeSummary.name.en} {ROMAN_NUMERALS[attributeSummary.level]}\n            <Flex gap={6} justify=\"center\" className=\"my-1\">\n              <span>\n                <CheckSquareOutlined\n                  style={{ color: attributeSummary.deterministicCount ? 'dodgerblue' : undefined }}\n                />{' '}\n                {attributeSummary.deterministicCount ?? 0}\n              </span>\n              <span>\n                <PlusSquareOutlined style={{ color: attributeSummary.relatedCount ? 'green' : undefined }} />{' '}\n                {attributeSummary.relatedCount ?? 0}\n              </span>\n              <span>\n                <CloseSquareOutlined style={{ color: attributeSummary.oppositeCount ? 'red' : undefined }} />{' '}\n                {attributeSummary.oppositeCount ?? 0}\n              </span>\n              <span>\n                <QuestionCircleOutlined\n                  style={{ color: attributeSummary.unclearCount ? 'gold' : undefined }}\n                />{' '}\n                {attributeSummary.unclearCount ?? 0}\n              </span>\n            </Flex>\n          </TransparentButton>\n        ))}\n      </div>\n\n      <DailyAliemSimulator />\n    </div>\n  );\n}\n\nfunction getHighestAttributeKeys(\n  selectedItemsAttributesValues: ItemAtributesValues[],\n  quantity: number,\n  attributes: Dictionary<ItemAttribute>\n): string[] {\n  // 1. Count the number of times each attribute is present. Make sure to gather any deterministic value\n  const attributesCounts: Record<string, number> = {};\n  const deterministicKeysDict: BooleanDictionary = {};\n  selectedItemsAttributesValues.forEach((itemAttributeValues) => {\n    if (!itemAttributeValues) return;\n    Object.keys(itemAttributeValues.attributes).forEach((key) => {\n      if (itemAttributeValues.attributes[key] > 0) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        deterministicKeysDict[key] = true;\n        attributesCounts[key] = (attributesCounts[key] || 0) + 2;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.OPPOSITE) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  const levelCount: NumberDictionary = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n  };\n\n  /**\n   * Filters the given keys array based on the count of attribute levels and guards against having more than one level 4 attribute.\n   */\n  function filterCountLevelsAndGuardLevel4(keys: string[]) {\n    return keys.filter((key) => {\n      levelCount[attributes[key].level]++;\n\n      if (levelCount[4] > 1) {\n        console.log('Discarding level 4 attribute', key);\n        return false;\n      }\n      return true;\n    });\n  }\n\n  const deterministicKeys = filterCountLevelsAndGuardLevel4(Object.keys(deterministicKeysDict));\n  const nondeterministicKeys = filterCountLevelsAndGuardLevel4(\n    keys(attributesCounts).filter((key) => !deterministicKeys.includes(key))\n  );\n  console.log({ levelCount });\n\n  // 1.b If deterministic keys are exactly the quantity, return them\n  if (quantity === deterministicKeys.length) {\n    console.log('All keys are deterministic');\n    return deterministicKeys;\n  }\n\n  // 2. Get all keys and sort them by value in descending order, but have only one level 5 attribute\n  console.log(attributesCounts);\n  // let hasLevel5Attribute = false;\n  // const sortedKeys = keys(attributesCounts)\n  //   .sort((a, b) => {\n  //     if (attributesCounts[a] !== attributesCounts[b]) {\n  //       return attributesCounts[b] - attributesCounts[a];\n  //     }\n\n  //     return attributes[a].priority - attributes[b].priority;\n  //   })\n  //   .filter((key) => {\n  //     if (attributes[key].level !== 4) return true;\n\n  //     if (!hasLevel5Attribute) {\n  //       console.log('Keeping level 4 attribute', key, attributesCounts[key]);\n  //       hasLevel5Attribute = true;\n  //       return true;\n  //     }\n  //     console.log('Discarding level 4 attribute', key, attributesCounts[key]);\n\n  //     return false;\n  //   });\n\n  // console.log(sortedKeys);\n\n  // 2.b. Handle edge cases: empty object or quantity exceeding keys\n  if (deterministicKeys.length === 0) {\n    return [];\n  }\n\n  const deterministicTiedGroups = deterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  const sortedDeterministicTiedGroupsKeys = keys(deterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a)\n  );\n  console.log({ sortedDeterministicTiedGroupsKeys });\n\n  const nondeterministicTiedGroups = nondeterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  console.log(nondeterministicTiedGroups);\n  const sortedNondeterministicTiedGroupsKeys = keys(nondeterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a)\n  );\n\n  let result: string[] = [];\n\n  for (const group of sortedDeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(deterministicTiedGroups[group], quantity - result.length));\n  }\n\n  for (const group of sortedNondeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(nondeterministicTiedGroups[group], quantity - result.length));\n  }\n\n  return result;\n}\n","import { Button, Flex, Progress, Rate, Space, Table, TableProps, Tabs, Tag, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { TabsProps } from 'antd/lib';\nimport { useNavigate } from 'react-router-dom';\nimport { AlienSign } from 'components/Sprites';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemStats() {\n  // console.log(attributesList);\n  // console.log(attributes);\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'All Attributes',\n      children: <AttributesStatsTable type=\"all\" />,\n    },\n    {\n      key: '2',\n      label: 'Default Attributes',\n      children: <AttributesStatsTable type=\"default\" />,\n    },\n    {\n      key: '3',\n      label: 'Custom Attributes',\n      children: <AttributesStatsTable type=\"custom\" />,\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Stats</Typography.Title>\n\n      <Typography.Paragraph></Typography.Paragraph>\n\n      <Tabs defaultActiveKey=\"1\" items={items} />\n    </div>\n  );\n}\n\nconst calculateAttributeStats = (attribute: ItemAttribute, itemsAttributes: ItemAtributesValues[]) => {\n  let completionCount = 0;\n  let tensCount = 0;\n  let fivesCount = 0;\n  let zerosCount = 0;\n  let negativeOnesCount = 0;\n  let negativeThreesCount = 0;\n  let negativeTensCount = 0;\n  let positiveCount = 0;\n\n  itemsAttributes.forEach(({ attributes }) => {\n    if (attributes[attribute.id]) {\n      completionCount++;\n\n      const value = attributes[attribute.id];\n      if (value === 10) {\n        tensCount++;\n      } else if (value === 5) {\n        fivesCount++;\n      } else if (value === 0 || !value) {\n        zerosCount++;\n      } else if (value === -1) {\n        negativeOnesCount++;\n      } else if (value === -3) {\n        negativeThreesCount++;\n      } else if (value === -10) {\n        negativeTensCount++;\n      }\n\n      if (value > 0) {\n        positiveCount++;\n      }\n    }\n  });\n\n  const total = itemsAttributes.length;\n  const completionPercentage = (completionCount / total) * 100;\n  const tensPercentage = (tensCount / total) * 100;\n  const fivesPercentage = (fivesCount / total) * 100;\n  const zerosPercentage = (zerosCount / total) * 100;\n  const negativeOnesPercentage = (negativeOnesCount / total) * 100;\n  const negativeThreesPercentage = (negativeThreesCount / total) * 100;\n  const negativeTensPercentage = (negativeTensCount / total) * 100;\n  const positivePercentage = (positiveCount / total) * 100;\n\n  return {\n    completionPercentage: completionPercentage.toFixed(1),\n    tensPercentage: tensPercentage.toFixed(1),\n    fivesPercentage: fivesPercentage.toFixed(1),\n    zerosPercentage: zerosPercentage.toFixed(1),\n    negativeOnesPercentage: negativeOnesPercentage.toFixed(1),\n    negativeThreesPercentage: negativeThreesPercentage.toFixed(1),\n    negativeTensPercentage: negativeTensPercentage.toFixed(1),\n    positivePercentage: positivePercentage.toFixed(1),\n  };\n};\n\ntype AttributesStatsTableProps = {\n  type: 'all' | 'default' | 'custom';\n};\n\nfunction AttributesStatsTable({ type }: AttributesStatsTableProps) {\n  const { availableItemIds, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n  const navigate = useNavigate();\n  const { is } = useQueryParams();\n\n  const attributesPool = useMemo(() => {\n    if (type === 'default') {\n      return attributesList.filter((attribute) => attribute.default);\n    }\n\n    if (type === 'custom') {\n      return attributesList.filter((attribute) => !attribute.default);\n    }\n\n    return attributesList;\n  }, [attributesList, type]);\n\n  const rows = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n\n    return attributesPool.map((attribute) => {\n      return {\n        ...attribute,\n        ...calculateAttributeStats(attribute, itemsAttributes),\n      };\n    });\n  }, [attributesPool, availableItemIds, getItemAttributeValues]);\n\n  const columns: TableProps['columns'] = [\n    {\n      title: 'Attribute',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, record) => (\n        <Flex align=\"center\" gap={8}>\n          {is('showGlyphs') && <AlienSign id={record.spriteId} width={30} />}\n          {name.en}\n          {record.default ? <Tag className=\"ml-1\">default</Tag> : ''}\n          {record.limited ? <Tag className=\"ml-1\">limited</Tag> : ''}\n        </Flex>\n      ),\n      sorter: (a, b) => a.name.en.localeCompare(b.name.en),\n    },\n\n    {\n      title: 'Priority',\n      dataIndex: 'priority',\n      key: 'priority',\n      sorter: (a, b) => a.priority - b.priority,\n    },\n\n    {\n      title: 'Positive',\n      dataIndex: 'positivePercentage',\n      key: 'positivePercentage',\n      render: (positivePercentage: string) => `${positivePercentage}%`,\n      sorter: (a, b) => parseFloat(a.positivePercentage) - parseFloat(b.positivePercentage),\n    },\n    {\n      title: '10',\n      dataIndex: 'tensPercentage',\n      key: 'tensPercentage',\n      render: (tensPercentage: string, record) => {\n        if (record.limited) {\n          return '-';\n        }\n\n        return `${tensPercentage}%`;\n      },\n      sorter: (a, b) => parseFloat(a.tensPercentage) - parseFloat(b.tensPercentage),\n    },\n    {\n      title: '5',\n      dataIndex: 'fivesPercentage',\n      key: 'fivesPercentage',\n      render: (fivesPercentage: string) => `${fivesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.fivesPercentage) - parseFloat(b.fivesPercentage),\n    },\n    {\n      title: '-1',\n      dataIndex: 'negativeOnesPercentage',\n      key: 'negativeOnesPercentage',\n      render: (negativeOnesPercentage: string) => `${negativeOnesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeOnesPercentage) - parseFloat(b.negativeOnesPercentage),\n    },\n    {\n      title: '-3',\n      dataIndex: 'negativeThreesPercentage',\n      key: 'negativeThreesPercentage',\n      render: (negativeThreesPercentage: string) => `${negativeThreesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeThreesPercentage) - parseFloat(b.negativeThreesPercentage),\n    },\n    {\n      title: '-10',\n      dataIndex: 'negativeTensPercentage',\n      key: 'negativeTensPercentage',\n      render: (negativeTensPercentage: string) => `${negativeTensPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeTensPercentage) - parseFloat(b.negativeTensPercentage),\n    },\n    {\n      title: 'Completion',\n      dataIndex: 'completionPercentage',\n      key: 'completionPercentage',\n      render: (completionPercentage: string) => (\n        <Progress percent={parseFloat(completionPercentage)} size=\"small\" />\n      ),\n      sorter: (a, b) => parseFloat(a.completionPercentage) - parseFloat(b.completionPercentage),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      render: (level) => <Rate count={4} value={level} disabled />,\n      sorter: (a, b) => a.level - b.level,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record) => (\n        <Space>\n          <Button.Group>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=grouping&attribute=${record.id}&page=1`)}\n            >\n              Grouping\n            </Button>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=sampler&attribute=${record.id}&size=6`)}\n            >\n              Sample\n            </Button>\n          </Button.Group>\n        </Space>\n      ),\n    },\n  ];\n\n  return <Table columns={columns} dataSource={rows} pagination={false} rowKey=\"id\" size=\"small\" />;\n}\n","import { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { Empty, Flex } from 'antd';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { ItemComparatorCard } from './ItemComparatorCard';\nimport { ItemSimulation } from './ItemSimulation';\nimport { ItemStats } from './ItemStats';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <ItemAttributionNavigation />\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  if (view === 'simulator') {\n    return <ItemSimulation />;\n  }\n\n  if (view === 'stats') {\n    return <ItemStats />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ complete: isComplete, attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name, ...rest }) => ({\n      label: `${name.en}${rest.default ? '*' : ''}`,\n      value: id,\n    }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionStatsFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Show Glyphs\"\n        value={searchParams.get('showGlyphs') === 'true'}\n        onChange={(v) => addQueryParam('showGlyphs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { getItemAttributePriorityResponse, sortJsonKeys } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n  ItemAttributionStatsFilters,\n} from './ItemAttributionFiltersSections';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload, attributes, isSaving, attributesToUpdate } =\n    useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(attributesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(prepareItemsAttributesFileForDownload(), attributes)}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator', 'simulator', 'stats']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n      {view === 'stats' && <ItemAttributionStatsFilters />}\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  itemsAttributes: Dictionary<ItemAtributesValues>,\n  attributes: Dictionary<ItemAttribute>\n) {\n  const total = Object.keys(attributes).length;\n\n  Object.keys(itemsAttributes).forEach((key) => {\n    const itemAttributeValues = itemsAttributes[key];\n\n    // // TODO: Tempo Rename hol to gra (grab)\n    // const originalHolValue = itemAttributeValues.attributes['hol'];\n    // delete itemAttributeValues.attributes['hol'];\n    // itemAttributeValues.attributes['gra'] = originalHolValue;\n\n    // // TODO: TEMP Rename sol to har, and base values in soft\n    // const originalSolValue = itemAttributeValues.attributes['sol'];\n    // delete itemAttributeValues.attributes['sol'];\n    // const softValue = itemAttributeValues.attributes['sof'];\n    // if (softValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (originalSolValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n\n    // // TODO: TEMP Auto-add cold if warm\n    // const warmValue = itemAttributeValues.attributes['war'];\n    // if (warmValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.OPPOSITE) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.UNCLEAR;\n    // }\n\n    // Check completion\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n\n    if (completed === total) {\n      // Add completion\n      itemAttributeValues.complete = true;\n\n      // Add score\n      let unclearCount = 0;\n      itemAttributeValues.score = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n        if (v <= 0) {\n          if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n            unclearCount += 1;\n          }\n          if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n            acc += v / 2;\n          }\n          return acc;\n        }\n\n        return acc + v;\n      }, 0);\n\n      // Add reliability\n      itemAttributeValues.reliability = Math.floor(((completed - unclearCount) / total) * 100);\n\n      // Add key with only relevant attributes\n      itemAttributeValues.key = getItemAttributePriorityResponse(itemAttributeValues, attributes, true).join(\n        ''\n      );\n    } else {\n      delete itemAttributeValues.complete;\n      delete itemAttributeValues.score;\n      delete itemAttributeValues.reliability;\n      delete itemAttributeValues.key;\n    }\n  });\n\n  return sortJsonKeys(itemsAttributes);\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionPageContent } from 'components/Items/Attributes/ItemAttributionPageContent';\nimport { ItemAttributionFilters } from 'components/Items/Attributes/ItemAttributionFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","BrazilFlag","xmlns","viewBox","fill","d","cx","cy","r","UnitedStatesFlag","LanguageFlag","language","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","disabled","danger","block","ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","value","readOnly","ItemName","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","ItemsTypeahead","items","isPending","allowClear","onFinish","rest","tdrItemsQuery","useTDResource","Boolean","namesDict","options","useMemo","Object","values","reduce","acc","entry","nameEn","namePt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","map","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","filtered","filter","option","String","includes","sorted","idMatch","match","index","indexOf","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","key","undefined","onPressEnter","state","useCopyToClipboard","App","info","truncate","omission","success","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useQueryParams","defaultParams","searchParams","addParam","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","get","has","queryParams","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","hasResponseData","isEmpty","useTDResourceNonCollection","updateQueryFunction","updateDoc","useUpdateFirebaseDoc","useMutation","mutationFn","useItemQueryParams","setView","addQueryParam","removeQueryParam","globalNewItemsAttributesValues","ItemsAttributeValuesContext","createContext","getItem","getNewItem","getItemAttributeValues","getNewItemAttributeValues","isLoading","error","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributes","attributesToUpdate","ItemsAttributeValuesProvider","notification","queryClient","useQueryClient","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","select","deserializeFirebaseData","modifiedAttributeValues","setModifiedAttributeValues","mutation","onSuccess","refetchQueries","onError","description","savedItemsAttributeValues","firebaseData","decks","Number","storedValue","modifiedValue","merge","mutate","serializeFirebaseData","prev","updatedAt","itemsArr","mapKeys","useItemsAttribution","itemIndex","setItemIndex","random","Provider","direction","attributeId","sortJsonKeys","complete","useItemsAttributeValuesContext","useContext","attributeOptions","label","ATTRIBUTE_VALUE","attributeLimitedOptions","AttributionValueButtons","attribute","onChange","onlyButtons","limited","target","v","optionType","buttonStyle","QuestionCircleOutlined","CheckCircleFilled","ItemAttributeDescription","showUnclear","showUnrelated","filteredResponse","filterMessage","getItemAttributePriorityResponse","Component","AttributeSprite","AttributeText","gap","vertical","wrap","keyVariant","arr","firstElement","lastElement","withText","text","parseAttribute","align","spriteId","clsx","justify","maxWidth","textAlign","wordBreak","suffix","Stat","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","total","completed","Math","floor","unclearCount","strong","percent","CloseCircleOutlined","ItemAttributionCard","queryParamsItemId","showOnlyUnset","filteredAttributesList","offsetTop","ItemAttributionNavigation","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","useItemSampler","sampleIds","setSampleIds","setAttribute","getSample","attributeKey","lodashSample","selectedAttribute","find","a","sampleSize","selected","shuffle","i","push","itemsLeftForAttribute","onGetSample","tempSample","attempts","updateAttributeValue","currentItemAttributeValues","ItemSamplerCard","SingleSampleModalFlow","sample","itemAttributes","unsetItems","actions","ghost","extra","image","Empty","Fragment","open","toggleOpen","useToggle","onClose","maskClosable","onOk","onCancel","cancelButtonProps","display","wait","GoToTopButton","isVisible","setIsVisible","handleScroll","pageYOffset","scrollTo","top","behavior","VerticalAlignTopOutlined","getStatSentence","stats","scope","group","ItemGroupingCard","pageIds","updatePageItemsAsUnrelated","pagination","sorting","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","sortBy","setSortBy","sortOrder","setSortOrder","itemsAttributes","scopeValue","filteredItemIds","slice","start","end","round","current","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","sortingComponent","unrelateButton","onConfirm","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemAttributesValues","itemMessage","fullMessage","join","moreThanOne","ids","keyBy","useItemsComparator","columns","dataIndex","render","sorter","b","localeCompare","groupA","level","dataSource","showQuickJumper","DailyAliemSimulator","simulation","setSimulation","generateDailyAlienGame","simulations","tries","valid","setId","e","number","attr","itemsIds","requests","req","spritesIds","itemsAttributesValues","allAttributes","allItems","spriteIDs","makeArray","selectedAttributes","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","POSITIVE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","max","usedItemsIds","complexRequests","simpleRequests","warn","requestItemsIds","result","sort","solution","every","ROMAN_NUMERALS","ItemSimulation","gridSize","setGridSize","reliabilityThreshold","setReliabilityThreshold","setNsfw","selectedItemsIds","setSelectedItemsIds","setSelectedAttributes","highlightedAttributeKey","setHighlightedAttributeKey","displays","setDisplays","reliability","onUpdateDisplays","step","min","keysDict","shuffledIds","attributesResult","selectedItemsAttributesValues","quantity","attributesCounts","deterministicKeysDict","levelCount","filterCountLevelsAndGuardLevel4","deterministicKeys","nondeterministicKeys","deterministicTiedGroups","sortedDeterministicTiedGroupsKeys","nondeterministicTiedGroups","sortedNondeterministicTiedGroupsKeys","getHighestAttributeKeys","remainingAttributes","toBeAdded","priority","dicts","relatedCount","deterministicCount","oppositeCount","gridTemplateColumns","sqrt","LineChartOutlined","formatter","attributeSummary","CheckSquareOutlined","PlusSquareOutlined","CloseSquareOutlined","ItemStats","AttributesStatsTable","defaultActiveKey","calculateAttributeStats","completionCount","tensCount","fivesCount","zerosCount","negativeOnesCount","negativeThreesCount","negativeTensCount","positiveCount","tensPercentage","fivesPercentage","zerosPercentage","negativeOnesPercentage","negativeThreesPercentage","negativeTensPercentage","positivePercentage","completionPercentage","toFixed","navigate","useNavigate","attributesPool","default","rows","record","parseFloat","count","rowKey","ItemAttributionPageContent","ItemAttributionStats","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","isComplete","ItemAttributionClassifierFilters","ItemAttributionSamplerFilters","ItemAttributionGroupingFilters","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionStatsFilters","ItemAttributionFilters","JSON","stringify","score","prepareFileForDownload","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}