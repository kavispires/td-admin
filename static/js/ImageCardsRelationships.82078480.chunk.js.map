{"version":3,"file":"static/js/ImageCardsRelationships.82078480.chunk.js","mappings":"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","sources":["components/Images/ImageCards/ImagesRelationshipsContext.tsx","components/Images/ImageCards/RelationshipsStats.tsx","components/Images/ImageCards/RelationshipsContent.tsx","components/Images/ImageCards/RelationshipsFilters.tsx","pages/Images/ImageCardsRelationships.tsx"],"sourcesContent":["import { type ReactNode, createContext, useContext, useState } from 'react';\nimport {\n  type UseImageCardsRelationshipDataReturnValue,\n  type UseRandomGroupReturnValue,\n  useImageCardsRelationshipData,\n  useRandomGroups,\n} from './hooks/hooks';\n\nexport type ImagesRelationshipsContextType = {\n  sampleSize: number;\n  setSampleSize: (size: number) => void;\n  tagThreshold: number;\n  setTagThreshold: (threshold: number) => void;\n  cardSize: number;\n  setCardSize: (size: number) => void;\n  showIds: boolean;\n  setShowIds: (show: boolean) => void;\n  randomGroups: UseRandomGroupReturnValue;\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nconst ImagesRelationshipsContext = createContext<ImagesRelationshipsContextType | PlainObject>({});\n\ntype ImagesRelationshipsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ImagesRelationshipsProvider = ({ children }: ImagesRelationshipsProviderProps) => {\n  const query = useImageCardsRelationshipData();\n\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(150);\n  const [showIds, setShowIds] = useState(false);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const randomGroups = useRandomGroups(query.data, query.setDirty, sampleSize, tagThreshold);\n\n  return (\n    <ImagesRelationshipsContext.Provider\n      value={{\n        sampleSize,\n        setSampleSize,\n        tagThreshold,\n        setTagThreshold,\n        cardSize,\n        setCardSize,\n        showIds,\n        setShowIds,\n        randomGroups,\n        query,\n      }}\n    >\n      {children}\n    </ImagesRelationshipsContext.Provider>\n  );\n};\n\nexport const useImagesRelationshipsContext = () => useContext(ImagesRelationshipsContext);\n","import { BarChartOutlined } from '@ant-design/icons';\nimport { Avatar, Form } from 'antd';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\n\nexport function RelationshipsStats() {\n  const {\n    query: { stats },\n  } = useImagesRelationshipsContext();\n\n  return (\n    <Form.Item\n      label={\n        <>\n          <Avatar icon={<BarChartOutlined />} shape=\"square\" size=\"small\" style={{ marginRight: 6 }} />\n          Stats\n        </>\n      }\n    >\n      <ul className=\"statistic__list\">\n        <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n        <li>Total Relationships: {stats.total}</li>\n        <li>Complete: {stats.complete}</li>\n        <li>Overdone: {stats.overdone}</li>\n        <li>Single Match: {stats.single}</li>\n      </ul>\n    </Form.Item>\n  );\n}\n","import {\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { Card, FloatButton, Image, Tag } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { isEmpty } from 'lodash';\nimport { useMemo, useRef } from 'react';\nimport { useMeasure } from 'react-use';\nimport { ImageCard } from '../ImageCard';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipCountTag } from './RelationshipCountTag';\n\nexport function RelationshipsContent() {\n  const {\n    query: { isDirty, isSaving, save, stats, ...query },\n    randomGroups: { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles },\n    showIds,\n    cardSize,\n  } = useImagesRelationshipsContext();\n\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const [cardQuantity, cardWidth] = useMemo(() => {\n    const cq = Math.floor(containerWidth / cardSize) + 1;\n    const cw = Math.floor(containerWidth / cq);\n    return [cq, cw];\n  }, [cardSize, containerWidth]);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={query.isLoading}\n      error={query.error}\n      hasResponseData={!isEmpty(query.data)}\n    >\n      <div ref={ref} className=\"my-6\">\n        <Card\n          title=\"Card Relationship Matching\"\n          extra={\n            <span>\n              <FileImageOutlined /> {cycles}\n            </span>\n          }\n          className=\"image-card-categorizer-card\"\n          ref={cardRef}\n        >\n          <Image.PreviewGroup>\n            <div\n              className=\"image-cards-group\"\n              style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n            >\n              {cardIds.map((cardId: string, index: number) => {\n                const isSelected = selection.includes(cardId);\n                const card = cards[index];\n\n                return (\n                  <div className=\"image-card-card__image\" key={cardId}>\n                    <TransparentButton\n                      onClick={() => onSelect(cardId)}\n                      active={isSelected}\n                      className=\"image-cards-group__button\"\n                      activeClass=\"image-cards-group__button--active\"\n                    >\n                      <ImageCard id={cardId} width={cardWidth - 24} preview={false} />\n                      <div>\n                        {showIds && <Tag>{cardId}</Tag>}\n                        {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                        <RelationshipCountTag card={card} />\n                      </div>\n                    </TransparentButton>\n                  </div>\n                );\n              })}\n            </div>\n          </Image.PreviewGroup>\n          <Actions\n            isSaving={isSaving}\n            isDirty={isDirty}\n            selection={selection}\n            relate={relate}\n            deselectAll={deselectAll}\n            onNextSet={onNextSet}\n          />\n        </Card>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    // </FloatButton.Group>\n    <>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>\n  );\n};\n","import { Flex } from 'antd';\nimport { FilterSelect, FilterSwitch, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\nimport { CARD_SIZE_OPTIONS, SAMPLE_SIZE_OPTIONS, TAGS_SELECTOR_OPTIONS } from 'utils/constants';\n\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipsStats } from './RelationshipsStats';\n\nexport function RelationshipsFilters() {\n  const {\n    query: { isDirty, isSaving, save, data, isLoading, isError },\n    randomGroups: { filters },\n    showIds,\n    setShowIds,\n    tagThreshold,\n    setTagThreshold,\n    sampleSize,\n    setSampleSize,\n    cardSize,\n    setCardSize,\n  } = useImagesRelationshipsContext();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Flex vertical gap={6}>\n          <SaveButton\n            isDirty={isDirty}\n            dirt={JSON.stringify(data)}\n            onSave={() => save({})}\n            isSaving={isSaving}\n          />\n\n          <DownloadButton\n            data={data}\n            fileName=\"imageCardsRelationships.json\"\n            loading={isSaving}\n            disabled={isEmpty(data)}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <FilterSwitch\n          label=\"Use Cycles\"\n          value={filters.useCycles}\n          onChange={() => filters.toggleUseCycles()}\n        />\n\n        <FilterSwitch label=\"Show Ids\" value={showIds} onChange={(c) => setShowIds(c)} />\n\n        <FilterSelect\n          onChange={(value) => setTagThreshold(value)}\n          value={tagThreshold}\n          options={TAGS_SELECTOR_OPTIONS}\n          label=\"Tag Count\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setSampleSize(value)}\n          value={sampleSize}\n          options={SAMPLE_SIZE_OPTIONS}\n          label=\"Sample Size\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setCardSize(value)}\n          value={cardSize}\n          options={CARD_SIZE_OPTIONS}\n          label=\"Card Size\"\n        />\n      </SiderContent>\n\n      <SiderContent>\n        <RelationshipsStats />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { ImagesRelationshipsProvider } from 'components/Images/ImageCards/ImagesRelationshipsContext';\nimport { RelationshipsContent } from 'components/Images/ImageCards/RelationshipsContent';\nimport { RelationshipsFilters } from 'components/Images/ImageCards/RelationshipsFilters';\n\nimport { PageLayout } from 'components/Layout';\n\nfunction ImageCardsRelationships() {\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Relationships\">\n      <ImagesRelationshipsProvider>\n        <Layout hasSider>\n          <RelationshipsFilters />\n\n          <Layout.Content className=\"content\">\n            <RelationshipsContent />\n          </Layout.Content>\n        </Layout>\n      </ImagesRelationshipsProvider>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsRelationships;\n"],"names":["ImagesRelationshipsContext","createContext","ImagesRelationshipsProvider","children","query","useImageCardsRelationshipData","sampleSize","setSampleSize","useState","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","randomGroups","useRandomGroups","data","setDirty","Provider","value","useImagesRelationshipsContext","useContext","RelationshipsStats","stats","label","icon","shape","size","style","marginRight","className","Math","floor","total","complete","overdone","single","RelationshipsContent","isDirty","isSaving","save","cardIds","cards","onSelect","selection","relate","nextSet","deselectAll","cycles","cardRef","useRef","ref","width","containerWidth","useMeasure","cardQuantity","cardWidth","useMemo","cq","DataLoadingWrapper","isLoading","error","hasResponseData","isEmpty","title","extra","FileImageOutlined","gridTemplateColumns","max","map","cardId","index","isSelected","includes","card","onClick","active","activeClass","ImageCard","id","preview","RelationshipCountTag","Actions","onNextSet","current","scrollIntoView","behavior","LoadingOutlined","WarningOutlined","type","right","ExpandOutlined","ForkOutlined","length","badge","count","SyncOutlined","RelationshipsFilters","isError","filters","vertical","gap","SaveButton","dirt","JSON","stringify","onSave","DownloadButton","fileName","loading","disabled","block","useCycles","onChange","toggleUseCycles","c","options","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","subtitle","hasSider"],"sourceRoot":""}