{"version":3,"file":"static/js/Items.c59656bf.chunk.js","mappings":"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","sources":["components/Items/ItemsTypeahead.tsx","context/ItemsContext.tsx","components/Items/ItemCard.tsx","hooks/useItemUpdate.ts","components/Items/ItemListing.tsx","components/Items/AddNewItem.tsx","components/Items/ItemListingFilters.tsx","components/Items/ItemRandomized.tsx","components/Items/ItemSearch.tsx","pages/Items/Items.tsx"],"sourcesContent":["import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n\n  const handleSearch = (searchText: string) => {\n    const SEARCH = searchText.trim();\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '');\n        if (value.includes(`${SEARCH} `)) return -1;\n        const index = value.toUpperCase().indexOf(SEARCH);\n        return index === 0 ? -1 : index === -1 ? value.length : index;\n      },\n    ]);\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={options}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={handleSearch}\n      notFoundContent=\"No items found\"\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { createContext, ReactNode, useContext, useMemo } from 'react';\nimport { Item } from 'types';\n\nexport type ItemsContextType = {\n  items: Dictionary<Item>;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  categoriesDict: Dictionary<string>;\n  categories: { value: string }[];\n  listing: Item[];\n  isDirty: boolean;\n  addItemToUpdate: (id: string, item: Item) => void;\n  itemsToUpdate: Dictionary<Item>;\n  isSaving: boolean;\n  save: () => void;\n  newId: string;\n};\n\nconst ItemsContext = createContext<ItemsContextType>({\n  items: {},\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  categoriesDict: {},\n  categories: [],\n  listing: [],\n  isDirty: false,\n  addItemToUpdate: () => {},\n  itemsToUpdate: {},\n  isSaving: false,\n  save: () => {},\n  newId: '-1',\n});\n\ntype ItemsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsProvider = ({ children }: ItemsProviderProps) => {\n  const { queryParams } = useQueryParams();\n\n  const {\n    data: items,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addEntryToUpdate: addItemToUpdate,\n    entriesToUpdate: itemsToUpdate,\n    isDirty,\n  } = useResourceFirebaseData<Item>({\n    tdrResourceName: 'items',\n    firebaseDataCollectionName: 'items',\n  });\n\n  const { categoriesDict, categories } = useMemo(() => {\n    console.log('Recomputing item categories typeahead...');\n    const categoriesDict: Dictionary<string> = {};\n    const duplicationCheckEn: Dictionary<string> = {};\n    const duplicationCheckPt: Dictionary<string> = {};\n    const duplicatedNames: string[][] = [];\n\n    Object.values(items).forEach((entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n\n      if (duplicationCheckEn[entry.name.en]) {\n        duplicatedNames.push([`${entry.name.en} (${duplicationCheckEn[entry.name.en]})`, nameEn]);\n      } else {\n        duplicationCheckEn[entry.name.en] = entry.id;\n      }\n      if (duplicationCheckPt[entry.name.pt]) {\n        duplicatedNames.push([`${entry.name.pt} (${duplicationCheckPt[entry.name.pt]})`, namePt]);\n      } else {\n        duplicationCheckPt[entry.name.pt] = entry.id;\n      }\n\n      entry?.categories?.forEach((category) => {\n        categoriesDict[category] = category;\n      });\n    });\n\n    const categories = orderBy(Object.keys(categoriesDict)).map((name) => ({ value: name }));\n\n    if (duplicatedNames.length > 0) {\n      console.warn('Possible duplicated items', duplicatedNames);\n    }\n\n    return { categoriesDict, categories };\n  }, [items, isSaving, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const category = queryParams.get('category') ?? 'all';\n  const listing = useMemo(() => {\n    const orderedList = orderBy(Object.values(items), [(item) => Number(item.id)], 'asc');\n\n    switch (category) {\n      case 'all':\n        return orderedList;\n      case '!all':\n        return orderedList.filter((item) => !item?.categories?.length ?? true);\n      case 'nsfw':\n        return orderedList.filter((item) => item.nsfw);\n      case '!nsfw':\n        return orderedList.filter((item) => !item.nsfw);\n      default:\n        if (category.startsWith('!')) {\n          return orderedList.filter((item) => !item?.categories?.includes(category.slice(1)));\n        }\n        return orderedList.filter((item) => item?.categories?.includes(category));\n    }\n  }, [items, category]);\n\n  // Handle id for new items\n  const newId = useMemo(() => {\n    const newIds = orderBy(Object.keys(itemsToUpdate), [(id) => Number(id)], 'asc');\n    const latestSavedId = listing[listing.length - 1]?.id;\n    const newestId = orderBy([...newIds, latestSavedId], [(id) => Number(id)], 'desc')[0];\n    return String(Number(newestId) + 1);\n  }, [listing, itemsToUpdate]);\n\n  return (\n    <ItemsContext.Provider\n      value={{\n        items,\n        listing,\n        isLoading,\n        error,\n        categoriesDict,\n        categories,\n        hasResponseData: listing.length > 0,\n        isDirty,\n        addItemToUpdate,\n        isSaving,\n        save,\n        itemsToUpdate,\n        newId,\n      }}\n    >\n      {children}\n    </ItemsContext.Provider>\n  );\n};\n\nexport const useItemsContext = () => useContext(ItemsContext);\n","import { Button, Card, Flex, Form, Input, Popover, Select, Space, Switch, Typography } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useItemUpdate } from 'hooks/useItemUpdate';\nimport { memoize, snakeCase } from 'lodash';\nimport { Item as ItemT } from 'types';\n\nimport { EditOutlined, FireFilled, MenuOutlined, RollbackOutlined, SaveOutlined } from '@ant-design/icons';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useToggle } from 'react-use';\n\ntype ItemCardProps = {\n  item: ItemT;\n  editMode?: boolean;\n  simplified?: boolean;\n};\n\nexport function ItemCard({ item, editMode = false, simplified }: ItemCardProps) {\n  const { categories } = useItemsContext();\n  const { isEditing, toggleEditMode, onEdit, isDirty, onModify, onReset, editableItem } = useItemUpdate(\n    item,\n    editMode\n  );\n  const copyToClipboard = useCopyToClipboardFunction();\n  const { is } = useQueryParams();\n\n  return (\n    <Card\n      title={<Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>}\n      extra={<ItemPopoverOptions item={item} />}\n      style={{ maxWidth: 250 }}\n      size={simplified ? 'small' : 'default'}\n      actions={\n        simplified\n          ? undefined\n          : isDirty\n            ? [\n                <RollbackOutlined key=\"reset\" onClick={onReset} />,\n                <SaveOutlined key=\"save\" onClick={onModify} />,\n              ]\n            : [<EditOutlined key=\"edit\" onClick={toggleEditMode} />]\n      }\n    >\n      <Item id={item.id} width={simplified ? 75 : 125} title={`${item.name.en} | ${item.name.pt}`} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <Input\n          prefix={<LanguageFlag language=\"en\" width=\"1em\" />}\n          placeholder=\"Name in EN\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.en}\n          readOnly={!isEditing}\n          key={`en-${item.name.en}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, en: e.target.value } })}\n        />\n        <Input\n          prefix={<LanguageFlag language=\"pt\" width=\"1em\" />}\n          placeholder=\"Name in PT\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.pt}\n          readOnly={!isEditing}\n          key={`pt-${item.name.pt}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, pt: e.target.value } })}\n        />\n        {!simplified && (\n          <>\n            <div>\n              <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Select a category\"\n                defaultValue={item.categories}\n                disabled={!isEditing}\n                options={categories}\n                variant={isEditing ? 'outlined' : 'borderless'}\n                size=\"small\"\n                key={String(item.categories)}\n                onChange={(value) => onEdit({ categories: value.sort() })}\n              />\n            </div>\n            {is('showVerifyThing') && (\n              <div>\n                <VerifyIfThing item={item} />\n              </div>\n            )}\n            {(isEditing || item.nsfw) && (\n              <div>\n                <Form.Item label=\"nsfw\" valuePropName=\"checked\">\n                  <Switch\n                    checked={item.nsfw}\n                    onChange={(checked) => onEdit({ nsfw: checked })}\n                    size=\"small\"\n                    checkedChildren={<FireFilled style={{ color: 'hotpink' }} />}\n                    disabled={!isEditing}\n                  />\n                </Form.Item>\n              </div>\n            )}\n          </>\n        )}\n      </Space>\n    </Card>\n  );\n}\n\ntype VerifyIfThingProps = {\n  item: ItemT;\n};\n\nconst verifyIfThingCheck = memoize((item: ItemT) => {\n  const hasThing = !!item.categories?.includes('thing');\n  const hasMesmice = !!item.categories?.includes('mesmice');\n  const singleWordNameEn = item.name.en.split(' ').length === 1;\n  const singleWordNamePt = item.name.pt.split(' ').length === 1;\n\n  const result = {\n    en: hasThing || (singleWordNameEn && hasMesmice),\n    pt: hasThing || (singleWordNamePt && hasMesmice),\n  };\n\n  if (!result.pt && !result.en) return '';\n\n  return (\n    <>\n      {result.en && <LanguageFlag language=\"en\" width=\"1em\" />}\n      {result.pt && <LanguageFlag language=\"pt\" width=\"1em\" />}\n    </>\n  );\n});\n\nconst VerifyIfThing = ({ item }: VerifyIfThingProps) => {\n  const result = verifyIfThingCheck(item);\n\n  if (result) {\n    return <Flex gap={6}>Thing: {result}</Flex>;\n  }\n\n  return <></>;\n};\n\nexport type EscapeRoomItemCard = {\n  /**\n   * The unique identifier of the card.\n   * Usually used to verify the end game played cards condition.\n   */\n  id: string;\n  /**\n   * The type of the card.\n   */\n  type: 'item';\n  /**\n   * The header of the card\n   */\n  header: {\n    /**\n     * The title of the header in both languages.\n     */\n    title: DualLanguageValue;\n    /**\n     * Illustrative small icon in the header.\n     */\n    iconId?: string;\n  };\n  /**\n   * The metadata of the card.\n   */\n  metadata?: {\n    /**\n     * The level of the card to determine the difficulty.\n     */\n    level: 'basic';\n    /**\n     * When played, adds this keyword to the result.\n     */\n    keyword?: string;\n  };\n  content: {\n    /**\n     * The item id for the Item Sprite\n     */\n    itemId: string;\n    /**\n     * Descriptive text of the item, usually its name\n     */\n    caption?: DualLanguageValue;\n  };\n};\n\nconst buildEscapeRoomItemCard = (item: ItemT): EscapeRoomItemCard => ({\n  id: item.id,\n  type: 'item',\n  header: {\n    title: {\n      en: 'Item',\n      pt: 'Item',\n    },\n    iconId: '2077',\n  },\n  metadata: {\n    level: 'basic',\n    keyword: snakeCase(item.name.en).toUpperCase(),\n  },\n  content: {\n    itemId: item.id,\n    caption: item.name,\n  },\n});\n\nexport function ItemPopoverOptions({ item }: Pick<ItemCardProps, 'item'>) {\n  const [open, toggleOpen] = useToggle(false);\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <Popover\n      content={\n        <Space direction=\"vertical\">\n          <Button size=\"small\" onClick={() => copyToClipboard(JSON.stringify(item, null, 2))}>\n            Complete Item\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.en)}>\n            EN Name\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.pt)}>\n            PT Name\n          </Button>\n          <Button\n            size=\"small\"\n            onClick={() => copyToClipboard(JSON.stringify(buildEscapeRoomItemCard(item), null, 2))}\n          >\n            Escape Room Item\n          </Button>\n        </Space>\n      }\n      title=\"Copy\"\n      trigger=\"click\"\n      open={open}\n      onOpenChange={toggleOpen}\n    >\n      <Button type=\"text\" icon={<MenuOutlined />} />\n    </Popover>\n  );\n}\n","import { cloneDeep } from 'lodash';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\nimport { useItemsContext } from 'context/ItemsContext';\n\nexport function useItemUpdate(currentItem: ItemT, editMode = false) {\n  const { addItemToUpdate, itemsToUpdate } = useItemsContext();\n  const [isEditing, setEditing] = useState(editMode);\n  const [editableItem, setEditableItem] = useState<ItemT>(cloneDeep(currentItem));\n  const originalItem = itemsToUpdate[currentItem.id] ?? currentItem;\n\n  const onEdit = (change: Partial<ItemT>) => {\n    const newItem = { ...cloneDeep(editableItem), ...change };\n    if (Object.keys(change).includes('nsfw') && change.nsfw === false) {\n      delete newItem.nsfw;\n    }\n    setEditableItem(newItem);\n  };\n\n  const onModify = async () => {\n    addItemToUpdate(editableItem.id, editableItem);\n  };\n\n  const onReset = () => {\n    setEditableItem(cloneDeep(currentItem));\n    setEditing(false);\n  };\n\n  const isDirty = JSON.stringify(originalItem) !== JSON.stringify(editableItem);\n\n  return {\n    isEditing,\n    toggleEditMode: () => setEditing((e) => !e),\n    editableItem,\n    onEdit,\n    isDirty,\n    onModify,\n    onReset,\n  };\n}\n","import { Col, Row, Typography } from 'antd';\n\nimport { ItemCard } from './ItemCard';\nimport { capitalize } from 'lodash';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemListing() {\n  const { queryParams } = useQueryParams();\n  const listingType = queryParams.get('type') ?? 'all';\n  const { listing } = useItemsContext();\n\n  const { page, pagination } = useGridPagination({ data: listing, resetter: listingType });\n\n  return (\n    <>\n      <Typography.Title level={2}>\n        Listing - {capitalize(listingType)} items ({listing.length})\n      </Typography.Title>\n\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemCard item={item} />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Button, Modal } from 'antd';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useState } from 'react';\nimport { ItemCard } from './ItemCard';\nimport { cloneDeep } from 'lodash';\n\nconst PLACEHOLDER_ITEM = {\n  id: '',\n  name: {\n    en: '',\n    pt: '',\n  },\n  groups: [],\n};\n\ntype NewItemModalProps = {\n  isModalOpen: boolean;\n  handleOk: () => void;\n  handleCancel: () => void;\n  newId: string;\n};\n\nfunction NewItemModal({ isModalOpen, handleOk, handleCancel, newId }: NewItemModalProps) {\n  const [newItem] = useState(cloneDeep({ ...PLACEHOLDER_ITEM, id: newId }));\n  return (\n    <Modal title=\"Add new item\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n      <ItemCard item={newItem} editMode />\n    </Modal>\n  );\n}\n\nexport function AddNewItem() {\n  const [isModalOpen, setOpenModal] = useState(false);\n\n  const { newId } = useItemsContext();\n\n  const showModal = () => {\n    setOpenModal(true);\n  };\n\n  const handleOk = () => {\n    setOpenModal(false);\n  };\n\n  const handleCancel = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <Button block onClick={showModal}>\n        Add New Item\n      </Button>\n      {isModalOpen && (\n        <NewItemModal\n          isModalOpen={isModalOpen}\n          handleOk={handleOk}\n          handleCancel={handleCancel}\n          newId={newId}\n          key={newId}\n        />\n      )}\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { capitalize, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { AddNewItem } from './AddNewItem';\nimport { Item } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { SaveButton } from 'components/Common/SaveButton';\n\nexport function ItemListingFilters() {\n  const { isDirty, save, items, categories, itemsToUpdate, isSaving } = useItemsContext();\n  const { queryParams, is, addParam } = useQueryParams();\n\n  const categoryOptions = useMemo(() => {\n    const includingOptions = orderBy(\n      categories.map(({ value }) => ({ label: capitalize(value), value })),\n      'label'\n    );\n    const excludingOptions = includingOptions.map(({ label, value }) => ({\n      label: `NOT ${label}`,\n      value: `!${value}`,\n    }));\n    return [...includingOptions, ...excludingOptions];\n  }, [categories]);\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={6}>\n        <SaveButton\n          isDirty={isDirty}\n          dirt={JSON.stringify(itemsToUpdate)}\n          onSave={save}\n          isSaving={isSaving}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(items)}\n          fileName=\"items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSwitch\n        label=\"Show Search\"\n        value={!is('hideSearch')}\n        onChange={(v) => addParam('hideSearch', v ? '' : 'true', '')}\n      />\n\n      <FilterSwitch\n        label=\"Show Randomizer\"\n        value={is('showRandomizer')}\n        onChange={(v) => addParam('showRandomizer', v ? 'true' : '', '')}\n      />\n\n      <FilterSwitch\n        label=\"Verify Thing\"\n        value={is('showVerifyThing')}\n        onChange={(v) => addParam('showVerifyThing', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n\n      <FilterSelect\n        label=\"Category\"\n        value={queryParams.get('category') ?? 'all'}\n        onChange={(value) => addParam('category', value, 'all')}\n        options={[\n          { label: 'All', value: 'all' },\n          { label: 'NSFW', value: 'nsfw' },\n          { label: 'SFW', value: '!nsfw' },\n          ...categoryOptions,\n          { label: 'No categories', value: '!all' },\n        ]}\n      />\n\n      <Divider />\n\n      <AddNewItem />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(items: Dictionary<Item>) {\n  return sortJsonKeys(\n    Object.values(items).reduce((acc: Dictionary<Item>, item) => {\n      // Sort categories\n      item.categories = (item?.categories ?? []).sort();\n\n      // Remove categories if no category is present\n      if (item.categories.length === 0) {\n        delete item.categories;\n\n        acc[item.id] = item;\n        return acc;\n      }\n\n      // Remove thing from category if either evidence, dream, alien, or mesmice is present and both pt and en names are single words\n      if (\n        item.categories.includes('thing') &&\n        item.name.en.split(' ').length === 1 &&\n        item.name.pt.split(' ').length === 1\n      ) {\n        if (\n          item.categories.includes('evidence') ||\n          item.categories.includes('dream') ||\n          item.categories.includes('alien') ||\n          item.categories.includes('mesmice')\n        ) {\n          item.categories = item.categories.filter((category) => category !== 'thing');\n        }\n\n        acc[item.id] = item;\n      }\n\n      acc[item.id] = item;\n\n      return acc;\n    }, {})\n  );\n}\n","import { Button, Divider, Space, Typography } from 'antd';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { sampleSize } from 'lodash';\n\nexport function ItemRandomized() {\n  const { listing } = useItemsContext();\n  const [randomItems, setRandomItems] = useState<ItemT[]>([]);\n\n  const onRandomSample = () => {\n    setRandomItems(sampleSize(listing, 5));\n  };\n\n  return (\n    <div>\n      <Typography.Title level={2}>Randomized Sample</Typography.Title>\n\n      <div>\n        <Button onClick={onRandomSample}>Get Sample</Button>\n      </div>\n\n      <Space wrap className=\"my-4\">\n        {randomItems.map((item) => (\n          <ItemCard key={item.id} item={item} simplified />\n        ))}\n      </Space>\n\n      <Divider />\n    </div>\n  );\n}\n","import { Divider, Space, Typography } from 'antd';\nimport { Fragment, useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nexport function ItemSearch() {\n  const { items, isLoading, isSaving } = useItemsContext();\n  const [activeItem, setActiveItem] = useState<ItemT | null>(null);\n\n  return (\n    <Fragment key={`item-search-${isLoading}`}>\n      <Typography.Title level={2}>Search for an item</Typography.Title>\n\n      <div>\n        <ItemsTypeahead\n          items={items}\n          isPending={isLoading || isSaving}\n          onFinish={(id) => setActiveItem(items[id])}\n        />\n      </div>\n\n      {Boolean(activeItem) && (\n        <Space direction=\"vertical\" className=\"my-4\" key={activeItem?.id}>\n          <ItemCard item={activeItem!} />\n        </Space>\n      )}\n      <Divider />\n    </Fragment>\n  );\n}\n","import { Layout, Space } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemListing } from 'components/Items/ItemListing';\nimport { ItemListingFilters } from 'components/Items/ItemListingFilters';\nimport { ItemRandomized } from 'components/Items/ItemRandomized';\nimport { ItemSearch } from 'components/Items/ItemSearch';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ItemsProvider, useItemsContext } from 'context/ItemsContext';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nfunction ItemsPage() {\n  const { isLoading, error, hasResponseData } = useItemsContext();\n  const { is } = useQueryParams();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Listing\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemListingFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            {!isLoading && (\n              <Space size=\"large\">\n                {!is('hideSearch') && <ItemSearch />}\n                {is('showRandomizer') && <ItemRandomized />}\n              </Space>\n            )}\n            <ItemListing />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction Items() {\n  return (\n    <ItemsProvider>\n      <ItemsPage />\n    </ItemsProvider>\n  );\n}\n\nexport default Items;\n"],"names":["ItemsTypeahead","items","isPending","style","size","placeholder","allowClear","onFinish","rest","tdrItemsQuery","useTDResource","Boolean","namesDict","options","useMemo","console","log","Object","values","data","reduce","acc","entry","nameEn","name","en","id","namePt","pt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","width","filterOption","inputValue","option","String","toUpperCase","indexOf","onSearch","searchText","SEARCH","trim","filtered","filter","includes","sorted","index","length","notFoundContent","onSelect","key","undefined","onPressEnter","ItemsContext","createContext","isLoading","error","hasResponseData","categoriesDict","categories","listing","isDirty","addItemToUpdate","itemsToUpdate","isSaving","save","newId","ItemsProvider","children","queryParams","useQueryParams","addEntryToUpdate","entriesToUpdate","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","duplicationCheckEn","duplicationCheckPt","duplicatedNames","forEach","push","category","warn","get","orderedList","item","Number","nsfw","startsWith","slice","newIds","latestSavedId","newestId","Provider","useItemsContext","useContext","ItemCard","editMode","simplified","isEditing","toggleEditMode","onEdit","onModify","onReset","editableItem","currentItem","setEditing","setEditableItem","cloneDeep","originalItem","change","newItem","async","JSON","stringify","e","useItemUpdate","copyToClipboard","useCopyToClipboardFunction","is","title","onClick","extra","ItemPopoverOptions","maxWidth","actions","RollbackOutlined","SaveOutlined","EditOutlined","direction","className","prefix","LanguageFlag","language","variant","defaultValue","readOnly","onChange","target","mode","disabled","sort","VerifyIfThing","label","valuePropName","checked","checkedChildren","FireFilled","color","verifyIfThingCheck","memoize","hasThing","hasMesmice","singleWordNameEn","split","singleWordNamePt","result","gap","open","toggleOpen","useToggle","content","type","header","iconId","metadata","level","keyword","snakeCase","itemId","caption","buildEscapeRoomItemCard","trigger","onOpenChange","icon","MenuOutlined","ItemListing","listingType","page","pagination","useGridPagination","resetter","capitalize","PaginationWrapper","gutter","xs","sm","md","lg","xl","PLACEHOLDER_ITEM","groups","NewItemModal","isModalOpen","handleOk","handleCancel","onOk","onCancel","AddNewItem","setOpenModal","block","ItemListingFilters","addParam","categoryOptions","includingOptions","excludingOptions","vertical","SaveButton","dirt","onSave","DownloadButton","sortJsonKeys","prepareFileForDownload","fileName","v","ItemRandomized","randomItems","setRandomItems","sampleSize","wrap","ItemSearch","activeItem","setActiveItem","Fragment","ItemsPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}