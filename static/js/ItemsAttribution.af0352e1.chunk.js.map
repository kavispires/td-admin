{"version":3,"file":"static/js/ItemsAttribution.af0352e1.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","hooks/useGetFirebaseDoc.ts","hooks/useUpdateFirebaseDoc.tsx","hooks/useItemQueryParams.ts","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","components/Items/AttributionValueButtons.tsx","components/Items/ItemAttributeDescription.tsx","components/Common/Stat.tsx","components/Items/ItemAttributeStats.tsx","components/Items/ItemAttributionCard.tsx","components/Items/ItemAttributionNavigation.tsx","components/Items/ItemSamplerCard.tsx","hooks/useItemSampler.ts","components/Common/GoToTopButton.tsx","components/Items/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","components/Items/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/ItemAttributionPageContent.tsx","components/Items/ItemAttributionFilersSections.tsx","components/Items/ItemAttributionFilters.tsx","pages/Items/ItemsAttribution.tsx","utils/constants.ts","utils/index.ts"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      Download JSON\n    </Button>\n  );\n}\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { deserializeFirebaseData, getNewItem, getNewItemAttributeValues, serializeFirebaseData } from 'utils';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAtributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAtributesValues>\n  >('data', 'itemsAttributeValues', {\n    select: deserializeFirebaseData,\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAtributesValues>>({});\n\n  const mutation = useUpdateFirebaseDoc('data', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'data', 'itemsAttributeValues'],\n      });\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAtributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAtributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id'\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(serializeFirebaseData({ ...firebaseData, ...modifiedAttributeValues }));\n  };\n\n  // Filter items that have the alien category only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.categories ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc'\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if ((tdrItemsQuery.data ?? {})?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n","import { App } from 'antd';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { ReactNode, useContext, createContext, useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues, sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAtributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAtributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAtributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAtributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAtributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n      } else {\n        message.error(`Item ${itemId} is not available for attribution.`);\n      }\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAtributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {})\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { Radio, Tooltip } from 'antd';\nimport { ItemAttribute } from 'types';\n\nimport { CheckCircleFilled, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {attribute.name.en}{' '}\n        <Tooltip title={attribute.description.en}>\n          <QuestionCircleOutlined />\n        </Tooltip>\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from 'utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAtributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated]\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { Tag, Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAtributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Stat label=\"Reliability\">{relevancy}%</Stat>\n      </Flex>\n    </div>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\nimport { ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute, index) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group className=\"my-4\">\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Title\">\n        <Button>Go To</Button>\n      </Popover>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return <ItemsTypeahead isPending={false} onFinish={(itemId) => jumpToItem('goTo', itemId)} />;\n}\n","import { Button, Card, Divider, Flex, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue } = useItemSampler();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      className=\"my-4\"\n      title={<Typography.Text>{attribute?.name.en}</Typography.Text>}\n      actions={[\n        <Button type=\"primary\" block ghost onClick={onGetSample}>\n          Get New Sample\n        </Button>,\n      ]}\n      extra={\n        <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n          Get New Sample\n        </Button>\n      }\n    >\n      <Flex vertical gap={6}>\n        {sampleIds.map((itemId) => {\n          const itemAttributes = getItemAttributeValues(itemId);\n          const item = getItem(itemId);\n\n          return (\n            <Fragment key={`${itemId}-${itemAttributes.updatedAt}`}>\n              <Flex gap={6}>\n                <ItemSprite item={item} width={75} />\n                <Flex vertical gap={6}>\n                  <Flex gap={6}>\n                    <ItemId item={item} />\n                    <ItemGoTo item={item} />\n                  </Flex>\n                  <ItemName item={item} language=\"en\" />\n                  <ItemName item={item} language=\"pt\" />\n                </Flex>\n                <AttributionValueButtons\n                  attribute={attribute!}\n                  value={itemAttributes.attributes[attribute!.id]}\n                  onChange={(attributeId: string, value: number) =>\n                    updateAttributeValue(item.id, attributeId, value)\n                  }\n                />\n              </Flex>\n              <Divider className=\"my-1\" />\n            </Fragment>\n          );\n        })}\n      </Flex>\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useState } from 'react';\nimport { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  // Create sample\n  const onGetSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    setAttribute(selectedAttribute);\n    setSampleIds(selected);\n  };\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { ButtonProps } from 'antd/lib/button';\nimport { useEffect, useState } from 'react';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.pageYOffset > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { Button, Card, Flex, Pagination, Popconfirm, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { attribute, pageIds, group, updateAttributeValue, updatePageItemsAsUnrelated, pagination } =\n    useItemGrouping();\n  const { searchParams } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({group.length})\n        </Typography.Text>\n      }\n      extra={paginationComponent}\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute!}\n                value={itemAttributes.attributes[attribute!.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { orderBy } from 'lodash';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    return orderBy(\n      filteredItemIds,\n      [(id) => getItemAttributeValues(id)?.updatedAt, (id) => Number(id)],\n      ['desc', 'asc']\n    );\n  }, [attributeKey, scope]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      })\n    );\n  };\n\n  return {\n    group,\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { Flex, Table, TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport { Item } from 'types';\n\nimport { AttributeSprite } from './ItemAttributeDescription';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <ItemGoTo item={item} />\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : ''}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { filterMessage, getItemAttributePriorityResponse } from 'utils';\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { Item, ItemAtributesValues } from 'types';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAtributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n    console.log('useItemsComparator');\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc']\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n    console.log(grouping);\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { Empty, Flex } from 'antd';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { ItemComparatorCard } from './ItemComparatorCard';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <ItemAttributionNavigation />\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ complete: isComplete, attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name }) => ({ label: name.en, value: id }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Button, Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n} from './ItemAttributionFilersSections';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload } = useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <Button block danger type=\"primary\" disabled={!isDirty} onClick={save} size=\"large\">\n          Save\n        </Button>\n        <DownloadButton\n          data={() => prepareItemsAttributesFileForDownload()}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n    </SiderContent>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionPageContent } from 'components/Items/ItemAttributionPageContent';\nimport { ItemAttributionFilters } from 'components/Items/ItemAttributionFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 1418;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '',\n  DETERMINISTIC: '+',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n    ...sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED),\n    ...sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n"],"names":["DownloadButton","data","fileName","loading","props","onClick","downloadObjectAsFile","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","getDocQueryFunction","path","docId","async","console","log","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","updateQueryFunction","updateDoc","useUpdateFirebaseDoc","useMutation","mutationFn","useItemQueryParams","searchParams","setSearchParams","useSearchParams","view","get","setView","addQueryParam","key","set","removeQueryParam","delete","globalNewItemsAttributesValues","ItemsAttributeValuesContext","createContext","getItem","getNewItem","getItemAttributeValues","getNewItemAttributeValues","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","isSaving","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributes","ItemsAttributeValuesProvider","notification","message","App","queryClient","useQueryClient","tdrItemsQuery","useTDResource","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","select","deserializeFirebaseData","modifiedAttributeValues","setModifiedAttributeValues","useState","mutation","onSuccess","success","refetchQueries","onError","description","savedItemsAttributeValues","useMemo","isEmpty","firebaseData","items","orderBy","Object","keys","filter","id","categories","includes","Number","info","storedValue","modifiedValue","merge","isPending","mutate","serializeFirebaseData","item","prev","updatedAt","Date","now","itemsArr","mapKeys","attributesToUpdate","useItemsAttribution","itemIndex","setItemIndex","random","length","values","Provider","direction","itemId","undefined","index","indexOf","attributeId","sortJsonKeys","reduce","acc","complete","useItemsAttributeValuesContext","useContext","attributeOptions","ATTRIBUTE_VALUE","attributeLimitedOptions","AttributionValueButtons","attribute","onlyButtons","limited","target","optionType","buttonStyle","name","en","title","QuestionCircleOutlined","CheckCircleFilled","ItemAttributeDescription","showUnclear","showUnrelated","filteredResponse","filterMessage","getItemAttributePriorityResponse","Component","AttributeSprite","AttributeText","gap","vertical","wrap","keyVariant","arr","firstElement","lastElement","withText","text","parseAttribute","align","spriteId","justify","maxWidth","textAlign","wordBreak","toLowerCase","prefix","suffix","Stat","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","total","completed","Math","floor","unclearCount","strong","percent","CloseCircleOutlined","ItemAttributionCard","queryParamsItemId","useEffect","showOnlyUnset","filteredAttributesList","offsetTop","language","type","ItemAttributionNavigation","icon","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","ItemsTypeahead","onFinish","ItemSamplerCard","sampleIds","onGetSample","updateAttributeValue","setSampleIds","setAttribute","attributeKey","lodashSample","selectedAttribute","find","a","sampleSize","selected","shuffle","i","push","currentItemAttributeValues","useItemSampler","actions","block","ghost","extra","itemAttributes","Fragment","GoToTopButton","isVisible","setIsVisible","handleScroll","window","pageYOffset","addEventListener","removeEventListener","scrollTo","top","behavior","VerticalAlignTopOutlined","ItemGroupingCard","pageIds","group","updatePageItemsAsUnrelated","pagination","scope","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","itemsAttributes","scopeValue","toUpperCase","filteredItemIds","slice","start","end","current","String","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","unrelateButton","onConfirm","danger","Boolean","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemAttributesValues","itemMessage","fullMessage","join","moreThanOne","ids","keyBy","useItemsComparator","columns","dataIndex","render","sorter","b","localeCompare","groupA","dataSource","ItemAttributionPageContent","ItemAttributionStats","completionPercentage","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","forEach","isComplete","toFixed","ItemAttributionClassifierFilters","ItemAttributionSamplerFilters","ItemAttributionGroupingFilters","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionFilters","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","SEARCH_PROPERTY","adjectives","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","quantity","startAt","component","AlienSign","Emoji","Glyph","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","capitalize","stringRemoveAccents","str","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","trim","val","JSON","stringify","entryStr","stringSimilarity","removeDuplicates","Array","from","Set","obj","filename","blob","Blob","anchorElement","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","library","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","sortBy","fromPairs","parse","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","partialItem","cloneDeep","pt","groups","partialItemAttributeValues","priorityOrder","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","entries","memoize","variant"],"sourceRoot":""}