{"version":3,"file":"static/js/2914.581d6328.chunk.js","mappings":"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","sources":["hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/utils/games/daily-teoria-de-conjuntos.ts","components/Daily/utils/utils.ts","components/DataLoadingWrapper.tsx","components/Items/Diagram/utils.ts","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { useLoadDrawings } from 'components/Daily/hooks';\nimport { DailyArteRuimEntry, DailyEntry, DataDrawing, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useLoadDrawings>,\n  queryLanguage: Language,\n  drawingsCount: number\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings = (drawingsQuery ?? []).reduce(\n    (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--') || history.used.includes(cardId)) {\n          return acc;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return acc;\n        }\n\n        if (acc[cardId] === undefined) {\n          acc[cardId] = {\n            id: cardId,\n            type: 'arte-ruim',\n            language: queryLanguage ?? 'pt',\n            cardId: cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[cardId].drawings.push(dataDrawing.drawing);\n          acc[cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  // Remove anything that doesn't have at least 2 drawings\n  const atLeastTwoDrawingsList = Object.values(drawings).filter(\n    (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n  );\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(atLeastTwoDrawingsList), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport { getNextDay, checkWeekend } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[]\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo } from 'react';\nimport { DailyDiscSet, ArteRuimCard, DailyMovieSet, DailyDiagramItem, DailyDiagramRule } from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(batchSize, aquiOHistory, aquiOSetsQuery.data);\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory('teoria-de-conjuntos', historyQuery.data);\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiscSet } from 'types';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'aqui-o',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n    };\n  }\n\n  return entries;\n};\n","import { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { sampleSize } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { ArteRuimCard } from 'types';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[]\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) => !arteRuimHistory.used.includes(cardId) && !recentlyUsedIds.includes(cardId)\n    );\n    const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyMovieSet } from 'types';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n  );\n  // Filter not-used sets only\n  let notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n        'teoria-de-conjuntos': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['teoria-de-conjuntos'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['teoria-de-conjuntos']?.used ?? '[]'),\n              ...data.map((e) => e['teoria-de-conjuntos'].setId),\n              ...data.map((e) => e['teoria-de-conjuntos'].intersectingThing.id),\n            ])\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { DailyTeoriaDeConjuntosEntry, ParsedDailyHistoryEntry } from '../types';\nimport { cloneDeep, difference, intersection, sample, sampleSize, shuffle } from 'lodash';\nimport { getNextDay } from '../utils';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { getIsThingOutdated, getLatestRuleUpdate } from 'components/Items/Diagram/utils';\n\nexport const buildDailyTeoriaDeConjuntosGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  rules: Dictionary<DailyDiagramRule>,\n  things: Dictionary<DailyDiagramItem>\n) => {\n  console.count('Creating Teoria de Conjuntos...');\n  let lastDate = history.latestDate;\n  const used: string[] = [...history.used];\n\n  const latestRuleUpdate = getLatestRuleUpdate(rules);\n\n  const thingsByRules = (() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    Object.values(things).forEach((entry) => {\n      // Only use things that are not outdated\n      if (!getIsThingOutdated(entry, latestRuleUpdate)) {\n        entry.rules.forEach((ruleId) => {\n          dict[ruleId].push(entry.itemId);\n        });\n      }\n    });\n    return dict;\n  })();\n\n  const entries: Dictionary<DailyTeoriaDeConjuntosEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'teoria-de-conjuntos',\n      number: history.latestNumber + i + 1,\n      ...getRuleSet(things, thingsByRules, rules, used, latestRuleUpdate),\n    };\n  }\n  return entries;\n};\n\nfunction getRuleSet(\n  things: Dictionary<DailyDiagramItem>,\n  thingsByRules: Record<string, string[]>,\n  rules: Dictionary<DailyDiagramRule>,\n  used: string[],\n  latestRuleUpdate: number\n) {\n  const availableThingsIds = shuffle(\n    Object.keys(things).filter(\n      (id) => !used.includes(id) && !getIsThingOutdated(things[id], latestRuleUpdate)\n    )\n  );\n\n  // Get one random initial thing\n  const initialThingId = sample(availableThingsIds);\n  if (!initialThingId) throw new Error('No available things to choose from');\n  used.push(initialThingId);\n\n  const intersectingThing = {\n    id: initialThingId,\n    name: things[initialThingId].name,\n  };\n\n  // Group rules by type than get a random pair of rules of different types\n  const thingsRulesByType = things[initialThingId].rules.reduce((acc: Record<string, string[]>, ruleId) => {\n    const type = rules[ruleId].type;\n    if (!acc[type]) acc[type] = [];\n    acc[type].push(ruleId);\n    return acc;\n  }, {});\n  // Delete any rule with less than 2 rules\n  Object.keys(thingsRulesByType).forEach((type) => {\n    if (thingsRulesByType[type].length < 2) delete thingsRulesByType[type];\n  });\n\n  const twoRandomTypes = sampleSize(Object.keys(thingsRulesByType), 2);\n\n  if (twoRandomTypes.length !== 2) throw new Error('No types found for this thing');\n  const selectedRules = [\n    sample(thingsRulesByType[twoRandomTypes[0]]),\n    sample(thingsRulesByType[twoRandomTypes[1]]),\n  ];\n  if (!selectedRules[0] || !selectedRules[1]) throw new Error('No rules found for this thing');\n\n  const ruleId = [selectedRules[0], selectedRules[1]].sort().join('-');\n  used.push(ruleId);\n\n  const level = rules[selectedRules[0]].level + rules[selectedRules[1]].level - 1;\n\n  const availableThingsByRules = cloneDeep(thingsByRules);\n  // Removed the initial thing from the available things\n  delete availableThingsByRules[initialThingId];\n\n  const itemsOnlyInRule1 = shuffle(\n    difference(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]])\n  );\n\n  const itemsOnlyInRule2 = shuffle(\n    difference(thingsByRules[selectedRules[1]], thingsByRules[selectedRules[0]])\n  );\n\n  const commonItems = shuffle(intersection(thingsByRules[selectedRules[0]], thingsByRules[selectedRules[1]]));\n\n  // Get one unique initial thing that only fits rule 1\n  const selectedInitialThingId1 = itemsOnlyInRule1.pop();\n  if (!selectedInitialThingId1) throw new Error('No only in rule 1 things to choose from');\n  const rule1 = {\n    id: selectedRules[0],\n    text: rules[selectedRules[0]].title,\n    level: rules[selectedRules[0]].level,\n    thing: {\n      id: selectedInitialThingId1,\n      name: things[selectedInitialThingId1].name,\n    },\n  };\n\n  // Get one unique initial thing that only fits rule 2\n  const selectedInitialThingId2 = itemsOnlyInRule2.pop();\n  if (!selectedInitialThingId2) throw new Error('No only in rule 2 things to choose from');\n  const rule2 = {\n    id: selectedRules[1],\n    text: rules[selectedRules[1]].title,\n    level: rules[selectedRules[1]].level,\n    thing: {\n      id: selectedInitialThingId2,\n      name: things[selectedInitialThingId2].name,\n    },\n  };\n\n  // Get up to 4 unique things that fit both rules, if possible\n  const sampleCommonThings = sampleSize(commonItems, 4);\n  const sampleRule1Things = sampleSize(itemsOnlyInRule1, 8);\n  const sampleRule2Things = sampleSize(itemsOnlyInRule2, 8);\n  const gabarito: Record<string, number> = {};\n  sampleCommonThings.forEach((id) => (gabarito[id] = 0));\n  sampleRule1Things.forEach((id) => (gabarito[id] = 1));\n  sampleRule2Things.forEach((id) => (gabarito[id] = 2));\n\n  // Sample 8 things among the options\n  const selectionIds = sampleSize([...sampleCommonThings, ...sampleRule1Things, ...sampleRule2Things], 8);\n\n  const selectedThings = selectionIds.map((id) => ({\n    id,\n    name: things[id].name,\n    rule: gabarito[id],\n  }));\n\n  // Build title\n  const TITLES: Record<string, string> = {\n    contains: 'Inclusão',\n    starts: 'Inicialização',\n    ends: 'Terminação',\n    grammar: 'Gramática',\n    order: 'Sequência',\n    count: 'Contagem',\n    comparison: 'Comparação',\n    repetition: 'Repetição',\n  };\n\n  const title = [\n    TITLES?.[rules[rule1.id].type] ?? 'Desconhecido',\n    TITLES?.[rules[rule2.id].type] ?? 'Desconhecido',\n  ].join(' vs ');\n  const setId = [rule1.id, rule2.id].sort().join('::');\n\n  // Create the DailyTeoriaDeConjuntosEntry object\n  const entry: Omit<DailyTeoriaDeConjuntosEntry, 'id' | 'type' | 'number'> = {\n    title,\n    setId,\n    level,\n    rule1,\n    rule2,\n    intersectingThing,\n    things: selectedThings,\n  };\n  return entry;\n}\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\n/**\n * Calculates the next day based on the given date string.\n *\n * @param dateString - The date string in the format 'YYYY-MM-DD'.\n * @returns The next day in the format 'YYYY-MM-DD'.\n */\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\n/**\n * Checks if a given date is a Saturday or Sunday.\n *\n * @param {string} dateString - The date in 'YYYY-MM-DD' format.\n * @returns {boolean} True if the date is a Saturday or Sunday, false otherwise.\n */\nexport function checkWeekend(dateString: string): boolean {\n  const date = moment(dateString, 'YYYY-MM-DD');\n  return [6, 0].includes(date.day()); // 0 represents Sunday and 6 represents Saturday in moment.js\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { memoize } from 'lodash';\nimport { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { stringRemoveAccents } from 'utils';\n\nexport const SYLLABLE_SEPARATOR = '|';\nexport const LETTERS = 'abcdefghijklmnopqrstuvwxyz';\nexport const CONSONANTS = 'bcdfghjklmnpqrstvwxyz';\nexport const VOWELS = 'aeiou';\nexport const ACCENTS = /[áéíóúãẽĩõũâêîôûàèìòùäëïöü]/;\n\nconst cleanupWord = memoize((word: string) => {\n  return stringRemoveAccents(word).toLowerCase();\n});\n\nconst countLetters = (word: string) => {\n  return cleanupWord(word).length;\n};\n\nconst countVowels = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => VOWELS.includes(letter)).length;\n};\n\nconst countConsonants = (word: string) => {\n  return cleanupWord(word)\n    .split('')\n    .filter((letter) => CONSONANTS.includes(letter)).length;\n};\n\nconst countAccents = (word: string) => {\n  return word\n    .toLowerCase()\n    .split('')\n    .filter((letter) => ACCENTS.test(letter)).length;\n};\n\nconst countWords = (text: string) => {\n  return text.split(' ').length;\n};\n\nexport const verifiers: Record<string, (word: string) => boolean> = {\n  // The first two letters are in alphabetical order\n  'ddr-7-pt': (word: string) => {\n    return LETTERS.indexOf(cleanupWord(word)[0]) < LETTERS.indexOf(cleanupWord(word)[1]);\n  },\n  // has 4 or less letters\n  'ddr-8-pt': (word: string) => countLetters(word) <= 4,\n  // Has exactly 5 letters\n  'ddr-9-pt': (word: string) => countLetters(word) === 5,\n  // Has 6 letters\n  'ddr-10-pt': (word: string) => countLetters(word) === 6,\n  // Has between 7\n  'ddr-11-pt': (word: string) => countLetters(word) === 7,\n  // Has more than 8 letters\n  'ddr-12-pt': (word: string) => countLetters(word) > 7,\n  // Has more than 1 word\n  'ddr-13-pt': (word: string) => countWords(word) > 1,\n  // Has two or more different vowels\n  'ddr-14-pt': (word: string) => {\n    const vowels = cleanupWord(word)\n      .split('')\n      .filter((letter) => VOWELS.includes(letter));\n    return new Set(vowels).size >= 2;\n  },\n  // Has 4 or less unique letters\n  'ddr-15-pt': (word: string) => new Set(cleanupWord(word).split('')).size <= 4,\n  // Has more consonants than vowels\n  'ddr-16-pt': (word: string) => countConsonants(word) > countVowels(word),\n  // Has more vowels than consonants\n  'ddr-17-pt': (word: string) => countVowels(word) > countConsonants(word),\n  // The first letter is repeated at least once\n  'ddr-18-pt': (word: string) => {\n    const firstLetter = cleanupWord(word)[0];\n    return cleanupWord(word).slice(1).includes(firstLetter);\n  },\n  // has repeated letters\n  'ddr-19-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) =>\n        cleanupWord(word)\n          .slice(index + 1)\n          .includes(letter)\n      );\n  },\n  // has repeated vowels\n  'ddr-20-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          VOWELS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has repeated consonants\n  'ddr-21-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some(\n        (letter, index) =>\n          CONSONANTS.includes(letter) &&\n          cleanupWord(word)\n            .slice(index + 1)\n            .includes(letter)\n      );\n  },\n  // has consecutive vowels\n  'ddr-22-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => VOWELS.includes(letter) && VOWELS.includes(word[index + 1]));\n  },\n  // starts with letters from A to M\n  'ddr-23-pt': (word: string) => 'abcdefghijklm'.includes(cleanupWord(word)[0]),\n  // starts with letters from N to Z\n  'ddr-24-pt': (word: string) => 'nopqrstuvwxyz'.includes(cleanupWord(word)[0]),\n  // starts with a vowel\n  'ddr-25-pt': (word: string) => VOWELS.includes(cleanupWord(word)[0]),\n  // starts with a consonant\n  'ddr-26-pt': (word: string) => CONSONANTS.includes(cleanupWord(word)[0]),\n  // Double consecutive consonants\n  'ddr-27-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => CONSONANTS.includes(letter) && word[index + 1] === letter);\n  },\n  // Has an A\n  'ddr-28-pt': (word: string) => cleanupWord(word).includes('a'),\n  // Has an E\n  'ddr-29-pt': (word: string) => cleanupWord(word).includes('e'),\n  // Has an U\n  'ddr-30-pt': (word: string) => cleanupWord(word).includes('u'),\n  // Has a Q or J\n  'ddr-31-pt': (word: string) => cleanupWord(word).includes('q') || cleanupWord(word).includes('j'),\n  // Has a C or Ç\n  'ddr-32-pt': (word: string) => cleanupWord(word).includes('c') || cleanupWord(word).includes('ç'),\n  // Has an M or N followed by a consonant\n  'ddr-33-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (['m', 'n'].includes(letter) && CONSONANTS.includes(word[index + 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has an H\n  'ddr-34-pt': (word: string) => cleanupWord(word).includes('h'),\n  // Has H preceded by a consonant\n  'ddr-35-pt': (word: string) => {\n    return cleanupWord(word)\n      .split('')\n      .some((letter, index) => {\n        if (letter === 'h' && CONSONANTS.includes(word[index - 1])) {\n          return true;\n        }\n        return false;\n      });\n  },\n  // Has K, W or Y\n  'ddr-36-pt': (word: string) =>\n    cleanupWord(word).includes('k') || cleanupWord(word).includes('w') || cleanupWord(word).includes('y'),\n  // Has an accent\n  'ddr-37-pt': (word: string) => countAccents(word) > 0,\n  // Ends with a vowel\n  'ddr-38-pt': (word: string) => {\n    return VOWELS.includes(cleanupWord(word).slice(-1));\n  },\n  // Ends with a consonant\n  'ddr-39-pt': (word: string) => CONSONANTS.includes(cleanupWord(word).slice(-1)),\n  // Ends with an S\n  'ddr-40-pt': (word: string) => cleanupWord(word).slice(-1) === 's',\n  // Has an I\n  'ddr-47-pt': (word: string) => cleanupWord(word).includes('i'),\n  // Has an O\n  'ddr-48-pt': (word: string) => cleanupWord(word).includes('o'),\n};\n\nexport const syllableDependencyVerifier: Record<string, (syllables: string) => boolean> = {\n  // Has 2 syllables\n  'ddr-3-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 2,\n  // Has 3 syllables\n  'ddr-4-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 3,\n  // Has 4 syllables\n  'ddr-22-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 4,\n  // Has two consecutive vowels on the same syllable\n  'ddr-41-pt': (syllables: string) => {\n    return syllables.split(SYLLABLE_SEPARATOR).some((syllable) => {\n      return syllable.split('').some((letter, index) => {\n        if (VOWELS.includes(letter) && VOWELS.includes(syllable[index + 1])) {\n          return true;\n        }\n        return false;\n      });\n    });\n  },\n  // Has two consecutive vowels on different syllables\n  'ddr-42-pt': (syllables: string) => {\n    return syllables.split(SYLLABLE_SEPARATOR).some((syllable, index) => {\n      if (index === 0) {\n        return false;\n      }\n      return syllable[0] === syllables.split(SYLLABLE_SEPARATOR)[index - 1].slice(-1);\n    });\n  },\n  // Single syllable word\n  'ddr-46-pt': (syllables: string) => syllables.split(SYLLABLE_SEPARATOR).length === 1,\n};\n\nexport const stressSyllableDependencyVerifier: Record<\n  string,\n  (syllables: string, stress: number) => boolean\n> = {\n  // The stress syllable is on the last syllable (oxitona)\n  'ddr-43-pt': (_syllables: string, stress: number) => {\n    return stress === 0;\n  },\n  // The stress syllable is on the second to last syllable (paroxitona)\n  'ddr-44-pt': (_syllables: string, stress: number) => {\n    return stress === 1;\n  },\n  // The stress syllable is on the third to last syllable (proparoxitona)\n  'ddr-45-pt': (_syllables: string, stress: number) => {\n    return stress === 2;\n  },\n};\n\nexport const getLatestRuleUpdate = (rules: Dictionary<DailyDiagramRule>) => {\n  return Object.values(rules).reduce((acc, rule) => {\n    return Math.max(acc, rule.updatedAt);\n  }, 0);\n};\n\nexport const getIsThingOutdated = (thing: DailyDiagramItem, latestRuleUpdate: number) => {\n  return latestRuleUpdate > thing.updatedAt;\n};\n\nconst checkIsVowel = (char: string) => VOWELS.includes(stringRemoveAccents(char));\nconst checkIsConsonant = (char: string) => CONSONANTS.includes(stringRemoveAccents(char));\nconst LMNRS = ['s', 'r', 'l', 'm', 'n'];\nconst DOUBLE_LETTERS = [\n  'rr',\n  'ss',\n  'st',\n  'sc',\n  'lm',\n  'ld',\n  'mp',\n  'mb',\n  'rn',\n  'rm',\n  'rt',\n  'rd',\n  'lt',\n  'ld',\n  'nt',\n  'nd',\n  'sp',\n  'ls',\n];\n/**\n * Guesses the separation of syllables in a given word.\n * @param word - The word for which to guess the syllables separation.\n * @returns The guessed syllables separation as a string.\n */\nexport const guessSyllablesSeparation = (word: string): string => {\n  let syllables: string[] = [];\n  let currentSyllable = '';\n\n  const stringWithoutAccents = stringRemoveAccents(word);\n\n  for (let i = 0; i < word.length; i++) {\n    const char = stringWithoutAccents[i];\n    // Space makes a syllable\n    if (char === ' ') {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n      continue;\n    }\n\n    // Hyphen makes a syllable\n    if (char === '-') {\n      syllables.push(currentSyllable + '-');\n      currentSyllable = '';\n      continue;\n    }\n\n    if (checkIsVowel(char) && i < stringWithoutAccents.length - 2) {\n      const nextChar = stringWithoutAccents[i + 1];\n      const nextNextChar = stringWithoutAccents[i + 2];\n      // If the next character is a consonant and the next next character is a consonant, the first pair is a syllable\n      if (LMNRS.includes(nextChar) && checkIsConsonant(nextNextChar)) {\n        currentSyllable += word[i] + word[i + 1];\n        i++; // Skip the next character\n        continue;\n      }\n    }\n\n    // Handle \"c\" followed by \"h\", \"r\", or \"l\"\n    if (\n      char === 'c' &&\n      i < stringWithoutAccents.length - 2 &&\n      ['h', 'r', 'l'].includes(stringWithoutAccents[i + 1]) &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle \"l\" or \"n\" followed by \"h\"\n    if (\n      ['l', 'n'].includes(char) &&\n      i < stringWithoutAccents.length - 2 &&\n      stringWithoutAccents[i + 1] === 'h' &&\n      checkIsVowel(stringWithoutAccents[i + 2])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    // Handle consonant followed by vowel followed by consonant cluster\n    if (\n      checkIsConsonant(char) &&\n      i < stringWithoutAccents.length - 3 &&\n      checkIsVowel(stringWithoutAccents[i + 1]) &&\n      LMNRS.includes(stringWithoutAccents[i + 2]) &&\n      checkIsConsonant(stringWithoutAccents[i + 3])\n    ) {\n      currentSyllable += word[i] + word[i + 1] + word[i + 2];\n      i += 2; // Skip the next two characters\n      continue;\n    }\n\n    currentSyllable += word[i];\n\n    if (\n      checkIsVowel(char) &&\n      i < stringWithoutAccents.length - 1 &&\n      !checkIsVowel(stringWithoutAccents[i + 1]) &&\n      !['l', 'r', 'n'].includes(stringWithoutAccents[i + 1])\n    ) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  if (currentSyllable !== '') {\n    syllables.push(currentSyllable);\n  }\n\n  // As a final effort, if there are syllables with \"rr\" or \"ss\", split them but keep the characters. e.g. carro -> car:ro\n  syllables = syllables.map((syllable) => {\n    for (const doubleLetter of DOUBLE_LETTERS) {\n      if (syllable.includes(doubleLetter)) {\n        return syllable.split(doubleLetter).join(`${doubleLetter[0]}${SYLLABLE_SEPARATOR}${doubleLetter[1]}`);\n      }\n    }\n    return syllable;\n  });\n\n  return syllables.filter(Boolean).join(SYLLABLE_SEPARATOR);\n};\n\n/**\n * Separates the syllables of a given word.\n * @param word - The word to separate syllables from.\n * @returns The word with syllables separated by '|'.\n */\nexport function separateSyllables(word: string): string {\n  const syllablePattern =\n    /([^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*[aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]{1,3}[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]*)(?=[^aeiouáéíóúâêîôûàèìòùãõäëïöüAEIOUÁÉÍÓÚÂÊÎÔÛÀÈÌÒÙÃÕÄËÏÖÜ]|$)/gi;\n\n  const proposed = word.replace(syllablePattern, '$1|').slice(0, -1);\n\n  return proposed.replace(/\\s/g, '');\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  let baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CITY_LOCATIONS: 'city-locations',\n  COLORS: 'colors',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_SCENES: 'crime-scenes',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  EMOTIONS: 'emotions',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SINGLE_WORDS: 'single-words',\n  SPECTRUMS: 'spectrums',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TEENAGE_RUMORS: 'teenage-rumors',\n  TEENAGE_STUDENTS: 'teenage-students',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n  WAREHOUSE_BOSS_IDEAS: 'warehouse-boss-ideas',\n  WARNING_SIGNS_DESCRIPTORS: 'warning-signs-descriptors',\n  WARNING_SIGNS_SUBJECTS: 'warning-signs-subjects',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CITY_LOCATIONS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_SCENES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n  RESOURCE_NAMES.TEENAGE_RUMORS,\n  RESOURCE_NAMES.TEENAGE_STUDENTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2496;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 256,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Checks if an array has any duplicate elements.\n * @param arr - The array to check for duplicates.\n * @returns A boolean indicating whether the array has duplicates.\n * @template T - The type of elements in the array.\n */\nexport const hasDuplicates = <T>(arr: T[]): boolean => {\n  return new Set(arr).size !== arr.length;\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>,\n  /**\n   * Ignore attributes that are UNRELATED or UNCLEAR\n   */\n  onlyRelevant?: boolean\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED)),\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR)),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n\n/**\n * Pauses the execution for a specified duration.\n * @param duration - The duration to wait in milliseconds. Default is 1000ms.\n */\nexport const wait = async (duration = 1000) => {\n  await new Promise((resolve) => setTimeout(resolve, duration));\n};\n"],"names":["useLoadWordLibrary","wordLength","language","enabled","selected","getUrl","useBaseUrl","resourceName","query","useQuery","queryKey","queryFn","async","res","fetch","json","hasResponseData","isEmpty","data","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","fixedKeyword","shuffledWords","shuffle","difference","keyword","pop","selectedWords","i","newWord","getNewWord","push","letters","shuffleLetters","length","index","usedLetters","uniq","flatMap","map","word","split","shortList","filter","includes","sortBy","intersection","preservedIndexes","otherLetters","_","shuffledLetters","shift","generateControleDeEstoqueGame","id","num","year","month","day","Number","entry","number","type","title","Date","getDay","goods","orders","sampleSize","Array","fill","GOODS_SIZE","outOfStockGood","useLoadDailySetup","queryLanguage","drawingsCount","batchSize","source","LANGUAGE_PREFIX","historyQuery","useDailyHistoryQuery","drawingsQuery","notification","App","suffixCountsQuery","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","suffixData","libraryCount","docPrefix","queries","useMemo","Boolean","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","useParsedHistory","arteRuimEntries","history","console","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","key","dataDrawing","cardId","used","drawing","trim","log","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","latestDate","getNextDay","latestNumber","buildDailyArteRuimGames","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","discSets","completeSets","setEntry","itemsIds","notUsedSets","setId","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","isWeekend","checkWeekend","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","palavreado","artista","filmaco","useSaveDailySetup","queryClient","useQueryClient","isDirty","setIsDirty","useState","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","JSON","stringify","removeDuplicates","parse","intersectingThing","Promise","all","invalidateQueries","onError","save","mutateAsync","isPending","useTempDaily","options","getYesterday","SUFFIX_DATA","pt","en","DAILY","rules","things","latestRuleUpdate","getLatestRuleUpdate","thingsByRules","dict","rule","getIsThingOutdated","ruleId","itemId","getRuleSet","availableThingsIds","initialThingId","sample","name","thingsRulesByType","twoRandomTypes","selectedRules","sort","join","level","cloneDeep","itemsOnlyInRule1","itemsOnlyInRule2","commonItems","selectedInitialThingId1","rule1","thing","selectedInitialThingId2","rule2","sampleCommonThings","sampleRule1Things","sampleRule2Things","gabarito","selectedThings","TITLES","contains","starts","ends","grammar","order","comparison","repetition","moment","subtract","format","dateString","add","date","DataLoadingWrapper","isIdle","children","tip","className","description","showIcon","SYLLABLE_SEPARATOR","LETTERS","CONSONANTS","VOWELS","ACCENTS","cleanupWord","memoize","stringRemoveAccents","toLowerCase","countLetters","countVowels","letter","countConsonants","verifiers","indexOf","vowels","Set","firstLetter","slice","test","countAccents","syllableDependencyVerifier","syllables","syllable","stressSyllableDependencyVerifier","_syllables","stress","Math","max","updatedAt","separateSyllables","replace","Sprite","width","padding","response","paddedWidth","style","height","display","placeItems","svgContent","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","WarehouseGood","str","match","numId","parseInt","goodId","sourceId","ceil","getSource","clsx","AlienSign","Emoji","emojiId","startsWith","glyphId","Glyph","Item","library","baseUrl","process","folder","path","docId","getCurrentDateTime","getDoc","useGetFirebaseDoc","useTDResourceNonCollection","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CITY_LOCATIONS","COLORS","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_SCENES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","EMOTIONS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SINGLE_WORDS","SPECTRUMS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TEENAGE_RUMORS","TEENAGE_STUDENTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","WAREHOUSE_BOSS_IDEAS","WARNING_SIGNS_DESCRIPTORS","WARNING_SIGNS_SUBJECTS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","DEFAULT_LANGUAGE","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","value","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","capitalize","normalize","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","chain","toPairs","fromPairs","deserializeFirebaseData","serializeFirebaseData","now","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","merge","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","onlyRelevant","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","filterMessage","showUnclear","showUnrelated","sortItemsIds","wait","duration","resolve","setTimeout"],"sourceRoot":""}