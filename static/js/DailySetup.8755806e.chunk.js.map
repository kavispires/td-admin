{"version":3,"file":"static/js/DailySetup.8755806e.chunk.js","mappings":"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","sources":["components/Daily/CanvasSVG.tsx","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","pages/ArteRuim/useArteRuimDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { type QueryKey, type UseQueryOptions, useQuery } from '@tanstack/react-query';\n\nimport { printFirebase } from 'services/firebase';\nimport type { DailyHistory } from '../utils/types';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {},\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only the error should cause this notification\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]);\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport type { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory,\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key],\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n\nexport const DAILY_GAMES_KEYS = {\n  ARTE_RUIM: 'arte-ruim',\n  ARTISTA: 'artista',\n  AQUI_O: 'aqui-o',\n  COMUNICACAO_ALIENIGENA: 'comunicacao-alienigena',\n  CONTROLE_DE_ESTOQUE: 'controle-de-estoque',\n  FILMACO: 'filmaco',\n  PALAVREADO: 'palavreado',\n  TEORIA_DE_CONJUNTOS: 'teoria-de-conjuntos',\n};\n","import { type QueryKey, type UseQueryOptions, useQueries, useQuery } from '@tanstack/react-query';\nimport { App } from 'antd';\nimport type { FirebaseDataDrawing } from 'components/Daily/utils/types';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { printFirebase } from 'services/firebase';\nimport type { DrawingData, DrawingEntry } from 'types';\nimport { SEPARATOR } from 'utils/constants';\n\n/**\n * Custom hook for loading drawings.\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadFirebaseDrawings(enabled: boolean, queryLanguage: Language) {\n  type DataSuffixCounts = {\n    drawingsPT: number;\n    drawingsEN: number;\n  };\n\n  const DRAWING_SUFFIX_DATA = {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  };\n\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only notify on error\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]);\n\n  const suffixData = DRAWING_SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData as keyof DataSuffixCounts] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  // biome-ignore lint/correctness/useExhaustiveDependencies: notification function shouldn't trigger\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount, docPrefix, enabled]);\n\n  return useQueries({ queries });\n}\n\nfunction extractCreatedAt(key: string): number {\n  const parts = key.split(/::|:;|;;/); // Split by either '::' or ':;'\n  const createdAtPart = parts[1];\n  const createdAt = Number(createdAtPart);\n  if (Number.isNaN(createdAt)) {\n    console.log('🔆 Invalid createdAt', key, createdAt);\n  }\n  return Number.isNaN(createdAt) ? 1619161200000 : createdAt;\n}\n\nexport function useDrawingsResourceData(enabled: boolean, language: string) {\n  const firebaseDrawingsQueries = useLoadFirebaseDrawings(enabled, language as Language);\n  const tdrDrawingsQuery = useTDResource<DrawingData>(`arte-ruim-drawings-${language}`, enabled);\n\n  const isDrawingsLoading = firebaseDrawingsQueries.some((q) => q.isLoading);\n  const isDrawingsSuccess = firebaseDrawingsQueries.every((q) => q.isSuccess);\n\n  const drawings = useMemo(() => {\n    if (!isDrawingsSuccess) return {};\n    if (!tdrDrawingsQuery.isSuccess) return {};\n\n    const allDrawings = tdrDrawingsQuery.data ?? {};\n\n    (firebaseDrawingsQueries ?? []).forEach((drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, FirebaseDataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--')) {\n          return;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return;\n        }\n\n        const createdAt = extractCreatedAt(key);\n        const artistId = dataDrawing.playerId ?? 'unknown';\n        const entryId = [cardId, artistId, createdAt].join(SEPARATOR);\n        const drawingEntry: DrawingEntry = {\n          id: entryId,\n          drawing: dataDrawing.drawing,\n          artistId,\n          createdAt,\n        };\n\n        if (allDrawings[cardId] === undefined) {\n          allDrawings[cardId] = {\n            id: cardId,\n            text: dataDrawing.text,\n            drawings: [drawingEntry],\n            updatedAt: drawingEntry.createdAt,\n          };\n        } else {\n          if (!allDrawings[cardId].drawings.some((d) => d.id === drawingEntry.id)) {\n            allDrawings[cardId].drawings.push(drawingEntry);\n\n            if (drawingEntry.createdAt > allDrawings[cardId].updatedAt) {\n              allDrawings[cardId].updatedAt = drawingEntry.createdAt;\n            }\n          }\n        }\n      });\n    });\n\n    return allDrawings;\n  }, [firebaseDrawingsQueries, isDrawingsSuccess, tdrDrawingsQuery.data, tdrDrawingsQuery.isSuccess]);\n\n  const drawingsPerArtist = useMemo(() => {\n    return Object.values(drawings).reduce((acc: Record<string, DrawingPerArtist>, drawing) => {\n      drawing.drawings.forEach((drawingEntry) => {\n        const artistId = drawingEntry.artistId;\n        if (acc[artistId] === undefined) {\n          acc[artistId] = {\n            artistId,\n            drawingsCount: 1,\n            firstDrawingAt: drawingEntry.createdAt,\n            lastDrawingAt: drawingEntry.createdAt,\n          };\n        } else {\n          acc[artistId].drawingsCount += 1;\n\n          if (drawingEntry.createdAt < acc[artistId].firstDrawingAt) {\n            acc[artistId].firstDrawingAt = drawingEntry.createdAt;\n          }\n          if (drawingEntry.createdAt > acc[artistId].lastDrawingAt) {\n            acc[artistId].lastDrawingAt = drawingEntry.createdAt;\n          }\n        }\n      });\n\n      return acc;\n    }, {});\n  }, [drawings]);\n\n  return {\n    isLoading: isDrawingsLoading || tdrDrawingsQuery.isLoading,\n    error: tdrDrawingsQuery.error,\n    hasResponseData: !isEmpty(drawings),\n    drawings,\n    drawingsPerArtist: Object.values(drawingsPerArtist),\n  };\n}\n\nexport type DrawingPerArtist = {\n  artistId: string;\n  drawingsCount: number;\n  firstDrawingAt: DateMilliseconds;\n  lastDrawingAt: DateMilliseconds;\n};\n\nexport const ARTIST_ID_ALIAS: Record<string, string> = {\n  '3PkJr': 'Flaviane',\n  '3c4lY': 'Kavis',\n  BPTEL: 'Maris',\n  '0vuXf': 'Marcio',\n  Bm6dr: 'Livia',\n  QrfLz: 'Stephanie',\n  AlRvI: 'Unknown',\n  pK3OY: 'Unknown',\n  VF9iG: 'Zenaide',\n  WWUvD: 'Fernanda',\n  aec7L: 'Anonymous',\n  Xsimf: 'Carol',\n  fV5ns: 'Diego',\n  qQo9N: 'Laura',\n  yVAl7: 'Rodrigo',\n  O2IQm: 'Drica',\n  '24qec': 'Mariana',\n};\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean,\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport type { ItemAttributesValues, ItemAttribute, Item } from 'types';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport type { DailyComunicacaoAlienigenaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAttributesValues>,\n  items: Dictionary<Item>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes).filter((attr) => !attr.limited && items?.[attr.id]?.nsfw !== true);\n  const allAttributesValues = values(attributeValues).filter((i) => i.complete);\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId] && !history.used.includes(entry.setId)) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  if (tries >= 100) {\n    updateWarnings('Not enough valid comunicacao alienigena games (over 100 attempts)');\n  }\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAttributesValues[],\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB) ?? '',\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC) ?? '',\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC) ?? '',\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC) ?? '',\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyControleDeEstoqueEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE,\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  if (!outOfStockGood) {\n    throw new Error('No out of stock good');\n  }\n  entry.orders.push(outOfStockGood);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport type { DailyPalavreadoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[],\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size,\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string,\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word)),\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  const shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useEffect, useMemo, useState } from 'react';\nimport type {\n  ArteRuimCard,\n  DailyDiagramItem,\n  DailyDiagramRule,\n  DailyDiscSet,\n  DailyMovieSet,\n  ItemAttributesValues,\n  ItemAttribute,\n} from 'types';\n\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport { buildDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { buildDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { buildDailyArtistaGames } from '../utils/games/daily-artista';\nimport { buildDailyComunicacaoAlienigenaGames } from '../utils/games/daily-comunicacao-alienigena';\nimport { buildDailyControleDeEstoqueGames } from '../utils/games/daily-controle-de-estoque';\nimport { buildDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { buildDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { buildDailyTeoriaDeConjuntosGames } from '../utils/games/daily-teoria-de-conjuntos';\nimport type { DailyEntry } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useParsedHistory } from './useParsedHistory';\nimport { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  warnings: string[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number,\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n  const [warnings, setWarnings] = useState<string[]>([]);\n  const tdrItemsQuery = useTDResource<ItemAttribute>('items', enabled);\n\n  const updateWarnings = (newWarning: string) => {\n    setWarnings((prev) => [...prev, newWarning]);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: reset warnings on change of basic props\n  useEffect(() => {\n    setWarnings([]);\n  }, [batchSize, queryLanguage]);\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useDrawingsResourceData(enabled, queryLanguage);\n\n  const areDrawingsLoading = drawingsQuery.isLoading;\n  const [arteRuimHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTE_RUIM, historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage, drawingsCount);\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n  const [aquiOHistory] = useParsedHistory(DAILY_GAMES_KEYS.AQUI_O, historyQuery.data);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess || !tdrItemsQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(\n      batchSize,\n      aquiOHistory,\n      aquiOSetsQuery.data,\n      tdrItemsQuery.data,\n      updateWarnings,\n    );\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess, tdrItemsQuery]);\n\n  // STEP 4: Palavreado\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory(DAILY_GAMES_KEYS.PALAVREADO, historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !historyQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const [artistaHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTISTA, historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds,\n      drawingsQuery.drawings,\n    );\n  }, [\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    historyQuery.isSuccess,\n    arteRuimEntries,\n    drawingsQuery.drawings,\n  ]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n  const [filmacoHistory] = useParsedHistory(DAILY_GAMES_KEYS.FILMACO, historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  // SET 7: Controle de Estoque\n  const [controleDeEstoqueHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE,\n    historyQuery.data,\n  );\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // SET 8: Teoria de Conjuntos\n  const [teoriaDeConjuntosHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS,\n    historyQuery.data,\n  );\n  const thingsQuery = useTDResource<DailyDiagramItem>('daily-diagram-items', enabled);\n  const rulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules', enabled);\n  const teoriaDeConjuntosHistoryEntries = useMemo(() => {\n    if (!historyQuery.isSuccess || !thingsQuery.isSuccess || !rulesQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyTeoriaDeConjuntosGames(\n      batchSize,\n      teoriaDeConjuntosHistory,\n      rulesQuery.data,\n      thingsQuery.data,\n    );\n  }, [batchSize, historyQuery.isSuccess, teoriaDeConjuntosHistory, rulesQuery, thingsQuery]);\n\n  // SET 9: Comunicação Alienígena\n  const [comunicacaoAlienigenaHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA,\n    historyQuery.data,\n  );\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAttributesValues>(\n    'items-attribute-values',\n    enabled,\n  );\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const comunicacaoAlienigenaEntries = useMemo(() => {\n    if (\n      !historyQuery.isSuccess ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess ||\n      !tdrItemsQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data,\n      tdrItemsQuery.data,\n      updateWarnings,\n    );\n  }, [\n    batchSize,\n    historyQuery.isSuccess,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n    tdrItemsQuery,\n  ]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuimEntries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntosHistoryEntries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigenaEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n    teoriaDeConjuntosHistoryEntries,\n    comunicacaoAlienigenaEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsFourQuery.isLoading ||\n      wordsFiveQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading ||\n      thingsQuery.isLoading ||\n      rulesQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading,\n    entries,\n    warnings,\n  };\n}\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyArteRuimEntry, DailyEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport type { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nexport const buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useDrawingsResourceData>,\n  queryLanguage: Language,\n  drawingsCount: number,\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings: DailyEntry['arte-ruim'][] = Object.values(drawingsQuery.drawings)\n    .filter((d) => {\n      // Remove used cards\n      if (history.used.includes(d.id)) {\n        return false;\n      }\n\n      // Remove cards with less than the required number of drawings\n      if (d.drawings.length < drawingsCount) {\n        return false;\n      }\n\n      return true;\n    })\n    .map((d) => ({\n      id: d.id,\n      type: 'arte-ruim',\n      language: queryLanguage ?? 'pt',\n      cardId: d.id,\n      text: d.text,\n      drawings: d.drawings.map((drawing) => drawing.drawing),\n      number: 0,\n      dataIds: d.drawings.map((drawing) => drawing.id),\n    }));\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(drawings), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { intersection, sampleSize, shuffle } from 'lodash';\nimport type { DailyDiscSet, Item } from 'types';\nimport type { DailyAquiOEntry, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>,\n  items: Dictionary<Item>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    updateWarnings('Not enough aqui-o sets left');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  const availableItems = Object.values(items).filter((item) => {\n    if (item?.nsfw) return false;\n    return intersection(item.decks ?? [], ['alien', 'dream', 'thing']).length > 0;\n  });\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    lastDate = id;\n\n    if (isWeekend) {\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: history.latestNumber + i + 1,\n        setId: 'special',\n        title: {\n          pt: 'Especial Fim de Semana',\n          en: 'Weekend Special',\n        },\n        itemsIds: ['0', ...sampleSize(availableItems, 25).map((item) => item.id)],\n      };\n    } else {\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: history.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n  }\n\n  return entries;\n};\n","import { sampleSize } from 'lodash';\nimport type { ArteRuimCard } from 'types';\nimport type { DailyArtistaEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport type { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[],\n  drawings: ReturnType<typeof useDrawingsResourceData>['drawings'],\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) =>\n        !arteRuimHistory.used.includes(cardId) &&\n        !recentlyUsedIds.includes(cardId) &&\n        drawings?.[cardId]?.drawings?.length < 4,\n    );\n    const cards = sampleSize(availableCardsIds, 20).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { shuffle } from 'lodash';\nimport type { DailyMovieSet } from 'types';\nimport type { DailyFilmacoEntry, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>,\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { Alert, Button, Flex, Space, Table, type TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport type { ArteRuimCard } from 'types';\n\nimport { type UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport type { DailyComunicacaoAlienigenaEntry, DailyEntry } from './utils/types';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Space>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Space>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry: DailyComunicacaoAlienigenaEntry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <span>{entry.itemsIds.length} items</span>\n            <Space>\n              <Space direction=\"vertical\">\n                {entry.attributes.map((req) => (\n                  <AlienSign key={req.spriteId} id={`sign-${req.spriteId}`} width={50} />\n                ))}\n              </Space>\n              <Space direction=\"vertical\">\n                {entry.itemsIds.map((itemId) => (\n                  <Item key={itemId} id={itemId} width={50} />\n                ))}\n              </Space>\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      {dataLoad.warnings.map((warning) => (\n        <Alert key={warning} message={warning} type=\"warning\" showIcon />\n      ))}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h1>Total: {dataLoad.entries.length}</h1>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport type { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        [DAILY_GAMES_KEYS.ARTE_RUIM]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTE_RUIM].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.ARTE_RUIM].used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.ARTE_RUIM].cardId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.AQUI_O]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.AQUI_O].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.AQUI_O].used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.AQUI_O].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.PALAVREADO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.PALAVREADO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.PALAVREADO].keyword),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.ARTISTA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTISTA].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.FILMACO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.FILMACO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.FILMACO]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.FILMACO].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].setId),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].intersectingThing.id),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].setId),\n            ]),\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { ResponseState } from 'components/Common';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, drawingsCount, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["CanvasSVG","drawing","className","width","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","useParsedHistory","key","data","history","useMemo","latestDate","getYesterday","latestNumber","used","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","DAILY_GAMES_KEYS","ARTE_RUIM","ARTISTA","AQUI_O","COMUNICACAO_ALIENIGENA","CONTROLE_DE_ESTOQUE","FILMACO","PALAVREADO","TEORIA_DE_CONJUNTOS","useDrawingsResourceData","enabled","language","firebaseDrawingsQueries","queryLanguage","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Array","_","Boolean","onSuccess","info","useQueries","useLoadFirebaseDrawings","tdrDrawingsQuery","useTDResource","isDrawingsLoading","some","q","isLoading","isDrawingsSuccess","every","drawings","allDrawings","forEach","drawingEntry","drawingsLibrary","Object","entries","dataDrawing","cardId","id","includes","trim","console","log","createdAt","createdAtPart","split","Number","isNaN","extractCreatedAt","artistId","playerId","join","SEPARATOR","undefined","text","updatedAt","push","drawingsPerArtist","values","reduce","acc","drawingsCount","firstDrawingAt","lastDrawingAt","hasResponseData","isEmpty","ARTIST_ID_ALIAS","BPTEL","Bm6dr","QrfLz","AlRvI","pK3OY","VF9iG","WWUvD","aec7L","Xsimf","fV5ns","qQo9N","yVAl7","O2IQm","useLoadWordLibrary","wordLength","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","generateComunicacaoAlienigenaGame","attributes","attributeValues","shuffledAttributeValues","shuffle","spriteIDs","makeArray","selectedAttributes","sampleSize","attr","spriteId","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","item","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","name","description","itemsIds","Math","max","usedItemsIds","complexRequests","spritesIds","itemId","sample","simpleRequests","filter","requests","requestItemsIds","req","result","setId","sort","number","type","solution","random","valid","generateControleDeEstoqueGame","num","year","month","day","entry","title","Date","getDay","goods","orders","i","GOODS_SIZE","outOfStockGood","Error","generatePalavreadoGame","words","previouslyUsedWords","newUsedWords","size","fixedKeyword","shuffledWords","difference","keyword","selectedWords","newWord","getNewWord","letters","shuffleLetters","usedLetters","uniq","flatMap","word","shortList","sortBy","intersection","preservedIndexes","otherLetters","shuffledLetters","shift","useLoadDailySetup","batchSize","warnings","setWarnings","useState","tdrItemsQuery","updateWarnings","newWarning","prev","drawingsQuery","areDrawingsLoading","arteRuimHistory","arteRuimEntries","count","dataIds","shuffledShortList","lastDate","e","getNextDay","buildDailyArteRuimGames","aquiOSetsQuery","aquiOHistory","aquiOEntries","discSets","items","completeSets","setEntry","notUsedSets","availableItems","nsfw","decks","isWeekend","checkWeekend","buildDailyAquiOGames","wordsFourQuery","wordsFiveQuery","palavreadoHistory","palavreadoEntries","fourLetterWords","fiveLetterWords","usedWords","buildDailyPalavreadoGames","arteRuimCardsQuery","artistaHistory","artistaEntries","usedArteRuimIds","arteRuim","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyArtistaGames","movieSetsQuery","filmacoHistory","filmacoEntries","movies","buildDailyFilmacoGames","controleDeEstoqueHistory","controleDeEstoqueEntries","buildDailyControleDeEstoqueGames","teoriaDeConjuntosHistory","thingsQuery","rulesQuery","teoriaDeConjuntosHistoryEntries","buildDailyTeoriaDeConjuntosGames","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","comunicacaoAlienigenaEntries","allAttributes","limited","allAttributesValues","complete","preliminaryEntries","tries","buildDailyComunicacaoAlienigenaGames","palavreado","artista","filmaco","DataPopulation","dataLoad","columns","dataIndex","render","direction","l","wrap","gap","WarehouseGood","intersectingThing","maxHeight","overflowY","card","save","isPending","queryClient","useQueryClient","isDirty","setIsDirty","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","mutateAsync","useSaveDailySetup","warning","showIcon","justify","align","onClick","loading","disabled","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","label","value","onChange","DEFAULT_LANGUAGE","placeholder","hasSider","PageSider","DataLoadingWrapper","level","MutationObserver","Subscribable","constructor","client","super","this","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","observer","mutationKey","hashKey","state","status","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","getDefaultState","isIdle","notifyManager","context","onSettled","listeners","listener","React","onStoreChange","subscribe","mutateOptions","catch","noop","shouldThrowError","throwOnError"],"sourceRoot":""}