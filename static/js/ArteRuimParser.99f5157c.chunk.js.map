{"version":3,"file":"static/js/ArteRuimParser.99f5157c.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Resource/ResourceSelectionFilters.tsx","components/SearchDuplicates.tsx","hooks/useQueryParams.ts","hooks/useResourceState.ts","components/ArteRuimLevels.tsx","pages/ArteRuimParser.tsx"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","import { Button, Form, Select } from 'antd';\nimport { useState } from 'react';\n\nimport { useQueryParams } from '../../hooks/useQueryParams';\nimport { DUAL_LANGUAGE_RESOURCES, LANGUAGES } from '../../utils/constants';\nimport { SiderContent } from 'components/Layout';\n\ntype ResourceSelectionFiltersProps = {\n  resourceNames: string[];\n};\n\nexport function ResourceSelectionFilters({ resourceNames }: ResourceSelectionFiltersProps) {\n  const { queryParams, addParam } = useQueryParams();\n  const [form] = Form.useForm();\n  const [currentResourceName, setCurrentResourceName] = useState(queryParams.resourceName);\n\n  const onFinish = (v: any) => {\n    const isDualLanguageResource = DUAL_LANGUAGE_RESOURCES.includes(v.resourceName);\n\n    addParam('language', isDualLanguageResource ? null : v.language);\n    addParam('resourceName', v.resourceName);\n  };\n\n  return (\n    <SiderContent>\n      <Form\n        layout=\"vertical\"\n        onFinish={onFinish}\n        size=\"small\"\n        form={form}\n        initialValues={{\n          resourceName: queryParams.resourceName ?? '',\n          language: queryParams.language ?? '',\n        }}\n      >\n        <Form.Item label=\"Resource\" name=\"resourceName\">\n          <Select\n            style={{ minWidth: '150px' }}\n            value={queryParams.resourceName}\n            onChange={(e: string) => setCurrentResourceName(e)}\n          >\n            {resourceNames.map((resourceName) => (\n              <Select.Option key={resourceName} value={resourceName}>\n                {resourceName}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"Language\" name=\"language\">\n          <Select\n            style={{ minWidth: '150px' }}\n            disabled={DUAL_LANGUAGE_RESOURCES.includes(currentResourceName)}\n          >\n            {LANGUAGES.map((entry) => (\n              <Select.Option key={entry} value={entry}>\n                {entry}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Load\n          </Button>\n        </Form.Item>\n      </Form>\n    </SiderContent>\n  );\n}\n","import { Input } from 'antd';\nimport { useState } from 'react';\nimport { findSimilar, stringRemoveAccents } from '../utils';\nimport { SEARCH_THRESHOLD } from '../utils/constants';\nimport { SectionTitle } from './Common/SectionTitle';\n\ntype SearchDuplicatesProps = {\n  response: ObjectDictionary;\n  property: string;\n};\n\nexport function SearchDuplicates({ response, property }: SearchDuplicatesProps) {\n  const [searchResults, setSearchResults] = useState({});\n\n  const onSearchSimilar = (e: any) => {\n    const { value = '' } = e.target;\n    const str = stringRemoveAccents(value.trim().toLowerCase());\n\n    if (str && str.length >= SEARCH_THRESHOLD) {\n      setSearchResults(findSimilar(str, response, property));\n    } else {\n      setSearchResults({});\n    }\n  };\n\n  return (\n    <div className=\"parser-flex-column\">\n      <SectionTitle>Search Similar</SectionTitle>\n      <Input type=\"text\" onChange={onSearchSimilar} placeholder=\"Type here\" />\n      <Input.TextArea\n        name=\"search-results\"\n        id=\"\"\n        cols={10}\n        rows={10}\n        readOnly\n        value={JSON.stringify(searchResults, null, 4)}\n      />\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown) => {\n    if (value === undefined || value === '') {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string, value: unknown) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    addParam,\n    removeParam,\n    queryParams,\n  };\n}\n","import { DUAL_LANGUAGE_RESOURCES } from 'utils/constants';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\nimport { useQueryParams } from './useQueryParams';\n\ntype ResourceState = {\n  resourceName: string | null;\n  language?: Language | null;\n  response: any;\n  isLoading: boolean;\n  error?: ResponseError | null;\n  hasResponseData: boolean;\n  enabled: boolean;\n};\n\nexport function useResourceState(availableResources: AvailableResources): ResourceState {\n  const {\n    queryParams: { resourceName = '', language = '' },\n  } = useQueryParams();\n  const { getUrl } = useBaseUrl('tdr');\n\n  const enabled = !!resourceName && availableResources.includes(resourceName);\n\n  const { data, isLoading, error } = useQuery<any, ResponseError>({\n    queryKey: ['resource', resourceName, language],\n    queryFn: async () => {\n      const url =\n        language && !DUAL_LANGUAGE_RESOURCES.includes(resourceName)\n          ? getUrl(`${resourceName}-${language}.json`)\n          : getUrl(`${resourceName}.json`);\n\n      const res = await fetch(url);\n\n      const result = res.body ? await res.json() : {};\n\n      return result;\n    },\n    enabled,\n  });\n\n  return {\n    resourceName,\n    language: (language as Language) || null,\n    response: data,\n    isLoading,\n    enabled,\n    error,\n    hasResponseData: Boolean(data),\n  };\n}\n","import { useMemo } from 'react';\nimport { SectionTitle } from './Common/SectionTitle';\n\ntype ArteRuimLevelsProps = {\n  data: PlainObject;\n};\n\nexport function ArteRuimLevels({ data }: ArteRuimLevelsProps) {\n  const { level0, level1, level2, level3, level4, total } = useMemo(\n    () =>\n      Object.values(data).reduce(\n        (acc, entry) => {\n          acc[`level${entry.level}`] += 1;\n          acc.total += 1;\n          return acc;\n        },\n        {\n          level0: 0,\n          level1: 0,\n          level2: 0,\n          level3: 0,\n          level4: 0,\n          total: 0,\n        }\n      ),\n    [data]\n  );\n\n  return (\n    <div className=\"\">\n      <SectionTitle>Levels ({total})</SectionTitle>\n      <div style={{ color: level0 > 0 ? 'red' : 'inherit' }}>Level 0: {level0}</div>\n      <div>Level 1: {level1}</div>\n      <div>Level 2: {level2}</div>\n      <div>Level 3: {level3}</div>\n      <div>Level 4: {level4}</div>\n    </div>\n  );\n}\n","import { Input, Layout } from 'antd';\nimport { ArteRuimLevels } from 'components/ArteRuimLevels';\nimport { SectionTitle } from 'components/Common/SectionTitle';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { ResourceSelectionFilters } from 'components/Resource/ResourceSelectionFilters';\nimport { SearchDuplicates } from 'components/SearchDuplicates';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceState } from 'hooks/useResourceState';\nimport { useEffect, useState } from 'react';\nimport { ArteRuimCard } from 'types';\n\nimport { checkForDuplicates, findSimilar, stringRemoveAccents } from 'utils';\nimport { RESOURCE_NAMES, SEARCH_THRESHOLD } from 'utils/constants';\n\nexport function ArteRuimParser() {\n  // Set default query params\n  useQueryParams({ resourceName: RESOURCE_NAMES.ARTE_RUIM_CARDS, language: 'pt' });\n\n  const [searchResults, setSearchResults] = useState({});\n  const [output, setOutput] = useState({});\n  const [duplicates, setDuplicates] = useState({});\n  const property = 'text';\n\n  const { resourceName, language, isLoading, error, hasResponseData, response } = useResourceState([\n    RESOURCE_NAMES.ARTE_RUIM_CARDS,\n  ]);\n\n  useEffect(() => {\n    if (response) {\n      setDuplicates(checkForDuplicates(response, property));\n      setOutput(response);\n    }\n  }, [response]);\n\n  const onInputChange = (e: any) => {\n    const { value } = e.target;\n    const parsedInput = value.split('\\n');\n\n    const dataArray: any[] = Object.values(response ?? {});\n    const lastId = Number(dataArray[dataArray.length - 1].id.split('-')[1]) || 1;\n\n    if (parsedInput.at(-1) && parsedInput.at(-1).length > SEARCH_THRESHOLD) {\n      const str = stringRemoveAccents(parsedInput.at(-1).trim().toLowerCase());\n\n      setSearchResults(findSimilar(str, response, property));\n    } else {\n      setSearchResults({});\n    }\n\n    const result = parsedInput.reduce(\n      (acc: Record<CardId, ArteRuimCard>, text: string, index: number) => {\n        if (text) {\n          const newId = `${resourceName![0]}-${lastId + index + 1}-${language}`;\n          acc[newId] = {\n            id: newId,\n            text,\n            level: 0,\n          };\n        }\n        return acc;\n      },\n      { ...response }\n    );\n\n    setOutput(result);\n  };\n\n  return (\n    <PageLayout title=\"Arte Ruim\" subtitle={Boolean(resourceName && language) ? `Parser (${language})` : ''}>\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState hasResponseData={hasResponseData} isLoading={isLoading} error={error} />\n          <ResourceSelectionFilters resourceNames={[RESOURCE_NAMES.ARTE_RUIM_CARDS]} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <div className=\"parser-container\">\n              <div className=\"parser-main\">\n                <SectionTitle>Input New Data</SectionTitle>\n                <Input.TextArea name=\"input\" id=\"\" cols={15} rows={5} onChange={onInputChange} />\n\n                <SectionTitle>Output</SectionTitle>\n                <Input.TextArea\n                  name=\"output\"\n                  id=\"\"\n                  cols={15}\n                  rows={14}\n                  readOnly\n                  value={JSON.stringify(output, null, 4)}\n                />\n\n                <SectionTitle>Duplicates</SectionTitle>\n                <Input.TextArea\n                  name=\"duplicates\"\n                  id=\"\"\n                  cols={15}\n                  rows={3}\n                  readOnly\n                  value={JSON.stringify(duplicates)}\n                />\n              </div>\n\n              <aside className=\"parser-controls\">\n                {Boolean(response) && <ArteRuimLevels data={response} />}\n\n                <SectionTitle>\n                  Similar Results for Last Entry ({Object.values(searchResults).length})\n                </SectionTitle>\n                <Input.TextArea\n                  name=\"search-results\"\n                  id=\"\"\n                  cols={10}\n                  rows={5}\n                  readOnly\n                  value={JSON.stringify(searchResults, null, 4)}\n                />\n\n                <SearchDuplicates response={response} property={property} />\n              </aside>\n            </div>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ArteRuimParser;\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","ResourceSelectionFilters","resourceNames","queryParams","addParam","useQueryParams","form","Form","currentResourceName","setCurrentResourceName","useState","resourceName","layout","onFinish","isDualLanguageResource","DUAL_LANGUAGE_RESOURCES","language","initialValues","name","e","LANGUAGES","type","htmlType","SearchDuplicates","response","property","searchResults","setSearchResults","target","str","stringRemoveAccents","trim","toLowerCase","length","SEARCH_THRESHOLD","findSimilar","id","cols","rows","readOnly","JSON","stringify","defaultParams","searchParams","setSearchParams","useSearchParams","key","undefined","delete","set","String","removeParam","useEffect","Object","entries","forEach","has","toString","split","reduce","qp","useResourceState","availableResources","getUrl","useBaseUrl","enabled","includes","data","useQuery","queryKey","queryFn","async","url","res","fetch","body","json","Boolean","ArteRuimLevels","level0","level1","level2","level3","level4","total","useMemo","values","acc","ArteRuimParser","RESOURCE_NAMES","output","setOutput","duplicates","setDuplicates","checkForDuplicates","title","subtitle","hasSider","PageSider","DataLoadingWrapper","parsedInput","dataArray","lastId","Number","at","result","text","index","newId"],"sourceRoot":""}