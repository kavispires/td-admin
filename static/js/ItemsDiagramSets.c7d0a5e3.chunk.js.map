{"version":3,"file":"static/js/ItemsDiagramSets.c7d0a5e3.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","hooks/useResourceFirebaseData.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Diagram/ItemsDiagramFilters.tsx","components/Items/Diagram/EditThingModal.tsx","components/Items/Diagram/Thing.tsx","components/Items/Diagram/DiagramGameSample.tsx","components/Items/Diagram/GameSimulator.tsx","components/Items/Diagram/ItemUpdateGuard.tsx","components/Items/Diagram/AddNewThingFlow.tsx","components/Items/Diagram/RulesByThing.tsx","components/Items/Diagram/ThingsByRule.tsx","components/Items/Diagram/ItemsDiagramSetsContent.tsx","pages/Items/ItemsDiagramSets.tsx"],"sourcesContent":["import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import type { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { type DocumentData, doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseMutationOptions, useMutation } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {},\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterSegments } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { cloneDeep } from 'lodash';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { verifiers } from './utils';\n\nexport function ItemsDiagramFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const { addParams, queryParams } = useQueryParams();\n  const tdrDiagramRulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules');\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data, tdrDiagramRulesQuery.data ?? {})}\n          fileName=\"daily-diagram-items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'rule'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Rule',\n            icon: <ClusterOutlined />,\n            value: 'rule',\n          },\n          {\n            title: 'By Thing',\n            icon: <TableOutlined />,\n            value: 'thing',\n          },\n        ]}\n      />\n\n      <Divider />\n\n      <Button size=\"small\" block onClick={() => addParams({ display: 'simulator' })}>\n        Simulator\n      </Button>\n\n      <Typography.Paragraph type=\"secondary\" className=\"my-6\">\n        v2.0.1\n      </Typography.Paragraph>\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  diagramItems: Dictionary<DailyDiagramItem>,\n  rules: Dictionary<DailyDiagramRule>,\n) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(diagramItems);\n\n  Object.values(copy).forEach((item) => {\n    const outdatedRules = Object.values(rules).filter((rule) => rule.updatedAt > item.updatedAt);\n\n    const autoUpdates = outdatedRules.filter((rule) => rule.method === 'auto');\n    if (autoUpdates.length > 0) {\n      console.log(`Performing ${autoUpdates.length} auto updates for ${item.name}`);\n\n      // Remove all rules to be updated\n      item.rules = item.rules.filter((ruleId) => !autoUpdates.map((rule) => rule.id).includes(ruleId));\n      // Rerun rules\n      autoUpdates.forEach((rule) => {\n        const pass = verifiers[rule.id](item.name);\n        if (pass) {\n          item.rules.push(rule.id);\n        }\n      });\n    }\n\n    item.rules = item.rules.sort();\n\n    const hasNonAutoUpdates = outdatedRules.some((rule) => rule.method !== 'auto');\n    if (hasNonAutoUpdates) {\n      item.updatedAt = Date.now();\n    }\n  });\n\n  return sortJsonKeys(copy);\n}\n","import { Affix, Button, Flex, Form, Input, Modal, Radio, Switch } from 'antd';\nimport clsx from 'clsx';\nimport { Item } from 'components/Sprites';\nimport { orderBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\n\nimport {\n  SYLLABLE_SEPARATOR,\n  separateSyllables,\n  stressSyllableDependencyVerifier,\n  syllableDependencyVerifier,\n  verifiers,\n} from './utils';\n\nexport type ThingFormValues = Record<string, boolean | string | number>;\n\ntype EditThingModalProps = {\n  isModalOpen: boolean;\n  onSaveThing: (item: DailyDiagramItem) => void;\n  onCancel: () => void;\n  thing: DailyDiagramItem;\n  rules: Dictionary<DailyDiagramRule>;\n  width?: number | string;\n  itemAliases?: string[];\n  subtitle?: string;\n  okButtonText?: string;\n  onGiveAnotherThing?: () => void;\n};\n\nexport function EditThingModal({\n  isModalOpen,\n  onSaveThing,\n  onCancel,\n  thing,\n  rules,\n  width,\n  itemAliases,\n  subtitle,\n  okButtonText,\n  onGiveAnotherThing,\n}: EditThingModalProps) {\n  // Sort rules properly by type\n  const orderedRules = useMemo(() => {\n    return orderBy(Object.values(rules), [\n      // Not auto\n      (r) => {\n        const index = ['manual', 'dependency', 'auto'].indexOf(r.method);\n        return index === -1 ? Number.POSITIVE_INFINITY : index;\n      },\n      // Sort by type\n      (r) => {\n        const index = ['grammar', 'comparison', 'order', 'count', 'contains', 'ends'].indexOf(r.type);\n        return index === -1 ? Number.POSITIVE_INFINITY : index;\n      },\n      // Sort by partial title\n      (r) => r.title.slice(0, 7),\n      // Sort by id\n      (r) => Number(r.id.split('-')[1]),\n    ]);\n  }, [rules]);\n\n  // Build initial values\n  const [form] = Form.useForm();\n  const values = Form.useWatch([], form);\n  const hasUndefinedValues = !values || Object.values(values ?? {}).some((value) => value === undefined);\n\n  // Automation: If name is changed, recalculates all rules\n  const nameWatch = Form.useWatch('name', form);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    // If initial state where name is still undefined, ignore\n    if (!nameWatch) return;\n\n    if (thing.name && thing.syllables && nameWatch === thing.name) return;\n\n    // If name changes, recalculate all rules\n    const fields: Record<string, boolean | string | number | undefined> = {\n      syllables: separateSyllables(nameWatch),\n      stressedSyllable: (thing.stressedSyllable ?? nameWatch.includes(' ')) ? -1 : 0,\n    };\n    Object.keys(rules).forEach((ruleId) => {\n      if (verifiers[ruleId]) {\n        fields[ruleId] = verifiers[ruleId](nameWatch);\n      } else {\n        fields[ruleId] = thing.rules.length > 0 ? thing.rules.includes(ruleId) : undefined;\n      }\n    });\n    form.setFieldsValue(fields);\n  }, [nameWatch]);\n\n  // Automation: Syllables\n  const syllables = Form.useWatch('syllables', form);\n  const isAcronym = form.getFieldValue('ddr-51-pt');\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (isAcronym) {\n      form.setFieldsValue({ stressedSyllable: undefined });\n      form.setFieldsValue({ 'ddr-43-pt': false });\n      form.setFieldsValue({ 'ddr-44-pt': false });\n      form.setFieldsValue({ 'ddr-45-pt': false });\n      form.setFieldsValue({ 'ddr-46-pt': false });\n    }\n    if (isAcronym === undefined) {\n      form.setFieldsValue({ 'ddr-51-pt': false });\n    }\n  }, [isAcronym]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (syllables) {\n      const syllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (syllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = syllableDependencyVerifier[ruleId](nameWatch, syllables, isAcronym);\n        }\n        return acc;\n      }, {});\n      form.setFieldsValue({\n        ...syllableRulesUpdate,\n        stressedSyllable:\n          syllables === thing.syllables\n            ? thing.stressedSyllable\n            : (thing.stressedSyllable ?? nameWatch.includes(' '))\n              ? -1\n              : undefined,\n      });\n    }\n  }, [nameWatch, syllables, isAcronym]);\n\n  // Automation: Stressed syllable\n  const stressedSyllable = Form.useWatch('stressedSyllable', form);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (!isAcronym && stressedSyllable !== undefined) {\n      const stressSyllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (stressSyllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = stressSyllableDependencyVerifier[ruleId](nameWatch, syllables, stressedSyllable);\n        }\n        return acc;\n      }, {});\n\n      form.setFieldsValue({\n        ...stressSyllableRulesUpdate,\n      });\n    }\n  }, [stressedSyllable]);\n\n  // Automation: Male vs Female nouns vs Both genders\n  const rule1 = form.getFieldValue('ddr-1-pt');\n  const rule2 = form.getFieldValue('ddr-2-pt');\n  const rule5 = form.getFieldValue('ddr-50-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule1 === true) {\n      form.setFieldsValue({ 'ddr-2-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule1]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule2 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule2]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule5 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-2-pt': false });\n    }\n  }, [rule5]);\n\n  // Automation: syllable count\n  const rule3 = form.getFieldValue('ddr-3-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule3 === true) {\n      form.setFieldsValue({ 'ddr-4-pt': false });\n    }\n  }, [rule3]);\n  const rule4 = form.getFieldValue('ddr-4-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule4 === true) {\n      form.setFieldsValue({ 'ddr-3-pt': false });\n    }\n  }, [rule4]);\n\n  // Automation: has hyphen\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    const hasHyphen = nameWatch?.includes('-');\n    if (hasHyphen) {\n      form.setFieldsValue({ 'ddr-5-pt': true });\n    }\n  }, [nameWatch]);\n\n  const onFinish = (values: any) => {\n    const preparedThing = serializeThing(values);\n    onSaveThing(preparedThing);\n  };\n\n  const splitSyllables: string[] = useMemo(() => (syllables ?? '').split(SYLLABLE_SEPARATOR), [syllables]);\n\n  return (\n    <Modal\n      width={width}\n      title={\n        <>\n          Edit {thing.name} {subtitle && <small>{subtitle}</small>}\n        </>\n      }\n      open={isModalOpen}\n      onOk={form.submit}\n      onCancel={onCancel}\n      maskClosable={false}\n      okButtonProps={{ disabled: hasUndefinedValues, htmlType: 'submit', size: 'large' }}\n      okText={okButtonText ?? 'Add Item'}\n    >\n      <Form\n        form={form}\n        name={`new-item-${thing.itemId}`}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        initialValues={deserializeThing(thing, rules)}\n        layout=\"vertical\"\n        size=\"small\"\n        labelWrap\n      >\n        <div className=\"diagram-container\">\n          <div>\n            <Item id={thing.itemId} width={50} />\n          </div>\n\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"itemId\" label=\"Item\">\n            <Input readOnly />\n          </Form.Item>\n\n          <Form.Item name=\"syllables\" label=\"Syllables\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"stressedSyllable\" label=\"Stressed Syllable\">\n            <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n              {splitSyllables.map((syllable, index) => (\n                <Radio key={index} value={splitSyllables.length - index - 1}>\n                  {syllable}\n                </Radio>\n              ))}\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item name=\"updatedAt\" label=\"Updated At\">\n            <Input value={new Date(thing.updatedAt).toLocaleString()} readOnly />\n          </Form.Item>\n\n          {(itemAliases || onGiveAnotherThing) && (\n            <div>\n              {itemAliases && <span>Options: {itemAliases?.join(', ')}</span>}\n              {onGiveAnotherThing && (\n                <Button size=\"small\" onClick={onGiveAnotherThing} type=\"dashed\" className=\"mt-2\">\n                  Give me another thing\n                </Button>\n              )}\n            </div>\n          )}\n\n          <div>\n            <Affix offsetTop={50}>\n              <Flex justify=\"center\" align=\"center\">\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\" disabled={hasUndefinedValues}>\n                  {okButtonText ?? 'Add Item'}\n                </Button>\n              </Flex>\n            </Affix>\n          </div>\n        </div>\n        <div className=\"diagram-container\">\n          {orderedRules.map((rule) => {\n            if (rule.method === 'auto' && verifiers[rule.id]) {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            if (rule.method === 'dependency') {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            return (\n              <Form.Item\n                key={rule.id}\n                name={rule.id}\n                label={rule.title}\n                className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n              >\n                <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n                  <Radio value={true}>✅</Radio>\n                  <Radio value={false}>❌</Radio>\n                </Radio.Group>\n              </Form.Item>\n            );\n          })}\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n\nconst deserializeThing = (\n  thing: DailyDiagramItem,\n  rules: Dictionary<DailyDiagramRule>,\n): Record<string, boolean | string | number> => {\n  let wasAnyRuleUpdated = false;\n  return {\n    name: thing.name,\n    itemId: thing.itemId,\n    syllables: thing.syllables ?? separateSyllables(thing.name),\n    stressedSyllable: thing.stressedSyllable ?? 0,\n\n    ...Object.keys(rules).reduce((acc: Record<string, boolean | undefined>, ruleId) => {\n      // Only re-verify if rule is older than the last update\n      if (thing.updatedAt < rules[ruleId].updatedAt) {\n        if (verifiers[ruleId]) {\n          const reVerify = verifiers[ruleId](thing.name);\n          if (reVerify && thing.rules.includes(ruleId)) {\n            wasAnyRuleUpdated = true;\n          }\n          acc[ruleId] = reVerify;\n        } else {\n          acc[ruleId] = undefined;\n        }\n      } else {\n        acc[ruleId] = thing.rules.includes(ruleId);\n      }\n\n      return acc;\n    }, {}),\n    updatedAt: wasAnyRuleUpdated ? Date.now() : thing.updatedAt,\n  };\n};\n\nconst serializeThing = (values: Record<string, boolean | string | number>): DailyDiagramItem => {\n  const { itemId, name, updatedAt, syllables, stressedSyllable, ...thingRules } = values;\n\n  return {\n    itemId: itemId as string,\n    name: name as string,\n    updatedAt: Date.now(),\n    syllables: syllables as string,\n    stressedSyllable: stressedSyllable as number,\n    rules: Object.keys(thingRules).filter((key) => thingRules[key] === true),\n  };\n};\n","import { Flex, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { Item } from 'components/Sprites';\nimport type { DailyDiagramItem } from 'types';\n\ntype ThingProps = {\n  itemId: string;\n  name: string;\n  width?: number;\n};\n\nexport function Thing({ itemId, name, width = 50 }: ThingProps) {\n  return (\n    <Flex vertical align=\"center\">\n      <Item id={itemId} width={width} />\n      <Typography.Text code key={itemId}>\n        {name}\n      </Typography.Text>\n    </Flex>\n  );\n}\n\ntype ThingButtonProps = {\n  thing: DailyDiagramItem;\n  onActivateThing: (thing: DailyDiagramItem) => void;\n  width?: number;\n};\n\nexport function ThingButton({ thing, width = 50, onActivateThing }: ThingButtonProps) {\n  return (\n    <TransparentButton onClick={() => onActivateThing(thing)}>\n      <Thing itemId={thing.itemId} name={thing.name} width={width} />\n    </TransparentButton>\n  );\n}\n","import { Collapse, Rate, Space, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport type { DailyTeoriaDeConjuntosEntry } from 'components/Daily/utils/games/daily-teoria-de-conjuntos';\nimport { type ReactNode, useState } from 'react';\nimport { Thing } from './Thing';\n\ntype DiagramGameSampleProps = {\n  game: DailyTeoriaDeConjuntosEntry;\n};\n\ntype TThing = {\n  id: string;\n  name: string;\n  rule: number;\n};\n\nexport function DiagramGameSample({ game }: DiagramGameSampleProps) {\n  const [leftRing] = useState<TThing[]>([\n    {\n      id: game.rule1.thing.id,\n      name: game.rule1.thing.name,\n      rule: 1,\n    },\n  ]);\n  const [rightRing] = useState<TThing[]>([\n    {\n      id: game.rule2.thing.id,\n      name: game.rule2.thing.name,\n      rule: 2,\n    },\n  ]);\n  const [intersection] = useState<TThing[]>([\n    {\n      id: game.intersectingThing.id,\n      name: game.intersectingThing.name,\n      rule: 0,\n    },\n  ]);\n\n  const [playerOptions] = useState<TThing[]>(game.things.slice(0, 4));\n\n  const [selectedThing, setSelectedThing] = useState<TThing | null>(game.things[0]);\n\n  // const\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Typography.Title level={4}>Game Sample</Typography.Title>\n      <Typography.Title level={5}>\"{game.title}\"</Typography.Title>\n      <Rate value={game.level} count={game.level} disabled />\n      <Typography.Paragraph style={{ maxWidth: '500px' }}>\n        O círculo amarelo tem uma regra gramatical secreta e o circulo vermelho tem outra regra gramatical\n        secreta. O quadrado do meio representa a interseção entre a regra amarela e a regra vermelha.\n      </Typography.Paragraph>\n\n      <Space>\n        <VennDiagram\n          width={600}\n          leftCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {leftRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          rightCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {rightRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          intersectionChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {intersection.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n        />\n      </Space>\n      <Typography.Text>Coloque os objetos nos círculos corretos:</Typography.Text>\n      <Space className=\"space--center\">\n        {playerOptions.map((thing) => (\n          <TransparentButton\n            key={thing.id}\n            style={thing.id === selectedThing?.id ? { outline: '3px solid hotPink' } : {}}\n            onClick={() => setSelectedThing(thing)}\n          >\n            <Thing key={thing.id} itemId={thing.id} name={thing.name} />\n          </TransparentButton>\n        ))}\n      </Space>\n\n      <Collapse\n        items={[\n          {\n            key: '1',\n            label: 'Resposta',\n            children: (\n              <Space direction=\"vertical\">\n                <Typography.Text strong>Regra Amarela</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule1.text}</Typography.Text>\n                  </li>\n                </ul>\n\n                <Typography.Text strong>Regra Vermelha</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule2.text}</Typography.Text>\n                  </li>\n                </ul>\n              </Space>\n            ),\n          },\n        ]}\n      />\n\n      <div style={{ height: '200px' }}></div>\n    </Space>\n  );\n}\n\ntype VennDiagramProps = {\n  leftCircleChildren: ReactNode;\n  rightCircleChildren: ReactNode;\n  intersectionChildren: ReactNode;\n} & React.SVGProps<SVGSVGElement>;\n\nfunction VennDiagram({\n  leftCircleChildren,\n  rightCircleChildren,\n  intersectionChildren,\n  ...props\n}: VennDiagramProps) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 760 500\" {...props}>\n      <path\n        fill=\"#fbb03b\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M252.78 3.5c-136.42 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.59-247-247-247zm.99 483.07C123.39 486.57 17.7 380.88 17.7 250.5S123.39 14.43 253.77 14.43 489.84 120.12 489.84 250.5 384.15 486.57 253.77 486.57z\"\n      ></path>\n      <path\n        fill=\"#f15a24\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M508.22 3.5c-136.41 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.58-247-247-247zm.99 483.07c-130.38 0-236.07-105.69-236.07-236.07S378.84 14.43 509.22 14.43 745.29 120.12 745.29 250.5 639.6 486.57 509.22 486.57z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M487.34 250.5c0-62.39-24.29-121.04-68.41-165.16a235.9 235.9 0 00-37.43-30.47 235.35 235.35 0 00-37.43 30.47c-44.12 44.11-68.41 102.77-68.41 165.16s24.29 121.04 68.41 165.16a235.9 235.9 0 0037.43 30.47 235.35 235.35 0 0037.43-30.47c44.12-44.11 68.41-102.77 68.41-165.16z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M258.72 250.5c0-66.64 25.95-129.3 73.08-176.42a253.125 253.125 0 0134.1-28.57c-33.98-18.65-72.29-28.57-112.13-28.57-62.39 0-121.04 24.29-165.16 68.41C44.5 129.46 20.2 188.11 20.2 250.5s24.29 121.04 68.41 165.16c44.11 44.12 102.77 68.41 165.16 68.41 39.84 0 78.15-9.92 112.13-28.57a252.507 252.507 0 01-34.1-28.57c-47.12-47.12-73.08-109.78-73.08-176.42zM674.37 85.34C630.25 41.22 571.6 16.93 509.21 16.93c-40.27 0-78.98 10.14-113.24 29.18 11.74 8.26 22.86 17.6 33.22 27.96 47.12 47.12 73.08 109.78 73.08 176.42s-25.95 129.3-73.08 176.42a252.312 252.312 0 01-33.22 27.96c34.25 19.04 72.96 29.18 113.24 29.18 62.39 0 121.04-24.29 165.16-68.41 44.12-44.11 68.41-102.77 68.41-165.16s-24.29-121.04-68.41-165.16z\"\n      ></path>\n      <foreignObject x=\"30\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-left\">{leftCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"480\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-right\">{rightCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"290\" y=\"65\" width=\"182\" height=\"370\">\n        <div className=\"venn-diagram__circle-content-intersection\">{intersectionChildren}</div>\n      </foreignObject>\n    </svg>\n  );\n}\n","import { Button, Space, Typography } from 'antd';\nimport {\n  type DailyTeoriaDeConjuntosEntry,\n  buildDailyTeoriaDeConjuntosGames,\n} from 'components/Daily/utils/games/daily-teoria-de-conjuntos';\n\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { DiagramGameSample } from './DiagramGameSample';\nimport './GameSimulator.scss';\n\ntype GameSimulatorProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n};\n\nexport function GameSimulator({ things, rules }: GameSimulatorProps) {\n  const [ref] = useMeasure<HTMLDivElement>();\n\n  const [simulation, setSimulation] = useState<DailyTeoriaDeConjuntosEntry | null>(null);\n\n  const onSimulate = () => {\n    setSimulation(\n      Object.values(\n        buildDailyTeoriaDeConjuntosGames(\n          1,\n          {\n            latestDate: '2023/01/01',\n            latestNumber: 0,\n            used: [],\n          },\n          rules,\n          things,\n        ),\n      )[0],\n    );\n  };\n\n  const onGenerateDemoGames = () => {\n    let demos: any = null;\n    try {\n      demos = buildDailyTeoriaDeConjuntosGames(\n        25,\n        {\n          latestDate: '2023/01/01',\n          latestNumber: 0,\n          used: [],\n        },\n        rules,\n        things,\n      );\n\n      console.log(demos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>Game Simulator</Typography.Title>\n\n      <Button size=\"large\" onClick={onSimulate}>\n        Simulate\n      </Button>\n\n      <Button size=\"large\" onClick={onGenerateDemoGames}>\n        Generate Demos (log)\n      </Button>\n\n      {simulation && <DiagramGameSample game={simulation} key={JSON.stringify(simulation)} />}\n    </Space>\n  );\n}\n","import type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { type ReactNode, useEffect, useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\nimport { SYLLABLE_SEPARATOR } from './utils';\n\ntype ItemUpdateGuardProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  rules: Dictionary<DailyDiagramRule>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  children: ReactNode;\n};\n\nexport function ItemUpdateGuard({ children, things, rules, addEntryToUpdate }: ItemUpdateGuardProps) {\n  // If any rules has been added or updated AFTER the last time the user has updated the item, the user will be warned to update the item\n  const toUpdateThings = useMemo(() => {\n    return Object.values(things).filter((item) => {\n      // Prevent updating items that have the syllables field but it's not correct\n      if (\n        item.syllables &&\n        item.syllables.split(SYLLABLE_SEPARATOR).join('') !== item.name.replace(/\\s/g, '')\n      ) {\n        console.log('❗️ Name and syllables do not match', item.name, item.syllables);\n        return true;\n      }\n\n      const outdatedRules = Object.values(rules).filter((rule) => rule.updatedAt > item.updatedAt);\n\n      const autoUpdates = outdatedRules.filter((rule) => rule.method === 'auto');\n      if (autoUpdates.length > 0) {\n        console.log(\n          '❗️ Thing has auto updates that will be performed automatically upon downloading the JSON',\n        );\n      }\n\n      return outdatedRules.some((rule) => rule.method !== 'auto');\n    });\n  }, [things, rules]);\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  useEffect(() => {\n    const updateThings = async (_: DailyDiagramItem) => {\n      console.log('Found things that need to update...');\n      setActiveThing(null);\n\n      // Await the wait function here\n      await wait(250);\n\n      if (toUpdateThings.length > 0) {\n        setActiveThing(toUpdateThings[0]);\n      }\n    };\n\n    console.count('Checking for things that need to update...');\n    if (toUpdateThings.length > 0) {\n      updateThings(toUpdateThings[0]);\n    }\n  }, [toUpdateThings]);\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <>\n      {activeThing && (\n        <EditThingModal\n          subtitle={`(${toUpdateThings.length} left to update)`}\n          isModalOpen={activeThing !== null}\n          onSaveThing={onUpdateThing}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          okButtonText=\"Update\"\n          width=\"90vw\"\n        />\n      )}\n      {children}\n    </>\n  );\n}\n","import { App, Button } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { sample } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\n\ntype AddNewThingFlowProps = {\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  width: number;\n};\n\nexport function AddNewThingFlow({ addEntryToUpdate, availableThings, rules, width }: AddNewThingFlowProps) {\n  const { notification } = App.useApp();\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  const onActivateThing = () => {\n    const randomItem = sample(availableThings);\n    if (randomItem) {\n      setActiveThing({\n        itemId: randomItem.id,\n        name: chooseNameThatIsASingleWord(randomItem),\n        updatedAt: Date.now(),\n        syllables: '',\n        stressedSyllable: 0,\n        rules: [],\n      });\n    } else {\n      setActiveThing(null);\n    }\n  };\n\n  const aliases = useMemo(() => {\n    if (!activeThing) return [];\n    const item = availableThings.find((thing) => thing.id === activeThing.itemId);\n    return [item?.name.pt, ...(item?.aliasesPt ?? [])].filter(Boolean);\n  }, [activeThing, availableThings]);\n\n  const onAddItem = async (newThing: DailyDiagramItem) => {\n    if (!activeThing) return;\n    if (!newThing.name || !newThing.itemId) {\n      notification.error({ message: 'Name and Item ID are required' });\n    }\n\n    addEntryToUpdate(newThing.itemId, newThing);\n\n    console.log('COMPLETED SAVE');\n\n    setActiveThing(null);\n\n    await wait(250);\n\n    onActivateThing();\n  };\n\n  const onGiveAnotherThing = async () => {\n    setActiveThing(null);\n    await wait(100);\n    onActivateThing();\n  };\n\n  return (\n    <>\n      <Button size=\"large\" onClick={onActivateThing}>\n        Classify New Item\n      </Button>\n      {!!activeThing && (\n        <EditThingModal\n          isModalOpen={activeThing !== null}\n          onSaveThing={onAddItem}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          width={width * 0.9}\n          itemAliases={aliases as string[]}\n          onGiveAnotherThing={onGiveAnotherThing}\n        />\n      )}\n    </>\n  );\n}\n\nconst chooseNameThatIsASingleWord = (item: ItemT) => {\n  if (item.name.pt.split(' ').length === 1) return item.name.pt;\n\n  if (item.aliasesPt) {\n    return item.aliasesPt.find((alias) => alias.split(' ').length === 1) ?? item.name.pt;\n  }\n  return item.name.pt;\n};\n","import { Divider, Flex, Space, Table, type TableColumnsType, Tag, Tooltip, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useMemo } from 'react';\nimport { useMeasure } from 'react-use';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\n\ntype RulesByThingProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n};\n\nexport function RulesByThing({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  setActiveThing,\n}: RulesByThingProps) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const rows = useMemo(() => Object.values(things), [things]);\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableColumnsType<DailyDiagramItem> = [\n    {\n      title: 'ItemId',\n      dataIndex: 'itemId',\n      key: 'itemId',\n      sorter: (a, b) => Number(a.itemId) - Number(b.itemId),\n      render: (itemId: string) => <Tag>{itemId}</Tag>,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (name: string) => <Typography.Text>{name}</Typography.Text>,\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'itemId',\n      key: 'sprite',\n      render: (itemId: string) => (\n        <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n      ),\n    },\n    {\n      title: 'Rules',\n      dataIndex: 'rules',\n      key: 'rules',\n      render: (itemRules: string[], record) => (\n        <Space wrap>\n          {itemRules.map((ruleId) => (\n            <Tooltip title={rules[ruleId].title} key={ruleId}>\n              <Tag color={rules[ruleId].updatedAt > record.updatedAt ? 'red' : undefined}>{ruleId}</Tag>\n            </Tooltip>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'rules',\n      key: 'count',\n      sorter: (a, b) => a.rules.length - b.rules.length,\n      render: (rules: string[]) => rules.length,\n    },\n  ];\n\n  const duplicatedThings = useMemo(() => {\n    const dict: Dictionary<string[]> = {};\n\n    Object.values(things).forEach((item) => {\n      if (!dict[item.name]) {\n        dict[item.name] = [];\n      }\n      dict[item.name].push(item.itemId);\n    });\n    return Object.values(dict).filter((ids) => ids.length > 1);\n  }, [things]);\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>\n        Rules By Items <Divider type=\"vertical\" /> Added: <Tag>{Object.keys(things).length}</Tag> Available to\n        add <Tag>{availableThings.length}</Tag>\n      </Typography.Title>\n\n      <AddNewThingFlow\n        addEntryToUpdate={addEntryToUpdate}\n        availableThings={availableThings}\n        rules={rules}\n        width={containerWidth}\n      />\n\n      <Divider />\n\n      <Table dataSource={rows} columns={columns} rowKey=\"itemId\" pagination={paginationProps} />\n\n      <Divider />\n\n      <Typography.Title level={5}>Duplicated Things</Typography.Title>\n      <Space wrap>\n        {duplicatedThings.length === 0 && <Typography.Text>No duplicated things</Typography.Text>}\n        {duplicatedThings.map((ids) => (\n          <Flex key={ids[0]} align=\"center\">\n            <Tag color=\"red\">{ids.length}</Tag>\n            {ids.map((itemId) => (\n              <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n            ))}\n          </Flex>\n        ))}\n      </Space>\n    </Space>\n  );\n}\n","import { Divider, Rate, Space, Switch, Table, type TableColumnsType, Tag, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMemo } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\n\ntype ThingsByRuleProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n  containerWidth: number;\n};\n\nexport function ThingsByRule({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  thingsByRules,\n  setActiveThing,\n  containerWidth,\n}: ThingsByRuleProps) {\n  const { is, addParam } = useQueryParams();\n\n  const rows = useMemo(\n    () =>\n      Object.values(rules).map((r) => ({\n        ...r,\n        thingsCount: thingsByRules[r.id].length,\n      })),\n    [rules, thingsByRules],\n  );\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const stats = useMemo(() => {\n    const quantities = Object.values(thingsByRules).map((things) => things.length);\n\n    return {\n      maxThings: Math.max(...quantities),\n      minThings: Math.min(...quantities),\n      averageThings: Math.round(\n        Object.values(thingsByRules).reduce((sum, things) => sum + things.length, 0) /\n          Object.keys(thingsByRules).length,\n      ),\n    };\n  }, [thingsByRules]);\n\n  const columns: TableColumnsType<DailyDiagramRule & { thingsCount: number }> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => Number(a.id.split('-')[1]) - Number(b.id.split('-')[1]),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Rule',\n      dataIndex: 'title',\n      key: 'title',\n      sorter: (a, b) => a.title.localeCompare(b.title),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n    },\n    {\n      title: 'Method',\n      dataIndex: 'method',\n      key: 'method',\n      sorter: (a, b) => a.method.localeCompare(b.method),\n    },\n    {\n      title: 'Things',\n      dataIndex: 'thingsCount',\n      key: 'thingsCount',\n      render: (thingsCount: number, record) => (\n        <Space size=\"small\">\n          <Tag>{thingsCount}</Tag>\n          {is('showThings') ? (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 20).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 20 && (\n                <Typography.Text>+{thingsCount - 20} more</Typography.Text>\n              )}\n            </Space>\n          ) : (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 5).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 5 && (\n                <Typography.Text>+{thingsCount - 5} more</Typography.Text>\n              )}\n            </Space>\n          )}\n        </Space>\n      ),\n      sorter: (a, b) => a.thingsCount - b.thingsCount,\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      sorter: (a, b) => a.level - b.level,\n      render: (level: number) => <Rate value={level} count={3} disabled />,\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={4}>\n        Things By Rule (Added: {Object.keys(things).length} | {availableThings.length}){' '}\n      </Typography.Title>\n\n      <Space split={<Divider type=\"vertical\" />} wrap>\n        <AddNewThingFlow\n          addEntryToUpdate={addEntryToUpdate}\n          availableThings={availableThings}\n          rules={rules}\n          width={containerWidth}\n        />\n\n        <Typography.Text strong>\n          Average Things: <Tag>{stats.averageThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Max Things: <Tag>{stats.maxThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Min Things: <Tag>{stats.minThings}</Tag>\n        </Typography.Text>\n\n        <Switch\n          checked={is('showThings')}\n          onChange={(e) => addParam('showThings', e)}\n          checkedChildren=\"Hide things\"\n          unCheckedChildren=\"Show things\"\n        />\n      </Space>\n\n      <Table dataSource={rows} columns={columns} pagination={paginationProps} />\n    </Space>\n  );\n}\n","import { Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { orderBy } from 'lodash';\nimport { useMeasure } from 'react-use';\nimport { EditThingModal } from './EditThingModal';\nimport { GameSimulator } from './GameSimulator';\nimport { ItemUpdateGuard } from './ItemUpdateGuard';\nimport { RulesByThing } from './RulesByThing';\nimport { ThingsByRule } from './ThingsByRule';\n\nexport function ItemsDiagramSetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const tdrItemsQuery = useTDResource<ItemT>('items');\n  const tdrDiagramRulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules');\n\n  const availableThings = useMemo(() => {\n    return Object.values(tdrItemsQuery.data ?? {}).filter((item) => {\n      if (data && data[item.id] !== undefined) return false;\n      if (item.nsfw) return false;\n      const isNameSingleWord = item.name.pt.split(' ').length === 1;\n\n      if (item.decks?.includes('thing')) return true;\n      if (item.decks?.includes('alien') && isNameSingleWord) return true;\n      if (item.decks?.includes('manufactured') && isNameSingleWord) return true;\n\n      return false;\n    });\n  }, [data, tdrItemsQuery.data]);\n\n  const rules = useMemo(() => {\n    return tdrDiagramRulesQuery.data ?? {};\n  }, [tdrDiagramRulesQuery.data]);\n\n  const thingsByRules = useMemo(() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    orderBy(Object.values(data), ['updatedAt'], ['desc']).forEach((entry) => {\n      entry.rules.forEach((ruleId) => {\n        dict[ruleId].push(entry.itemId);\n      });\n    });\n    return dict;\n  }, [data, rules]);\n\n  const { is, queryParams } = useQueryParams();\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  if (tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading) {\n    return <Typography.Text>Loading...</Typography.Text>;\n  }\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading}\n      hasResponseData={tdrItemsQuery.hasResponseData || tdrDiagramRulesQuery.hasResponseData}\n    >\n      <div ref={ref}>\n        <ItemUpdateGuard things={data} rules={rules} addEntryToUpdate={addEntryToUpdate}>\n          {activeThing && (\n            <EditThingModal\n              isModalOpen={activeThing !== null}\n              onSaveThing={(at) => {\n                onUpdateThing(at);\n                setActiveThing(null);\n              }}\n              onCancel={() => setActiveThing(null)}\n              thing={activeThing}\n              rules={rules}\n              okButtonText=\"Update\"\n              width={containerWidth}\n            />\n          )}\n\n          {(is('display', 'rule') || !queryParams.has('display')) && (\n            <ThingsByRule\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n              containerWidth={containerWidth}\n            />\n          )}\n\n          {is('display', 'thing') && (\n            <RulesByThing\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n            />\n          )}\n\n          {is('display', 'simulator') && (\n            <GameSimulator\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n            />\n          )}\n        </ItemUpdateGuard>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsDiagramFilters } from 'components/Items/Diagram/ItemsDiagramFilters';\nimport { ItemsDiagramSetsContent } from 'components/Items/Diagram/ItemsDiagramSetsContent';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { DailyDiagramItem } from 'types';\n\nexport function ItemsDiagramSets() {\n  const diagramData = useResourceFirebaseData<DailyDiagramItem>({\n    tdrResourceName: 'daily-diagram-items',\n    firebaseDataCollectionName: 'diagramItems',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Diagram Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsDiagramFilters {...diagramData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={diagramData.isLoading || diagramData.isSaving}\n            error={diagramData.error}\n            hasResponseData={!isEmpty(diagramData.data)}\n          >\n            <Flex vertical gap={24}>\n              <ItemsDiagramSetsContent {...diagramData} />\n            </Flex>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsDiagramSets;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","undefined","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","error","description","data","useMemo","isSuccess","isPending","cloneDeep","isEmpty","firebaseData","isLoading","save","mutate","serializeFirebaseData","addEntryToUpdate","id","item","prev","entriesToUpdate","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","queryParams","addParam","useQueryParams","current","Number","get","String","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","path","docId","docRef","doc","firestore","updateDoc","options","useMutation","mutationFn","async","ItemsDiagramFilters","addParams","tdrDiagramRulesQuery","vertical","gap","JSON","stringify","DownloadButton","diagramItems","rules","copy","Object","values","forEach","outdatedRules","filter","rule","updatedAt","autoUpdates","method","length","name","ruleId","map","includes","verifiers","push","sort","some","sortJsonKeys","prepareFileForDownload","fileName","label","value","mode","display","title","ClusterOutlined","TableOutlined","className","EditThingModal","isModalOpen","onSaveThing","onCancel","thing","width","itemAliases","subtitle","okButtonText","onGiveAnotherThing","orderedRules","orderBy","r","index","indexOf","POSITIVE_INFINITY","slice","split","form","Form","hasUndefinedValues","nameWatch","syllables","fields","separateSyllables","stressedSyllable","keys","setFieldsValue","isAcronym","getFieldValue","syllableRulesUpdate","reduce","acc","syllableDependencyVerifier","stressSyllableRulesUpdate","stressSyllableDependencyVerifier","rule1","rule2","rule5","rule3","rule4","splitSyllables","SYLLABLE_SEPARATOR","open","onOk","submit","maskClosable","okButtonProps","htmlType","okText","itemId","onFinish","preparedThing","serializeThing","autoComplete","initialValues","deserializeThing","layout","labelWrap","readOnly","optionType","buttonStyle","syllable","toLocaleString","join","offsetTop","justify","align","valuePropName","clsx","checkedChildren","unCheckedChildren","wasAnyRuleUpdated","reVerify","thingRules","key","Thing","code","ThingButton","onActivateThing","DiagramGameSample","game","leftRing","rightRing","intersection","intersectingThing","playerOptions","things","selectedThing","setSelectedThing","direction","level","count","style","maxWidth","VennDiagram","leftCircleChildren","height","arr","rightCircleChildren","intersectionChildren","outline","items","children","strong","text","props","xmlns","viewBox","fill","stroke","strokeMiterlimit","strokeWidth","d","x","y","GameSimulator","ref","useMeasure","simulation","setSimulation","buildDailyTeoriaDeConjuntosGames","latestDate","latestNumber","used","demos","ItemUpdateGuard","toUpdateThings","replace","activeThing","setActiveThing","wait","updateThings","newThing","AddNewThingFlow","availableThings","randomItem","sample","chooseNameThatIsASingleWord","aliases","find","pt","aliasesPt","Boolean","alias","RulesByThing","containerWidth","rows","paginationProps","columns","dataIndex","sorter","a","b","render","localeCompare","itemRules","record","wrap","color","duplicatedThings","dict","ids","dataSource","rowKey","pagination","ThingsByRule","thingsByRules","is","thingsCount","stats","quantities","maxThings","Math","max","minThings","min","averageThings","round","sum","checked","e","ItemsDiagramSetsContent","tdrItemsQuery","nsfw","isNameSingleWord","decks","entry","DataLoadingWrapper","hasResponseData","at","has","ItemsDiagramSets","diagramData","hasSider","PageSider"],"sourceRoot":""}