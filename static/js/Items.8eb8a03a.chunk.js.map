{"version":3,"file":"static/js/Items.8eb8a03a.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Items/ItemsTypeahead.tsx","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","hooks/useUpdateFirebaseDoc.tsx","context/ItemsContext.tsx","hooks/useItemsData.ts","components/Items/ItemCard.tsx","hooks/useItemUpdate.ts","components/Items/ItemListing.tsx","hooks/useItemsPagination.tsx","components/Items/AddNewItem.tsx","components/Items/ItemListingFilters.tsx","components/Items/ItemSearch.tsx","pages/Images/Items.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      Download JSON\n    </Button>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items: Dictionary<Item>;\n  isPending: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items).reduce((acc: Dictionary<string>, entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n      acc[nameEn] = entry.id;\n      acc[namePt] = entry.id;\n\n      return acc;\n    }, {});\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n\n  const handleSearch = (searchText: string) => {\n    setFilteredOptions(\n      options.filter(\n        (option) =>\n          String(option?.value ?? '')\n            .toUpperCase()\n            .indexOf(searchText?.toUpperCase()) !== -1\n      )\n    );\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={options}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={handleSearch}\n      notFoundContent=\"No items found\"\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: UseQueryOptions<any, Error, TData, QueryKey>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? {},\n    hasResponseData,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { useItemsData } from 'hooks/useItemsData';\nimport { orderBy } from 'lodash';\nimport { ReactNode, useContext, createContext, useMemo, useState } from 'react';\nimport { Item } from 'types';\n\nexport type ItemsContextType = {\n  items: Dictionary<Item>;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  groupsDict: Dictionary<string>;\n  groups: { value: string }[];\n  listing: Item[];\n  isDirty: boolean;\n  addItemToUpdate: (id: string, item: Item) => void;\n  itemsToUpdate: Dictionary<Item>;\n  isSaving: boolean;\n  save: () => void;\n  newId: string;\n  listingType: string;\n  setListingType: (type: string) => void;\n};\n\nconst ItemsContext = createContext<ItemsContextType>({\n  items: {},\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  groupsDict: {},\n  groups: [],\n  listing: [],\n  isDirty: false,\n  addItemToUpdate: () => {},\n  itemsToUpdate: {},\n  isSaving: false,\n  save: () => {},\n  newId: '-1',\n  listingType: 'all',\n  setListingType: () => {},\n});\n\ntype ItemsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsProvider = ({ children }: ItemsProviderProps) => {\n  const { items, isLoading, error, isSaving, save, addItemToUpdate, itemsToUpdate, isDirty } = useItemsData();\n\n  const { groupsDict, groups } = useMemo(() => {\n    console.log('Recomputing item groups typeahead...');\n    const groupsDict: Dictionary<string> = {};\n    const duplicationCheckEn: Dictionary<string> = {};\n    const duplicationCheckPt: Dictionary<string> = {};\n    const duplicatedNames: string[][] = [];\n\n    Object.values(items).forEach((entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n\n      if (duplicationCheckEn[entry.name.en]) {\n        duplicatedNames.push([`${entry.name.en} (${duplicationCheckEn[entry.name.en]})`, nameEn]);\n      } else {\n        duplicationCheckEn[entry.name.en] = entry.id;\n      }\n      if (duplicationCheckPt[entry.name.pt]) {\n        duplicatedNames.push([`${entry.name.pt} (${duplicationCheckPt[entry.name.pt]})`, namePt]);\n      } else {\n        duplicationCheckPt[entry.name.pt] = entry.id;\n      }\n\n      entry?.groups?.forEach((group) => {\n        groupsDict[group] = group;\n      });\n    });\n\n    const groups = Object.keys(groupsDict).map((name) => ({ value: name }));\n\n    if (duplicatedNames.length > 0) {\n      console.warn('Possible duplicated items', duplicatedNames);\n    }\n\n    return { groupsDict, groups };\n  }, [items, isSaving, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [listingType, setListingType] = useState('all');\n  const listing = useMemo(() => {\n    const orderedList = orderBy(Object.values(items), [(item) => Number(item.id)], 'asc');\n\n    switch (listingType) {\n      case 'all':\n        return orderedList;\n      case '!all':\n        return orderedList.filter((item) => !item?.groups?.length ?? true);\n      case 'nsfw':\n        return orderedList.filter((item) => item.nsfw);\n      case '!nsfw':\n        return orderedList.filter((item) => !item.nsfw);\n      default:\n        if (listingType.startsWith('!')) {\n          return orderedList.filter((item) => !item?.groups?.includes(listingType.slice(1)));\n        }\n        return orderedList.filter((item) => item?.groups?.includes(listingType));\n    }\n  }, [items, listingType]);\n\n  // Handle id for new items\n  const newId = useMemo(() => {\n    const newIds = orderBy(Object.keys(itemsToUpdate), [(id) => Number(id)], 'asc');\n    const latestSavedId = listing[listing.length - 1]?.id;\n    const newestId = orderBy([...newIds, latestSavedId], [(id) => Number(id)], 'desc')[0];\n    return String(Number(newestId) + 1);\n  }, [listing, itemsToUpdate]);\n\n  return (\n    <ItemsContext.Provider\n      value={{\n        items,\n        listing,\n        isLoading,\n        error,\n        groupsDict,\n        groups,\n        hasResponseData: listing.length > 0,\n        isDirty,\n        addItemToUpdate,\n        isSaving,\n        save,\n        itemsToUpdate,\n        newId,\n        listingType,\n        setListingType,\n      }}\n    >\n      {children}\n    </ItemsContext.Provider>\n  );\n};\n\nexport const useItemsContext = () => useContext(ItemsContext);\n","import { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item } from 'types';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { App } from 'antd';\n\nexport function useItemsData() {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const firebaseItemsQuery = useGetFirebaseDoc<Dictionary<Item>>('data', 'items');\n\n  // Keeps track of items that have been modified\n  const [modifiedItems, setModifiedItems] = useState<Dictionary<Item>>({});\n\n  const mutation = useUpdateFirebaseDoc('data', 'items', {\n    onSuccess: () => {\n      notification.success({\n        message: 'Item updated',\n      });\n      queryClient.refetchQueries(['firebase', 'data', 'items']);\n      setModifiedItems({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'Item update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const items = useMemo(() => {\n    if (tdrItemsQuery.isLoading || firebaseItemsQuery.isLoading || mutation.isLoading) return {};\n    console.log('%cMerging items data...', 'color: #f0f');\n    return cloneDeep({ ...(tdrItemsQuery.data ?? {}), ...(firebaseItemsQuery.data ?? {}), ...modifiedItems });\n  }, [\n    tdrItemsQuery.data,\n    firebaseItemsQuery.data,\n    tdrItemsQuery.isLoading,\n    firebaseItemsQuery.isLoading,\n    mutation.isLoading,\n    modifiedItems,\n  ]);\n\n  const isDirty = !isEmpty(modifiedItems);\n  const addItemToUpdate = (id: string, item: Item) => {\n    setModifiedItems((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseItemsQuery.data;\n\n  const save = () => {\n    mutation.mutate({ ...firebaseData, ...modifiedItems });\n  };\n\n  return {\n    items,\n    isLoading: tdrItemsQuery.isLoading || firebaseItemsQuery.isLoading,\n    error: tdrItemsQuery.error || firebaseItemsQuery.error,\n    firebaseData,\n    isSaving: mutation.isLoading,\n    save,\n    addItemToUpdate,\n    itemsToUpdate: modifiedItems,\n    isDirty,\n  };\n}\n","import { Card, Form, Input, Select, Space, Switch, Typography } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { EditOutlined, FireFilled, RollbackOutlined, SaveOutlined } from '@ant-design/icons';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useItemUpdate } from 'hooks/useItemUpdate';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemCardProps = {\n  item: ItemT;\n  editMode?: boolean;\n};\n\nexport function ItemCard({ item, editMode = false }: ItemCardProps) {\n  const { groups } = useItemsContext();\n  const { isEditing, toggleEditMode, onEdit, isDirty, onModify, onReset, editableItem } = useItemUpdate(\n    item,\n    editMode\n  );\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Card\n      title={<Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>}\n      style={{ maxWidth: 300 }}\n      actions={\n        isDirty\n          ? [\n              <RollbackOutlined key=\"reset\" onClick={onReset} />,\n              <SaveOutlined key=\"save\" onClick={onModify} />,\n            ]\n          : [<EditOutlined key=\"edit\" onClick={toggleEditMode} />]\n      }\n    >\n      <Item id={item.id} width={124} title={`${item.name.en} | ${item.name.pt}`} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <Input\n          prefix={<LanguageFlag language=\"en\" width=\"1em\" />}\n          placeholder=\"Name in EN\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.en}\n          readOnly={!isEditing}\n          key={`en-${item.name.en}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, en: e.target.value } })}\n        />\n\n        <Input\n          prefix={<LanguageFlag language=\"pt\" width=\"1em\" />}\n          placeholder=\"Name in PT\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.pt}\n          readOnly={!isEditing}\n          key={`pt-${item.name.pt}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, pt: e.target.value } })}\n        />\n\n        <div>\n          <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select groups\"\n            defaultValue={item.groups}\n            disabled={!isEditing}\n            options={groups}\n            variant={isEditing ? 'outlined' : 'borderless'}\n            size=\"small\"\n            key={String(item.groups)}\n            onChange={(value) => onEdit({ groups: value.sort() })}\n          />\n        </div>\n\n        {(isEditing || item.nsfw) && (\n          <div>\n            <Form.Item label=\"nsfw\" valuePropName=\"checked\">\n              <Switch\n                checked={item.nsfw}\n                onChange={(checked) => onEdit({ nsfw: checked })}\n                size=\"small\"\n                checkedChildren={<FireFilled style={{ color: 'hotpink' }} />}\n                disabled={!isEditing}\n              />\n            </Form.Item>\n          </div>\n        )}\n      </Space>\n    </Card>\n  );\n}\n","import { cloneDeep } from 'lodash';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\nimport { useItemsContext } from 'context/ItemsContext';\n\nexport function useItemUpdate(currentItem: ItemT, editMode = false) {\n  const { addItemToUpdate, itemsToUpdate } = useItemsContext();\n  const [isEditing, setEditing] = useState(editMode);\n  const [editableItem, setEditableItem] = useState<ItemT>(cloneDeep(currentItem));\n  const originalItem = itemsToUpdate[currentItem.id] ?? currentItem;\n\n  const onEdit = (change: Partial<ItemT>) => {\n    const newItem = { ...cloneDeep(editableItem), ...change };\n    if (Object.keys(change).includes('nsfw') && change.nsfw === false) {\n      delete newItem.nsfw;\n    }\n    setEditableItem(newItem);\n  };\n\n  const onModify = async () => {\n    addItemToUpdate(editableItem.id, editableItem);\n  };\n\n  const onReset = () => {\n    setEditableItem(cloneDeep(currentItem));\n    setEditing(false);\n  };\n\n  const isDirty = JSON.stringify(originalItem) !== JSON.stringify(editableItem);\n\n  return {\n    isEditing,\n    toggleEditMode: () => setEditing((e) => !e),\n    editableItem,\n    onEdit,\n    isDirty,\n    onModify,\n    onReset,\n  };\n}\n","import { Col, Pagination, Row, Typography } from 'antd';\nimport { useItemsPagination } from 'hooks/useItemsPagination';\n\nimport { ItemCard } from './ItemCard';\nimport { capitalize } from 'lodash';\n\nexport function ItemListing() {\n  const { page, currentPage, onChange, total, pageSize, onPageSizeChange, listingType } =\n    useItemsPagination();\n\n  const pagination = (\n    <Pagination\n      onChange={onChange}\n      current={currentPage}\n      total={total}\n      pageSizeOptions={[16, 32, 64, 128]}\n      pageSize={pageSize}\n      onShowSizeChange={onPageSizeChange}\n      className=\"fixed-pagination\"\n    />\n  );\n\n  return (\n    <>\n      <Typography.Title level={2}>\n        Listing - {capitalize(listingType)} items ({total})\n      </Typography.Title>\n\n      {pagination}\n\n      <Row gutter={[16, 16]} className=\"my-4\">\n        {page.map((item) => (\n          <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n            <ItemCard item={item} />\n          </Col>\n        ))}\n      </Row>\n\n      {pagination}\n    </>\n  );\n}\n","import { useItemsContext } from 'context/ItemsContext';\nimport { useEffect, useMemo, useState } from 'react';\n\nexport function useItemsPagination() {\n  const { listing, listingType } = useItemsContext();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(64);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return listing.slice(start, end);\n  }, [currentPage, listing, pageSize]);\n\n  const onChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const onPageSizeChange = (_: number, size: number) => {\n    setPageSize(size);\n  };\n\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [listingType]);\n\n  return {\n    currentPage,\n    page,\n    total: listing.length,\n    onChange,\n    pageSize,\n    onPageSizeChange,\n    listingType,\n  };\n}\n","import { Button, Modal } from 'antd';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useState } from 'react';\nimport { ItemCard } from './ItemCard';\nimport { cloneDeep } from 'lodash';\n\nconst PLACEHOLDER_ITEM = {\n  id: '',\n  name: {\n    en: '',\n    pt: '',\n  },\n  groups: [],\n};\n\ntype NewItemModalProps = {\n  isModalOpen: boolean;\n  handleOk: () => void;\n  handleCancel: () => void;\n  newId: string;\n};\n\nfunction NewItemModal({ isModalOpen, handleOk, handleCancel, newId }: NewItemModalProps) {\n  const [newItem] = useState(cloneDeep({ ...PLACEHOLDER_ITEM, id: newId }));\n  return (\n    <Modal title=\"Add new item\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n      <ItemCard item={newItem} editMode />\n    </Modal>\n  );\n}\n\nexport function AddNewItem() {\n  const [isModalOpen, setOpenModal] = useState(false);\n\n  const { newId } = useItemsContext();\n\n  const showModal = () => {\n    setOpenModal(true);\n  };\n\n  const handleOk = () => {\n    setOpenModal(false);\n  };\n\n  const handleCancel = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <Button block onClick={showModal}>\n        Add New Item\n      </Button>\n      {isModalOpen && (\n        <NewItemModal\n          isModalOpen={isModalOpen}\n          handleOk={handleOk}\n          handleCancel={handleCancel}\n          newId={newId}\n          key={newId}\n        />\n      )}\n    </>\n  );\n}\n","import { Button, Divider, Flex } from 'antd';\nimport { FilterSelect, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { capitalize, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { AddNewItem } from './AddNewItem';\nimport { Item } from 'types';\nimport { sortJsonKeys } from 'utils';\n\ntype ItemListingFiltersProps = {\n  showSearch: boolean;\n  toggleSearch: () => void;\n};\nexport function ItemListingFilters({ showSearch, toggleSearch }: ItemListingFiltersProps) {\n  const { isDirty, save, items, listingType, setListingType, groups } = useItemsContext();\n\n  const groupOptions = useMemo(() => {\n    const includingOptions = orderBy(\n      groups.map(({ value }) => ({ label: capitalize(value), value })),\n      'label'\n    );\n    const excludingOptions = includingOptions.map(({ label, value }) => ({\n      label: `NOT ${label}`,\n      value: `!${value}`,\n    }));\n    return [...includingOptions, ...excludingOptions];\n  }, [groups]);\n  return (\n    <SiderContent>\n      <Flex vertical gap={6}>\n        <Button block danger type=\"primary\" disabled={!isDirty} onClick={save} size=\"large\">\n          Save\n        </Button>\n        <DownloadButton\n          data={() => prepareFileForDownload(items)}\n          fileName=\"items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSwitch label=\"Show Search\" value={showSearch} onChange={toggleSearch} />\n\n      <FilterSelect\n        label=\"Group\"\n        value={listingType}\n        onChange={(value) => setListingType(value)}\n        options={[\n          { label: 'All', value: 'all' },\n          { label: 'NSFW', value: 'nsfw' },\n          { label: 'SFW', value: '!nsfw' },\n          ...groupOptions,\n          { label: 'No groups', value: '!all' },\n        ]}\n      />\n\n      <Divider />\n\n      <AddNewItem />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(items: Dictionary<Item>) {\n  return sortJsonKeys(\n    Object.values(items).reduce((acc: Dictionary<Item>, item) => {\n      // Sort groups\n      item.groups = (item?.groups ?? []).sort();\n\n      // Remove groups if no group is present\n      if (item.groups.length === 0) {\n        delete item.groups;\n\n        acc[item.id] = item;\n        return acc;\n      }\n\n      // Remove thing from group if either evidence, dream, alien, or mesmice is present and both pt and en names are single words\n      if (\n        item.groups.includes('thing') &&\n        item.name.en.split(' ').length === 1 &&\n        item.name.pt.split(' ').length === 1\n      ) {\n        if (\n          item.groups.includes('evidence') ||\n          item.groups.includes('dream') ||\n          item.groups.includes('alien') ||\n          item.groups.includes('mesmice')\n        ) {\n          item.groups = item.groups.filter((group) => group !== 'thing');\n        }\n\n        acc[item.id] = item;\n      }\n\n      acc[item.id] = item;\n\n      return acc;\n    }, {})\n  );\n}\n","import { Divider, Space, Typography } from 'antd';\nimport { Fragment, useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nexport function ItemSearch() {\n  const { items, isLoading, isSaving } = useItemsContext();\n  const [activeItem, setActiveItem] = useState<ItemT | null>(null);\n\n  return (\n    <Fragment key={`item-search-${isLoading}`}>\n      <Typography.Title level={2}>Search for an item</Typography.Title>\n\n      <div>\n        <ItemsTypeahead\n          items={items}\n          isPending={isLoading || isSaving}\n          onFinish={(id) => setActiveItem(items[id])}\n        />\n      </div>\n\n      {Boolean(activeItem) && (\n        <Space direction=\"vertical\" className=\"my-4\" key={activeItem?.id}>\n          <ItemCard item={activeItem!} />\n        </Space>\n      )}\n      <Divider />\n    </Fragment>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemListing } from 'components/Items/ItemListing';\nimport { ItemListingFilters } from 'components/Items/ItemListingFilters';\nimport { ItemSearch } from 'components/Items/ItemSearch';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ItemsProvider, useItemsContext } from 'context/ItemsContext';\nimport { useState } from 'react';\n\nfunction ItemsPage() {\n  const { isLoading, error, hasResponseData } = useItemsContext();\n  const [showSearch, setShowSearch] = useState(true);\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Listing\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemListingFilters showSearch={showSearch} toggleSearch={() => setShowSearch((p) => !p)} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            {showSearch && !isLoading && <ItemSearch />}\n            <ItemListing />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction Items() {\n  return (\n    <ItemsProvider>\n      <ItemsPage />\n    </ItemsProvider>\n  );\n}\n\nexport default Items;\n"],"names":["DownloadButton","data","fileName","loading","props","onClick","downloadObjectAsFile","ItemsTypeahead","items","isPending","style","size","placeholder","allowClear","onFinish","rest","namesDict","options","useMemo","console","log","Object","values","reduce","acc","entry","nameEn","name","en","id","namePt","pt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","width","filterOption","inputValue","option","String","toUpperCase","indexOf","onSearch","searchText","filter","notFoundContent","onSelect","key","undefined","onPressEnter","length","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useTDResource","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","hasResponseData","isEmpty","updateQueryFunction","updateDoc","useUpdateFirebaseDoc","useMutation","mutationFn","ItemsContext","createContext","isLoading","error","groupsDict","groups","listing","isDirty","addItemToUpdate","itemsToUpdate","isSaving","save","newId","listingType","setListingType","ItemsProvider","children","notification","App","queryClient","useQueryClient","tdrItemsQuery","firebaseItemsQuery","modifiedItems","setModifiedItems","mutation","onSuccess","success","message","refetchQueries","onError","description","cloneDeep","firebaseData","mutate","item","prev","useItemsData","duplicationCheckEn","duplicationCheckPt","duplicatedNames","forEach","push","group","warn","orderedList","Number","nsfw","startsWith","includes","slice","newIds","latestSavedId","newestId","Provider","useItemsContext","useContext","ItemCard","editMode","isEditing","toggleEditMode","onEdit","onModify","onReset","editableItem","currentItem","setEditing","setEditableItem","originalItem","change","newItem","JSON","stringify","e","useItemUpdate","copyToClipboard","useCopyToClipboardFunction","title","maxWidth","actions","RollbackOutlined","SaveOutlined","EditOutlined","direction","className","prefix","LanguageFlag","language","variant","defaultValue","readOnly","onChange","target","mode","disabled","sort","label","valuePropName","checked","checkedChildren","FireFilled","color","ItemListing","page","currentPage","total","pageSize","onPageSizeChange","setCurrentPage","setPageSize","start","end","useEffect","_","useItemsPagination","pagination","current","pageSizeOptions","onShowSizeChange","level","capitalize","gutter","xs","sm","md","lg","xl","PLACEHOLDER_ITEM","NewItemModal","isModalOpen","handleOk","handleCancel","open","onOk","onCancel","AddNewItem","setOpenModal","block","ItemListingFilters","showSearch","toggleSearch","groupOptions","includingOptions","excludingOptions","vertical","gap","danger","type","sortJsonKeys","split","prepareFileForDownload","ItemSearch","activeItem","setActiveItem","Fragment","Boolean","ItemsPage","setShowSearch","subtitle","hasSider","PageSider","p","DataLoadingWrapper"],"sourceRoot":""}