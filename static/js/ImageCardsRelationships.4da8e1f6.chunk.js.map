{"version":3,"file":"static/js/ImageCardsRelationships.4da8e1f6.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Images/ImageCard.tsx","components/Images/ImageCards/constants.ts","components/Images/ImageCards/hooks.ts","components/Images/ImageCards/ImagesRelationshipsContext.tsx","components/Images/ImageCards/RelationshipsStats.tsx","components/Images/ImageCards/RelationshipCountTag.tsx","components/Images/ImageCards/RelationshipsContent.tsx","components/Images/ImageCards/RelationshipsFilters.tsx","pages/Images/ImageCardsRelationships.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      Download JSON\n    </Button>\n  );\n}\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('tdi');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { ImageCardData } from './types';\n\nexport const TOTAL_DECKS = 10;\n\nexport const CARDS_PER_DECK = 252;\n\nexport const SUGGESTED_MOODS = [\n  'anxious',\n  'bright',\n  'chaotic',\n  'colorful',\n  'confusion',\n  'cozy',\n  'creepy',\n  'dark',\n  'dramatic',\n  'dreamy',\n  'fear',\n  'gloomy',\n  'happy',\n  'intense',\n  'magical',\n  'melancholic',\n  'muted',\n  'mysterious',\n  'professional',\n  'reflective',\n  'scary',\n  'serene',\n  'surreal',\n  'tension',\n  'vibrant',\n  'warm',\n  'whimsical',\n];\n\nexport const SUGGESTED_COLORS = [\n  'beige',\n  'black',\n  'blue',\n  'brown',\n  'colorful',\n  'gray',\n  'green',\n  'mixed',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'white',\n  'yellow',\n];\n\nexport const DEFAULT_ENTRY: ImageCardData = {\n  focus: [],\n  actions: [],\n  colors: [],\n  mood: [],\n  elements: [],\n  highlight: false,\n};\n","import { App } from 'antd';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { cloneDeep, merge, padStart, random } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { firestore, printFirebase } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { UseMutateFunction, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { CARDS_PER_DECK, DEFAULT_ENTRY, TOTAL_DECKS } from './constants';\nimport { FirebaseImageCardLibrary, ImageCardData, ImageCardRelationship } from './types';\nimport { cleanupData } from './utils';\n\nconst getRandomCardNumber = () => padStart(String(random(1, CARDS_PER_DECK)), 2, '0');\n\nconst getRandomDeck = () => random(1, TOTAL_DECKS);\n\nconst getRandomCardId = () => `td-d${getRandomDeck()}-${getRandomCardNumber()}`;\n\nexport type UseRandomCardReturnValue = {\n  cardId: string;\n  deck: number;\n  onRandomCard: () => void;\n  card: ImageCardData;\n  add: (key: keyof ImageCardData, value: string) => void;\n  remove: (key: keyof ImageCardData, value: string) => void;\n  update: (key: keyof ImageCardData, value: string[]) => void;\n  toggleHighlight: () => void;\n};\n\nexport function useRandomCard(\n  cardData: FirebaseImageCardLibrary,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n): UseRandomCardReturnValue {\n  const [deck, setDeck] = useState(getRandomDeck());\n  const [cardNumber, setCardNumber] = useState(getRandomCardNumber());\n  const cardId = `td-d${deck}-${cardNumber}`;\n\n  const onRandomCard = () => {\n    setDeck(getRandomDeck());\n    setCardNumber(getRandomCardNumber());\n  };\n\n  const card = merge(cloneDeep(DEFAULT_ENTRY), cardData?.[cardId] ?? {});\n\n  const add = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      card[key]!.push(value);\n      setDirty(true);\n    }\n  };\n\n  const remove = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      const entry = card[key] ?? [];\n      entry.splice(entry.indexOf(value), 1);\n      setDirty(true);\n    }\n  };\n\n  const update = (key: keyof ImageCardData, value: string[]) => {\n    if (key !== 'highlight') {\n      card[key] = value.map((v) => v.trim().toLowerCase());\n      setDirty(true);\n    }\n  };\n\n  const toggleHighlight = () => {\n    card.highlight = !card.highlight;\n    setDirty(true);\n  };\n\n  useEffect(() => {\n    cardData[cardId] = card;\n  }, [card]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    cardId,\n    deck,\n    onRandomCard,\n    card,\n    add,\n    remove,\n    update,\n    toggleHighlight,\n  };\n}\n\nexport function useImageCardsData() {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCards'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    refetch,\n  } = useQuery<any>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as FirebaseImageCardLibrary;\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      printFirebase('Loaded data/imageCards');\n    }\n  }, [isSuccess]);\n\n  useEffect(() => {\n    if (isError) {\n      notification.error({\n        message: 'Error loading data/imageCards',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, FirebaseImageCardLibrary, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const cleanData = cleanupData(data);\n      await setDoc(docRef, cleanData);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n  };\n}\n\nexport function useRandomCards(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n) {\n  const [deckA, setDeckA] = useState(getRandomDeck());\n  const [cardNumberA, setCardNumberA] = useState(getRandomCardNumber());\n  const [deckB, setDeckB] = useState(getRandomDeck());\n  const [cardNumberB, setCardNumberB] = useState(getRandomCardNumber());\n  const cardAId = `td-d${deckA}-${cardNumberA}`;\n  const cardBId = `td-d${deckB}-${cardNumberB}`;\n  const [unrelatedCount, setUnrelatedCount] = useState(0);\n\n  const cardA = cardData?.[cardAId] ?? [];\n  const cardB = cardData?.[cardBId] ?? [];\n\n  const onRandomCards = () => {\n    setUnrelatedCount(0);\n    setDeckA(getRandomDeck());\n    setCardNumberA(getRandomCardNumber());\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const relate = () => {\n    setUnrelatedCount(0);\n    cardA.push(cardBId);\n    cardData[cardAId] = cardA;\n    cardB.push(cardAId);\n    cardData[cardBId] = cardB;\n    setDirty(true);\n    setDeckA(deckB);\n    setCardNumberA(cardNumberB);\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const unrelate = () => {\n    if (unrelatedCount >= 10) {\n      setUnrelatedCount(0);\n      onRandomCards();\n    } else {\n      setUnrelatedCount((ps) => ps + 1);\n      setDeckB(getRandomDeck());\n      setCardNumberB(getRandomCardNumber());\n    }\n  };\n\n  useEffect(() => {\n    if (cardAId === cardBId) {\n      setCardNumberB(getRandomCardNumber());\n    }\n  }, [cardAId, cardBId]);\n\n  return {\n    cardAId,\n    cardA,\n    cardBId,\n    cardB,\n    relate,\n    unrelate,\n    areRelated: cardA.includes(cardBId),\n    onRandomCards,\n  };\n}\n\ntype Stats = {\n  total: number;\n  overdone: number;\n  complete: number;\n  single: number;\n};\n\nexport type UseImageCardsRelationshipDataReturnValue = {\n  data: ImageCardRelationship;\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  hasData: boolean;\n  refetch: () => void;\n  isSaving: boolean;\n  isMutationError: boolean;\n  isSaved: boolean;\n  save: UseMutateFunction<{}, unknown, ImageCardRelationship, unknown>;\n  setDirty: (value: React.SetStateAction<boolean>) => void;\n  isDirty: boolean;\n  stats: Stats;\n};\n\nexport function useImageCardsRelationshipData(): UseImageCardsRelationshipDataReturnValue {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCardsRelationships'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n  const [stats, setStats] = useState<Stats>({ total: 0, overdone: 0, complete: 0, single: 0 });\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    isFetched,\n    isRefetching,\n    refetch,\n  } = useQuery<Record<string, string[]>>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as ImageCardRelationship;\n    },\n  });\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, ImageCardRelationship, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n\n      await setDoc(docRef, data);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  useEffect(() => {\n    if (!isRefetching && isFetched) {\n      const total = Object.keys(data).length;\n      let overdone = 0;\n      let complete = 0;\n      let single = 0;\n      Object.values(data).forEach((v) => {\n        if (v.length > 8) {\n          overdone += 1;\n        }\n        if (v.length === 1) {\n          single += 1;\n        }\n        if (v.length > 2) {\n          complete += 1;\n        }\n      });\n      setStats({ total, overdone, complete, single });\n    }\n  }, [isFetched, isRefetching]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n    stats,\n  };\n}\n\nexport type UseRandomGroupReturnValue = {\n  cardIds: string[];\n  cards: string[][];\n  selection: string[];\n  onSelect: (id: string) => void;\n  relate: () => void;\n  nextSet: () => void;\n  deselectAll: () => void;\n  cycles: number;\n  filters: { useCycles: boolean; toggleUseCycles: () => void };\n};\n\nexport function useRandomGroups(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n  sampleSize: number,\n  tagThreshold: number\n): UseRandomGroupReturnValue {\n  const [cardIds, setCardIds] = useState<string[]>([]);\n  const [cards, setCards] = useState<string[][]>([]);\n  const [cycledCards, setCycleCards] = useState<string[]>([]);\n  const [cycles, setCycles] = useState(0);\n  const [filterUseCycles, setFIlterUseCycles] = useState(true);\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  const updateCards = (ids?: string[]) => {\n    setCards((ids ?? cardIds).map((id) => cardData?.[id] ?? []));\n  };\n\n  const onRandomCards = () => {\n    // setSelection([]);\n    const ids: string[] = [...selection];\n    let cycleCount = 0;\n    const cycledCardsSample = cycledCards.length < 2000 ? cycledCards : [];\n\n    // Avoid infinite loop failsafe\n    let tries = 0;\n    while (tries < 400 && ids.length < sampleSize) {\n      const id = getRandomCardId();\n      const card = cardData[id] ?? [];\n      const isNew = tagThreshold > 0 ? card.length < tagThreshold : true;\n      const isCycled = filterUseCycles ? cycledCardsSample.includes(id) : false;\n      if (!ids.includes(id) && !isCycled && isNew) {\n        ids.push(id);\n        cycleCount += 1;\n      }\n      tries += 1;\n    }\n    setCardIds(ids);\n    setCycleCards((pv) => [...pv, ...ids]);\n    updateCards(ids);\n    setCycles((ps) => ps + cycleCount);\n  };\n\n  // On Load get sample of cards\n  useEffect(() => {\n    if (cardIds.length === 0) {\n      onRandomCards();\n    }\n  }, [cardIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Selects or deselects a card\n   */\n  const onSelect = (id: string) => {\n    setSelection((ps) => {\n      const copy = [...ps];\n      const index = copy.indexOf(id);\n      if (index > -1) {\n        copy.splice(index, 1);\n      } else {\n        copy.push(id);\n      }\n      return copy;\n    });\n  };\n\n  /**\n   * Relates all selected cards in the selection array\n   */\n  const relate = () => {\n    selection.forEach((id) => {\n      const card = cardData[id] ?? [];\n\n      card.push(...selection.filter((s) => s !== id));\n      cardData[id] = removeDuplicates(card);\n    });\n    setDirty(true);\n    setSelection([]);\n    updateCards();\n    setCycleCards([]);\n    setCycles(0);\n  };\n\n  /**\n   * Deselects all cards\n   */\n  const deselectAll = () => {\n    setSelection([]);\n  };\n\n  const toggleFilterUseCycles = () => {\n    setFIlterUseCycles((ps) => !ps);\n  };\n\n  return {\n    cardIds,\n    cards,\n    selection,\n    onSelect,\n    relate,\n    nextSet: onRandomCards,\n    deselectAll,\n    cycles,\n    filters: {\n      useCycles: filterUseCycles,\n      toggleUseCycles: toggleFilterUseCycles,\n    },\n  };\n}\n","import { ReactNode, useContext, createContext, useState } from 'react';\nimport {\n  UseImageCardsRelationshipDataReturnValue,\n  UseRandomGroupReturnValue,\n  useImageCardsRelationshipData,\n  useRandomGroups,\n} from './hooks';\n\nexport type ImagesRelationshipsContextType = {\n  sampleSize: number;\n  setSampleSize: (size: number) => void;\n  tagThreshold: number;\n  setTagThreshold: (threshold: number) => void;\n  cardSize: number;\n  setCardSize: (size: number) => void;\n  showIds: boolean;\n  setShowIds: (show: boolean) => void;\n  randomGroups: UseRandomGroupReturnValue;\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nconst ImagesRelationshipsContext = createContext<ImagesRelationshipsContextType | PlainObject>({});\n\ntype ImagesRelationshipsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ImagesRelationshipsProvider = ({ children }: ImagesRelationshipsProviderProps) => {\n  const query = useImageCardsRelationshipData();\n\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(150);\n  const [showIds, setShowIds] = useState(false);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const randomGroups = useRandomGroups(query.data, query.setDirty, sampleSize, tagThreshold);\n\n  return (\n    <ImagesRelationshipsContext.Provider\n      value={{\n        sampleSize,\n        setSampleSize,\n        tagThreshold,\n        setTagThreshold,\n        cardSize,\n        setCardSize,\n        showIds,\n        setShowIds,\n        randomGroups,\n        query,\n      }}\n    >\n      {children}\n    </ImagesRelationshipsContext.Provider>\n  );\n};\n\nexport const useImagesRelationshipsContext = () => useContext(ImagesRelationshipsContext);\n","import { BarChartOutlined } from '@ant-design/icons';\nimport { Form, Avatar } from 'antd';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\n\nexport function RelationshipsStats() {\n  const {\n    query: { stats },\n  } = useImagesRelationshipsContext();\n\n  return (\n    <Form.Item\n      label={\n        <>\n          <Avatar icon={<BarChartOutlined />} shape=\"square\" size=\"small\" style={{ marginRight: 6 }} />\n          Stats\n        </>\n      }\n    >\n      <ul className=\"statistic__list\">\n        <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n        <li>Total Relationships: {stats.total}</li>\n        <li>Complete: {stats.complete}</li>\n        <li>Overdone: {stats.overdone}</li>\n        <li>Single Match: {stats.single}</li>\n      </ul>\n    </Form.Item>\n  );\n}\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","import { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { isEmpty } from 'lodash';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { Card, FloatButton, Image, Tag } from 'antd';\nimport {\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { ImageCard } from '../ImageCard';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { TransparentButton } from 'components/Common';\nimport { useMemo, useRef } from 'react';\nimport { useMeasure } from 'react-use';\n\nexport function RelationshipsContent() {\n  const {\n    query: { isDirty, isSaving, save, stats, ...query },\n    randomGroups: { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles },\n    showIds,\n    cardSize,\n  } = useImagesRelationshipsContext();\n\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const [cardQuantity, cardWidth] = useMemo(() => {\n    const cq = Math.floor(containerWidth / cardSize) + 1;\n    const cw = Math.floor(containerWidth / cq);\n    return [cq, cw];\n  }, [cardSize, containerWidth]);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={query.isLoading}\n      error={query.error}\n      hasResponseData={!isEmpty(query.data)}\n    >\n      <div ref={ref} className=\"my-6\">\n        <Card\n          title=\"Card Relationship Matching\"\n          extra={\n            <span>\n              <FileImageOutlined /> {cycles}\n            </span>\n          }\n          className=\"image-card-categorizer-card\"\n          ref={cardRef}\n        >\n          <Image.PreviewGroup>\n            <div\n              className=\"image-cards-group\"\n              style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n            >\n              {cardIds.map((cardId: string, index: number) => {\n                const isSelected = selection.includes(cardId);\n                const card = cards[index];\n\n                return (\n                  <div className=\"image-card-card__image\" key={cardId}>\n                    <TransparentButton\n                      onClick={() => onSelect(cardId)}\n                      active={isSelected}\n                      className=\"image-cards-group__button\"\n                      activeClass=\"image-cards-group__button--active\"\n                    >\n                      <ImageCard id={cardId} width={cardWidth - 24} preview={false} />\n                      <div>\n                        {showIds && <Tag>{cardId}</Tag>}\n                        {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                        <RelationshipCountTag card={card} />\n                      </div>\n                    </TransparentButton>\n                  </div>\n                );\n              })}\n            </div>\n          </Image.PreviewGroup>\n          <Actions\n            isSaving={isSaving}\n            isDirty={isDirty}\n            selection={selection}\n            relate={relate}\n            deselectAll={deselectAll}\n            onNextSet={onNextSet}\n          />\n        </Card>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    // </FloatButton.Group>\n    (<>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>)\n  );\n};\n","import { Button } from 'antd';\nimport { FilterSelect, FilterSwitch, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\nimport { CARD_SIZE_OPTIONS, SAMPLE_SIZE_OPTIONS, TAGS_SELECTOR_OPTIONS } from 'utils/constants';\n\nimport { SaveOutlined } from '@ant-design/icons';\n\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipsStats } from './RelationshipsStats';\n\nexport function RelationshipsFilters() {\n  const {\n    query: { isDirty, isSaving, save, data, isLoading, isError },\n    randomGroups: { filters },\n    showIds,\n    setShowIds,\n    tagThreshold,\n    setTagThreshold,\n    sampleSize,\n    setSampleSize,\n    cardSize,\n    setCardSize,\n  } = useImagesRelationshipsContext();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          icon={<SaveOutlined />}\n          onClick={() => save({})}\n          disabled={!isDirty}\n          loading={isSaving}\n          danger\n          block\n        >\n          Save\n        </Button>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <FilterSwitch\n          label=\"Use Cycles\"\n          value={filters.useCycles}\n          onChange={() => filters.toggleUseCycles()}\n        />\n\n        <FilterSwitch label=\"Show Ids\" value={showIds} onChange={(c) => setShowIds(c)} />\n\n        <FilterSelect\n          onChange={(value) => setTagThreshold(value)}\n          value={tagThreshold}\n          options={TAGS_SELECTOR_OPTIONS}\n          label=\"Tag Count\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setSampleSize(value)}\n          value={sampleSize}\n          options={SAMPLE_SIZE_OPTIONS}\n          label=\"Sample Size\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setCardSize(value)}\n          value={cardSize}\n          options={CARD_SIZE_OPTIONS}\n          label=\"Card Size\"\n        />\n      </SiderContent>\n\n      <SiderContent>\n        <RelationshipsStats />\n      </SiderContent>\n\n      <SiderContent>\n        <DownloadButton\n          data={data}\n          fileName=\"imageCardsRelationships.json\"\n          loading={isSaving}\n          disabled={isEmpty(data)}\n          block\n        />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { ImagesRelationshipsProvider } from 'components/Images/ImageCards/ImagesRelationshipsContext';\nimport { RelationshipsContent } from 'components/Images/ImageCards/RelationshipsContent';\nimport { RelationshipsFilters } from 'components/Images/ImageCards/RelationshipsFilters';\n\nimport { PageLayout } from 'components/Layout';\n\nfunction ImageCardsRelationships() {\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Relationships\">\n      <ImagesRelationshipsProvider>\n        <Layout hasSider>\n          <RelationshipsFilters />\n\n          <Layout.Content className=\"content\">\n            <RelationshipsContent />\n          </Layout.Content>\n        </Layout>\n      </ImagesRelationshipsProvider>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsRelationships;\n"],"names":["DownloadButton","data","fileName","loading","props","onClick","downloadObjectAsFile","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","getRandomCardNumber","padStart","String","random","getRandomDeck","ImagesRelationshipsContext","createContext","ImagesRelationshipsProvider","query","setDirty","useState","queryKey","queryClient","useQueryClient","notification","App","stats","setStats","total","overdone","complete","single","isSuccess","isFetched","isRefetching","refetch","useQuery","queryFn","async","docRef","doc","firestore","getDoc","isPending","isSaving","isMutationError","isSaved","mutate","save","useMutation","mutationKey","mutationFn","setDoc","onSuccess","success","message","placement","refetchQueries","useEffect","Object","keys","length","values","forEach","hasData","useImageCardsRelationshipData","sampleSize","setSampleSize","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","randomGroups","cardData","cardIds","setCardIds","cards","setCards","cycledCards","setCycleCards","cycles","setCycles","filterUseCycles","setFIlterUseCycles","selection","setSelection","updateCards","ids","onRandomCards","cycleCount","cycledCardsSample","tries","card","isNew","isCycled","includes","push","pv","ps","onSelect","copy","index","indexOf","splice","relate","filter","s","removeDuplicates","nextSet","deselectAll","filters","useCycles","toggleUseCycles","useRandomGroups","Provider","useImagesRelationshipsContext","useContext","RelationshipsStats","icon","shape","marginRight","Math","floor","RelationshipCountTag","undefined","TagsFilled","RelationshipsContent","cardRef","useRef","ref","containerWidth","useMeasure","cardQuantity","cardWidth","useMemo","cq","DataLoadingWrapper","isEmpty","title","extra","FileImageOutlined","gridTemplateColumns","cardId","isSelected","Actions","onNextSet","current","scrollIntoView","behavior","LoadingOutlined","WarningOutlined","type","right","ExpandOutlined","ForkOutlined","badge","count","SyncOutlined","RelationshipsFilters","SaveOutlined","danger","block","c","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","subtitle","hasSider"],"sourceRoot":""}