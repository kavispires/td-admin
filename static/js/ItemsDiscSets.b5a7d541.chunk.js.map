{"version":3,"file":"static/js/ItemsDiscSets.b5a7d541.chunk.js","mappings":"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","sources":["components/Common/PaginationWrapper.tsx","components/Items/CopyIdsButton.tsx","hooks/useGridPagination.tsx","hooks/useResourceFirebaseData.ts","hooks/useTableExpandableRows.tsx","hooks/useTablePagination.tsx","components/Items/ParseIds.tsx","components/Items/DiscSets/ItemsDiscSetExpandedRow.tsx","components/Items/DiscSets/ItemsDiscSetsTable.tsx","components/Items/DiscSets/OrphanItems.tsx","components/Items/DiscSets/ItemsDiscSetsContent.tsx","components/Items/DiscSets/AddNewSetFlow.tsx","components/Items/DiscSets/ItemsDiscSetsFilters.tsx","pages/Items/ItemsDiscSets.tsx"],"sourcesContent":["import { Pagination, Space, type SpaceProps, type TableProps } from 'antd';\nimport type { ReactNode } from 'react';\n\ntype PaginationWrapperProps = {\n  children: ReactNode;\n  pagination: TableProps['pagination'];\n} & SpaceProps;\n\nexport function PaginationWrapper({ children, pagination, ...spaceProps }: PaginationWrapperProps) {\n  const paginationComponent = <Pagination showQuickJumper {...pagination} className=\"fixed-pagination\" />;\n  return (\n    <Space direction=\"vertical\" {...spaceProps}>\n      {paginationComponent}\n      {children}\n      {paginationComponent}\n    </Space>\n  );\n}\n","import { Button, Space } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype CopyIdsButtonProps = {\n  ids: string[];\n};\n\nexport function CopyIdsButton({ ids }: CopyIdsButtonProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <Space direction=\"vertical\" size=\"small\">\n      <Button size=\"small\" onClick={() => copyToClipboard(JSON.stringify(ids))}>\n        Copy Ids\n      </Button>\n    </Space>\n  );\n}\n","import type { TableProps } from 'antd';\nimport { useMemo } from 'react';\n\nimport { usePrevious } from 'react-use';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UsePaginationOptions<TData> = {\n  /**\n   * The data array to be paginated.\n   */\n  data: TData[];\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n  /**\n   * The value that triggers the reset of the pagination.\n   */\n  resetter?: string;\n};\n\nexport function useGridPagination<TData>({\n  prefix = '',\n  data,\n  defaultCurrent = 1,\n  defaultPageSize = 64,\n  pageSizeOptions = [16, 32, 64, 128],\n  resetter,\n}: UsePaginationOptions<TData>): {\n  page: TData[];\n  pagination: TableProps['pagination'];\n} {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n  const previous = usePrevious(resetter);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return data.slice(start, end);\n  }, [currentPage, pageSize, data]);\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  if (resetter !== previous) {\n    onChange(defaultCurrent);\n  }\n\n  return {\n    page,\n    pagination: {\n      current: currentPage,\n      pageSize,\n      onChange,\n      onShowSizeChange,\n      defaultCurrent,\n      defaultPageSize,\n      pageSizeOptions,\n      total: data.length,\n      hideOnSinglePage: true,\n    },\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import type { TableProps } from 'antd';\nimport type { ExpandableConfig } from 'antd/es/table/interface';\nimport { useState } from 'react';\n\ntype useTableExpandableRowsOptions<TRecord extends { id: string }> = {\n  /**\n   * The maximum number of expanded rows.\n   * To make sure only one row is expanded at a time, set this to 1.\n   */\n  maxExpandedRows?: number;\n} & TableProps<TRecord>['expandable'];\n\nexport function useTableExpandableRows<TRecord extends { id: string }>({\n  maxExpandedRows,\n  rowExpandable,\n  defaultExpandAllRows,\n  ...expandable\n}: useTableExpandableRowsOptions<TRecord>): ExpandableConfig<TRecord> {\n  const [expandedRowKeys, setExpandedRowKeys] = useState<string[]>([]);\n\n  const onExpand = (expanded: boolean, record: TRecord) => {\n    const newExpandedRowKeys = [...expandedRowKeys]; // Create a copy to avoid mutation\n\n    if (!expanded) {\n      return setExpandedRowKeys(newExpandedRowKeys.filter((key) => key !== record.id));\n    }\n\n    if (maxExpandedRows) {\n      while (newExpandedRowKeys.length >= maxExpandedRows) {\n        newExpandedRowKeys.shift();\n      }\n      newExpandedRowKeys.push(record.id);\n\n      setExpandedRowKeys(newExpandedRowKeys);\n    }\n  };\n\n  return {\n    expandedRowKeys,\n    rowExpandable: rowExpandable ?? (() => true),\n    defaultExpandAllRows: defaultExpandAllRows ?? false,\n    onExpand,\n    ...expandable,\n  };\n}\n","import type { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { Button, Input, Typography } from 'antd';\nimport { useState } from 'react';\n\ntype PasteIdsProps = {\n  onUpdateBatch: (itemId: string[]) => void;\n};\n\nexport function PasteIds({ onUpdateBatch }: PasteIdsProps) {\n  const [str, setStr] = useState('');\n\n  const onAdd = () => {\n    try {\n      // Remove any enclosing square brackets\n      const parsedStr = str.replace(/^\\[|\\]$/g, '');\n\n      // Split the string by commas, possibly surrounded by spaces\n      const idArray = parsedStr\n        .split(/\\s*,\\s*/)\n        .map((item) => item.replace(/^\"|\"$/g, ''))\n        .filter(Boolean);\n\n      onUpdateBatch(idArray);\n\n      setStr('');\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <Typography.Paragraph>\n      Paste IDs\n      <Input.TextArea value={str} onChange={(e) => setStr(e.target.value)} />\n      <Button size=\"small\" onClick={onAdd}>\n        Add\n      </Button>\n    </Typography.Paragraph>\n  );\n}\n","import { Button, Flex, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { difference, sampleSize } from 'lodash';\nimport { useState } from 'react';\nimport type { DailyDiscSet, Item as ItemT } from 'types';\nimport { removeDuplicates, sortItemsIds } from 'utils';\n\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport { useEffect } from 'react';\nimport { ItemsTypeahead } from '../ItemsTypeahead';\nimport { PasteIds } from '../ParseIds';\n\ntype ItemsDiscSetExpandedRowProps = {\n  disc: DailyDiscSet;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function ItemsDiscSetExpandedRow({ disc, addEntryToUpdate }: ItemsDiscSetExpandedRowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(disc.id, {\n      ...disc,\n      itemsIds: removeDuplicates(sortItemsIds([...disc.itemsIds, itemId])),\n    });\n  };\n\n  const onUpdateBatch = (itemIds: string[]) => {\n    addEntryToUpdate(disc.id, {\n      ...disc,\n      itemsIds: removeDuplicates(sortItemsIds([...disc.itemsIds, ...itemIds])),\n    });\n  };\n\n  return (\n    <Flex gap={16}>\n      <div>\n        <Typography.Paragraph>Add Item</Typography.Paragraph>\n        <ItemsTypeahead onFinish={onUpdate} />\n      </div>\n\n      <RandomSample onUpdate={onUpdate} disc={disc} />\n\n      <PasteIds onUpdateBatch={onUpdateBatch} />\n    </Flex>\n  );\n}\n\ntype RandomSampleProps = {\n  onUpdate: (itemId: string) => void;\n  disc: DailyDiscSet;\n};\n\nfunction RandomSample({ onUpdate, disc }: RandomSampleProps) {\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const [usedSampleIds, setUsedSampleIds] = useState<string[]>([...disc.itemsIds]);\n\n  const getSample = (quantity: number) => {\n    const availableItems = difference(Object.keys(itemsTypeaheadQuery.data ?? {}), usedSampleIds);\n    return sampleSize(availableItems, quantity);\n  };\n\n  const [sampledItems, setSampledItems] = useState<string[]>(getSample(5));\n\n  const onSample = () => {\n    const newSample = getSample(30);\n    setSampledItems(newSample);\n    setUsedSampleIds([...usedSampleIds, ...newSample]);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    setUsedSampleIds([...disc.itemsIds]);\n  }, [disc.id]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    if (sampledItems.length === 0) {\n      onSample();\n      setUsedSampleIds([...disc.itemsIds]);\n    }\n  }, [sampledItems]);\n\n  return (\n    <div>\n      <Typography.Paragraph>\n        Random Sample{' '}\n        <Button size=\"small\" onClick={onSample}>\n          Get\n        </Button>\n      </Typography.Paragraph>\n      <Flex gap={16} wrap=\"wrap\">\n        {sampledItems.map((itemId, index) => (\n          <Flex key={`sample-${itemId}-${index}`} gap={2} vertical>\n            <Item id={itemId} width={60} />\n            <Flex justify=\"center\" gap={6}>\n              <Typography.Text>{itemId}</Typography.Text>\n              <Button size=\"small\" shape=\"circle\" onClick={() => onUpdate(itemId)}>\n                <PlusOutlined />\n              </Button>\n            </Flex>\n          </Flex>\n        ))}\n      </Flex>\n    </div>\n  );\n}\n","import { DeleteFilled } from '@ant-design/icons';\nimport { Button, Flex, Popconfirm, Space, Table, Typography } from 'antd';\nimport type { TableProps } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useTableExpandableRows } from 'hooks/useTableExpandableRows';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type { DailyDiscSet, Item as ItemT } from 'types';\nimport { removeDuplicates, sortItemsIds } from 'utils';\nimport { CopyIdsButton } from '../CopyIdsButton';\nimport { ItemsDiscSetExpandedRow } from './ItemsDiscSetExpandedRow';\n\nfunction orderSets(givenSets: DailyDiscSet[]) {\n  return orderBy(givenSets, [\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length > 20,\n    (s) => s.title.en,\n  ]).map((s) => ({\n    ...s,\n    itemsIds: orderBy(s.itemsIds, (id) => Number(id)),\n  }));\n}\n\ntype ItemsDiscSetsTableProps = Pick<\n  UseResourceFirebaseDataReturnType<DailyDiscSet>,\n  'data' | 'addEntryToUpdate'\n>;\n\nexport function ItemsDiscSetsTable({ data, addEntryToUpdate }: ItemsDiscSetsTableProps) {\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const sets = useMemo(() => orderSets(Object.values(data)), [data]);\n\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  const paginationProps = useTablePagination({ total: sets.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyDiscSet>['columns'] = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => a.title.en.localeCompare(b.title.en),\n    },\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n      sorter: (a, b) => a.title.en.localeCompare(b.title.en),\n      render: (title, record) => (\n        <DiscEditableTitleCell value={title} disc={record} addEntryToUpdate={addEntryToUpdate} />\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <DiscItemsCell\n          disc={record}\n          itemsIds={sortItemsIds(itemsIds)}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n  ];\n\n  const expandableProps = useTableExpandableRows<DailyDiscSet>({\n    maxExpandedRows: 1,\n    expandedRowRender: (record) => (\n      <ItemsDiscSetExpandedRow disc={record} addEntryToUpdate={addEntryToUpdate} />\n    ),\n    rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n  });\n\n  return (\n    <Space direction=\"vertical\">\n      <Table\n        columns={columns}\n        dataSource={sets}\n        pagination={paginationProps}\n        rowKey=\"id\"\n        expandable={expandableProps}\n      />\n    </Space>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  disc: DailyDiscSet;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ disc, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(disc.id, {\n      ...disc,\n      itemsIds: disc.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype DiscEditableTitleCellProps = {\n  value: DualLanguageValue;\n  disc: DailyDiscSet;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function DiscEditableTitleCell({ value, disc, addEntryToUpdate }: DiscEditableTitleCellProps) {\n  const handleChange = (newValue: string, language: Language) => {\n    addEntryToUpdate(disc.id, {\n      ...disc,\n      title: {\n        ...disc.title,\n        [language]: newValue,\n      },\n    });\n  };\n\n  return (\n    <Space direction=\"vertical\" size=\"small\">\n      <Typography.Text\n        editable={{\n          onChange: (v) => handleChange(v, 'pt'),\n        }}\n      >\n        {String(value.pt)}\n      </Typography.Text>\n      <Typography.Text\n        editable={{\n          onChange: (v) => handleChange(v, 'en'),\n        }}\n      >\n        {String(value.en)}\n      </Typography.Text>\n    </Space>\n  );\n}\n\ntype DiscItemsCellProps = {\n  disc: DailyDiscSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function DiscItemsCell({ disc, itemsIds, copyToClipboard, addEntryToUpdate }: DiscItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${disc.title}`}>\n      {itemsIds.map((itemId, index) => (\n        <Flex key={`${disc.title}-${itemId}-${index}`} gap={2} vertical>\n          <Item id={itemId} width={60} />\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow disc={disc} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n      <CopyIdsButton ids={itemsIds} />\n    </Flex>\n  );\n}\n","import { Button, Drawer, Flex, Select, Space, Switch, Tag, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { Item } from 'components/Sprites';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEqual } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiscSet, Item as ItemT } from 'types';\n\ntype OrphanItemsProps = Pick<UseResourceFirebaseDataReturnType<DailyDiscSet>, 'data' | 'addEntryToUpdate'>;\n\nexport function OrphanItems({ data, addEntryToUpdate }: OrphanItemsProps) {\n  const { is, addParam } = useQueryParams();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const [itemsSets, orphans]: [Record<string, string[]>, ItemT[]] = useMemo(() => {\n    if (itemsTypeaheadQuery.data) {\n      const itemsDict = Object.values(data).reduce((acc: Record<string, string[]>, discSet) => {\n        discSet.itemsIds.forEach((itemId) => {\n          if (!acc[itemId]) {\n            acc[itemId] = [];\n          }\n          acc[itemId].push(discSet.id);\n        });\n        return acc;\n      }, {});\n\n      Object.keys(itemsTypeaheadQuery.data).reduce((acc: Record<string, string[]>, itemId) => {\n        if (acc[itemId] === undefined) {\n          acc[itemId] = [];\n        }\n        acc[itemId].push(itemId);\n        return acc;\n      }, {});\n\n      const colorSetIds = [\n        'black',\n        'blue',\n        'brown',\n        'green',\n        'orange',\n        'pink',\n        'purple',\n        'red',\n        'white',\n        'yellow',\n      ];\n      const orphanItems = Object.keys(itemsTypeaheadQuery.data)\n        .filter(\n          (itemId) =>\n            itemsDict[itemId] === undefined ||\n            (itemsDict[itemId].length === 1 && colorSetIds.includes(itemsDict[itemId][0])),\n        )\n        .map((itemId) => itemsTypeaheadQuery.data[itemId]);\n\n      return [itemsDict, orphanItems];\n    }\n    return [{}, []];\n  }, [data, itemsTypeaheadQuery.data]);\n\n  const onlyOrphans = is('onlyOrphans');\n\n  const { page, pagination } = useGridPagination({\n    data: onlyOrphans ? orphans : Object.values(itemsTypeaheadQuery.data),\n    defaultPageSize: 64,\n    resetter: onlyOrphans ? 'orphans' : 'all',\n  });\n\n  const [activeItem, setActiveItem] = useState<string | null>(null);\n  const [latestSetId, setLatestSetId] = useState<string | null>(null);\n\n  const sortedSets = useMemo(\n    () => Object.values(data).sort((a, b) => a.title.pt.localeCompare(b.title.pt)),\n    [data],\n  );\n\n  return (\n    <>\n      <Typography.Title level={4}>Orphan Items ({orphans.length})</Typography.Title>\n      <Space className=\"mb-4\">\n        <Switch\n          checkedChildren=\"Only Orphans\"\n          unCheckedChildren=\"All Items\"\n          onChange={(value) => addParam('onlyOrphans', value, false)}\n        />\n      </Space>\n\n      <Drawer title=\"Add Item to Set\" open={!!activeItem} onClose={() => setActiveItem(null)}>\n        {!!activeItem && (\n          <DrawerContent\n            activeItem={activeItem}\n            activeItemSets={itemsSets?.[activeItem] ?? []}\n            latestSetId={latestSetId}\n            setLatestSetId={setLatestSetId}\n            sortedSets={sortedSets}\n            data={data}\n            addEntryToUpdate={addEntryToUpdate}\n          />\n        )}\n      </Drawer>\n      <PaginationWrapper pagination={pagination} className=\"full-width\">\n        <Flex gap={16} wrap=\"wrap\">\n          {page.map((item) => (\n            <TransparentButton key={item.id} onClick={() => setActiveItem(item.id)}>\n              <Item id={item.id} />\n            </TransparentButton>\n          ))}\n        </Flex>\n      </PaginationWrapper>\n    </>\n  );\n}\n\ntype DrawerContentProps = {\n  activeItem: string | null;\n  activeItemSets: string[];\n  latestSetId: string | null;\n  setLatestSetId: (id: string | null) => void;\n  sortedSets: DailyDiscSet[];\n  data: Dictionary<DailyDiscSet>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function DrawerContent({\n  activeItem,\n  activeItemSets,\n  setLatestSetId,\n  sortedSets,\n  data,\n  addEntryToUpdate,\n}: DrawerContentProps) {\n  const [selections, setSelections] = useState<string[]>(activeItemSets);\n\n  if (!activeItem) return null;\n\n  const onSelect = (sets: any) => {\n    setSelections(sets);\n  };\n\n  const onToggleToSelection = (setId: string) => {\n    setSelections((prev) => {\n      if (prev.includes(setId)) {\n        return prev.filter((id) => id !== setId);\n      }\n      return [...prev, setId];\n    });\n  };\n\n  const onAdd = () => {\n    selections.forEach((setId: string) => {\n      addEntryToUpdate(setId, {\n        ...data[setId],\n        itemsIds: [...data[setId].itemsIds, activeItem],\n      });\n    });\n    setLatestSetId(selections[selections.length - 1]);\n  };\n\n  const options = sortedSets.map((set) => ({ value: set.id, label: set.title.pt }));\n\n  return (\n    <Flex vertical gap={16}>\n      <Item id={activeItem} />\n      <Button type=\"primary\" onClick={onAdd} disabled={isEqual(activeItemSets, selections)}>\n        Save to Sets\n      </Button>\n      <Select onChange={onSelect} mode=\"tags\" value={selections} options={options}></Select>\n      <Flex wrap=\"wrap\" gap={8}>\n        {sortedSets.map((set) => (\n          <Tag\n            key={set.id}\n            onClick={() => onToggleToSelection(set.id)}\n            color={selections.includes(set.id) ? 'gold' : undefined}\n          >\n            {set.title.pt}\n          </Tag>\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n","import { DeleteFilled } from '@ant-design/icons';\nimport { Button, Flex, Popconfirm, Space, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport type { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport type { DailyDiscSet } from 'types';\nimport { CopyIdsButton } from '../CopyIdsButton';\nimport { ItemsDiscSetsTable } from './ItemsDiscSetsTable';\nimport { OrphanItems } from './OrphanItems';\n\nexport function ItemsDiscSetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiscSet>) {\n  const { is, queryParams } = useQueryParams();\n\n  return (\n    <>\n      {(is('display', 'sets') || !queryParams.has('display')) && (\n        <ItemsDiscSetsTable data={data} addEntryToUpdate={addEntryToUpdate} />\n      )}\n\n      {(is('display', 'orphans') || !queryParams.has('display')) && (\n        <OrphanItems data={data} addEntryToUpdate={addEntryToUpdate} />\n      )}\n    </>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  disc: DailyDiscSet;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ disc, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(disc.id, {\n      ...disc,\n      itemsIds: disc.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype DiscEditableTitleCellProps = {\n  value: DualLanguageValue;\n  disc: DailyDiscSet;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function DiscEditableTitleCell({ value, disc, addEntryToUpdate }: DiscEditableTitleCellProps) {\n  const handleChange = (newValue: string, language: Language) => {\n    addEntryToUpdate(disc.id, {\n      ...disc,\n      title: {\n        ...disc.title,\n        [language]: newValue,\n      },\n    });\n  };\n\n  return (\n    <Space direction=\"vertical\" size=\"small\">\n      <Typography.Text\n        editable={{\n          onChange: (v) => handleChange(v, 'pt'),\n        }}\n      >\n        {String(value.pt)}\n      </Typography.Text>\n      <Typography.Text\n        editable={{\n          onChange: (v) => handleChange(v, 'en'),\n        }}\n      >\n        {String(value.en)}\n      </Typography.Text>\n    </Space>\n  );\n}\n\ntype DiscItemsCellProps = {\n  disc: DailyDiscSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function DiscItemsCell({ disc, itemsIds, copyToClipboard, addEntryToUpdate }: DiscItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${disc.title}`}>\n      {itemsIds.map((itemId, index) => (\n        <Flex key={`${disc.title}-${itemId}-${index}`} gap={2} vertical>\n          <Item id={itemId} width={60} />\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow disc={disc} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n      <CopyIdsButton ids={itemsIds} />\n    </Flex>\n  );\n}\n","import { Button, Form, Input, Modal, Typography } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { camelCase } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport stringSimilarity from 'string-similarity';\nimport type { DailyDiscSet } from 'types';\n\ntype AddNewSetFlowProps = {\n  ids: string[];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiscSet>['addEntryToUpdate'];\n};\n\nexport function AddNewSetFlow({ addEntryToUpdate, ids }: AddNewSetFlowProps) {\n  const [open, setOpen] = useState(false);\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    const id = camelCase(values.name);\n    addEntryToUpdate(camelCase(id), {\n      id: id,\n      title: { pt: values.nome, en: values.name },\n      itemsIds: [],\n    });\n  };\n\n  const nameEn = Form.useWatch('name', form);\n  const similar = useMemo(() => {\n    const selection: PlainObject = {};\n    if (nameEn && nameEn.length > 2) {\n      const id = camelCase(nameEn);\n      if (id) {\n        try {\n          const sim = stringSimilarity.findBestMatch(id, ids);\n          sim.ratings.forEach((rating) => {\n            if (rating.rating > 0.4) {\n              selection[rating.target] = rating.rating;\n            }\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n    return Object.keys(selection);\n  }, [nameEn, ids]);\n\n  return (\n    <>\n      <Button type=\"dashed\" block onClick={() => setOpen(true)}>\n        Add New Set\n      </Button>\n      <Modal\n        title=\"Add New Set\"\n        open={open}\n        onOk={form.submit}\n        onCancel={() => setOpen(false)}\n        maskClosable={false}\n        okText=\"Add\"\n        okButtonProps={{ htmlType: 'submit' }}\n      >\n        <Form form={form} onFinish={onFinish}>\n          <Form.Item name=\"nome\" label=\"Nome\" rules={[{ required: true }]}>\n            <Input\n              prefix={<LanguageFlag language=\"pt\" width=\"1em\" />}\n              placeholder={'Name in pt'}\n              size=\"small\"\n            />\n          </Form.Item>\n          <Form.Item name=\"name\" label=\"Name\" rules={[{ required: true }]}>\n            <Input\n              prefix={<LanguageFlag language=\"en\" width=\"1em\" />}\n              placeholder={'Name in en'}\n              size=\"small\"\n            />\n          </Form.Item>\n        </Form>\n        <Typography.Text>Similar:</Typography.Text>\n        <ul>\n          {similar.map((id) => (\n            <li key={id}>{id}</li>\n          ))}\n        </ul>\n      </Modal>\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep, isEmpty, omitBy } from 'lodash';\nimport type { DailyDiscSet } from 'types';\nimport { removeDuplicates, sortItemsIds, sortJsonKeys } from 'utils';\n\nimport { FrownOutlined, TableOutlined } from '@ant-design/icons';\nimport { FilterSegments } from 'components/Common';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { AddNewSetFlow } from './AddNewSetFlow';\n\nexport function ItemsDiscSetsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiscSet>) {\n  const { queryParams, addParams } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(prepareObjectToSave(entriesToUpdate))}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-disc-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'sets'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1, display: 'table' })}\n        options={[\n          {\n            title: 'Sets',\n            icon: <TableOutlined />,\n            value: 'sets',\n          },\n          {\n            title: 'Orphan Items',\n            icon: <FrownOutlined />,\n            value: 'orphans',\n          },\n        ]}\n      />\n\n      <AddNewSetFlow addEntryToUpdate={addEntryToUpdate} ids={Object.keys(data)} />\n    </SiderContent>\n  );\n}\n\nfunction prepareObjectToSave(groups: Dictionary<DailyDiscSet>) {\n  return omitBy(cloneDeep(groups), (group) => isEmpty(group.itemsIds));\n}\n\nfunction prepareFileForDownload(groups: Dictionary<DailyDiscSet>) {\n  Object.keys(groups).forEach((key) => {\n    groups[key].itemsIds = sortItemsIds(removeDuplicates(groups[key].itemsIds));\n  });\n  return sortJsonKeys(prepareObjectToSave(groups));\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsDiscSetsContent } from 'components/Items/DiscSets/ItemsDiscSetsContent';\nimport { ItemsDiscSetsFilters } from 'components/Items/DiscSets/ItemsDiscSetsFilters';\n\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { DailyDiscSet } from 'types';\n\nexport function ItemsDiscSets() {\n  const discSetsData = useResourceFirebaseData<DailyDiscSet>({\n    tdrResourceName: 'daily-disc-sets',\n    firebaseDataCollectionName: 'discSets',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Disc Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsDiscSetsFilters {...discSetsData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={discSetsData.isLoading || discSetsData.isSaving}\n            error={discSetsData.error}\n            hasResponseData={!isEmpty(discSetsData.data)}\n          >\n            <ItemsDiscSetsContent {...discSetsData} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsDiscSets;\n"],"names":["PaginationWrapper","children","pagination","spaceProps","paginationComponent","showQuickJumper","className","direction","CopyIdsButton","ids","copyToClipboard","useCopyToClipboardFunction","size","onClick","JSON","stringify","useGridPagination","prefix","data","defaultCurrent","defaultPageSize","pageSizeOptions","resetter","queryParams","addParam","useQueryParams","currentPage","Number","get","String","pageSize","previous","usePrevious","page","useMemo","start","end","slice","onChange","toString","current","onShowSizeChange","_","total","length","hideOnSinglePage","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","undefined","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","message","refetchQueries","queryKey","onError","error","description","isSuccess","isPending","console","log","cloneDeep","isDirty","isEmpty","firebaseData","isLoading","isSaving","save","mutate","serializeFirebaseData","addEntryToUpdate","id","item","prev","entriesToUpdate","useTableExpandableRows","maxExpandedRows","rowExpandable","defaultExpandAllRows","expandable","expandedRowKeys","setExpandedRowKeys","onExpand","expanded","record","newExpandedRowKeys","filter","key","shift","push","useTablePagination","PasteIds","onUpdateBatch","str","setStr","value","e","target","idArray","replace","split","map","Boolean","ItemsDiscSetExpandedRow","disc","onUpdate","itemId","itemsIds","removeDuplicates","sortItemsIds","gap","ItemsTypeahead","onFinish","RandomSample","itemIds","itemsTypeaheadQuery","usedSampleIds","setUsedSampleIds","getSample","quantity","availableItems","difference","Object","keys","sampleSize","sampledItems","setSampledItems","onSample","newSample","useEffect","wrap","index","vertical","width","justify","shape","PlusOutlined","ItemsDiscSetsTable","sets","orderSets","givenSets","values","orderBy","s","title","en","paginationProps","columns","dataIndex","sorter","a","b","localeCompare","render","DiscEditableTitleCell","Table","DiscItemsCell","expandableProps","expandedRowRender","dataSource","rowKey","RemoveItemFlow","onConfirm","okText","cancelText","icon","type","handleChange","newValue","language","editable","v","pt","OrphanItems","is","itemsSets","orphans","itemsDict","reduce","acc","discSet","forEach","colorSetIds","orphanItems","includes","onlyOrphans","activeItem","setActiveItem","latestSetId","setLatestSetId","sortedSets","sort","level","checkedChildren","unCheckedChildren","open","onClose","DrawerContent","activeItemSets","selections","setSelections","options","set","label","setId","disabled","isEqual","mode","onToggleToSelection","color","ItemsDiscSetsContent","has","AddNewSetFlow","setOpen","form","Form","nameEn","similar","selection","camelCase","stringSimilarity","ratings","rating","block","onOk","submit","onCancel","maskClosable","okButtonProps","htmlType","name","nome","rules","required","LanguageFlag","placeholder","ItemsDiscSetsFilters","addParams","SaveButton","onSave","dirt","prepareObjectToSave","DownloadButton","prepareFileForDownload","groups","sortJsonKeys","fileName","display","TableOutlined","FrownOutlined","omitBy","group","ItemsDiscSets","discSetsData","subtitle","hasSider","PageSider","DataLoadingWrapper","hasResponseData"],"sourceRoot":""}