{"version":3,"file":"static/js/ItemsDiagramSets.8b4e273b.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","hooks/useResourceFirebaseData.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Diagram/ItemsDiagramFilters.tsx","components/Items/Diagram/EditThingModal.tsx","components/Items/Diagram/Thing.tsx","components/Items/Diagram/DiagramGameSample.tsx","components/Items/Diagram/GameSimulator.tsx","components/Items/Diagram/ItemUpdateGuard.tsx","components/Items/Diagram/AddNewThingFlow.tsx","components/Items/Diagram/RulesByThing.tsx","components/Items/Diagram/ThingsByRule.tsx","components/Items/Diagram/ItemsDiagramSetsContent.tsx","pages/Items/ItemsDiagramSets.tsx"],"sourcesContent":["import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    },\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import type { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { type DocumentData, doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { type QueryKey, type UseMutationOptions, useMutation } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {},\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterSegments } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { cloneDeep } from 'lodash';\nimport type { DailyDiagramItem } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsDiagramFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const { addParams, queryParams } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-diagram-items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'rule'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Rule',\n            icon: <ClusterOutlined />,\n            value: 'rule',\n          },\n          {\n            title: 'By Thing',\n            icon: <TableOutlined />,\n            value: 'thing',\n          },\n        ]}\n      />\n\n      <Divider />\n\n      <Button size=\"small\" block onClick={() => addParams({ display: 'simulator' })}>\n        Simulator\n      </Button>\n\n      <Typography.Paragraph type=\"secondary\" className=\"my-6\">\n        v2.0.1\n      </Typography.Paragraph>\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(diagramItems: Dictionary<DailyDiagramItem>) {\n  console.log('Preparing file for download...');\n  const copy = cloneDeep(diagramItems);\n  // Object.values(copy).forEach((item) => {\n  //   item.syllables = (item.syllables ?? '').replace(/·/g, SYLLABLE_SEPARATOR);\n  // });\n  // console.log(copy);\n\n  return sortJsonKeys(copy);\n}\n","import { Affix, Button, Flex, Form, Input, Modal, Radio, Switch } from 'antd';\nimport clsx from 'clsx';\nimport { Item } from 'components/Sprites';\nimport { orderBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\n\nimport {\n  SYLLABLE_SEPARATOR,\n  separateSyllables,\n  stressSyllableDependencyVerifier,\n  syllableDependencyVerifier,\n  verifiers,\n} from './utils';\n\nexport type ThingFormValues = Record<string, boolean | string | number>;\n\ntype EditThingModalProps = {\n  isModalOpen: boolean;\n  onSaveThing: (item: DailyDiagramItem) => void;\n  onCancel: () => void;\n  thing: DailyDiagramItem;\n  rules: Dictionary<DailyDiagramRule>;\n  width?: number | string;\n  itemAliases?: string[];\n  subtitle?: string;\n  okButtonText?: string;\n  onGiveAnotherThing?: () => void;\n};\n\nexport function EditThingModal({\n  isModalOpen,\n  onSaveThing,\n  onCancel,\n  thing,\n  rules,\n  width,\n  itemAliases,\n  subtitle,\n  okButtonText,\n  onGiveAnotherThing,\n}: EditThingModalProps) {\n  // Sort rules properly by type\n  const orderedRules = useMemo(() => {\n    return orderBy(Object.values(rules), [\n      // Not auto\n      (r) => {\n        const index = ['manual', 'dependency', 'auto'].indexOf(r.method);\n        return index === -1 ? Number.POSITIVE_INFINITY : index;\n      },\n      // Sort by type\n      (r) => {\n        const index = ['grammar', 'comparison', 'order', 'count', 'contains', 'ends'].indexOf(r.type);\n        return index === -1 ? Number.POSITIVE_INFINITY : index;\n      },\n      // Sort by partial title\n      (r) => r.title.slice(0, 7),\n      // Sort by id\n      (r) => Number(r.id.split('-')[1]),\n    ]);\n  }, [rules]);\n\n  // Build initial values\n  const [form] = Form.useForm();\n  const values = Form.useWatch([], form);\n  const hasUndefinedValues = !values || Object.values(values ?? {}).some((value) => value === undefined);\n\n  // Automation: If name is changed, recalculates all rules\n  const nameWatch = Form.useWatch('name', form);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    // If initial state where name is still undefined, ignore\n    if (!nameWatch) return;\n\n    if (thing.name && thing.syllables && nameWatch === thing.name) return;\n\n    // If name changes, recalculate all rules\n    const fields: Record<string, boolean | string | number | undefined> = {\n      syllables: separateSyllables(nameWatch),\n      stressedSyllable: (thing.stressedSyllable ?? nameWatch.includes(' ')) ? -1 : 0,\n    };\n    Object.keys(rules).forEach((ruleId) => {\n      if (verifiers[ruleId]) {\n        fields[ruleId] = verifiers[ruleId](nameWatch);\n      } else {\n        fields[ruleId] = thing.rules.length > 0 ? thing.rules.includes(ruleId) : undefined;\n      }\n    });\n    form.setFieldsValue(fields);\n  }, [nameWatch]);\n\n  // Automation: Syllables\n  const syllables = Form.useWatch('syllables', form);\n  const isAcronym = form.getFieldValue('ddr-51-pt');\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (isAcronym) {\n      form.setFieldsValue({ stressedSyllable: undefined });\n      form.setFieldsValue({ 'ddr-43-pt': false });\n      form.setFieldsValue({ 'ddr-44-pt': false });\n      form.setFieldsValue({ 'ddr-45-pt': false });\n      form.setFieldsValue({ 'ddr-46-pt': false });\n    }\n    if (isAcronym === undefined) {\n      form.setFieldsValue({ 'ddr-51-pt': false });\n    }\n  }, [isAcronym]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (syllables) {\n      const syllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (syllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = syllableDependencyVerifier[ruleId](nameWatch, syllables, isAcronym);\n        }\n        return acc;\n      }, {});\n      form.setFieldsValue({\n        ...syllableRulesUpdate,\n        stressedSyllable:\n          syllables === thing.syllables\n            ? thing.stressedSyllable\n            : (thing.stressedSyllable ?? nameWatch.includes(' '))\n              ? -1\n              : undefined,\n      });\n    }\n  }, [nameWatch, syllables, isAcronym]);\n\n  // Automation: Stressed syllable\n  const stressedSyllable = Form.useWatch('stressedSyllable', form);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (!isAcronym && stressedSyllable !== undefined) {\n      const stressSyllableRulesUpdate = Object.keys(rules).reduce((acc: Record<string, boolean>, ruleId) => {\n        if (stressSyllableDependencyVerifier[ruleId]) {\n          acc[ruleId] = stressSyllableDependencyVerifier[ruleId](nameWatch, syllables, stressedSyllable);\n        }\n        return acc;\n      }, {});\n\n      form.setFieldsValue({\n        ...stressSyllableRulesUpdate,\n      });\n    }\n  }, [stressedSyllable]);\n\n  // Automation: Male vs Female nouns vs Both genders\n  const rule1 = form.getFieldValue('ddr-1-pt');\n  const rule2 = form.getFieldValue('ddr-2-pt');\n  const rule5 = form.getFieldValue('ddr-50-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule1 === true) {\n      form.setFieldsValue({ 'ddr-2-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule1]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule2 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-50-pt': false });\n    }\n  }, [rule2]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule5 === true) {\n      form.setFieldsValue({ 'ddr-1-pt': false });\n      form.setFieldsValue({ 'ddr-2-pt': false });\n    }\n  }, [rule5]);\n\n  // Automation: syllable count\n  const rule3 = form.getFieldValue('ddr-3-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule3 === true) {\n      form.setFieldsValue({ 'ddr-4-pt': false });\n    }\n  }, [rule3]);\n  const rule4 = form.getFieldValue('ddr-4-pt');\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    if (rule4 === true) {\n      form.setFieldsValue({ 'ddr-3-pt': false });\n    }\n  }, [rule4]);\n\n  // Automation: has hyphen\n  // biome-ignore lint/correctness/useExhaustiveDependencies: form is not a dependency\n  useEffect(() => {\n    const hasHyphen = nameWatch?.includes('-');\n    if (hasHyphen) {\n      form.setFieldsValue({ 'ddr-5-pt': true });\n    }\n  }, [nameWatch]);\n\n  const onFinish = (values: any) => {\n    const preparedThing = serializeThing(values);\n    onSaveThing(preparedThing);\n  };\n\n  const splitSyllables: string[] = useMemo(() => (syllables ?? '').split(SYLLABLE_SEPARATOR), [syllables]);\n\n  return (\n    <Modal\n      width={width}\n      title={\n        <>\n          Edit {thing.name} {subtitle && <small>{subtitle}</small>}\n        </>\n      }\n      open={isModalOpen}\n      onOk={form.submit}\n      onCancel={onCancel}\n      maskClosable={false}\n      okButtonProps={{ disabled: hasUndefinedValues, htmlType: 'submit', size: 'large' }}\n      okText={okButtonText ?? 'Add Item'}\n    >\n      <Form\n        form={form}\n        name={`new-item-${thing.itemId}`}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        initialValues={deserializeThing(thing, rules)}\n        layout=\"vertical\"\n        size=\"small\"\n        labelWrap\n      >\n        <div className=\"diagram-container\">\n          <div>\n            <Item id={thing.itemId} width={50} />\n          </div>\n\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"itemId\" label=\"Item\">\n            <Input readOnly />\n          </Form.Item>\n\n          <Form.Item name=\"syllables\" label=\"Syllables\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item name=\"stressedSyllable\" label=\"Stressed Syllable\">\n            <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n              {splitSyllables.map((syllable, index) => (\n                <Radio key={index} value={splitSyllables.length - index - 1}>\n                  {syllable}\n                </Radio>\n              ))}\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item name=\"updatedAt\" label=\"Updated At\">\n            <Input value={new Date(thing.updatedAt).toLocaleString()} readOnly />\n          </Form.Item>\n\n          {(itemAliases || onGiveAnotherThing) && (\n            <div>\n              {itemAliases && <span>Options: {itemAliases?.join(', ')}</span>}\n              {onGiveAnotherThing && (\n                <Button size=\"small\" onClick={onGiveAnotherThing} type=\"dashed\" className=\"mt-2\">\n                  Give me another thing\n                </Button>\n              )}\n            </div>\n          )}\n\n          <div>\n            <Affix offsetTop={50}>\n              <Flex justify=\"center\" align=\"center\">\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\" disabled={hasUndefinedValues}>\n                  {okButtonText ?? 'Add Item'}\n                </Button>\n              </Flex>\n            </Affix>\n          </div>\n        </div>\n        <div className=\"diagram-container\">\n          {orderedRules.map((rule) => {\n            if (rule.method === 'auto' && verifiers[rule.id]) {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            if (rule.method === 'dependency') {\n              return (\n                <Form.Item\n                  key={rule.id}\n                  name={rule.id}\n                  label={rule.title}\n                  valuePropName=\"checked\"\n                  className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n                >\n                  <Switch checkedChildren=\"✅\" unCheckedChildren=\"❌\" disabled />\n                </Form.Item>\n              );\n            }\n\n            return (\n              <Form.Item\n                key={rule.id}\n                name={rule.id}\n                label={rule.title}\n                className={clsx(thing.updatedAt < rule.updatedAt && 'diagram-container__outdated-rule')}\n              >\n                <Radio.Group optionType=\"button\" buttonStyle=\"solid\">\n                  <Radio value={true}>✅</Radio>\n                  <Radio value={false}>❌</Radio>\n                </Radio.Group>\n              </Form.Item>\n            );\n          })}\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n\nconst deserializeThing = (\n  thing: DailyDiagramItem,\n  rules: Dictionary<DailyDiagramRule>,\n): Record<string, boolean | string | number> => {\n  let wasAnyRuleUpdated = false;\n  return {\n    name: thing.name,\n    itemId: thing.itemId,\n    syllables: thing.syllables ?? separateSyllables(thing.name),\n    stressedSyllable: thing.stressedSyllable ?? 0,\n\n    ...Object.keys(rules).reduce((acc: Record<string, boolean | undefined>, ruleId) => {\n      // Only re-verify if rule is older than the last update\n      if (thing.updatedAt < rules[ruleId].updatedAt) {\n        if (verifiers[ruleId]) {\n          const reVerify = verifiers[ruleId](thing.name);\n          if (reVerify && thing.rules.includes(ruleId)) {\n            wasAnyRuleUpdated = true;\n          }\n          acc[ruleId] = reVerify;\n        } else {\n          acc[ruleId] = undefined;\n        }\n      } else {\n        acc[ruleId] = thing.rules.includes(ruleId);\n      }\n\n      return acc;\n    }, {}),\n    updatedAt: wasAnyRuleUpdated ? Date.now() : thing.updatedAt,\n  };\n};\n\nconst serializeThing = (values: Record<string, boolean | string | number>): DailyDiagramItem => {\n  const { itemId, name, updatedAt, syllables, stressedSyllable, ...thingRules } = values;\n\n  return {\n    itemId: itemId as string,\n    name: name as string,\n    updatedAt: Date.now(),\n    syllables: syllables as string,\n    stressedSyllable: stressedSyllable as number,\n    rules: Object.keys(thingRules).filter((key) => thingRules[key] === true),\n  };\n};\n","import { Flex, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { Item } from 'components/Sprites';\nimport type { DailyDiagramItem } from 'types';\n\ntype ThingProps = {\n  itemId: string;\n  name: string;\n  width?: number;\n};\n\nexport function Thing({ itemId, name, width = 50 }: ThingProps) {\n  return (\n    <Flex vertical align=\"center\">\n      <Item id={itemId} width={width} />\n      <Typography.Text code key={itemId}>\n        {name}\n      </Typography.Text>\n    </Flex>\n  );\n}\n\ntype ThingButtonProps = {\n  thing: DailyDiagramItem;\n  onActivateThing: (thing: DailyDiagramItem) => void;\n  width?: number;\n};\n\nexport function ThingButton({ thing, width = 50, onActivateThing }: ThingButtonProps) {\n  return (\n    <TransparentButton onClick={() => onActivateThing(thing)}>\n      <Thing itemId={thing.itemId} name={thing.name} width={width} />\n    </TransparentButton>\n  );\n}\n","import { Collapse, Rate, Space, Typography } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport type { DailyTeoriaDeConjuntosEntry } from 'components/Daily/utils/types';\nimport { type ReactNode, useState } from 'react';\nimport { Thing } from './Thing';\n\ntype DiagramGameSampleProps = {\n  game: DailyTeoriaDeConjuntosEntry;\n};\n\ntype TThing = {\n  id: string;\n  name: string;\n  rule: number;\n};\n\nexport function DiagramGameSample({ game }: DiagramGameSampleProps) {\n  const [leftRing] = useState<TThing[]>([\n    {\n      id: game.rule1.thing.id,\n      name: game.rule1.thing.name,\n      rule: 1,\n    },\n  ]);\n  const [rightRing] = useState<TThing[]>([\n    {\n      id: game.rule2.thing.id,\n      name: game.rule2.thing.name,\n      rule: 2,\n    },\n  ]);\n  const [intersection] = useState<TThing[]>([\n    {\n      id: game.intersectingThing.id,\n      name: game.intersectingThing.name,\n      rule: 0,\n    },\n  ]);\n\n  const [playerOptions] = useState<TThing[]>(game.things.slice(0, 4));\n\n  const [selectedThing, setSelectedThing] = useState<TThing | null>(game.things[0]);\n\n  // const\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Typography.Title level={4}>Game Sample</Typography.Title>\n      <Typography.Title level={5}>\"{game.title}\"</Typography.Title>\n      <Rate value={game.level} count={game.level} disabled />\n      <Typography.Paragraph style={{ maxWidth: '500px' }}>\n        O círculo amarelo tem uma regra gramatical secreta e o circulo vermelho tem outra regra gramatical\n        secreta. O quadrado do meio representa a interseção entre a regra amarela e a regra vermelha.\n      </Typography.Paragraph>\n\n      <Space>\n        <VennDiagram\n          width={600}\n          leftCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {leftRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          rightCircleChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {rightRing.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n          intersectionChildren={\n            <TransparentButton style={{ width: '100%', height: '100%' }}>\n              {intersection.map((thing, index, arr) => (\n                <Thing\n                  key={thing.id}\n                  itemId={thing.id}\n                  name={thing.name}\n                  width={index === arr.length - 1 ? 80 : 60}\n                />\n              ))}\n            </TransparentButton>\n          }\n        />\n      </Space>\n      <Typography.Text>Coloque os objetos nos círculos corretos:</Typography.Text>\n      <Space className=\"space--center\">\n        {playerOptions.map((thing) => (\n          <TransparentButton\n            key={thing.id}\n            style={thing.id === selectedThing?.id ? { outline: '3px solid hotPink' } : {}}\n            onClick={() => setSelectedThing(thing)}\n          >\n            <Thing key={thing.id} itemId={thing.id} name={thing.name} />\n          </TransparentButton>\n        ))}\n      </Space>\n\n      <Collapse\n        items={[\n          {\n            key: '1',\n            label: 'Resposta',\n            children: (\n              <Space direction=\"vertical\">\n                <Typography.Text strong>Regra Amarela</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule1.text}</Typography.Text>\n                  </li>\n                </ul>\n\n                <Typography.Text strong>Regra Vermelha</Typography.Text>\n                <ul>\n                  <li>\n                    <Typography.Text>{game.rule2.text}</Typography.Text>\n                  </li>\n                </ul>\n              </Space>\n            ),\n          },\n        ]}\n      />\n\n      <div style={{ height: '200px' }}></div>\n    </Space>\n  );\n}\n\ntype VennDiagramProps = {\n  leftCircleChildren: ReactNode;\n  rightCircleChildren: ReactNode;\n  intersectionChildren: ReactNode;\n} & React.SVGProps<SVGSVGElement>;\n\nfunction VennDiagram({\n  leftCircleChildren,\n  rightCircleChildren,\n  intersectionChildren,\n  ...props\n}: VennDiagramProps) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 760 500\" {...props}>\n      <path\n        fill=\"#fbb03b\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M252.78 3.5c-136.42 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.59-247-247-247zm.99 483.07C123.39 486.57 17.7 380.88 17.7 250.5S123.39 14.43 253.77 14.43 489.84 120.12 489.84 250.5 384.15 486.57 253.77 486.57z\"\n      ></path>\n      <path\n        fill=\"#f15a24\"\n        stroke=\"#000\"\n        strokeMiterlimit=\"10\"\n        strokeWidth=\"5\"\n        d=\"M508.22 3.5c-136.41 0-247 110.59-247 247s110.59 247 247 247 247-110.59 247-247-110.58-247-247-247zm.99 483.07c-130.38 0-236.07-105.69-236.07-236.07S378.84 14.43 509.22 14.43 745.29 120.12 745.29 250.5 639.6 486.57 509.22 486.57z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M487.34 250.5c0-62.39-24.29-121.04-68.41-165.16a235.9 235.9 0 00-37.43-30.47 235.35 235.35 0 00-37.43 30.47c-44.12 44.11-68.41 102.77-68.41 165.16s24.29 121.04 68.41 165.16a235.9 235.9 0 0037.43 30.47 235.35 235.35 0 0037.43-30.47c44.12-44.11 68.41-102.77 68.41-165.16z\"\n      ></path>\n      <path\n        fill=\"#535353\"\n        d=\"M258.72 250.5c0-66.64 25.95-129.3 73.08-176.42a253.125 253.125 0 0134.1-28.57c-33.98-18.65-72.29-28.57-112.13-28.57-62.39 0-121.04 24.29-165.16 68.41C44.5 129.46 20.2 188.11 20.2 250.5s24.29 121.04 68.41 165.16c44.11 44.12 102.77 68.41 165.16 68.41 39.84 0 78.15-9.92 112.13-28.57a252.507 252.507 0 01-34.1-28.57c-47.12-47.12-73.08-109.78-73.08-176.42zM674.37 85.34C630.25 41.22 571.6 16.93 509.21 16.93c-40.27 0-78.98 10.14-113.24 29.18 11.74 8.26 22.86 17.6 33.22 27.96 47.12 47.12 73.08 109.78 73.08 176.42s-25.95 129.3-73.08 176.42a252.312 252.312 0 01-33.22 27.96c34.25 19.04 72.96 29.18 113.24 29.18 62.39 0 121.04-24.29 165.16-68.41 44.12-44.11 68.41-102.77 68.41-165.16s-24.29-121.04-68.41-165.16z\"\n      ></path>\n      <foreignObject x=\"30\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-left\">{leftCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"480\" y=\"25\" width=\"250\" height=\"450\">\n        <div className=\"venn-diagram__circle-content-right\">{rightCircleChildren}</div>\n      </foreignObject>\n      <foreignObject x=\"290\" y=\"65\" width=\"182\" height=\"370\">\n        <div className=\"venn-diagram__circle-content-intersection\">{intersectionChildren}</div>\n      </foreignObject>\n    </svg>\n  );\n}\n","import { Button, Space, Typography } from 'antd';\nimport { buildDailyTeoriaDeConjuntosGames } from 'components/Daily/utils/games/daily-teoria-de-conjuntos';\nimport type { DailyTeoriaDeConjuntosEntry } from 'components/Daily/utils/types';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { DiagramGameSample } from './DiagramGameSample';\nimport './GameSimulator.scss';\n\ntype GameSimulatorProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n};\n\nexport function GameSimulator({ things, rules }: GameSimulatorProps) {\n  const [ref] = useMeasure<HTMLDivElement>();\n\n  const [simulation, setSimulation] = useState<DailyTeoriaDeConjuntosEntry | null>(null);\n\n  const onSimulate = () => {\n    setSimulation(\n      Object.values(\n        buildDailyTeoriaDeConjuntosGames(\n          1,\n          {\n            latestDate: '2023/01/01',\n            latestNumber: 0,\n            used: [],\n          },\n          rules,\n          things,\n        ),\n      )[0],\n    );\n  };\n\n  const onGenerateDemoGames = () => {\n    let demos: any = null;\n    try {\n      demos = buildDailyTeoriaDeConjuntosGames(\n        25,\n        {\n          latestDate: '2023/01/01',\n          latestNumber: 0,\n          used: [],\n        },\n        rules,\n        things,\n      );\n\n      console.log(demos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>Game Simulator</Typography.Title>\n\n      <Button size=\"large\" onClick={onSimulate}>\n        Simulate\n      </Button>\n\n      <Button size=\"large\" onClick={onGenerateDemoGames}>\n        Generate Demos (log)\n      </Button>\n\n      {simulation && <DiagramGameSample game={simulation} key={JSON.stringify(simulation)} />}\n    </Space>\n  );\n}\n","import type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { type ReactNode, useEffect, useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\nimport { SYLLABLE_SEPARATOR, getLatestRuleUpdate } from './utils';\n\ntype ItemUpdateGuardProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  rules: Dictionary<DailyDiagramRule>;\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  children: ReactNode;\n};\n\nexport function ItemUpdateGuard({ children, things, rules, addEntryToUpdate }: ItemUpdateGuardProps) {\n  // If any rules has been added or updated AFTER the last time the user has updated the item, the user will be warned to update the item\n  const toUpdateThings = useMemo(() => {\n    const latestRuleUpdate = getLatestRuleUpdate(rules);\n\n    return Object.values(things).filter((item) => {\n      const latestThingUpdate = item.updatedAt;\n\n      // Prevent updating items that have the syllables field but it's not correct\n      if (\n        item.syllables &&\n        item.syllables.split(SYLLABLE_SEPARATOR).join('') !== item.name.replace(/\\s/g, '')\n      ) {\n        console.log('❗️ Name and syllables do not match', item.name, item.syllables);\n        return true;\n      }\n\n      // if (item.syllables.endsWith('ie') && item.updatedAt < 1724527674296) {\n      //   return true;\n      // }\n\n      return latestRuleUpdate > latestThingUpdate;\n    });\n  }, [things, rules]);\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  useEffect(() => {\n    const updateThings = async (_: DailyDiagramItem) => {\n      console.log('Found things that need to update...');\n      setActiveThing(null);\n\n      // Await the wait function here\n      await wait(250);\n\n      if (toUpdateThings.length > 0) {\n        setActiveThing(toUpdateThings[0]);\n      }\n    };\n\n    console.count('Checking for things that need to update...');\n    if (toUpdateThings.length > 0) {\n      updateThings(toUpdateThings[0]);\n    }\n  }, [toUpdateThings]);\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <>\n      {activeThing && (\n        <EditThingModal\n          subtitle={`(${toUpdateThings.length} left to update)`}\n          isModalOpen={activeThing !== null}\n          onSaveThing={onUpdateThing}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          okButtonText=\"Update\"\n          width=\"90vw\"\n        />\n      )}\n      {children}\n    </>\n  );\n}\n","import { App, Button } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { sample } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { wait } from 'utils';\nimport { EditThingModal } from './EditThingModal';\n\ntype AddNewThingFlowProps = {\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  width: number;\n};\n\nexport function AddNewThingFlow({ addEntryToUpdate, availableThings, rules, width }: AddNewThingFlowProps) {\n  const { notification } = App.useApp();\n\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  const onActivateThing = () => {\n    const randomItem = sample(availableThings);\n    if (randomItem) {\n      setActiveThing({\n        itemId: randomItem.id,\n        name: chooseNameThatIsASingleWord(randomItem),\n        updatedAt: Date.now(),\n        syllables: '',\n        stressedSyllable: 0,\n        rules: [],\n      });\n    } else {\n      setActiveThing(null);\n    }\n  };\n\n  const aliases = useMemo(() => {\n    if (!activeThing) return [];\n    const item = availableThings.find((thing) => thing.id === activeThing.itemId);\n    return [item?.name.pt, ...(item?.aliasesPt ?? [])].filter(Boolean);\n  }, [activeThing, availableThings]);\n\n  const onAddItem = async (newThing: DailyDiagramItem) => {\n    if (!activeThing) return;\n    if (!newThing.name || !newThing.itemId) {\n      notification.error({ message: 'Name and Item ID are required' });\n    }\n\n    addEntryToUpdate(newThing.itemId, newThing);\n\n    console.log('COMPLETED SAVE');\n\n    setActiveThing(null);\n\n    await wait(250);\n\n    onActivateThing();\n  };\n\n  const onGiveAnotherThing = async () => {\n    setActiveThing(null);\n    await wait(100);\n    onActivateThing();\n  };\n\n  return (\n    <>\n      <Button size=\"large\" onClick={onActivateThing}>\n        Classify New Item\n      </Button>\n      {!!activeThing && (\n        <EditThingModal\n          isModalOpen={activeThing !== null}\n          onSaveThing={onAddItem}\n          onCancel={() => setActiveThing(null)}\n          thing={activeThing}\n          rules={rules}\n          width={width * 0.9}\n          itemAliases={aliases as string[]}\n          onGiveAnotherThing={onGiveAnotherThing}\n        />\n      )}\n    </>\n  );\n}\n\nconst chooseNameThatIsASingleWord = (item: ItemT) => {\n  if (item.name.pt.split(' ').length === 1) return item.name.pt;\n\n  if (item.aliasesPt) {\n    return item.aliasesPt.find((alias) => alias.split(' ').length === 1) ?? item.name.pt;\n  }\n  return item.name.pt;\n};\n","import { Divider, Flex, Space, Table, type TableColumnsType, Tag, Tooltip, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useMemo } from 'react';\nimport { useMeasure } from 'react-use';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\n\ntype RulesByThingProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n};\n\nexport function RulesByThing({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  setActiveThing,\n}: RulesByThingProps) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const rows = useMemo(() => Object.values(things), [things]);\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableColumnsType<DailyDiagramItem> = [\n    {\n      title: 'ItemId',\n      dataIndex: 'itemId',\n      key: 'itemId',\n      sorter: (a, b) => Number(a.itemId) - Number(b.itemId),\n      render: (itemId: string) => <Tag>{itemId}</Tag>,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (name: string) => <Typography.Text>{name}</Typography.Text>,\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'itemId',\n      key: 'sprite',\n      render: (itemId: string) => (\n        <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n      ),\n    },\n    {\n      title: 'Rules',\n      dataIndex: 'rules',\n      key: 'rules',\n      render: (itemRules: string[], record) => (\n        <Space wrap>\n          {itemRules.map((ruleId) => (\n            <Tooltip title={rules[ruleId].title} key={ruleId}>\n              <Tag color={rules[ruleId].updatedAt > record.updatedAt ? 'red' : undefined}>{ruleId}</Tag>\n            </Tooltip>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'rules',\n      key: 'count',\n      sorter: (a, b) => a.rules.length - b.rules.length,\n      render: (rules: string[]) => rules.length,\n    },\n  ];\n\n  const duplicatedThings = useMemo(() => {\n    const dict: Dictionary<string[]> = {};\n\n    Object.values(things).forEach((item) => {\n      if (!dict[item.name]) {\n        dict[item.name] = [];\n      }\n      dict[item.name].push(item.itemId);\n    });\n    return Object.values(dict).filter((ids) => ids.length > 1);\n  }, [things]);\n\n  return (\n    <Space direction=\"vertical\" ref={ref}>\n      <Typography.Title level={5}>\n        Rules By Items <Divider type=\"vertical\" /> Added: <Tag>{Object.keys(things).length}</Tag> Available to\n        add <Tag>{availableThings.length}</Tag>\n      </Typography.Title>\n\n      <AddNewThingFlow\n        addEntryToUpdate={addEntryToUpdate}\n        availableThings={availableThings}\n        rules={rules}\n        width={containerWidth}\n      />\n\n      <Divider />\n\n      <Table dataSource={rows} columns={columns} rowKey=\"itemId\" pagination={paginationProps} />\n\n      <Divider />\n\n      <Typography.Title level={5}>Duplicated Things</Typography.Title>\n      <Space wrap>\n        {duplicatedThings.length === 0 && <Typography.Text>No duplicated things</Typography.Text>}\n        {duplicatedThings.map((ids) => (\n          <Flex key={ids[0]} align=\"center\">\n            <Tag color=\"red\">{ids.length}</Tag>\n            {ids.map((itemId) => (\n              <ThingButton key={`i-${itemId}`} thing={things[itemId]} onActivateThing={setActiveThing} />\n            ))}\n          </Flex>\n        ))}\n      </Space>\n    </Space>\n  );\n}\n","import { Divider, Rate, Space, Switch, Table, type TableColumnsType, Tag, Typography } from 'antd';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useMemo } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { AddNewThingFlow } from './AddNewThingFlow';\nimport { ThingButton } from './Thing';\n\ntype ThingsByRuleProps = {\n  things: UseResourceFirebaseDataReturnType<DailyDiagramItem>['data'];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyDiagramItem>['addEntryToUpdate'];\n  availableThings: ItemT[];\n  rules: Dictionary<DailyDiagramRule>;\n  thingsByRules: Record<string, string[]>;\n  setActiveThing: React.Dispatch<React.SetStateAction<DailyDiagramItem | null>>;\n  containerWidth: number;\n};\n\nexport function ThingsByRule({\n  things,\n  addEntryToUpdate,\n  availableThings,\n  rules,\n  thingsByRules,\n  setActiveThing,\n  containerWidth,\n}: ThingsByRuleProps) {\n  const { is, addParam } = useQueryParams();\n\n  const rows = useMemo(\n    () =>\n      Object.values(rules).map((r) => ({\n        ...r,\n        thingsCount: thingsByRules[r.id].length,\n      })),\n    [rules, thingsByRules],\n  );\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const stats = useMemo(() => {\n    const quantities = Object.values(thingsByRules).map((things) => things.length);\n\n    return {\n      maxThings: Math.max(...quantities),\n      minThings: Math.min(...quantities),\n      averageThings: Math.round(\n        Object.values(thingsByRules).reduce((sum, things) => sum + things.length, 0) /\n          Object.keys(thingsByRules).length,\n      ),\n    };\n  }, [thingsByRules]);\n\n  const columns: TableColumnsType<DailyDiagramRule & { thingsCount: number }> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => Number(a.id.split('-')[1]) - Number(b.id.split('-')[1]),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Rule',\n      dataIndex: 'title',\n      key: 'title',\n      sorter: (a, b) => a.title.localeCompare(b.title),\n      render: (title: string) => <Typography.Text>{title}</Typography.Text>,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n    },\n    {\n      title: 'Method',\n      dataIndex: 'method',\n      key: 'method',\n      sorter: (a, b) => a.method.localeCompare(b.method),\n    },\n    {\n      title: 'Things',\n      dataIndex: 'thingsCount',\n      key: 'thingsCount',\n      render: (thingsCount: number, record) => (\n        <Space size=\"small\">\n          <Tag>{thingsCount}</Tag>\n          {is('showThings') ? (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 20).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 20 && (\n                <Typography.Text>+{thingsCount - 20} more</Typography.Text>\n              )}\n            </Space>\n          ) : (\n            <Space size=\"small\" wrap>\n              {thingsByRules[record.id].slice(0, 5).map((itemId) => (\n                <ThingButton\n                  key={`${record.id}-${itemId}`}\n                  thing={things[itemId]}\n                  onActivateThing={setActiveThing}\n                />\n              ))}\n              {thingsByRules[record.id].length > 5 && (\n                <Typography.Text>+{thingsCount - 5} more</Typography.Text>\n              )}\n            </Space>\n          )}\n        </Space>\n      ),\n      sorter: (a, b) => a.thingsCount - b.thingsCount,\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      sorter: (a, b) => a.level - b.level,\n      render: (level: number) => <Rate value={level} count={3} disabled />,\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={4}>\n        Things By Rule (Added: {Object.keys(things).length} | {availableThings.length}){' '}\n      </Typography.Title>\n\n      <Space split={<Divider type=\"vertical\" />} wrap>\n        <AddNewThingFlow\n          addEntryToUpdate={addEntryToUpdate}\n          availableThings={availableThings}\n          rules={rules}\n          width={containerWidth}\n        />\n\n        <Typography.Text strong>\n          Average Things: <Tag>{stats.averageThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Max Things: <Tag>{stats.maxThings}</Tag>\n        </Typography.Text>\n\n        <Typography.Text strong>\n          Min Things: <Tag>{stats.minThings}</Tag>\n        </Typography.Text>\n\n        <Switch\n          checked={is('showThings')}\n          onChange={(e) => addParam('showThings', e)}\n          checkedChildren=\"Hide things\"\n          unCheckedChildren=\"Show things\"\n        />\n      </Space>\n\n      <Table dataSource={rows} columns={columns} pagination={paginationProps} />\n    </Space>\n  );\n}\n","import { Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport type { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo, useState } from 'react';\nimport type { DailyDiagramItem, DailyDiagramRule, Item as ItemT } from 'types';\n\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { orderBy } from 'lodash';\nimport { useMeasure } from 'react-use';\nimport { EditThingModal } from './EditThingModal';\nimport { GameSimulator } from './GameSimulator';\nimport { ItemUpdateGuard } from './ItemUpdateGuard';\nimport { RulesByThing } from './RulesByThing';\nimport { ThingsByRule } from './ThingsByRule';\n\nexport function ItemsDiagramSetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyDiagramItem>) {\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const tdrItemsQuery = useTDResource<ItemT>('items');\n  const tdrDiagramRulesQuery = useTDResource<DailyDiagramRule>('daily-diagram-rules');\n\n  const availableThings = useMemo(() => {\n    return Object.values(tdrItemsQuery.data ?? {}).filter((item) => {\n      if (data && data[item.id] !== undefined) return false;\n      if (item.nsfw) return false;\n      const isNameSingleWord = item.name.pt.split(' ').length === 1;\n\n      if (item.decks?.includes('thing')) return true;\n      if (item.decks?.includes('alien') && isNameSingleWord) return true;\n      if (item.decks?.includes('manufactured') && isNameSingleWord) return true;\n\n      return false;\n    });\n  }, [data, tdrItemsQuery.data]);\n\n  const rules = useMemo(() => {\n    return tdrDiagramRulesQuery.data ?? {};\n  }, [tdrDiagramRulesQuery.data]);\n\n  const thingsByRules = useMemo(() => {\n    const dict = Object.values(rules).reduce((acc: Record<string, string[]>, rule) => {\n      acc[rule.id] = [];\n      return acc;\n    }, {});\n\n    orderBy(Object.values(data), ['updatedAt'], ['desc']).forEach((entry) => {\n      entry.rules.forEach((ruleId) => {\n        dict[ruleId].push(entry.itemId);\n      });\n    });\n    return dict;\n  }, [data, rules]);\n\n  const { is, queryParams } = useQueryParams();\n  const [activeThing, setActiveThing] = useState<DailyDiagramItem | null>(null);\n\n  if (tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading) {\n    return <Typography.Text>Loading...</Typography.Text>;\n  }\n\n  const onUpdateThing = (newThing: DailyDiagramItem) => {\n    addEntryToUpdate(newThing.itemId, newThing);\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={tdrItemsQuery.isLoading || tdrDiagramRulesQuery.isLoading}\n      hasResponseData={tdrItemsQuery.hasResponseData || tdrDiagramRulesQuery.hasResponseData}\n    >\n      <div ref={ref}>\n        <ItemUpdateGuard things={data} rules={rules} addEntryToUpdate={addEntryToUpdate}>\n          {activeThing && (\n            <EditThingModal\n              isModalOpen={activeThing !== null}\n              onSaveThing={(at) => {\n                onUpdateThing(at);\n                setActiveThing(null);\n              }}\n              onCancel={() => setActiveThing(null)}\n              thing={activeThing}\n              rules={rules}\n              okButtonText=\"Update\"\n              width={containerWidth}\n            />\n          )}\n\n          {(is('display', 'rule') || !queryParams.has('display')) && (\n            <ThingsByRule\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n              containerWidth={containerWidth}\n            />\n          )}\n\n          {is('display', 'thing') && (\n            <RulesByThing\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n              thingsByRules={thingsByRules}\n              setActiveThing={setActiveThing}\n            />\n          )}\n\n          {is('display', 'simulator') && (\n            <GameSimulator\n              things={data}\n              addEntryToUpdate={addEntryToUpdate}\n              availableThings={availableThings}\n              rules={rules}\n            />\n          )}\n        </ItemUpdateGuard>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsDiagramFilters } from 'components/Items/Diagram/ItemsDiagramFilters';\nimport { ItemsDiagramSetsContent } from 'components/Items/Diagram/ItemsDiagramSetsContent';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport type { DailyDiagramItem } from 'types';\n\nexport function ItemsDiagramSets() {\n  const diagramData = useResourceFirebaseData<DailyDiagramItem>({\n    tdrResourceName: 'daily-diagram-items',\n    firebaseDataCollectionName: 'diagramItems',\n    serialize: true,\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Diagram Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsDiagramFilters {...diagramData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={diagramData.isLoading || diagramData.isSaving}\n            error={diagramData.error}\n            hasResponseData={!isEmpty(diagramData.data)}\n          >\n            <Flex vertical gap={24}>\n              <ItemsDiagramSetsContent {...diagramData} />\n            </Flex>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsDiagramSets;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","undefined","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","error","description","data","useMemo","isSuccess","isPending","cloneDeep","isEmpty","firebaseData","isLoading","save","mutate","serializeFirebaseData","addEntryToUpdate","id","item","prev","entriesToUpdate","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","queryParams","addParam","useQueryParams","current","Number","get","String","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","path","docId","docRef","doc","firestore","updateDoc","options","useMutation","mutationFn","async","ItemsDiagramFilters","addParams","vertical","gap","JSON","stringify","DownloadButton","diagramItems","copy","sortJsonKeys","prepareFileForDownload","fileName","label","value","mode","display","title","ClusterOutlined","TableOutlined","className","EditThingModal","isModalOpen","onSaveThing","onCancel","thing","rules","width","itemAliases","subtitle","okButtonText","onGiveAnotherThing","orderedRules","orderBy","Object","values","r","index","indexOf","method","POSITIVE_INFINITY","slice","split","form","Form","hasUndefinedValues","some","nameWatch","name","syllables","fields","separateSyllables","stressedSyllable","includes","keys","forEach","ruleId","verifiers","length","setFieldsValue","isAcronym","getFieldValue","syllableRulesUpdate","reduce","acc","syllableDependencyVerifier","stressSyllableRulesUpdate","stressSyllableDependencyVerifier","rule1","rule2","rule5","rule3","rule4","splitSyllables","SYLLABLE_SEPARATOR","open","onOk","submit","maskClosable","okButtonProps","htmlType","okText","itemId","onFinish","preparedThing","serializeThing","autoComplete","initialValues","deserializeThing","layout","labelWrap","readOnly","optionType","buttonStyle","map","syllable","updatedAt","toLocaleString","join","offsetTop","justify","align","rule","valuePropName","clsx","checkedChildren","unCheckedChildren","wasAnyRuleUpdated","reVerify","thingRules","filter","key","Thing","code","ThingButton","onActivateThing","DiagramGameSample","game","leftRing","rightRing","intersection","intersectingThing","playerOptions","things","selectedThing","setSelectedThing","direction","level","count","style","maxWidth","VennDiagram","leftCircleChildren","height","arr","rightCircleChildren","intersectionChildren","outline","items","children","strong","text","props","xmlns","viewBox","fill","stroke","strokeMiterlimit","strokeWidth","d","x","y","GameSimulator","ref","useMeasure","simulation","setSimulation","buildDailyTeoriaDeConjuntosGames","latestDate","latestNumber","used","demos","ItemUpdateGuard","toUpdateThings","latestRuleUpdate","getLatestRuleUpdate","latestThingUpdate","replace","activeThing","setActiveThing","wait","updateThings","newThing","AddNewThingFlow","availableThings","randomItem","sample","chooseNameThatIsASingleWord","aliases","find","pt","aliasesPt","Boolean","alias","RulesByThing","containerWidth","rows","paginationProps","columns","dataIndex","sorter","a","b","render","localeCompare","itemRules","record","wrap","color","duplicatedThings","dict","push","ids","dataSource","rowKey","pagination","ThingsByRule","thingsByRules","is","thingsCount","stats","quantities","maxThings","Math","max","minThings","min","averageThings","round","sum","checked","e","ItemsDiagramSetsContent","tdrItemsQuery","tdrDiagramRulesQuery","nsfw","isNameSingleWord","decks","entry","DataLoadingWrapper","hasResponseData","at","has","ItemsDiagramSets","diagramData","hasSider","PageSider"],"sourceRoot":""}