{"version":3,"file":"static/js/ItemsGroups.1edf07bf.chunk.js","mappings":"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","sources":["components/Common/FilterEntries.tsx","components/Common/PaginationWrapper.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Items/ItemBuildingBlocks.tsx","hooks/useGridPagination.tsx","components/Items/Groups/ItemGroupsCard.tsx","components/Items/Groups/ItemsGroupsContent.tsx","components/Items/Groups/ItemsGroupsFilters.tsx","pages/Items/ItemsGroups.tsx"],"sourcesContent":["import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Pagination, Space, SpaceProps, TableProps } from 'antd';\nimport { ReactNode } from 'react';\n\ntype PaginationWrapperProps = {\n  children: ReactNode;\n  pagination: TableProps['pagination'];\n} & SpaceProps;\n\nexport function PaginationWrapper({ children, pagination, ...spaceProps }: PaginationWrapperProps) {\n  const paginationComponent = <Pagination showQuickJumper {...pagination} className=\"fixed-pagination\" />;\n  return (\n    <Space direction=\"vertical\" {...spaceProps}>\n      {paginationComponent}\n      {children}\n      {paginationComponent}\n    </Space>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { TableProps } from 'antd';\nimport { useMemo } from 'react';\n\nimport { useQueryParams } from './useQueryParams';\nimport { usePrevious } from 'react-use';\n\n/**\n * Options for configuring table pagination.\n */\ntype UsePaginationOptions<TData> = {\n  /**\n   * The data array to be paginated.\n   */\n  data: TData[];\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n  /**\n   * The value that triggers the reset of the pagination.\n   */\n  resetter?: string;\n};\n\nexport function useGridPagination<TData>({\n  prefix = '',\n  data,\n  defaultCurrent = 1,\n  defaultPageSize = 64,\n  pageSizeOptions = [16, 32, 64, 128],\n  resetter,\n}: UsePaginationOptions<TData>): {\n  page: TData[];\n  pagination: TableProps['pagination'];\n} {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n  const previous = usePrevious(resetter);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return data.slice(start, end);\n  }, [currentPage, pageSize, data]);\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  if (resetter !== previous) {\n    onChange(defaultCurrent);\n  }\n\n  return {\n    page,\n    pagination: {\n      current: currentPage,\n      pageSize,\n      onChange,\n      onShowSizeChange,\n      defaultCurrent,\n      defaultPageSize,\n      pageSizeOptions,\n      total: data.length,\n      hideOnSinglePage: true,\n    },\n  };\n}\n","import { Card, Select, Space, Typography } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { Item as ItemT } from 'types';\n\nimport { ItemName, ItemNsfw, ItemSprite } from '../ItemBuildingBlocks';\n\ntype ItemGroupsCardProps = {\n  item: ItemT;\n  itemGroups?: string[];\n  groupsTypeahead: { label: string; value: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nexport function ItemGroupsCard({\n  item,\n  itemGroups,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemGroupsCardProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Card\n      title={\n        <>\n          <Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>\n          <ItemNsfw item={item} />\n        </>\n      }\n      style={{ maxWidth: 250 }}\n    >\n      <ItemSprite item={item} width={75} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <ItemName item={item} language=\"en\" />\n        <ItemName item={item} language=\"pt\" />\n\n        <Select\n          mode=\"tags\"\n          style={{ width: '100%' }}\n          placeholder=\"Select a group\"\n          defaultValue={itemGroups}\n          options={groupsTypeahead}\n          showSearch\n          size=\"small\"\n          key={String(itemGroups)}\n          onChange={(groups) => onUpdateItemGroups(item.id, groups)}\n        />\n      </Space>\n    </Card>\n  );\n}\n","import { Col, Drawer, Flex, Row, Table, TableProps, Typography } from 'antd';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item as ItemT, ItemGroup } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { ItemGroupsCard } from './ItemGroupsCard';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { TransparentButton } from 'components/Common';\nimport { ItemsTypeahead } from '../ItemsTypeahead';\nimport { CopyIdsButton } from '../CopyIdsButton';\n\nexport function ItemsGroupsContent({ data, addEntryToUpdate }: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { is, queryParams } = useQueryParams();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const grousByItem = useMemo(() => {\n    return Object.values(data ?? []).reduce((acc: Record<string, string[]>, group) => {\n      if (!group.itemsIds) {\n        console.warn('Group without items', group);\n      }\n      group.itemsIds.forEach((itemId) => {\n        if (!acc[itemId]) {\n          acc[itemId] = [];\n        }\n        acc[itemId].push(group.id);\n      });\n\n      return acc;\n    }, {});\n  }, [data]);\n\n  const groupsTypeahead = useMemo(\n    () =>\n      orderBy(\n        Object.keys(data).map((id) => ({ label: id, value: id })),\n        'label'\n      ),\n    [data]\n  );\n\n  const onUpdateItemGroups = (itemId: string, groupIds: string[]) => {\n    // Compare previous groups in items with new groups\n    const previousGroups = grousByItem[itemId] ?? [];\n    const groupsToAdd = groupIds.filter((id) => !previousGroups.includes(id));\n    const groupsToRemove = previousGroups.filter((id) => !groupIds.includes(id));\n\n    // Add item to groups\n    groupsToAdd.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates([...(data[groupId]?.itemsIds ?? []), itemId]),\n      });\n    });\n\n    // Remove item from groups\n    groupsToRemove.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates(data[groupId]?.itemsIds.filter((id) => id !== itemId)),\n      });\n    });\n  };\n\n  const onUpdateGroupItems = (groupId: string, itemIds: string[]) => {\n    addEntryToUpdate(groupId, {\n      id: groupId,\n      itemsIds: removeDuplicates(itemIds),\n    });\n  };\n\n  return (\n    <>\n      {(is('display', 'group') || !queryParams.has('display')) && (\n        <ItemsGroupsByGroupTable\n          data={data}\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n          onUpdateGroupItems={onUpdateGroupItems}\n        />\n      )}\n      {is('display', 'item') && (\n        <ItemsGroupsByItemTable\n          data={data}\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n          onUpdateGroupItems={onUpdateGroupItems}\n        />\n      )}\n    </>\n  );\n}\n\ntype ItemsGroupsTablesProps = {\n  items: Dictionary<ItemT>;\n  grousByItem: Record<string, string[]>;\n  groupsTypeahead: { value: string; label: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n  onUpdateGroupItems: (groupId: string, itemIds: string[]) => void;\n} & Pick<UseResourceFirebaseDataReturnType<ItemGroup>, 'data'>;\n\nfunction ItemsGroupsByGroupTable({\n  data,\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n  onUpdateGroupItems,\n}: ItemsGroupsTablesProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const [selectedItemId, setSelectedItemId] = useState<null | string>(null);\n\n  const paginationProps = useTablePagination({\n    showQuickJumper: true,\n    total: Object.keys(data).length,\n  });\n\n  const columns: TableProps<ItemGroup>['columns'] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n      render: (id) => <span>{id}</span>,\n    },\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <Flex gap={6} wrap=\"wrap\" key={`items-${record.id}`}>\n          {itemsIds.map((itemId) => (\n            <Flex key={`${record.id}-${itemId}`} gap={2} vertical>\n              <TransparentButton onClick={() => setSelectedItemId(itemId)}>\n                <Item id={itemId} width={60} />\n              </TransparentButton>\n              <Flex justify=\"center\">\n                <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n              </Flex>\n            </Flex>\n          ))}\n        </Flex>\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Actions',\n      dataIndex: 'itemsIds',\n      key: 'actions',\n      render: (itemsIds: string[]) => <CopyIdsButton ids={itemsIds} />,\n    },\n  ];\n\n  const selectedItem = selectedItemId ? items[selectedItemId] : null;\n\n  return (\n    <>\n      <Table\n        columns={columns}\n        dataSource={Object.values(data)}\n        className=\"my-4\"\n        rowKey=\"id\"\n        pagination={paginationProps}\n        expandable={{\n          expandedRowRender: (record) => (\n            <AddItemFlow group={record} onUpdateGroupItems={onUpdateGroupItems} />\n          ),\n          rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n        }}\n      />\n      <Drawer title=\"Edit Item Group\" onClose={() => setSelectedItemId(null)} open={!!selectedItem}>\n        {selectedItem && (\n          <ItemGroupsCard\n            item={selectedItem}\n            itemGroups={grousByItem[selectedItem.id]}\n            groupsTypeahead={groupsTypeahead}\n            onUpdateItemGroups={onUpdateItemGroups}\n          />\n        )}\n      </Drawer>\n    </>\n  );\n}\n\ntype AddItemFlowProps = {\n  group: ItemGroup;\n  onUpdateGroupItems: (groupId: string, itemIds: string[]) => void;\n};\n\nexport function AddItemFlow({ group, onUpdateGroupItems }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    onUpdateGroupItems(group.id, [...group.itemsIds, itemId]);\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\nfunction ItemsGroupsByItemTable({\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemsGroupsTablesProps) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const data = useMemo(\n    () => (showOnlyEmpty ? Object.values(items).filter((v) => !grousByItem[v.id]) : Object.values(items)),\n    [items, grousByItem, showOnlyEmpty]\n  );\n\n  const { page, pagination } = useGridPagination({ data });\n\n  return (\n    <>\n      <Typography.Title level={2}>Groups by Items ({data.length})</Typography.Title>\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemGroupsCard\n                item={item}\n                itemGroups={grousByItem[item.id]}\n                groupsTypeahead={groupsTypeahead}\n                onUpdateItemGroups={onUpdateItemGroups}\n              />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { ItemGroup } from 'types';\nimport { removeDuplicates, sortItemsIds, sortJsonKeys } from 'utils';\n\nimport { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { cloneDeep, isEmpty, omitBy } from 'lodash';\n\nexport function ItemsGroupsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { queryParams, addParam, addParams, is } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(prepareObjectToSave(entriesToUpdate))}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"items-groups.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'group'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Groups',\n            icon: <ClusterOutlined />,\n            value: 'group',\n          },\n          {\n            title: 'By Items',\n            icon: <TableOutlined />,\n            value: 'item',\n          },\n        ]}\n      />\n\n      {is('display', 'item') && (\n        <FilterSwitch\n          label=\"No Groups Only\"\n          value={is('emptyOnly')}\n          onChange={(mode) => addParam('emptyOnly', mode, false)}\n        />\n      )}\n    </SiderContent>\n  );\n}\n\nfunction prepareObjectToSave(groups: Dictionary<ItemGroup>) {\n  return omitBy(cloneDeep(groups), (group) => isEmpty(group.itemsIds));\n}\n\nfunction prepareFileForDownload(groups: Dictionary<ItemGroup>) {\n  Object.keys(groups).forEach((key) => {\n    groups[key].itemsIds = sortItemsIds(removeDuplicates(groups[key].itemsIds));\n  });\n  return sortJsonKeys(prepareObjectToSave(groups));\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsGroupsContent } from 'components/Items/Groups/ItemsGroupsContent';\nimport { ItemsGroupsFilters } from 'components/Items/Groups/ItemsGroupsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { Item, ItemGroup } from 'types';\n\nexport function ItemsGroups() {\n  const groupsQuery = useResourceFirebaseData<ItemGroup>({\n    tdrResourceName: 'items-groups',\n    firebaseDataCollectionName: 'itemsGroups',\n    serialize: true,\n  });\n  const itemsTypeaheadQuery = useTDResource<Item>('items');\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Groups Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsGroupsFilters {...groupsQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={groupsQuery.isLoading || itemsTypeaheadQuery.isLoading}\n            error={groupsQuery.error || itemsTypeaheadQuery.error}\n            hasResponseData={!isEmpty(groupsQuery.data) && !isEmpty(itemsTypeaheadQuery.data)}\n          >\n            <ItemsGroupsContent {...groupsQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsGroups;\n"],"names":["FilterSelect","label","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","className","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","layout","length","block","option","arrow","trigger","title","icon","PaginationWrapper","children","pagination","spaceProps","paginationComponent","showQuickJumper","direction","SectionTitle","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","ItemSprite","item","id","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","variant","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","useGridPagination","data","defaultCurrent","defaultPageSize","pageSizeOptions","resetter","queryParams","addParam","useQueryParams","currentPage","Number","get","String","pageSize","previous","usePrevious","page","useMemo","start","end","slice","toString","current","onShowSizeChange","_","total","hideOnSinglePage","ItemGroupsCard","itemGroups","groupsTypeahead","onUpdateItemGroups","maxWidth","mode","defaultValue","showSearch","groups","ItemsGroupsContent","addEntryToUpdate","is","itemsTypeaheadQuery","useTDResource","grousByItem","Object","values","reduce","acc","group","itemsIds","console","warn","forEach","push","orderBy","keys","groupIds","previousGroups","groupsToAdd","filter","includes","groupsToRemove","groupId","removeDuplicates","onUpdateGroupItems","itemIds","has","ItemsGroupsByGroupTable","items","ItemsGroupsByItemTable","selectedItemId","setSelectedItemId","useState","paginationProps","useTablePagination","columns","dataIndex","key","render","record","gap","wrap","vertical","justify","Table","Boolean","CopyIdsButton","ids","selectedItem","dataSource","rowKey","expandable","expandedRowRender","AddItemFlow","rowExpandable","isSuccess","onClose","open","ItemsTypeahead","onFinish","showOnlyEmpty","gutter","xs","sm","md","lg","xl","ItemsGroupsFilters","save","isSaving","entriesToUpdate","addParams","SaveButton","onSave","dirt","JSON","stringify","prepareObjectToSave","DownloadButton","prepareFileForDownload","sortItemsIds","sortJsonKeys","fileName","display","ClusterOutlined","TableOutlined","omitBy","cloneDeep","isEmpty","ItemsGroups","groupsQuery","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}