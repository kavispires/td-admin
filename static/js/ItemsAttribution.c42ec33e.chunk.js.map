{"version":3,"file":"static/js/ItemsAttribution.c42ec33e.chunk.js","mappings":"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","sources":["components/Common/FilterEntries.tsx","components/Common/LanguageFlag.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Items/ItemBuildingBlocks.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","hooks/useUpdateFirebaseDoc.tsx","hooks/useItemQueryParams.ts","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","components/Items/Attributes/AttributionValueButtons.tsx","components/Items/Attributes/ItemAttributeDescription.tsx","components/Common/Stat.tsx","components/Items/Attributes/ItemAttributeStats.tsx","components/Items/Attributes/ItemAttributionCard.tsx","components/Items/Attributes/ItemAttributionNavigation.tsx","components/Items/Attributes/ItemSamplerCard.tsx","hooks/useItemSampler.ts","components/Common/GoToTopButton.tsx","components/Items/Attributes/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","components/Items/Attributes/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/Attributes/ItemSimulation.tsx","components/Items/Attributes/ItemStats.tsx","components/Items/Attributes/ItemAttributionPageContent.tsx","components/Items/Attributes/ItemAttributionFiltersSections.tsx","components/Items/Attributes/ItemAttributionFilters.tsx","pages/Items/ItemsAttribution.tsx"],"sourcesContent":["import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","function BrazilFlag(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 335.4\" {...props}>\n      <path\n        fill=\"#73af00\"\n        d=\"M473.6 0H38.3A38.3 38.3 0 000 38.3v258.8a38.4 38.4 0 0038.4 38.4h435.3A38.4 38.4 0 00512 297V38.3A38.3 38.3 0 00473.6 0z\"\n      ></path>\n      <path\n        fill=\"#ffe15a\"\n        d=\"M251.4 47l-186 113.2a8.8 8.8 0 000 15l186 113.3a8.8 8.8 0 009.2 0l186-113.2a8.8 8.8 0 000-15.1l-186-113.3a8.8 8.8 0 00-9.2 0z\"\n      ></path>\n      <circle cx=\"256\" cy=\"167.7\" r=\"70.6\" fill=\"#41479b\"></circle>\n      <path\n        fill=\"#f5f5f5\"\n        d=\"M195.4 131.6a70.2 70.2 0 00-7.6 18.1c39.1-3 97 8 134 43.8a70.4 70.4 0 004.5-19.5c-38-32.1-90.7-43.5-130.9-42.4zm63.6 60.2l1.8 5.7h6a.8.8 0 01.4 1.4l-4.8 3.5 1.8 5.7a.8.8 0 01-1.2.9l-4.8-3.5-4.9 3.5a.8.8 0 01-1.2-.9l1.8-5.7-4.8-3.5a.8.8 0 01.5-1.4h6l1.8-5.7a.8.8 0 011.5 0zm23 14.6l.8 2.4h2.6a.3.3 0 01.2.7l-2 1.5.7 2.4a.3.3 0 01-.5.4l-2.1-1.5-2.1 1.5a.3.3 0 01-.5-.4l.7-2.4-2-1.5a.3.3 0 01.2-.7h2.5l.9-2.4a.3.3 0 01.6 0zm-33-25.3l.7 2.4h2.6a.3.3 0 01.2.7l-2 1.5.7 2.5a.3.3 0 01-.5.3l-2-1.5-2.2 1.5a.3.3 0 01-.5-.4l.8-2.4-2-1.5a.3.3 0 01.1-.6h2.6l.8-2.5a.3.3 0 01.6 0zm-44.9-2.9l.8 2.4h2.6a.3.3 0 01.2.6l-2 1.5.7 2.5a.3.3 0 01-.5.4l-2.1-1.5-2 1.4a.3.3 0 01-.6-.3l.8-2.5-2-1.5a.3.3 0 01.1-.6h2.6l.8-2.4a.3.3 0 01.6 0zm37.5 27.4l.8 2.4h2.6a.3.3 0 01.2.6l-2 1.5.7 2.5a.3.3 0 01-.5.4l-2.1-1.5-2 1.5a.3.3 0 01-.6-.4l.7-2.5-2-1.5a.3.3 0 01.2-.6h2.5l.9-2.4a.3.3 0 01.6 0zM221 176.5l.7 2h2a.3.3 0 01.2.5l-1.7 1.2.7 2a.3.3 0 01-.5.3l-1.7-1.2-1.7 1.2a.3.3 0 01-.4-.3l.6-2-1.7-1.2a.3.3 0 01.2-.5h2.1l.7-2a.3.3 0 01.5 0zm62.8-41l.8 2.5h2.7a.3.3 0 01.2.6l-2.1 1.6.7 2.5a.3.3 0 01-.5.4l-2.1-1.5-2.1 1.5a.4.4 0 01-.6-.4l.8-2.5-2.1-1.6a.3.3 0 01.2-.6h2.6l.8-2.5a.3.3 0 01.7 0zM207 164.3l.7 2h2a.3.3 0 01.2.5l-1.7 1.3.7 2a.3.3 0 01-.5.3l-1.7-1.2-1.7 1.2a.3.3 0 01-.4-.3l.6-2-1.7-1.3a.3.3 0 01.2-.5h2.1l.7-2a.3.3 0 01.5 0zm10.1 28l1 3h3.2a.4.4 0 01.2.8L219 198l1 3a.4.4 0 01-.7.5l-2.5-1.9-2.6 1.9a.4.4 0 01-.7-.5l1-3-2.5-1.9a.4.4 0 01.2-.8h3.2l1-3a.4.4 0 01.7 0zm77.8 14.7l.6 2h2a.3.3 0 01.2.4l-1.6 1.2.6 1.9a.3.3 0 01-.4.3l-1.7-1.2-1.6 1.2a.3.3 0 01-.4-.3l.6-1.9-1.6-1.2a.3.3 0 01.1-.5h2l.7-1.9a.3.3 0 01.5 0zm7-14.4l.8 2.4h2.5a.3.3 0 01.3.7l-2.1 1.5.8 2.4a.3.3 0 01-.6.4l-2-1.5-2.1 1.5a.3.3 0 01-.6-.4l.8-2.4-2-1.5a.3.3 0 01.1-.6h2.6l.8-2.4a.3.3 0 01.7-.1z\"\n      ></path>\n    </svg>\n  );\n}\n\nfunction UnitedStatesFlag(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 335.45\" {...props}>\n      <path\n        fill=\"#f5f5f5\"\n        d=\"M473.65.01H38.35A38.34 38.34 0 000 38.35v258.76a38.35 38.35 0 0038.35 38.35h435.3A38.35 38.35 0 00512 297.11V38.35A38.34 38.34 0 00473.65.01z\"\n      ></path>\n      <path\n        fill=\"#ff4b55\"\n        d=\"M2.11 25.81h507.78A38.34 38.34 0 00473.66.01H38.35a38.35 38.35 0 00-36.24 25.8z\"\n      ></path>\n      <path fill=\"#ff4b55\" d=\"M0 103.22H512V129.02H0z\"></path>\n      <path fill=\"#ff4b55\" d=\"M0 51.61H512V77.41H0z\"></path>\n      <path fill=\"#ff4b55\" d=\"M0 171.8a8.83 8.83 0 008.83 8.83H512v-25.8H0z\"></path>\n      <path fill=\"#ff4b55\" d=\"M0 258.05H512V283.85H0z\"></path>\n      <path\n        fill=\"#ff4b55\"\n        d=\"M509.89 309.65H2.11a38.35 38.35 0 0036.24 25.8h435.3a38.35 38.35 0 0036.24-25.8z\"\n      ></path>\n      <path fill=\"#ff4b55\" d=\"M0 206.43H512V232.23000000000002H0z\"></path>\n      <path\n        fill=\"#41479b\"\n        d=\"M8.83 180.63h220.69a8.83 8.83 0 008.83-8.83V8.83A8.84 8.84 0 00229.52 0H38.35A38.36 38.36 0 000 38.35V171.8a8.83 8.83 0 008.83 8.83z\"\n      ></path>\n      <path\n        fill=\"#f5f5f5\"\n        d=\"M24.79 20.27l1.95 5.86h6.18a.84.84 0 01.49 1.51l-5 3.66 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.92l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6-.01zM24.79 50.92l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6 0zM24.79 81.58l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.92l1.86-5.89-5-3.67a.84.84 0 01.49-1.51h6.18l1.95-5.86a.83.83 0 011.6 0zM24.79 112.23l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.6-5 3.6a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6 0zM24.79 142.88l1.95 5.85 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.6-.04zM48.58 35.3l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.5 0zM48.58 65.95l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.5 0zM48.58 96.61l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.8-5.8-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.56-.04zM48.58 127.26l2 5.86 6.17.05a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.5 0zM72.38 20.27l2 5.86h6.18a.83.83 0 01.44 1.6l-5 3.66 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.66a.84.84 0 01.49-1.51h6.17l2-5.86a.83.83 0 011.55-.09zM72.38 50.92l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM72.38 81.58l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM72.38 112.23l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM72.38 142.88l2 5.86 6.18.05a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.84.84 0 011.51 0zM96.17 35.3l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.27-.93l1.86-5.89-5.01-3.6a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.5-.07zM96.17 65.95l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.6-5 3.6a.83.83 0 01-1.27-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l2-5.86a.83.83 0 011.49 0zM96.17 96.61l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.27-.93l1.79-5.8-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.56-.04zM96.17 127.26l2 5.86 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.6-5 3.6a.83.83 0 01-1.27-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 2-5.86a.83.83 0 011.49 0zM120 20.27l2 5.86h6.17a.84.84 0 01.49 1.51l-5 3.66 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.88-5-3.67a.84.84 0 01.49-1.51h6.18l1.95-5.86a.83.83 0 011.55 0zM120 50.92l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.55 0zM120 81.58l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 1.95-5.86a.83.83 0 011.55.05zM120 112.23l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.55 0zM120 142.88l2 5.86 6.17.05a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.18-.05 1.95-5.86a.84.84 0 011.55 0zM143.76 35.3l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM143.76 65.95l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.51 0zM143.76 96.61l2 5.86h6.18a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.83.83 0 011.51.05zM143.76 127.26l2 5.86 6.18.05a.83.83 0 01.48 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.83.83 0 011.51 0zM167.55 20.27l1.95 5.86h6.18a.84.84 0 01.49 1.51l-5 3.66 1.86 5.89a.83.83 0 01-1.27.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.66a.84.84 0 01.49-1.51h6.18l1.95-5.86a.83.83 0 011.59 0zM167.55 50.92l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.6-5 3.6a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.59 0zM167.55 81.58l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.95-5.86a.83.83 0 011.59 0zM167.55 112.23l1.95 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.6-5 3.6a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5h6.18l1.99-5.86a.83.83 0 011.55 0zM167.55 142.88l1.95 5.85 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.27.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 1.95-5.86a.84.84 0 011.6.01zM191.34 35.3l2 5.86h6.17a.83.83 0 01.49 1.57l-5 3.67 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5h6.18l1.95-5.86a.83.83 0 011.56-.07zM191.34 65.95l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5h6.18l1.95-5.86a.83.83 0 011.56 0zM191.34 96.61l2 5.86h6.17a.83.83 0 01.49 1.5l-5 3.76 1.87 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5l6.18-.05 1.95-5.86a.83.83 0 011.56-.04zM191.34 127.26l2 5.86 6.17.05a.83.83 0 01.49 1.5l-5 3.67 1.87 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.86-5.89-5-3.67a.83.83 0 01.48-1.5l6.18-.05 1.95-5.86a.83.83 0 011.56 0zM215.14 20.27l2 5.86h6.18a.84.84 0 01.49 1.51l-5 3.66 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.66a.84.84 0 01.49-1.51h6.17l2-5.86a.83.83 0 011.5 0zM215.14 50.92l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.5 0zM215.14 81.58l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.83.83 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.5 0zM215.14 112.23l2 5.86h6.18a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.84.84 0 01-1.28.93l-5-3.6-5 3.6a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5h6.17l2-5.86a.83.83 0 011.5 0zM215.14 142.88l2 5.86 6.18.05a.83.83 0 01.49 1.5l-5 3.67 1.86 5.89a.83.83 0 01-1.28.93l-5-3.59-5 3.59a.84.84 0 01-1.28-.93l1.87-5.89-5-3.67a.83.83 0 01.49-1.5l6.17-.05 2-5.86a.84.84 0 011.5 0z\"\n      ></path>\n    </svg>\n  );\n}\n\ntype LanguageFlagProps = {\n  language: Language;\n} & React.SVGProps<SVGSVGElement>;\n\nexport function LanguageFlag({ language, ...props }: LanguageFlagProps) {\n  return language === 'pt' ? <BrazilFlag {...props} /> : <UnitedStatesFlag {...props} />;\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { deserializeFirebaseData, getNewItem, getNewItemAttributeValues, serializeFirebaseData } from 'utils';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAtributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAtributesValues>\n  >('tdr', 'itemsAttributeValues', {\n    select: deserializeFirebaseData,\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAtributesValues>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', 'itemsAttributeValues'],\n      });\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAtributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAtributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id'\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(serializeFirebaseData({ ...firebaseData, ...modifiedAttributeValues }));\n  };\n\n  // Filter items that have the alien deck only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.decks ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc'\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if ((tdrItemsQuery.data ?? {})?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n","import { App } from 'antd';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { ReactNode, useContext, createContext, useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues, sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAtributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAtributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAtributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAtributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAtributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n  attributesToUpdate: Dictionary<ItemAtributesValues>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n  attributesToUpdate: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n      } else {\n        message.error(`Item ${itemId} is not available for attribution.`);\n      }\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAtributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {})\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n        attributesToUpdate,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { Radio, Tooltip } from 'antd';\nimport { ItemAttribute } from 'types';\n\nimport { CheckCircleFilled, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {attribute.name.en}{' '}\n        <Tooltip title={attribute.description.en}>\n          <QuestionCircleOutlined />\n        </Tooltip>\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from 'utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAtributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated]\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { Tag, Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAtributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n          acc += v / 2;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Stat label=\"Reliability\">{relevancy}%</Stat>\n      </Flex>\n    </div>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute, index) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group className=\"my-4\">\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Title\">\n        <Button>Go To</Button>\n      </Popover>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return <ItemsTypeahead isPending={false} onFinish={(itemId) => jumpToItem('goTo', itemId)} />;\n}\n","import { Button, Card, Divider, Empty, Flex, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue, itemsLeftForAttribute } = useItemSampler();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n  }\n\n  const sample = sampleIds.map((itemId) => ({\n    itemAttributes: getItemAttributeValues(itemId),\n    item: getItem(itemId),\n  }));\n\n  const unsetItems = sample.filter(({ itemAttributes }) => !itemAttributes.attributes[attribute!.id]);\n\n  const onMarkRestAsUnrelated = () => {\n    unsetItems.forEach(({ item }) => {\n      updateAttributeValue(item.id, attribute!.id, -3);\n    });\n  };\n\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} - {attribute?.description.en} ({itemsLeftForAttribute} items left)\n        </Typography.Text>\n      }\n      actions={[\n        <Button onClick={onMarkRestAsUnrelated} danger disabled={unsetItems.length === 0}>\n          Mark rest as unrelated\n        </Button>,\n        <Button type=\"primary\" ghost onClick={onGetSample}>\n          Get New Sample\n        </Button>,\n      ]}\n      extra={\n        <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n          Get New Sample\n        </Button>\n      }\n    >\n      <Flex vertical gap={6}>\n        {sample.length === 0 && (\n          <Empty\n            description=\"No unset items found for this attribute.\"\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        )}\n        {sample.map(({ item, itemAttributes }) => {\n          return (\n            <Fragment key={`${item.id}-${itemAttributes.updatedAt}`}>\n              <Flex gap={6}>\n                <ItemSprite item={item} width={75} />\n                <Flex vertical gap={6}>\n                  <Flex gap={6}>\n                    <ItemId item={item} />\n                    <ItemGoTo item={item} />\n                  </Flex>\n                  <ItemName item={item} language=\"en\" />\n                  <ItemName item={item} language=\"pt\" />\n                </Flex>\n                <AttributionValueButtons\n                  attribute={attribute!}\n                  value={itemAttributes.attributes[attribute!.id]}\n                  onChange={(attributeId: string, value: number) =>\n                    updateAttributeValue(item.id, attributeId, value)\n                  }\n                />\n              </Flex>\n              <Divider className=\"my-1\" />\n            </Fragment>\n          );\n        })}\n      </Flex>\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  const getSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    return {\n      selectedAttribute,\n      selected,\n    };\n  };\n\n  // Create sample\n  const onGetSample = () => {\n    let tempSample = getSample();\n    let attempts = 0;\n    while (tempSample.selected.length === 0 && attempts < 30) {\n      tempSample = getSample();\n      attempts++;\n    }\n\n    setAttribute(tempSample.selectedAttribute);\n    setSampleIds(tempSample.selected);\n  };\n\n  const itemsLeftForAttribute = useMemo(() => {\n    if (!attribute) return 0;\n\n    return availableItemIds.filter((id) => !getItemAttributeValues(id).attributes[attribute?.id]).length;\n  }, [attribute, availableItemIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    itemsLeftForAttribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { ButtonProps } from 'antd/lib/button';\nimport { useEffect, useState } from 'react';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.pageYOffset > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { Button, Card, Empty, Flex, Pagination, Popconfirm, Select, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\n\nconst getStatSentence = (stats: Record<string, number>, scope: string | null) => {\n  if (scope === 'unset' || !scope) {\n    return `${100 - stats.percent}% done, ${stats.group} left`;\n  }\n\n  return `${stats.percent}%  - ${stats.group} items`;\n};\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n\n  const { attribute, pageIds, updateAttributeValue, updatePageItemsAsUnrelated, pagination, stats, sorting } =\n    useItemGrouping();\n  const { searchParams } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const sortingComponent = (\n    <Flex align=\"center\">\n      <Typography.Text className=\"mr-2\">Sort by</Typography.Text>\n      <Select style={{ width: 120 }} value={sorting.sortBy} onChange={(v) => sorting.setSortBy(v)}>\n        <Select.Option value={null}>Last Updated</Select.Option>\n        {attributesList.map((a) => (\n          <Select.Option key={a.id} value={a.id}>\n            {a.name.en}\n          </Select.Option>\n        ))}\n      </Select>\n    </Flex>\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({getStatSentence(stats, searchParams.get('scope'))}) -{' '}\n          {attribute.description.en}\n        </Typography.Text>\n      }\n      extra={\n        <Flex align=\"center\">\n          {sortingComponent}\n\n          {paginationComponent}\n        </Flex>\n      }\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.length === 0 && (\n        <Empty\n          description=\"No items found in this scope for this attribute.\"\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n        />\n      )}\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute!}\n                value={itemAttributes.attributes[attribute!.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { orderBy } from 'lodash';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const [sortBy, setSortBy] = useState<string | null>(null);\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    return orderBy(\n      filteredItemIds,\n      [\n        (id) => (sortBy ? getItemAttributeValues(id)?.attributes?.[sortBy] : true),\n        (id) => getItemAttributeValues(id)?.updatedAt,\n        (id) => Number(id),\n      ],\n      [sortOrder, 'desc', 'asc']\n    );\n  }, [attributeKey, scope, sortBy, sortOrder]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      })\n    );\n  };\n\n  return {\n    group,\n    stats: {\n      total: availableItemIds.length,\n      group: group.length,\n      percent: Math.round((group.length / availableItemIds.length) * 100),\n    },\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    sorting: {\n      sortBy,\n      setSortBy,\n      sortOrder,\n      setSortOrder,\n    },\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { Flex, Table, TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport { Item } from 'types';\n\nimport { AttributeSprite } from './ItemAttributeDescription';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <ItemGoTo item={item} />\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : ''}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} pagination={{ showQuickJumper: true }} />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { filterMessage, getItemAttributePriorityResponse } from 'utils';\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { Item, ItemAtributesValues } from 'types';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAtributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc']\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { App, Button, Flex, InputNumber, Space, Typography } from 'antd';\nimport {\n  FilterCheckBox,\n  FilterNumber,\n  FilterSelect,\n  FilterSwitch,\n  TransparentButton,\n} from 'components/Common';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keys, sampleSize, shuffle, sortBy } from 'lodash';\nimport { useState } from 'react';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport clsx from 'clsx';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport {\n  CheckSquareOutlined,\n  CloseSquareOutlined,\n  LineChartOutlined,\n  PlusSquareOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\n\nconst ROMAN_NUMERALS = ['', 'I', 'II', 'III', 'IV', 'V'];\n\ntype AttributeSummary = {\n  relatedCount: number;\n  deterministicCount: number;\n  unclearCount: number;\n  oppositeCount: number;\n} & ItemAttribute;\n\nexport function ItemSimulation() {\n  const { attributes, availableItemIds, getItemAttributeValues, getItem } = useItemsAttributeValuesContext();\n  const { message } = App.useApp();\n\n  const [gridSize, setGridSize] = useState<16 | 25>(25);\n  const [reliabilityThreshold, setReliabilityThreshold] = useState<number>(90);\n  const [nsfw, setNsfw] = useState<boolean>(false);\n  const [selectedItemsIds, setSelectedItemsIds] = useState<string[]>([]);\n  const [selectedAttributes, setSelectedAttributes] = useState<AttributeSummary[]>([]);\n  const [highlightedAttributeKey, setHighlightedAttributeKey] = useState<string | null>(null);\n  const [displays, setDisplays] = useState<BooleanDictionary>({\n    id: true,\n    nameEn: true,\n    namePt: true,\n    reliability: true,\n  });\n\n  const onGetSample = () => {\n    const keysDict: Record<string, string> = {};\n\n    const shuffledIds = shuffle(availableItemIds);\n\n    while (Object.values(keysDict).length < gridSize) {\n      const itemId = shuffledIds.pop();\n      if (!itemId) break;\n\n      const itemAttributeValues = getItemAttributeValues(itemId);\n\n      if (!itemAttributeValues) continue;\n      if (\n        !itemAttributeValues.complete ||\n        !itemAttributeValues.reliability ||\n        itemAttributeValues.reliability < reliabilityThreshold\n      )\n        continue;\n\n      if (!nsfw && getItem(itemId).nsfw) continue;\n\n      if (itemAttributeValues.key && !keysDict[itemAttributeValues.key]) {\n        keysDict[itemAttributeValues.key] = itemId;\n      } else {\n        console.log('Item has identical key to another item. Skipping.', getItem(itemId).name.en);\n      }\n    }\n    const result = Object.values(keysDict);\n    if (result.length < gridSize) {\n      message.error(`Could not generate sample. Got only ${result.length} items`);\n    }\n\n    setSelectedItemsIds(sortBy(result, (itemId) => Number(itemId)));\n\n    // Get the most common attributes\n    const attributesResult = getHighestAttributeKeys(\n      result.map((itemId) => getItemAttributeValues(itemId)),\n      25,\n      attributes\n    );\n\n    // If less than 25 attributes are found, add more by priority\n    if (attributesResult.length < 25) {\n      const remainingAttributes = keys(attributes).filter((key) => !attributesResult.includes(key));\n      const remainingAttributesByPriority = sortBy(remainingAttributes, (key) => attributes[key].priority);\n      const toBeAdded = remainingAttributesByPriority.slice(0, 25 - attributesResult.length);\n      console.log('Adding more attributes by priority', toBeAdded);\n      attributesResult.push(...toBeAdded);\n    }\n\n    const dicts = attributesResult.reduce(\n      (\n        acc: {\n          relatedCount: NumberDictionary;\n          deterministicCount: NumberDictionary;\n          unclearCount: NumberDictionary;\n          oppositeCount: NumberDictionary;\n        },\n        key\n      ) => {\n        result.forEach((itemId) => {\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          if (!itemAttributeValues) return;\n          switch (itemAttributeValues.attributes[key]) {\n            case ATTRIBUTE_VALUE.RELATED:\n              acc.relatedCount[key] = (acc.relatedCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.DETERMINISTIC:\n              acc.deterministicCount[key] = (acc.deterministicCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.UNCLEAR:\n              acc.unclearCount[key] = (acc.unclearCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.OPPOSITE:\n              acc.oppositeCount[key] = (acc.oppositeCount[key] || 0) + 1;\n              break;\n          }\n        });\n\n        return acc;\n      },\n      { relatedCount: {}, deterministicCount: {}, unclearCount: {}, oppositeCount: {} }\n    );\n\n    setSelectedAttributes(\n      attributesResult.sort().map((key) => ({\n        ...attributes[key],\n        relatedCount: dicts.relatedCount[key],\n        deterministicCount: dicts.deterministicCount[key],\n        unclearCount: dicts.unclearCount[key],\n        oppositeCount: dicts.oppositeCount[key],\n      }))\n    );\n  };\n\n  const onUpdateDisplays = (key: string) => {\n    setDisplays((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Simulator</Typography.Title>\n\n      <Typography.Paragraph>\n        Generates a board with items different enough to get Deterministic values in all selected attributes.\n      </Typography.Paragraph>\n\n      <Flex wrap gap={12}>\n        <FilterSelect\n          label=\"Grid Size\"\n          value={gridSize}\n          onChange={(value) => setGridSize(value)}\n          options={[16, 25]}\n        />\n        <FilterNumber\n          label=\"Reliability Threshold\"\n          value={reliabilityThreshold}\n          onChange={(value) => setReliabilityThreshold(value)}\n          step={5}\n          min={10}\n          max={100}\n        />\n        <FilterSwitch label=\"NSFW\" value={nsfw} onChange={setNsfw} />\n        <Button onClick={onGetSample} type=\"primary\">\n          Get Sample Board\n        </Button>\n      </Flex>\n      <Flex wrap gap={12}>\n        <FilterCheckBox label=\"Show Id\" value={!!displays.id} onChange={() => onUpdateDisplays('id')} />\n        <FilterCheckBox\n          label=\"Show Name (EN)\"\n          value={!!displays.nameEn}\n          onChange={() => onUpdateDisplays('nameEn')}\n        />\n        <FilterCheckBox\n          label=\"Show Name (PT)\"\n          value={!!displays.namePt}\n          onChange={() => onUpdateDisplays('namePt')}\n        />\n        <FilterCheckBox\n          label=\"Show Reliability\"\n          value={!!displays.reliability}\n          onChange={() => onUpdateDisplays('reliability')}\n        />\n      </Flex>\n\n      <div className=\"simulator-grid\" style={{ gridTemplateColumns: `repeat(${Math.sqrt(gridSize)}, 1fr)` }}>\n        {selectedItemsIds.map((itemId) => {\n          const item = getItem(itemId);\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          return (\n            <Space\n              key={itemId}\n              direction=\"vertical\"\n              className={clsx(\n                'simulator-grid__entry',\n                highlightedAttributeKey &&\n                  itemAttributeValues.attributes[highlightedAttributeKey] > 0 &&\n                  'simulator-grid__entry--highlighted'\n              )}\n              align=\"center\"\n            >\n              <Space>\n                <Flex vertical>\n                  {displays.id && <ItemId item={item} />}\n\n                  {displays.reliability && (\n                    <span>\n                      <InputNumber\n                        prefix={<LineChartOutlined />}\n                        placeholder=\"Reliability\"\n                        variant=\"borderless\"\n                        size=\"small\"\n                        value={itemAttributeValues.reliability}\n                        readOnly\n                        style={{ width: '8ch' }}\n                        formatter={(value) => `${value}%`}\n                      />\n                    </span>\n                  )}\n\n                  {displays.id && <ItemGoTo item={item} />}\n                </Flex>\n\n                <ItemSprite item={item} width={50} />\n              </Space>\n\n              {displays.nameEn && <ItemName item={item} language=\"en\" />}\n              {displays.namePt && <ItemName item={item} language=\"pt\" />}\n            </Space>\n          );\n        })}\n      </div>\n\n      <div className=\"simulator-grid my-4\">\n        {selectedAttributes.map((attributeSummary) => (\n          <TransparentButton\n            key={attributeSummary.id}\n            className={clsx(\n              'simulator-grid__entry',\n              'simulator-grid__button',\n              highlightedAttributeKey === attributeSummary.id && 'simulator-grid__entry--highlighted'\n            )}\n            onClick={() => setHighlightedAttributeKey(attributeSummary.id)}\n          >\n            {attributeSummary.name.en} {ROMAN_NUMERALS[attributeSummary.level]}\n            <Flex gap={6} justify=\"center\" className=\"my-1\">\n              <span>\n                <CheckSquareOutlined\n                  style={{ color: attributeSummary.deterministicCount ? 'dodgerblue' : undefined }}\n                />{' '}\n                {attributeSummary.deterministicCount ?? 0}\n              </span>\n              <span>\n                <PlusSquareOutlined style={{ color: attributeSummary.relatedCount ? 'green' : undefined }} />{' '}\n                {attributeSummary.relatedCount ?? 0}\n              </span>\n              <span>\n                <CloseSquareOutlined style={{ color: attributeSummary.oppositeCount ? 'red' : undefined }} />{' '}\n                {attributeSummary.oppositeCount ?? 0}\n              </span>\n              <span>\n                <QuestionCircleOutlined\n                  style={{ color: attributeSummary.unclearCount ? 'gold' : undefined }}\n                />{' '}\n                {attributeSummary.unclearCount ?? 0}\n              </span>\n            </Flex>\n          </TransparentButton>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction getHighestAttributeKeys(\n  selectedItemsAttributesValues: ItemAtributesValues[],\n  quantity: number,\n  attributes: Dictionary<ItemAttribute>\n): string[] {\n  // 1. Count the number of times each attribute is present. Make sure to gather any deterministic value\n  const attributesCounts: Record<string, number> = {};\n  const deterministicKeysDict: BooleanDictionary = {};\n  selectedItemsAttributesValues.forEach((itemAttributeValues) => {\n    if (!itemAttributeValues) return;\n    Object.keys(itemAttributeValues.attributes).forEach((key) => {\n      if (itemAttributeValues.attributes[key] > 0) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        deterministicKeysDict[key] = true;\n        attributesCounts[key] = (attributesCounts[key] || 0) + 2;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.OPPOSITE) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  const levelCount: NumberDictionary = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n  };\n\n  /**\n   * Filters the given keys array based on the count of attribute levels and guards against having more than one level 4 attribute.\n   */\n  function filterCountLevelsAndGuardLevel4(keys: string[]) {\n    return keys.filter((key) => {\n      levelCount[attributes[key].level]++;\n\n      if (levelCount[4] > 1) {\n        console.log('Discarding level 4 attribute', key);\n        return false;\n      }\n      return true;\n    });\n  }\n\n  const deterministicKeys = filterCountLevelsAndGuardLevel4(Object.keys(deterministicKeysDict));\n  const nondeterministicKeys = filterCountLevelsAndGuardLevel4(\n    keys(attributesCounts).filter((key) => !deterministicKeys.includes(key))\n  );\n  console.log({ levelCount });\n\n  // 1.b If deterministic keys are exactly the quantity, return them\n  if (quantity === deterministicKeys.length) {\n    console.log('All keys are deterministic');\n    return deterministicKeys;\n  }\n\n  // 2. Get all keys and sort them by value in descending order, but have only one level 5 attribute\n  console.log(attributesCounts);\n  // let hasLevel5Attribute = false;\n  // const sortedKeys = keys(attributesCounts)\n  //   .sort((a, b) => {\n  //     if (attributesCounts[a] !== attributesCounts[b]) {\n  //       return attributesCounts[b] - attributesCounts[a];\n  //     }\n\n  //     return attributes[a].priority - attributes[b].priority;\n  //   })\n  //   .filter((key) => {\n  //     if (attributes[key].level !== 4) return true;\n\n  //     if (!hasLevel5Attribute) {\n  //       console.log('Keeping level 4 attribute', key, attributesCounts[key]);\n  //       hasLevel5Attribute = true;\n  //       return true;\n  //     }\n  //     console.log('Discarding level 4 attribute', key, attributesCounts[key]);\n\n  //     return false;\n  //   });\n\n  // console.log(sortedKeys);\n\n  // 2.b. Handle edge cases: empty object or quantity exceeding keys\n  if (deterministicKeys.length === 0) {\n    return [];\n  }\n\n  const deterministicTiedGroups = deterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  const sortedDeterministicTiedGroupsKeys = keys(deterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a)\n  );\n  console.log({ sortedDeterministicTiedGroupsKeys });\n\n  const nondeterministicTiedGroups = nondeterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  console.log(nondeterministicTiedGroups);\n  const sortedNondeterministicTiedGroupsKeys = keys(nondeterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a)\n  );\n\n  let result: string[] = [];\n\n  for (const group of sortedDeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(deterministicTiedGroups[group], quantity - result.length));\n  }\n\n  for (const group of sortedNondeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(nondeterministicTiedGroups[group], quantity - result.length));\n  }\n\n  return result;\n}\n","import { Button, Progress, Rate, Space, Table, TableProps, Tabs, Tag, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { TabsProps } from 'antd/lib';\nimport { useNavigate } from 'react-router-dom';\n\nexport function ItemStats() {\n  // console.log(attributesList);\n  // console.log(attributes);\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'All Attributes',\n      children: <AttributesStatsTable type=\"all\" />,\n    },\n    {\n      key: '2',\n      label: 'Default Attributes',\n      children: <AttributesStatsTable type=\"default\" />,\n    },\n    {\n      key: '3',\n      label: 'Custom Attributes',\n      children: <AttributesStatsTable type=\"custom\" />,\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Stats</Typography.Title>\n\n      <Typography.Paragraph></Typography.Paragraph>\n\n      <Tabs defaultActiveKey=\"1\" items={items} />\n    </div>\n  );\n}\n\nconst calculateAttributeStats = (attribute: ItemAttribute, itemsAttributes: ItemAtributesValues[]) => {\n  let completionCount = 0;\n  let tensCount = 0;\n  let fivesCount = 0;\n  let zerosCount = 0;\n  let negativeOnesCount = 0;\n  let negativeThreesCount = 0;\n  let negativeTensCount = 0;\n  let positiveCount = 0;\n\n  itemsAttributes.forEach(({ attributes }) => {\n    if (attributes[attribute.id]) {\n      completionCount++;\n\n      const value = attributes[attribute.id];\n      if (value === 10) {\n        tensCount++;\n      } else if (value === 5) {\n        fivesCount++;\n      } else if (value === 0 || !value) {\n        zerosCount++;\n      } else if (value === -1) {\n        negativeOnesCount++;\n      } else if (value === -3) {\n        negativeThreesCount++;\n      } else if (value === -10) {\n        negativeTensCount++;\n      }\n\n      if (value > 0) {\n        positiveCount++;\n      }\n    }\n  });\n\n  const total = itemsAttributes.length;\n  const completionPercentage = (completionCount / total) * 100;\n  const tensPercentage = (tensCount / total) * 100;\n  const fivesPercentage = (fivesCount / total) * 100;\n  const zerosPercentage = (zerosCount / total) * 100;\n  const negativeOnesPercentage = (negativeOnesCount / total) * 100;\n  const negativeThreesPercentage = (negativeThreesCount / total) * 100;\n  const negativeTensPercentage = (negativeTensCount / total) * 100;\n  const positivePercentage = (positiveCount / total) * 100;\n\n  return {\n    completionPercentage: completionPercentage.toFixed(1),\n    tensPercentage: tensPercentage.toFixed(1),\n    fivesPercentage: fivesPercentage.toFixed(1),\n    zerosPercentage: zerosPercentage.toFixed(1),\n    negativeOnesPercentage: negativeOnesPercentage.toFixed(1),\n    negativeThreesPercentage: negativeThreesPercentage.toFixed(1),\n    negativeTensPercentage: negativeTensPercentage.toFixed(1),\n    positivePercentage: positivePercentage.toFixed(1),\n  };\n};\n\ntype AttributesStatsTableProps = {\n  type: 'all' | 'default' | 'custom';\n};\n\nfunction AttributesStatsTable({ type }: AttributesStatsTableProps) {\n  const { availableItemIds, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n  const navigate = useNavigate();\n\n  const attributesPool = useMemo(() => {\n    if (type === 'default') {\n      return attributesList.filter((attribute) => attribute.default);\n    }\n\n    if (type === 'custom') {\n      return attributesList.filter((attribute) => !attribute.default);\n    }\n\n    return attributesList;\n  }, [attributesList, type]);\n\n  const rows = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n\n    return attributesPool.map((attribute) => {\n      return {\n        ...attribute,\n        ...calculateAttributeStats(attribute, itemsAttributes),\n      };\n    });\n  }, [attributesPool, availableItemIds, getItemAttributeValues]);\n\n  const columns: TableProps['columns'] = [\n    {\n      title: 'Attribute',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, record) => (\n        <span>\n          {name.en}\n          {record.default ? <Tag className=\"ml-1\">default</Tag> : ''}\n          {record.limited ? <Tag className=\"ml-1\">limited</Tag> : ''}\n        </span>\n      ),\n      sorter: (a, b) => a.name.en.localeCompare(b.name.en),\n    },\n\n    {\n      title: 'Priority',\n      dataIndex: 'priority',\n      key: 'priority',\n      sorter: (a, b) => a.priority - b.priority,\n    },\n\n    {\n      title: 'Positive',\n      dataIndex: 'positivePercentage',\n      key: 'positivePercentage',\n      render: (positivePercentage: string) => `${positivePercentage}%`,\n      sorter: (a, b) => parseFloat(a.positivePercentage) - parseFloat(b.positivePercentage),\n    },\n    {\n      title: '10',\n      dataIndex: 'tensPercentage',\n      key: 'tensPercentage',\n      render: (tensPercentage: string, record) => {\n        if (record.limited) {\n          return '-';\n        }\n\n        return `${tensPercentage}%`;\n      },\n      sorter: (a, b) => parseFloat(a.tensPercentage) - parseFloat(b.tensPercentage),\n    },\n    {\n      title: '5',\n      dataIndex: 'fivesPercentage',\n      key: 'fivesPercentage',\n      render: (fivesPercentage: string) => `${fivesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.fivesPercentage) - parseFloat(b.fivesPercentage),\n    },\n    {\n      title: '-1',\n      dataIndex: 'negativeOnesPercentage',\n      key: 'negativeOnesPercentage',\n      render: (negativeOnesPercentage: string) => `${negativeOnesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeOnesPercentage) - parseFloat(b.negativeOnesPercentage),\n    },\n    {\n      title: '-3',\n      dataIndex: 'negativeThreesPercentage',\n      key: 'negativeThreesPercentage',\n      render: (negativeThreesPercentage: string) => `${negativeThreesPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeThreesPercentage) - parseFloat(b.negativeThreesPercentage),\n    },\n    {\n      title: '-10',\n      dataIndex: 'negativeTensPercentage',\n      key: 'negativeTensPercentage',\n      render: (negativeTensPercentage: string) => `${negativeTensPercentage}%`,\n      sorter: (a, b) => parseFloat(a.negativeTensPercentage) - parseFloat(b.negativeTensPercentage),\n    },\n    {\n      title: 'Completion',\n      dataIndex: 'completionPercentage',\n      key: 'completionPercentage',\n      render: (completionPercentage: string) => (\n        <Progress percent={parseFloat(completionPercentage)} size=\"small\" />\n      ),\n      sorter: (a, b) => parseFloat(a.completionPercentage) - parseFloat(b.completionPercentage),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      render: (level) => <Rate count={4} value={level} disabled />,\n      sorter: (a, b) => a.level - b.level,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record) => (\n        <Space>\n          <Button.Group>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=grouping&attribute=${record.id}&page=1`)}\n            >\n              Grouping\n            </Button>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=sampler&attribute=${record.id}&size=6`)}\n            >\n              Sample\n            </Button>\n          </Button.Group>\n        </Space>\n      ),\n    },\n  ];\n\n  return <Table columns={columns} dataSource={rows} pagination={false} rowKey=\"id\" size=\"small\" />;\n}\n","import { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { Empty, Flex } from 'antd';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { ItemComparatorCard } from './ItemComparatorCard';\nimport { ItemSimulation } from './ItemSimulation';\nimport { ItemStats } from './ItemStats';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <ItemAttributionNavigation />\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  if (view === 'simulator') {\n    return <ItemSimulation />;\n  }\n\n  if (view === 'stats') {\n    return <ItemStats />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ complete: isComplete, attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name, ...rest }) => ({\n      label: `${name.en}${rest.default ? '*' : ''}`,\n      value: id,\n    }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { getItemAttributePriorityResponse, sortJsonKeys } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n} from './ItemAttributionFiltersSections';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload, attributes, isSaving, attributesToUpdate } =\n    useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(attributesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(prepareItemsAttributesFileForDownload(), attributes)}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator', 'simulator', 'stats']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  itemsAttributes: Dictionary<ItemAtributesValues>,\n  attributes: Dictionary<ItemAttribute>\n) {\n  const total = Object.keys(attributes).length;\n\n  Object.keys(itemsAttributes).forEach((key) => {\n    const itemAttributeValues = itemsAttributes[key];\n\n    // Check completion\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n\n    if (completed === total) {\n      // Add completion\n      itemAttributeValues.complete = true;\n\n      // Add score\n      let unclearCount = 0;\n      const score = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n        if (v <= 0) {\n          if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n            unclearCount += 1;\n          }\n          if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n            acc += v / 2;\n          }\n          return acc;\n        }\n\n        return acc + v;\n      }, 0);\n      itemAttributeValues.score = score;\n\n      // Add reliability\n      itemAttributeValues.reliability = Math.floor(((completed - unclearCount) / total) * 100);\n\n      // Add key with only relevant attributes\n      itemAttributeValues.key = getItemAttributePriorityResponse(itemAttributeValues, attributes, true).join(\n        ''\n      );\n    }\n  });\n\n  return sortJsonKeys(itemsAttributes);\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionPageContent } from 'components/Items/Attributes/ItemAttributionPageContent';\nimport { ItemAttributionFilters } from 'components/Items/Attributes/ItemAttributionFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n"],"names":["FilterSelect","label","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","className","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","layout","length","block","option","arrow","trigger","title","icon","BrazilFlag","props","xmlns","viewBox","fill","d","cx","cy","r","UnitedStatesFlag","LanguageFlag","language","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","onClick","loading","danger","SectionTitle","children","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","ItemSprite","item","id","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","variant","readOnly","ItemName","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","ItemsTypeahead","items","isPending","allowClear","onFinish","tdrItemsQuery","useTDResource","Boolean","namesDict","useMemo","Object","values","data","reduce","acc","nameEn","namePt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","filtered","filter","String","includes","sorted","idMatch","match","index","indexOf","filterOption","inputValue","onSearch","notFoundContent","onSelect","key","undefined","onPressEnter","state","useCopyToClipboard","App","info","truncate","omission","success","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","isEmpty","useTDResourceNonCollection","updateQueryFunction","updateDoc","useUpdateFirebaseDoc","useMutation","mutationFn","useItemQueryParams","searchParams","get","setView","addQueryParam","set","removeQueryParam","delete","globalNewItemsAttributesValues","ItemsAttributeValuesContext","createContext","getItem","getNewItem","getItemAttributeValues","getNewItemAttributeValues","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributes","attributesToUpdate","ItemsAttributeValuesProvider","notification","queryClient","useQueryClient","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","select","deserializeFirebaseData","modifiedAttributeValues","setModifiedAttributeValues","mutation","onSuccess","refetchQueries","onError","description","savedItemsAttributeValues","firebaseData","decks","Number","storedValue","modifiedValue","merge","mutate","serializeFirebaseData","prev","updatedAt","itemsArr","mapKeys","useItemsAttribution","itemIndex","setItemIndex","random","Provider","direction","attributeId","sortJsonKeys","complete","useItemsAttributeValuesContext","useContext","attributeOptions","ATTRIBUTE_VALUE","attributeLimitedOptions","AttributionValueButtons","attribute","onlyButtons","limited","optionType","buttonStyle","QuestionCircleOutlined","CheckCircleFilled","ItemAttributeDescription","showUnclear","showUnrelated","filteredResponse","filterMessage","getItemAttributePriorityResponse","Component","AttributeSprite","AttributeText","gap","vertical","wrap","keyVariant","arr","firstElement","lastElement","withText","text","parseAttribute","align","spriteId","justify","maxWidth","textAlign","wordBreak","suffix","Stat","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","total","completed","Math","floor","unclearCount","strong","percent","CloseCircleOutlined","ItemAttributionCard","queryParamsItemId","showOnlyUnset","filteredAttributesList","offsetTop","ItemAttributionNavigation","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","ItemSamplerCard","sampleIds","onGetSample","updateAttributeValue","itemsLeftForAttribute","setSampleIds","setAttribute","getSample","attributeKey","lodashSample","selectedAttribute","find","a","sampleSize","selected","shuffle","i","push","tempSample","attempts","currentItemAttributeValues","useItemSampler","sample","itemAttributes","unsetItems","actions","ghost","extra","image","Empty","Fragment","GoToTopButton","isVisible","setIsVisible","handleScroll","pageYOffset","scrollTo","top","behavior","VerticalAlignTopOutlined","getStatSentence","stats","scope","group","ItemGroupingCard","pageIds","updatePageItemsAsUnrelated","pagination","sorting","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","sortBy","setSortBy","sortOrder","setSortOrder","itemsAttributes","scopeValue","filteredItemIds","slice","start","end","round","current","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","sortingComponent","unrelateButton","onConfirm","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemAttributesValues","itemMessage","fullMessage","join","moreThanOne","ids","keyBy","useItemsComparator","columns","dataIndex","render","sorter","b","localeCompare","groupA","dataSource","showQuickJumper","ROMAN_NUMERALS","ItemSimulation","gridSize","setGridSize","reliabilityThreshold","setReliabilityThreshold","setNsfw","selectedItemsIds","setSelectedItemsIds","selectedAttributes","setSelectedAttributes","highlightedAttributeKey","setHighlightedAttributeKey","displays","setDisplays","reliability","onUpdateDisplays","keysDict","shuffledIds","pop","result","attributesResult","selectedItemsAttributesValues","quantity","attributesCounts","deterministicKeysDict","levelCount","filterCountLevelsAndGuardLevel4","deterministicKeys","nondeterministicKeys","deterministicTiedGroups","sortedDeterministicTiedGroupsKeys","sort","nondeterministicTiedGroups","sortedNondeterministicTiedGroupsKeys","getHighestAttributeKeys","remainingAttributes","toBeAdded","priority","dicts","relatedCount","deterministicCount","oppositeCount","gridTemplateColumns","sqrt","LineChartOutlined","formatter","attributeSummary","CheckSquareOutlined","PlusSquareOutlined","CloseSquareOutlined","ItemStats","AttributesStatsTable","defaultActiveKey","calculateAttributeStats","completionCount","tensCount","fivesCount","zerosCount","negativeOnesCount","negativeThreesCount","negativeTensCount","positiveCount","tensPercentage","fivesPercentage","zerosPercentage","negativeOnesPercentage","negativeThreesPercentage","negativeTensPercentage","positivePercentage","completionPercentage","toFixed","navigate","useNavigate","attributesPool","default","rows","record","parseFloat","count","rowKey","ItemAttributionPageContent","ItemAttributionStats","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","isComplete","ItemAttributionClassifierFilters","ItemAttributionSamplerFilters","ItemAttributionGroupingFilters","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionFilters","JSON","stringify","DownloadButton","score","prepareFileForDownload","fileName","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}