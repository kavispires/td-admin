{"version":3,"file":"static/js/ImageCardsComparator.b3218321.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","components/Images/ImageCard.tsx","components/Images/ImageCards/RelationshipCountTag.tsx","components/Images/ImageCards/hooks.ts","components/Images/ImageCards/constants.ts","hooks/useCardWidth.ts","hooks/useQueryParams.ts","components/Images/ImageCards/Comparator.tsx","components/Images/ImageCards/ComparatorFilters.tsx","pages/Images/ImageCardsComparator.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { cloneDeep, merge, padStart, random } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { firestore, printFirebase } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { UseMutateFunction, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { CARDS_PER_DECK, DEFAULT_ENTRY, TOTAL_DECKS } from './constants';\nimport { FirebaseImageCardLibrary, ImageCardData, ImageCardRelationship } from './types';\nimport { cleanupData } from './utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nconst getRandomCardNumber = () => padStart(String(random(1, CARDS_PER_DECK)), 2, '0');\n\nconst getRandomDeck = () => random(1, TOTAL_DECKS);\n\nconst getRandomCardId = () => `td-d${getRandomDeck()}-${getRandomCardNumber()}`;\n\nexport type UseRandomCardReturnValue = {\n  cardId: string;\n  deck: number;\n  onRandomCard: () => void;\n  card: ImageCardData;\n  add: (key: keyof ImageCardData, value: string) => void;\n  remove: (key: keyof ImageCardData, value: string) => void;\n  update: (key: keyof ImageCardData, value: string[]) => void;\n  toggleHighlight: () => void;\n};\n\nexport function useRandomCard(\n  cardData: FirebaseImageCardLibrary,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n): UseRandomCardReturnValue {\n  const [deck, setDeck] = useState(getRandomDeck());\n  const [cardNumber, setCardNumber] = useState(getRandomCardNumber());\n  const cardId = `td-d${deck}-${cardNumber}`;\n\n  const onRandomCard = () => {\n    setDeck(getRandomDeck());\n    setCardNumber(getRandomCardNumber());\n  };\n\n  const card = merge(cloneDeep(DEFAULT_ENTRY), cardData?.[cardId] ?? {});\n\n  const add = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      card[key]!.push(value);\n      setDirty(true);\n    }\n  };\n\n  const remove = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      const entry = card[key] ?? [];\n      entry.splice(entry.indexOf(value), 1);\n      setDirty(true);\n    }\n  };\n\n  const update = (key: keyof ImageCardData, value: string[]) => {\n    if (key !== 'highlight') {\n      card[key] = value.map((v) => v.trim().toLowerCase());\n      setDirty(true);\n    }\n  };\n\n  const toggleHighlight = () => {\n    card.highlight = !card.highlight;\n    setDirty(true);\n  };\n\n  useEffect(() => {\n    cardData[cardId] = card;\n  }, [card]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    cardId,\n    deck,\n    onRandomCard,\n    card,\n    add,\n    remove,\n    update,\n    toggleHighlight,\n  };\n}\n\nexport function useImageCardsData() {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCards'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    refetch,\n  } = useQuery<any>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as FirebaseImageCardLibrary;\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      printFirebase('Loaded data/imageCards');\n    }\n  }, [isSuccess]);\n\n  useEffect(() => {\n    if (isError) {\n      notification.error({\n        message: 'Error loading data/imageCards',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, FirebaseImageCardLibrary, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const cleanData = cleanupData(data);\n      await setDoc(docRef, cleanData);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n  };\n}\n\nexport function useRandomCards(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n) {\n  const [deckA, setDeckA] = useState(getRandomDeck());\n  const [cardNumberA, setCardNumberA] = useState(getRandomCardNumber());\n  const [deckB, setDeckB] = useState(getRandomDeck());\n  const [cardNumberB, setCardNumberB] = useState(getRandomCardNumber());\n  const cardAId = `td-d${deckA}-${cardNumberA}`;\n  const cardBId = `td-d${deckB}-${cardNumberB}`;\n  const [unrelatedCount, setUnrelatedCount] = useState(0);\n  const { queryParams } = useQueryParams();\n  const unrelatedThreshold = Number(queryParams.get('cycle') ?? 3);\n\n  const cardA = cardData?.[cardAId] ?? [];\n  const cardB = cardData?.[cardBId] ?? [];\n\n  const onRandomCards = () => {\n    setUnrelatedCount(0);\n    setDeckA(getRandomDeck());\n    setCardNumberA(getRandomCardNumber());\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const relate = () => {\n    setUnrelatedCount(0);\n    cardA.push(cardBId);\n    cardData[cardAId] = removeDuplicates(cardA);\n    cardB.push(cardAId);\n    cardData[cardBId] = removeDuplicates(cardB);\n    setDirty(true);\n    setDeckA(deckB);\n    setCardNumberA(cardNumberB);\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const unrelate = () => {\n    if (unrelatedCount >= unrelatedThreshold) {\n      setUnrelatedCount(0);\n      onRandomCards();\n    } else {\n      setUnrelatedCount((ps) => ps + 1);\n      setDeckB(getRandomDeck());\n      setCardNumberB(getRandomCardNumber());\n    }\n  };\n\n  useEffect(() => {\n    if (cardAId === cardBId) {\n      setCardNumberB(getRandomCardNumber());\n    }\n  }, [cardAId, cardBId]);\n\n  return {\n    cardAId,\n    cardA,\n    cardBId,\n    cardB,\n    relate,\n    unrelate,\n    areRelated: cardA.includes(cardBId),\n    onRandomCards,\n  };\n}\n\ntype Stats = {\n  total: number;\n  overdone: number;\n  complete: number;\n  single: number;\n};\n\nexport type UseImageCardsRelationshipDataReturnValue = {\n  data: ImageCardRelationship;\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  error: Error | null;\n  hasData: boolean;\n  refetch: () => void;\n  isSaving: boolean;\n  isMutationError: boolean;\n  isSaved: boolean;\n  save: UseMutateFunction<{}, unknown, ImageCardRelationship, unknown>;\n  setDirty: (value: React.SetStateAction<boolean>) => void;\n  isDirty: boolean;\n  stats: Stats;\n};\n\nexport function useImageCardsRelationshipData(): UseImageCardsRelationshipDataReturnValue {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCardsRelationships'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n  const [stats, setStats] = useState<Stats>({ total: 0, overdone: 0, complete: 0, single: 0 });\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    isFetched,\n    isRefetching,\n    refetch,\n  } = useQuery<Record<string, string[]>>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as ImageCardRelationship;\n    },\n  });\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, ImageCardRelationship, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n\n      await setDoc(docRef, data);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  useEffect(() => {\n    if (!isRefetching && isFetched) {\n      const total = Object.keys(data).length;\n      let overdone = 0;\n      let complete = 0;\n      let single = 0;\n      Object.values(data).forEach((v) => {\n        if (v.length > 8) {\n          overdone += 1;\n        }\n        if (v.length === 1) {\n          single += 1;\n        }\n        if (v.length > 2) {\n          complete += 1;\n        }\n      });\n      setStats({ total, overdone, complete, single });\n    }\n  }, [isFetched, isRefetching]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n    stats,\n  };\n}\n\nexport type UseRandomGroupReturnValue = {\n  cardIds: string[];\n  cards: string[][];\n  selection: string[];\n  onSelect: (id: string) => void;\n  relate: () => void;\n  nextSet: () => void;\n  deselectAll: () => void;\n  cycles: number;\n  filters: { useCycles: boolean; toggleUseCycles: () => void };\n};\n\nexport function useRandomGroups(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n  sampleSize: number,\n  tagThreshold: number\n): UseRandomGroupReturnValue {\n  const [cardIds, setCardIds] = useState<string[]>([]);\n  const [cards, setCards] = useState<string[][]>([]);\n  const [cycledCards, setCycleCards] = useState<string[]>([]);\n  const [cycles, setCycles] = useState(0);\n  const [filterUseCycles, setFIlterUseCycles] = useState(true);\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  const updateCards = (ids?: string[]) => {\n    setCards((ids ?? cardIds).map((id) => cardData?.[id] ?? []));\n  };\n\n  const onRandomCards = () => {\n    // setSelection([]);\n    const ids: string[] = [...selection];\n    let cycleCount = 0;\n    const cycledCardsSample = cycledCards.length < 2000 ? cycledCards : [];\n\n    // Avoid infinite loop failsafe\n    let tries = 0;\n    while (tries < 400 && ids.length < sampleSize) {\n      const id = getRandomCardId();\n      const card = cardData[id] ?? [];\n      const isNew = tagThreshold > 0 ? card.length < tagThreshold : true;\n      const isCycled = filterUseCycles ? cycledCardsSample.includes(id) : false;\n      if (!ids.includes(id) && !isCycled && isNew) {\n        ids.push(id);\n        cycleCount += 1;\n      }\n      tries += 1;\n    }\n    setCardIds(ids);\n    setCycleCards((pv) => [...pv, ...ids]);\n    updateCards(ids);\n    setCycles((ps) => ps + cycleCount);\n  };\n\n  // On Load get sample of cards\n  useEffect(() => {\n    if (cardIds.length === 0) {\n      onRandomCards();\n    }\n  }, [cardIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Selects or deselects a card\n   */\n  const onSelect = (id: string) => {\n    setSelection((ps) => {\n      const copy = [...ps];\n      const index = copy.indexOf(id);\n      if (index > -1) {\n        copy.splice(index, 1);\n      } else {\n        copy.push(id);\n      }\n      return copy;\n    });\n  };\n\n  /**\n   * Relates all selected cards in the selection array\n   */\n  const relate = () => {\n    selection.forEach((id) => {\n      const card = cardData[id] ?? [];\n\n      card.push(...selection.filter((s) => s !== id));\n      cardData[id] = removeDuplicates(card);\n    });\n    setDirty(true);\n    setSelection([]);\n    updateCards();\n    setCycleCards([]);\n    setCycles(0);\n  };\n\n  /**\n   * Deselects all cards\n   */\n  const deselectAll = () => {\n    setSelection([]);\n  };\n\n  const toggleFilterUseCycles = () => {\n    setFIlterUseCycles((ps) => !ps);\n  };\n\n  return {\n    cardIds,\n    cards,\n    selection,\n    onSelect,\n    relate,\n    nextSet: onRandomCards,\n    deselectAll,\n    cycles,\n    filters: {\n      useCycles: filterUseCycles,\n      toggleUseCycles: toggleFilterUseCycles,\n    },\n  };\n}\n","import { ImageCardData } from './types';\n\nexport const TOTAL_DECKS = 12;\n\nexport const CARDS_PER_DECK = 252;\n\nexport const SUGGESTED_MOODS = [\n  'anxious',\n  'bright',\n  'chaotic',\n  'colorful',\n  'confusion',\n  'cozy',\n  'creepy',\n  'dark',\n  'dramatic',\n  'dreamy',\n  'fear',\n  'gloomy',\n  'happy',\n  'intense',\n  'magical',\n  'melancholic',\n  'muted',\n  'mysterious',\n  'professional',\n  'reflective',\n  'scary',\n  'serene',\n  'surreal',\n  'tension',\n  'vibrant',\n  'warm',\n  'whimsical',\n];\n\nexport const SUGGESTED_COLORS = [\n  'beige',\n  'black',\n  'blue',\n  'brown',\n  'colorful',\n  'gray',\n  'green',\n  'mixed',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'white',\n  'yellow',\n];\n\nexport const DEFAULT_ENTRY: ImageCardData = {\n  focus: [],\n  actions: [],\n  colors: [],\n  mood: [],\n  elements: [],\n  highlight: false,\n};\n","import { Ref, useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\n/**\n * Get a card width in px based on the window size of given container used with the containerRef\n * @param quantity how many cards should be fitted in the page screen width\n * @param options the options object\n * @param options.gap total value of padding and margin on the left and right of the card\n * @param options.minWidth minimum width of a card\n * @param options.maxWidth maximum width of a card\n * @param options.margin the outer margin of the container that should be removed from the width\n * @returns\n */\nexport function useCardWidth(\n  quantity: number,\n  options?: {\n    gap?: number;\n    minWidth?: number;\n    maxWidth?: number;\n    margin?: number;\n  }\n): [number, Ref<HTMLDivElement>] {\n  const [ref, { width }] = useMeasure();\n  const { gap = 32, minWidth = 120, maxWidth = 300, margin = 0 } = options ?? {};\n\n  const cardWidth = useMemo(() => {\n    const value = Math.min(Math.max(Math.floor((width - margin) / quantity) - gap, minWidth), maxWidth);\n    return Number.isNaN(value) ? minWidth : value;\n  }, [width, quantity, gap, minWidth, maxWidth, margin]);\n\n  const containerRef = ref as Ref<HTMLDivElement>;\n\n  return [cardWidth, containerRef];\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { Button, Flex, Image, Layout, Modal, Tag } from 'antd';\n\nimport { UseImageCardsRelationshipDataReturnValue, useRandomCards } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { ImageCard } from '../ImageCard';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useKey, useWindowSize } from 'react-use';\n\ntype ComparatorProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function Comparator({ query }: ComparatorProps) {\n  const { width } = useWindowSize();\n  const [cardWidth] = useCardWidth(1, { minWidth: width / 3 });\n\n  const { data, setDirty } = query;\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardAId, cardA, cardBId, cardB, relate, unrelate } = useRandomCards(data, setDirty);\n\n  const { addParam, is } = useQueryParams();\n\n  useKey('1', unrelate);\n  useKey('2', relate);\n\n  return (\n    <Layout.Content className=\"dev-content py-4\">\n      <Button block onClick={() => addParam('open', 'true')}>\n        Open Modal\n      </Button>\n\n      <Modal\n        title={`Card A: ${cardAId}`}\n        open={is('open')}\n        width={width * 0.95}\n        onCancel={() => addParam('open', 'false')}\n        footer={null}\n      >\n        <Image.PreviewGroup>\n          <Flex className=\"center\" wrap=\"wrap\" justify=\"center\">\n            <Flex vertical>\n              <ImageCard id={cardAId} width={cardWidth} />\n              <Flex>\n                <RelationshipCountTag card={cardA} />\n                <Tag>{cardAId}</Tag>\n              </Flex>\n            </Flex>\n            <Flex vertical>\n              <ImageCard id={cardBId} width={cardWidth} />\n              <Flex>\n                <RelationshipCountTag card={cardB} />\n                <Tag>{cardBId}</Tag>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Image.PreviewGroup>\n\n        <Flex gap={32} className=\"my-10\">\n          <Button onClick={unrelate} size=\"large\" block>\n            Unrelated\n          </Button>\n          <Button onClick={relate} size=\"large\" block type=\"primary\">\n            Related\n          </Button>\n        </Flex>\n      </Modal>\n    </Layout.Content>\n  );\n}\n","import { Button, Divider, Flex } from 'antd';\nimport { FilterSelect, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\n\nimport { UseImageCardsRelationshipDataReturnValue } from './hooks';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\ntype ComparatorFiltersProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function ComparatorFilters({ query }: ComparatorFiltersProps) {\n  const { data, isDirty, isSaving, save, isLoading, isError } = query;\n  const { queryParams, addParam } = useQueryParams();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Flex vertical gap={6}>\n          <SaveButton\n            isDirty={isDirty}\n            dirt={JSON.stringify(data)}\n            onSave={() => save({})}\n            isSaving={isSaving}\n          />\n\n          <DownloadButton\n            data={data}\n            fileName=\"imageCardsRelationships.json\"\n            loading={isSaving}\n            disabled={isEmpty(data)}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <Button block onClick={() => addParam('open', 'true')}>\n          Open Modal\n        </Button>\n\n        <Divider />\n\n        <FilterSelect\n          label=\"Cycle Threshold\"\n          value={queryParams.get('cycle') || 3}\n          onChange={(v) => addParam('cycle', v)}\n          options={[1, 3, 5, 10]}\n        />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { Comparator } from 'components/Images/ImageCards/Comparator';\nimport { ComparatorFilters } from 'components/Images/ImageCards/ComparatorFilters';\nimport { useImageCardsRelationshipData } from 'components/Images/ImageCards/hooks';\n\nimport { PageLayout } from 'components/Layout';\nimport { isEmpty } from 'lodash';\n\nfunction ImageCardsComparator() {\n  const query = useImageCardsRelationshipData();\n\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Comparator\">\n      <DataLoadingWrapper\n        isLoading={query.isLoading}\n        error={query.error}\n        hasResponseData={!isEmpty(query.data)}\n      >\n        <Layout hasSider>\n          <ComparatorFilters query={query} />\n\n          <Layout.Content className=\"content\">\n            <Comparator query={query} />\n          </Layout.Content>\n        </Layout>\n      </DataLoadingWrapper>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsComparator;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","ImageCard","id","width","className","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","clsx","src","fallback","RelationshipCountTag","card","color","length","undefined","getRandomCardNumber","padStart","String","random","getRandomDeck","useRandomCards","cardData","setDirty","deckA","setDeckA","useState","cardNumberA","setCardNumberA","deckB","setDeckB","cardNumberB","setCardNumberB","cardAId","cardBId","unrelatedCount","setUnrelatedCount","queryParams","useQueryParams","unrelatedThreshold","Number","get","cardA","cardB","onRandomCards","relate","push","removeDuplicates","unrelate","ps","areRelated","includes","useImageCardsRelationshipData","queryKey","queryClient","useQueryClient","notification","App","stats","setStats","total","overdone","complete","single","data","isLoading","isSuccess","isError","error","isFetched","isRefetching","refetch","useQuery","queryFn","async","docRef","doc","firestore","getDoc","isPending","isMutationError","isSaved","mutate","save","useMutation","mutationKey","mutationFn","setDoc","onSuccess","success","placement","refetchQueries","Object","keys","values","forEach","v","hasData","useRandomGroups","sampleSize","tagThreshold","cardIds","setCardIds","cards","setCards","cycledCards","setCycleCards","cycles","setCycles","filterUseCycles","setFIlterUseCycles","selection","setSelection","updateCards","ids","map","cycleCount","cycledCardsSample","tries","isNew","isCycled","pv","onSelect","copy","index","indexOf","splice","filter","s","nextSet","deselectAll","filters","useCycles","toggleUseCycles","useCardWidth","quantity","options","ref","useMeasure","gap","minWidth","maxWidth","margin","useMemo","value","Math","min","max","floor","isNaN","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","has","Comparator","query","useWindowSize","cardWidth","useKey","title","open","onCancel","footer","wrap","justify","vertical","ComparatorFilters","JSON","stringify","DownloadButton","fileName","isEmpty","hasResponseData","label","onChange","subtitle","DataLoadingWrapper","hasSider"],"sourceRoot":""}