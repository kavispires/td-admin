{"version":3,"file":"static/js/ItemsQuartets.bba8bb58.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/ResponseState.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Quartets/ItemsQuartetsTable.tsx","components/Items/Quartets/ItemsQuartetsContent.tsx","components/Items/Quartets/ItemsQuartetTypeahead.tsx","components/Items/Quartets/ItemsQuartetSearch.tsx","components/Items/Quartets/ItemsQuartetsFilters.tsx","pages/Items/ItemsQuartets.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      Download JSON\n    </Button>\n  );\n}\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: <Tooltip title={option.title}>{option.icon}</Tooltip>,\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { Button, Flex, Popconfirm, Rate, Select, Space, Table, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { DailyQuartetSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { CheckCircleFilled, DeleteFilled } from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nimport type { TableProps } from 'antd';\n\nconst TYPES = ['general', 'visual', 'word', 'thematic', 'attribute'].map((t) => ({ label: t, value: t }));\n\ntype ItemsQuartetsTableProps = {\n  rows: DailyQuartetSet[];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyQuartetSet>['addEntryToUpdate'];\n};\n\nexport function ItemsQuartetsTable({ rows, addEntryToUpdate }: ItemsQuartetsTableProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyQuartetSet>['columns'] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <QuartetEditableCell\n          property=\"title\"\n          value={title}\n          quartet={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <QuartetItemsCell\n          quartet={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      render: (type, record) => (\n        <Select\n          defaultValue={type}\n          options={TYPES}\n          size=\"small\"\n          style={{ width: 100 }}\n          onChange={(type) => addEntryToUpdate(record.id, { ...record, type })}\n        />\n      ),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      render: (level, record) => (\n        <Rate\n          count={3}\n          value={level}\n          onChange={(v) => addEntryToUpdate(record.id, { ...record, level: v })}\n        />\n      ),\n    },\n    {\n      title: 'Perfect Quartet',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => {\n        const uniqueItems = removeDuplicates(itemsIds).filter(Boolean);\n        return uniqueItems.length === 4 && <CheckCircleFilled style={{ color: 'dodgerblue' }} />;\n      },\n    },\n  ];\n\n  return (\n    <Table\n      columns={columns}\n      rowKey=\"id\"\n      dataSource={rows}\n      expandable={{\n        expandedRowRender: (record) => <AddItemFlow quartet={record} addEntryToUpdate={addEntryToUpdate} />,\n        rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n      }}\n      pagination={paginationProps}\n    />\n  );\n}\n\ntype AddItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n};\n\nexport function AddItemFlow({ quartet, addEntryToUpdate }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: [...quartet.itemsIds, itemId],\n    });\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ quartet, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: quartet.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype QuartetItemsCellProps = {\n  quartet: DailyQuartetSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n};\n\nexport function QuartetItemsCell({\n  quartet,\n  itemsIds,\n  copyToClipboard,\n  addEntryToUpdate,\n}: QuartetItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${quartet.title}`}>\n      {itemsIds.map((itemId) => (\n        <Flex key={`${quartet.title}-${itemId}`} gap={2} vertical>\n          {!!itemId ? <Item id={String(itemId)} width={60} /> : <>{console.log(itemId)}</>}\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow quartet={quartet} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n\ntype QuartetEditableCellProps = {\n  value: string | number;\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n  property: keyof DailyQuartetSet;\n};\n\nexport function QuartetEditableCell({\n  value,\n  quartet,\n  addEntryToUpdate,\n  property,\n}: QuartetEditableCellProps) {\n  const handleChange = (newValue: string) => {\n    if (typeof value === 'number') {\n      return newValue !== String(value)\n        ? addEntryToUpdate(quartet.id, { ...quartet, [property]: Number(newValue) })\n        : null;\n    }\n\n    return newValue !== value\n      ? addEntryToUpdate(quartet.id, { ...quartet, [property]: newValue.trim() })\n      : null;\n  };\n\n  return (\n    <Space>\n      <Typography.Text\n        editable={{\n          onChange: handleChange,\n        }}\n      >\n        {String(value)}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import { Space, Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyQuartetSet } from 'types';\n\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\nfunction orderSets(givenSets: DailyQuartetSet[]) {\n  return orderBy(givenSets, [\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length !== 4,\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length === 0,\n    (s) => s.title,\n  ]).map((s) => ({\n    ...s,\n    itemsIds: orderBy(s.itemsIds, (id) => Number(id)),\n  }));\n}\n\nexport function ItemsQuartetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const rows = useMemo(() => {\n    const sets = data ? orderSets(Object.values(data)) : [];\n    return showOnlyEmpty ? sets.filter((s) => s.itemsIds.length === 0) : sets;\n  }, [data, showOnlyEmpty]);\n\n  const completeQuartetsCount = rows.filter((s) => s.itemsIds.length === 4).length;\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>\n        Total Quartets: {rows.length} | Complete Quartets: {completeQuartetsCount}\n      </Typography.Title>\n      <ItemsQuartetsTable rows={rows} addEntryToUpdate={addEntryToUpdate} />\n    </Space>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { DailyQuartetSet } from 'types';\n\ntype ItemsQuartetTypeaheadProps = {\n  quartets?: Dictionary<DailyQuartetSet>;\n  isPending?: boolean;\n  onFinish: (id: string | null) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsQuartetTypeahead({\n  quartets,\n  isPending,\n  onFinish,\n  style,\n  ...rest\n}: ItemsQuartetTypeaheadProps) {\n  const { titlesDict, options } = useMemo(() => {\n    console.log('Recomputing quartets tiles typeahead...');\n\n    const titlesDict = Object.values(quartets ?? {}).reduce((acc: Record<string, string>, quartet) => {\n      acc[quartet.title] = quartet.id;\n      return acc;\n    }, {});\n\n    const options = orderBy(Object.keys(titlesDict), [(title) => title.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { titlesDict, options };\n  }, [quartets, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      } else {\n        onFinish(null);\n      }\n    },\n    350,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (titlesDict[key] !== undefined) {\n        onFinish(titlesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (titlesDict[key] !== undefined) {\n      onFinish(titlesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear\n      placeholder={'Search quartet by title...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No quartets found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\n\nimport { DailyQuartetSet } from 'types';\nimport { Space, Typography } from 'antd';\n\nimport { useMemo, useState } from 'react';\nimport { ItemsQuartetTypeahead } from './ItemsQuartetTypeahead';\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\nexport function ItemsQuartetSearch({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const [activeQuartetId, setActiveQuartetId] = useState<string | null>(null);\n  const activeQuartet = useMemo(() => {\n    if (!activeQuartetId) return null;\n    return data[activeQuartetId];\n  }, [activeQuartetId, data]);\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>Search Quartet</Typography.Title>\n\n      <ItemsQuartetTypeahead quartets={data} onFinish={(id) => setActiveQuartetId(id)} />\n\n      {Boolean(activeQuartet) && (\n        <ItemsQuartetsTable rows={[activeQuartet!]} addEntryToUpdate={addEntryToUpdate} />\n      )}\n    </Space>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { DailyQuartetSet } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsQuartetsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is, addParam } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-quartet-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSwitch\n        label=\"Pending Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(quartets: Dictionary<DailyQuartetSet>) {\n  return sortJsonKeys(quartets);\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsQuartetsContent } from 'components/Items/Quartets/ItemsQuartetsContent';\nimport { ItemsQuartetSearch } from 'components/Items/Quartets/ItemsQuartetSearch';\nimport { ItemsQuartetsFilters } from 'components/Items/Quartets/ItemsQuartetsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport { DailyQuartetSet } from 'types';\n\nexport function ItemsQuartets() {\n  const quartetsData = useResourceFirebaseData<DailyQuartetSet>({\n    tdrResourceName: 'daily-quartet-sets',\n    firebaseDataCollectionName: 'quartetSets',\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Quartet Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsQuartetsFilters {...quartetsData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={quartetsData.isLoading}\n            error={quartetsData.error}\n            hasResponseData={!isEmpty(quartetsData.data)}\n          >\n            <Flex vertical gap={24}>\n              <ItemsQuartetSearch {...quartetsData} />\n              <ItemsQuartetsContent {...quartetsData} />\n            </Flex>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsQuartets;\n"],"names":["DownloadButton","data","fileName","loading","props","onClick","downloadObjectAsFile","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","label","SaveButton","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","disabled","danger","block","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","FilterCheckBox","e","target","FilterSegments","option","title","ItemsTypeahead","items","isPending","allowClear","onFinish","tdrItemsQuery","useTDResource","Boolean","namesDict","useMemo","Object","values","reduce","acc","nameEn","name","en","id","namePt","pt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","String","includes","sorted","idMatch","match","index","indexOf","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","key","undefined","onPressEnter","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","App","info","truncate","omission","success","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","get","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","queryClient","useQueryClient","tdrQuery","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","mutation","useUpdateFirebaseDoc","onSuccess","refetchQueries","queryKey","onError","description","isSuccess","cloneDeep","isEmpty","firebaseData","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","path","docId","docRef","doc","firestore","updateDoc","useMutation","mutationFn","async","TYPES","t","ItemsQuartetsTable","rows","itemsTypeaheadQuery","paginationProps","columns","dataIndex","render","record","QuartetEditableCell","property","quartet","Table","itemsIds","QuartetItemsCell","removeDuplicates","count","CheckCircleFilled","rowKey","dataSource","expandable","expandedRowRender","AddItemFlow","rowExpandable","pagination","itemId","RemoveItemFlow","onConfirm","okText","cancelText","DeleteFilled","gap","wrap","vertical","justify","editable","newValue","ItemsQuartetsContent","showOnlyEmpty","sets","givenSets","s","completeQuartetsCount","direction","ItemsQuartetTypeahead","quartets","titlesDict","ItemsQuartetSearch","activeQuartetId","setActiveQuartetId","activeQuartet","ItemsQuartetsFilters","JSON","stringify","prepareFileForDownload","sortJsonKeys","mode","ItemsQuartets","quartetsData","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}