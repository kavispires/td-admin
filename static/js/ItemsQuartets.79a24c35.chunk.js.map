{"version":3,"file":"static/js/ItemsQuartets.79a24c35.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Common/ResponseState.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTDResource.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Quartets/ItemsQuartetsTable.tsx","components/Items/Quartets/ItemsQuartetsContent.tsx","components/Items/Quartets/ItemsQuartetTypeahead.tsx","components/Items/Quartets/ItemsQuartetSearch.tsx","components/Items/Quartets/ItemsQuartetsFilters.tsx","pages/Items/ItemsQuartets.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { Button, Flex, Popconfirm, Rate, Select, Space, Table, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { DailyQuartetSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { CheckCircleFilled, DeleteFilled } from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nimport type { TableProps } from 'antd';\n\nconst TYPES = ['general', 'visual', 'word', 'thematic', 'attribute'].map((t) => ({ label: t, value: t }));\n\ntype ItemsQuartetsTableProps = {\n  rows: DailyQuartetSet[];\n  addEntryToUpdate: UseResourceFirebaseDataReturnType<DailyQuartetSet>['addEntryToUpdate'];\n};\n\nexport function ItemsQuartetsTable({ rows, addEntryToUpdate }: ItemsQuartetsTableProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyQuartetSet>['columns'] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <QuartetEditableCell\n          property=\"title\"\n          value={title}\n          quartet={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <QuartetItemsCell\n          quartet={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      render: (type, record) => (\n        <Select\n          defaultValue={type}\n          options={TYPES}\n          size=\"small\"\n          style={{ width: 100 }}\n          onChange={(type) => addEntryToUpdate(record.id, { ...record, type })}\n        />\n      ),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      render: (level, record) => (\n        <Rate\n          count={3}\n          value={level}\n          onChange={(v) => addEntryToUpdate(record.id, { ...record, level: v })}\n        />\n      ),\n    },\n    {\n      title: 'Perfect Quartet',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => {\n        const uniqueItems = removeDuplicates(itemsIds).filter(Boolean);\n        return uniqueItems.length === 4 && <CheckCircleFilled style={{ color: 'dodgerblue' }} />;\n      },\n    },\n  ];\n\n  return (\n    <Table\n      columns={columns}\n      rowKey=\"id\"\n      dataSource={rows}\n      expandable={{\n        expandedRowRender: (record) => <AddItemFlow quartet={record} addEntryToUpdate={addEntryToUpdate} />,\n        rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n      }}\n      pagination={paginationProps}\n    />\n  );\n}\n\ntype AddItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n};\n\nexport function AddItemFlow({ quartet, addEntryToUpdate }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: [...quartet.itemsIds, itemId],\n    });\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ quartet, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: quartet.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype QuartetItemsCellProps = {\n  quartet: DailyQuartetSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n};\n\nexport function QuartetItemsCell({\n  quartet,\n  itemsIds,\n  copyToClipboard,\n  addEntryToUpdate,\n}: QuartetItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${quartet.title}`}>\n      {itemsIds.map((itemId) => (\n        <Flex key={`${quartet.title}-${itemId}`} gap={2} vertical>\n          {!!itemId ? <Item id={String(itemId)} width={60} /> : <>{console.log(itemId)}</>}\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow quartet={quartet} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n\ntype QuartetEditableCellProps = {\n  value: string | number;\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n  property: keyof DailyQuartetSet;\n};\n\nexport function QuartetEditableCell({\n  value,\n  quartet,\n  addEntryToUpdate,\n  property,\n}: QuartetEditableCellProps) {\n  const handleChange = (newValue: string) => {\n    if (typeof value === 'number') {\n      return newValue !== String(value)\n        ? addEntryToUpdate(quartet.id, { ...quartet, [property]: Number(newValue) })\n        : null;\n    }\n\n    return newValue !== value\n      ? addEntryToUpdate(quartet.id, { ...quartet, [property]: newValue.trim() })\n      : null;\n  };\n\n  return (\n    <Space>\n      <Typography.Text\n        editable={{\n          onChange: handleChange,\n        }}\n      >\n        {String(value)}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import { Space, Typography } from 'antd';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyQuartetSet } from 'types';\n\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\nfunction orderSets(givenSets: DailyQuartetSet[]) {\n  return orderBy(givenSets, [\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length !== 4,\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length === 0,\n    (s) => s.title,\n  ]).map((s) => ({\n    ...s,\n    itemsIds: orderBy(s.itemsIds, (id) => Number(id)),\n  }));\n}\n\nexport function ItemsQuartetsContent({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const rows = useMemo(() => {\n    const sets = data ? orderSets(Object.values(data)) : [];\n    return showOnlyEmpty ? sets.filter((s) => s.itemsIds.length === 0) : sets;\n  }, [data, showOnlyEmpty]);\n\n  const completeQuartetsCount = rows.filter((s) => s.itemsIds.length === 4).length;\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>\n        Total Quartets: {rows.length} | Complete Quartets: {completeQuartetsCount}\n      </Typography.Title>\n      <ItemsQuartetsTable rows={rows} addEntryToUpdate={addEntryToUpdate} />\n    </Space>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { DailyQuartetSet } from 'types';\n\ntype ItemsQuartetTypeaheadProps = {\n  quartets?: Dictionary<DailyQuartetSet>;\n  isPending?: boolean;\n  onFinish: (id: string | null) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsQuartetTypeahead({\n  quartets,\n  isPending,\n  onFinish,\n  style,\n  ...rest\n}: ItemsQuartetTypeaheadProps) {\n  const { titlesDict, options } = useMemo(() => {\n    console.log('Recomputing quartets tiles typeahead...');\n\n    const titlesDict = Object.values(quartets ?? {}).reduce((acc: Record<string, string>, quartet) => {\n      acc[quartet.title] = quartet.id;\n      return acc;\n    }, {});\n\n    const options = orderBy(Object.keys(titlesDict), [(title) => title.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { titlesDict, options };\n  }, [quartets, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      } else {\n        onFinish(null);\n      }\n    },\n    350,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (titlesDict[key] !== undefined) {\n        onFinish(titlesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (titlesDict[key] !== undefined) {\n      onFinish(titlesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear\n      placeholder={'Search quartet by title...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No quartets found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\n\nimport { DailyQuartetSet } from 'types';\nimport { Space, Typography } from 'antd';\n\nimport { useMemo, useState } from 'react';\nimport { ItemsQuartetTypeahead } from './ItemsQuartetTypeahead';\nimport { ItemsQuartetsTable } from './ItemsQuartetsTable';\n\nexport function ItemsQuartetSearch({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const [activeQuartetId, setActiveQuartetId] = useState<string | null>(null);\n  const activeQuartet = useMemo(() => {\n    if (!activeQuartetId) return null;\n    return data[activeQuartetId];\n  }, [activeQuartetId, data]);\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>Search Quartet</Typography.Title>\n\n      <ItemsQuartetTypeahead quartets={data} onFinish={(id) => setActiveQuartetId(id)} />\n\n      {Boolean(activeQuartet) && (\n        <ItemsQuartetsTable rows={[activeQuartet!]} addEntryToUpdate={addEntryToUpdate} />\n      )}\n    </Space>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { DailyQuartetSet } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsQuartetsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is, addParam } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-quartet-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSwitch\n        label=\"Pending Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(quartets: Dictionary<DailyQuartetSet>) {\n  return sortJsonKeys(quartets);\n}\n","import { Flex, Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsQuartetsContent } from 'components/Items/Quartets/ItemsQuartetsContent';\nimport { ItemsQuartetSearch } from 'components/Items/Quartets/ItemsQuartetSearch';\nimport { ItemsQuartetsFilters } from 'components/Items/Quartets/ItemsQuartetsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport { DailyQuartetSet } from 'types';\n\nexport function ItemsQuartets() {\n  const quartetsData = useResourceFirebaseData<DailyQuartetSet>({\n    tdrResourceName: 'daily-quartet-sets',\n    firebaseDataCollectionName: 'quartetSets',\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Quartet Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsQuartetsFilters {...quartetsData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={quartetsData.isLoading}\n            error={quartetsData.error}\n            hasResponseData={!isEmpty(quartetsData.data)}\n          >\n            <Flex vertical gap={24}>\n              <ItemsQuartetSearch {...quartetsData} />\n              <ItemsQuartetsContent {...quartetsData} />\n            </Flex>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsQuartets;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","onClick","disabled","loading","danger","block","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","label","value","onChange","options","placeholder","style","minWidth","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","FilterCheckBox","e","target","FilterSegments","layout","length","option","arrow","trigger","title","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","props","ItemsTypeahead","items","isPending","allowClear","onFinish","tdrItemsQuery","useTDResource","Boolean","namesDict","useMemo","Object","values","data","reduce","acc","nameEn","name","en","id","namePt","pt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","String","includes","sorted","idMatch","match","index","indexOf","filterOption","inputValue","onSearch","notFoundContent","onSelect","key","undefined","onPressEnter","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","App","info","truncate","omission","success","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","get","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","queryClient","useQueryClient","tdrQuery","firebaseQuery","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","mutation","useUpdateFirebaseDoc","onSuccess","refetchQueries","onError","description","isSuccess","cloneDeep","isEmpty","firebaseData","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","useTDResourceNonCollection","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","updateDoc","useMutation","mutationFn","TYPES","t","ItemsQuartetsTable","rows","itemsTypeaheadQuery","paginationProps","columns","dataIndex","render","record","QuartetEditableCell","property","quartet","Table","itemsIds","QuartetItemsCell","removeDuplicates","count","CheckCircleFilled","rowKey","dataSource","expandable","expandedRowRender","AddItemFlow","rowExpandable","pagination","itemId","RemoveItemFlow","onConfirm","okText","cancelText","DeleteFilled","gap","wrap","vertical","justify","editable","newValue","ItemsQuartetsContent","showOnlyEmpty","sets","givenSets","s","completeQuartetsCount","direction","ItemsQuartetTypeahead","quartets","titlesDict","ItemsQuartetSearch","activeQuartetId","setActiveQuartetId","activeQuartet","ItemsQuartetsFilters","JSON","stringify","DownloadButton","prepareFileForDownload","sortJsonKeys","fileName","mode","ItemsQuartets","quartetsData","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}