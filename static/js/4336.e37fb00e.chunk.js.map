{"version":3,"file":"static/js/4336.e37fb00e.chunk.js","mappings":"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","sources":["components/Daily/utils/constants.ts","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/utils/utils.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/hooks/useLoadDrawings.ts","hooks/useLoadWordLibrary.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/hooks/index.ts","components/DataLoadingWrapper.tsx","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","utils/constants.ts","utils/index.ts"],"sourcesContent":["export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { difference, flatMap, intersection, sample, sampleSize, shuffle, sortBy, uniq } from 'lodash';\nimport moment from 'moment';\nimport { DailyControleDeEstoqueEntry } from './types';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n\nconst usedWords: string[] = [];\n\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word))\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[]) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = [0, 5, 10, 15];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  let shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n\nexport const generatePalavreadoGame = (words: string[], previouslyUsedWords: string[]) => {\n  const shuffledWords = shuffle(difference(words, usedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = shuffledWords.pop() ?? '';\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < 4; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  usedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords),\n  };\n};\n\nconst TOTAL_GOODS = 192;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  entry.orders.push(outOfStockGood!);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","import { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { sampleSize, shuffle } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyDiscSet, ArteRuimCard, DailyMovieSet } from 'types';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport {\n  DailyAquiOEntry,\n  DailyArtistaEntry,\n  DailyControleDeEstoqueEntry,\n  DailyEntry,\n  DailyFilmacoEntry,\n  DailyPalavreadoEntry,\n  DataDrawing,\n} from '../utils/types';\nimport { generateControleDeEstoqueGame, generatePalavreadoGame, getNextDay } from '../utils/utils';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { useLoadDrawings } from './useLoadDrawings';\nimport { useParsedHistory } from './useParsedHistory';\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  // arteRuimHistory: ParsedDailyHistoryEntry;\n  // round5sample: DailyEntry[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  drawingsCount: number,\n  batchSize: number\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  // STEP 2: ARTE RUIM\n  const drawingsQuery = useLoadDrawings(enabled, queryLanguage ?? 'pt');\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n  const [arteRuimHistory] = useParsedHistory('arte-ruim', historyQuery.data);\n  const arteRuimEntries = useMemo(() => {\n    if (areDrawingsLoading || !historyQuery.isSuccess) {\n      return [];\n    }\n\n    console.count('Creating Arte Ruim...');\n    const drawings = (drawingsQuery ?? []).reduce(\n      (acc: Record<CardId, DailyEntry['arte-ruim']>, drawingEntry) => {\n        const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n        Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n          const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n          if (dataDrawing.drawing.trim().length < 10) {\n            console.warn('Empty drawing', cardId);\n            return acc;\n          }\n\n          if (acc[cardId] === undefined) {\n            acc[cardId] = {\n              id: cardId,\n              type: 'arte-ruim',\n              language: queryLanguage ?? 'pt',\n              cardId: cardId,\n              text: dataDrawing.text,\n              drawings: [dataDrawing.drawing],\n              number: 0,\n              dataIds: [key],\n            };\n          } else {\n            acc[cardId].drawings.push(dataDrawing.drawing);\n            acc[cardId].dataIds.push(key);\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const atLeastTwoDrawingsList = Object.values(drawings).filter(\n      (e) => e.drawings.length >= drawingsCount && e.cardId && !e.cardId?.includes('--')\n    );\n\n    const shortList = Object.values(atLeastTwoDrawingsList).filter(\n      (e) => !arteRuimHistory.used.includes(e.cardId)\n    );\n\n    const shuffledShortList = sampleSize(shuffle(shortList), batchSize);\n\n    let lastDate = arteRuimHistory.latestDate;\n\n    return shuffledShortList.map((e, index) => {\n      const id = getNextDay(lastDate);\n\n      lastDate = id;\n      return {\n        ...e,\n        id,\n        number: arteRuimHistory.latestNumber + index + 1,\n      };\n    });\n  }, [\n    drawingsQuery,\n    queryLanguage,\n    arteRuimHistory,\n    batchSize,\n    drawingsCount,\n    areDrawingsLoading,\n    historyQuery.isSuccess,\n  ]);\n\n  // STEP 3: AQUI Ó\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets');\n  const [aquiOHistory] = useParsedHistory('aqui-o', historyQuery.data);\n  const aquiOEntries = useMemo(() => {\n    if (!aquiOSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    console.count('Creating Aqui Ó...');\n    // Filter complete sets only\n    const completeSets = shuffle(\n      Object.values(aquiOSetsQuery.data).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20)\n    );\n    // Filter not-used sets only\n    let notUsedSets = completeSets.filter((setEntry) => !aquiOHistory.used.includes(setEntry.id));\n\n    if (notUsedSets.length < batchSize) {\n      notUsedSets.push(...shuffle(completeSets));\n    }\n\n    let lastDate = aquiOHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyAquiOEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const setEntry = notUsedSets[i];\n      if (!setEntry) {\n        console.error('No aqui-o sets left');\n      }\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: aquiOHistory.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n\n    return entries;\n  }, [aquiOSetsQuery, aquiOHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 4: Palavreado\n  const wordsQuery = useLoadWordLibrary(4, queryLanguage, true, true);\n  const [palavreadoHistory] = useParsedHistory('palavreado', historyQuery.data);\n  const palavreadoEntries = useMemo(() => {\n    if (!wordsQuery.data || !wordsQuery.data.length || !historyQuery.isSuccess) {\n      return {};\n    }\n    console.count('Creating Palavreado...');\n    let lastDate = palavreadoHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyPalavreadoEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'palavreado',\n        number: palavreadoHistory.latestNumber + i + 1,\n        ...generatePalavreadoGame(wordsQuery.data ?? [], [\n          ...Object.values(entries).map((e) => e.keyword),\n          ...palavreadoHistory.used,\n        ]),\n      };\n    }\n    return entries;\n  }, [wordsQuery, palavreadoHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 5: Artista\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`);\n  const [artistaHistory] = useParsedHistory('artista', historyQuery.data);\n  const artistaEntries = useMemo(() => {\n    if (!arteRuimCardsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    console.count('Creating Artista...');\n\n    let lastDate = artistaHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyArtistaEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      const availableCardsIds = Object.keys(arteRuimCardsQuery.data ?? {}).filter(\n        (cardId) => !arteRuimHistory.used.includes(cardId)\n      );\n      const cards = sampleSize(availableCardsIds, 15).map((cardId) => arteRuimCardsQuery.data[cardId]);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'artista',\n        number: artistaHistory.latestNumber + i + 1,\n        cards,\n      };\n    }\n    return entries;\n  }, [arteRuimCardsQuery, arteRuimHistory, artistaHistory, batchSize, historyQuery.isSuccess]);\n\n  // STEP 6: Filmaço\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets');\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n  const filmacoEntries = useMemo(() => {\n    if (!movieSetsQuery.isSuccess || !historyQuery.isSuccess) {\n      return {};\n    }\n\n    console.count('Creating Filmaço...');\n\n    // Filter complete sets only\n    const completeSets = shuffle(\n      Object.values(movieSetsQuery.data).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0)\n    );\n    // Filter not-used sets only\n    let notUsedSets = completeSets.filter((setEntry) => !filmacoHistory.used.includes(setEntry.id));\n\n    if (notUsedSets.length < batchSize) {\n      notUsedSets.push(...shuffle(completeSets));\n    }\n\n    let lastDate = filmacoHistory.latestDate;\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyFilmacoEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const setEntry = notUsedSets[i];\n      if (!setEntry) {\n        console.error('No filmaço sets left');\n        break;\n      }\n      const id = getNextDay(lastDate);\n      lastDate = id;\n      entries[id] = {\n        id,\n        type: 'filmaco',\n        number: filmacoHistory.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: setEntry.itemsIds,\n        year: setEntry.year,\n      };\n    }\n\n    return entries;\n  }, [movieSetsQuery, filmacoHistory, batchSize, historyQuery.isSuccess]);\n\n  const [controleDeEstoqueHistory] = useParsedHistory('controle-de-estoque', historyQuery.data);\n  // SET 7: Controle de Estoque\n  const controleDeEstoqueEntries = useMemo(() => {\n    if (!historyQuery.isSuccess) {\n      return {};\n    }\n\n    console.count('Creating Controle de Estoque...');\n\n    let lastDate = controleDeEstoqueHistory.latestDate;\n\n    // Get list, if not enough, get from complete\n    const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n    for (let i = 0; i < batchSize; i++) {\n      const id = getNextDay(lastDate);\n      lastDate = id;\n\n      entries[id] = generateControleDeEstoqueGame(id, controleDeEstoqueHistory.latestNumber + i + 1);\n    }\n    return entries;\n  }, [batchSize, historyQuery.isSuccess, controleDeEstoqueHistory]);\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    console.count('Bundling entries...');\n    return arteRuimEntries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiOEntries[arteRuim.id],\n        palavreado: palavreadoEntries[arteRuim.id],\n        artista: artistaEntries[arteRuim.id],\n        filmaco: filmacoEntries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoqueEntries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuimEntries,\n    aquiOEntries,\n    palavreadoEntries,\n    artistaEntries,\n    filmacoEntries,\n    controleDeEstoqueEntries,\n  ]);\n\n  return {\n    isLoading:\n      areDrawingsLoading ||\n      historyQuery.isLoading ||\n      wordsQuery.isLoading ||\n      arteRuimCardsQuery.isLoading ||\n      aquiOSetsQuery.isLoading ||\n      movieSetsQuery.isLoading,\n    entries,\n  };\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect, useMemo } from 'react';\n\nimport { QueryKey, useQueries, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DataSuffixCounts } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\n/**\n * Custom hook for loading drawings.\n *\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadDrawings(enabled: boolean, queryLanguage: Language) {\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const suffixData = LANGUAGE_PREFIX.SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({ queries });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        'arte-ruim': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['arte-ruim'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['arte-ruim'].used),\n              ...data.map((e) => e['arte-ruim'].cardId),\n            ])\n          ),\n        },\n        'aqui-o': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['aqui-o'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory['aqui-o'].used ?? '[]'),\n              ...data.map((e) => e['aqui-o'].setId),\n            ])\n          ),\n        },\n        palavreado: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['palavreado'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e['palavreado'].keyword),\n            ])\n          ),\n        },\n        artista: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['artista'].number,\n          used: '[]',\n        },\n        filmaco: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['filmaco'].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.['filmaco']?.used ?? '[]'),\n              ...data.map((e) => e['filmaco'].setId),\n            ])\n          ),\n        },\n        'controle-de-estoque': {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1]['controle-de-estoque'].number,\n          used: '[]',\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\n\nexport function useTempDaily(enabled = true) {\n  const { notification } = App.useApp();\n\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n\n  const mutation = useMutation<any, Error, DailyHistory, QueryKey>({\n    mutationFn: async (data) => {\n      const docRec = doc(firestore, `${source}/history`);\n      setDoc(docRec, data);\n    },\n    onSuccess: () => {\n      notification.info({\n        message: 'New history data saved',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  // Load docs\n  // Get used ids\n  // Rewrite history\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n\n  return {\n    mutation,\n    historyQuery,\n  };\n}\n\nexport * from './useLoadDrawings';\nexport * from './useLoadDailySetup';\nexport * from './useSaveDailySetup';\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <svg viewBox=\"0 0 512 512\" style={{ width: `${width - 12}px`, height: `${width - 12}px` }}>\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  let baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_TILES: 'crime-tiles',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SPECTRUMS: 'spectrums',\n  SINGLE_WORDS: 'single-words',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_TILES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2440;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 192,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key'\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","import { chain, cloneDeep, isObject, memoize, merge, orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX, SEARCH_THRESHOLD } from './constants';\nimport stringSimilarity from 'string-similarity';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\n\n/**\n *\n * @param str\n * @returns\n */\nexport function stringRemoveAccents(str: string) {\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n *\n * @param data\n * @param property\n * @returns\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n *\n * @param str\n * @param data\n * @param property\n * @returns\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\nexport const findBestMatch = (str: string, list: string[]) => {};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject): PlainObject => {\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj)\n        .filter((key) => ['id', 'name', 'title', 'type'].includes(key))\n        .concat(\n          Object.keys(obj)\n            .filter((key) => !['id', 'name', 'title', 'type'].includes(key))\n            .sort()\n        );\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData>(data: Dictionary<string>): Dictionary<TData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TData>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData>(data: Dictionary<TData>): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem\n    )\n  );\n};\n\n/**\n * Creates a new `ItemAtributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAtributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAtributesValues> = {}\n): ItemAtributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues\n    )\n  );\n};\n\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAtributesValues,\n  itemAttributes: Dictionary<ItemAttribute>,\n  /**\n   * Ignore attributes that are UNRELATED or UNCLEAR\n   */\n  onlyRelevant?: boolean\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc']\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`\n    );\n  }\n\n  let opposite: string[] = [];\n  let deterministic: string[] = [];\n  let related: string[] = [];\n  let unrelated: string[] = [];\n  let unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED)),\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR)),\n  ];\n};\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n"],"names":["LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","getYesterday","moment","subtract","format","getNextDay","dateString","add","usedWords","getNewWord","words","keyword","selectedWords","index","usedLetters","uniq","flatMap","map","word","split","shortList","shuffle","filter","includes","sortBy","intersection","length","shuffleLetters","letters","preservedIndexes","otherLetters","_","shuffledLetters","i","push","shift","generatePalavreadoGame","previouslyUsedWords","difference","pop","newWord","generateControleDeEstoqueGame","id","num","year","month","day","Number","entry","number","type","language","title","Date","getDay","goods","orders","sampleSize","Array","fill","GOODS_SIZE","outOfStockGood","useParsedHistory","key","data","history","useMemo","latestDate","latestNumber","used","JSON","parse","useLoadDailySetup","enabled","queryLanguage","drawingsCount","batchSize","drawingsQuery","suffixCountsQuery","suffixData","libraryCount","docPrefix","queries","Boolean","onSuccess","info","useQueries","useLoadDrawings","areDrawingsLoading","some","q","isLoading","arteRuimHistory","arteRuimEntries","console","count","drawings","reduce","acc","drawingEntry","drawingsLibrary","Object","entries","forEach","dataDrawing","cardId","drawing","trim","warn","undefined","text","dataIds","atLeastTwoDrawingsList","values","e","shuffledShortList","lastDate","aquiOSetsQuery","useTDResource","aquiOHistory","aquiOEntries","completeSets","setEntry","itemsIds","notUsedSets","setId","wordsQuery","wordLength","selected","getUrl","useBaseUrl","resourceName","query","async","res","fetch","json","hasResponseData","isEmpty","useLoadWordLibrary","palavreadoHistory","palavreadoEntries","arteRuimCardsQuery","artistaHistory","artistaEntries","availableCardsIds","keys","cards","movieSetsQuery","filmacoHistory","filmacoEntries","controleDeEstoqueHistory","controleDeEstoqueEntries","arteRuim","palavreado","artista","filmaco","useSaveDailySetup","queryClient","useQueryClient","isDirty","setIsDirty","useState","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","previousHistory","Error","newHistory","stringify","removeDuplicates","Promise","all","invalidateQueries","onError","save","mutateAsync","isPending","useTempDaily","DataLoadingWrapper","isIdle","children","tip","className","description","showIcon","Sprite","width","padding","response","paddedWidth","style","height","display","placeItems","svgContent","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","WarehouseGood","itemId","str","match","numId","parseInt","goodId","sourceId","Math","ceil","getSource","clsx","AlienSign","Emoji","emojiId","startsWith","memoize","glyphId","Glyph","Item","library","baseUrl","process","folder","path","join","docId","log","getCurrentDateTime","getDoc","useGetFirebaseDoc","useTDResourceNonCollection","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_TILES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SPECTRUMS","SINGLE_WORDS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","DEFAULT_LANGUAGE","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","name","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","label","value","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","ATTRIBUTE_VALUE","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","capitalize","stringRemoveAccents","normalize","replace","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","sortKeys","isObject","isArray","sortedKeys","concat","sort","chain","toPairs","indexOf","fromPairs","deserializeFirebaseData","serializeFirebaseData","now","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","getNewItem","partialItem","cloneDeep","merge","groups","attributes","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","itemAttributesValues","itemAttributes","onlyRelevant","priorityOrder","orderBy","attribute","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","attributeId","parseAttribute","keyVariant","variant","slice","filterMessage","showUnclear","showUnrelated","sortItemsIds"],"sourceRoot":""}