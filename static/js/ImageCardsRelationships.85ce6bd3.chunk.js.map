{"version":3,"file":"static/js/ImageCardsRelationships.85ce6bd3.chunk.js","mappings":"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","sources":["components/Common/FilterEntries.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Images/ImageCard.tsx","components/Images/ImageCards/ImagesRelationshipsContext.tsx","components/Images/ImageCards/RelationshipCountTag.tsx","components/Images/ImageCards/RelationshipsStats.tsx","components/Images/ImageCards/constants.ts","components/Images/ImageCards/hooks/hooks.ts","components/Images/ImageCards/RelationshipsContent.tsx","components/Images/ImageCards/RelationshipsFilters.tsx","pages/Images/ImageCardsRelationships.tsx"],"sourcesContent":["import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport type { SegmentedValue } from 'antd/es/segmented';\nimport type { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          ),\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Button, type ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  // biome-ignore lint/correctness/useExhaustiveDependencies: a function shouldn't retrigger the effect\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport type { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","// Ant Design Resources\nimport { Image, type ImageProps } from 'antd';\nimport clsx from 'clsx';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { type ReactNode, createContext, useContext, useState } from 'react';\nimport {\n  type UseImageCardsRelationshipDataReturnValue,\n  type UseRandomGroupReturnValue,\n  useImageCardsRelationshipData,\n  useRandomGroups,\n} from './hooks/hooks';\n\nexport type ImagesRelationshipsContextType = {\n  sampleSize: number;\n  setSampleSize: (size: number) => void;\n  tagThreshold: number;\n  setTagThreshold: (threshold: number) => void;\n  cardSize: number;\n  setCardSize: (size: number) => void;\n  showIds: boolean;\n  setShowIds: (show: boolean) => void;\n  randomGroups: UseRandomGroupReturnValue;\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nconst ImagesRelationshipsContext = createContext<ImagesRelationshipsContextType | PlainObject>({});\n\ntype ImagesRelationshipsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ImagesRelationshipsProvider = ({ children }: ImagesRelationshipsProviderProps) => {\n  const query = useImageCardsRelationshipData();\n\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(150);\n  const [showIds, setShowIds] = useState(false);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const randomGroups = useRandomGroups(query.data, query.setDirty, sampleSize, tagThreshold);\n\n  return (\n    <ImagesRelationshipsContext.Provider\n      value={{\n        sampleSize,\n        setSampleSize,\n        tagThreshold,\n        setTagThreshold,\n        cardSize,\n        setCardSize,\n        showIds,\n        setShowIds,\n        randomGroups,\n        query,\n      }}\n    >\n      {children}\n    </ImagesRelationshipsContext.Provider>\n  );\n};\n\nexport const useImagesRelationshipsContext = () => useContext(ImagesRelationshipsContext);\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","import { BarChartOutlined } from '@ant-design/icons';\nimport { Avatar, Form } from 'antd';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\n\nexport function RelationshipsStats() {\n  const {\n    query: { stats },\n  } = useImagesRelationshipsContext();\n\n  return (\n    <Form.Item\n      label={\n        <>\n          <Avatar icon={<BarChartOutlined />} shape=\"square\" size=\"small\" style={{ marginRight: 6 }} />\n          Stats\n        </>\n      }\n    >\n      <ul className=\"statistic__list\">\n        <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n        <li>Total Relationships: {stats.total}</li>\n        <li>Complete: {stats.complete}</li>\n        <li>Overdone: {stats.overdone}</li>\n        <li>Single Match: {stats.single}</li>\n      </ul>\n    </Form.Item>\n  );\n}\n","import type { ImageCardData } from './types';\n\nexport const TOTAL_DECKS = 12;\n\nexport const CARDS_PER_DECK = 252;\n\nexport const SUGGESTED_MOODS = [\n  'anxious',\n  'bright',\n  'chaotic',\n  'colorful',\n  'confusion',\n  'cozy',\n  'creepy',\n  'dark',\n  'dramatic',\n  'dreamy',\n  'fear',\n  'gloomy',\n  'happy',\n  'intense',\n  'magical',\n  'melancholic',\n  'muted',\n  'mysterious',\n  'professional',\n  'reflective',\n  'scary',\n  'serene',\n  'surreal',\n  'tension',\n  'vibrant',\n  'warm',\n  'whimsical',\n];\n\nexport const SUGGESTED_COLORS = [\n  'beige',\n  'black',\n  'blue',\n  'brown',\n  'colorful',\n  'gray',\n  'green',\n  'mixed',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'white',\n  'yellow',\n];\n\nexport const DEFAULT_ENTRY: ImageCardData = {\n  focus: [],\n  actions: [],\n  colors: [],\n  mood: [],\n  elements: [],\n  highlight: false,\n};\n","import { App } from 'antd';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { cloneDeep, merge, padStart, random } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { firestore, printFirebase } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { type UseMutateFunction, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { CARDS_PER_DECK, DEFAULT_ENTRY, TOTAL_DECKS } from '../constants';\nimport type { FirebaseImageCardLibrary, ImageCardData, ImageCardRelationship } from '../types';\nimport { cleanupData } from '../utils';\n\nconst getRandomCardNumber = () => padStart(String(random(1, CARDS_PER_DECK)), 2, '0');\n\nconst getRandomDeck = () => random(1, TOTAL_DECKS);\n\nconst getRandomCardId = () => `td-d${getRandomDeck()}-${getRandomCardNumber()}`;\n\nexport type UseRandomCardReturnValue = {\n  cardId: string;\n  deck: number;\n  onRandomCard: () => void;\n  card: ImageCardData;\n  add: (key: keyof ImageCardData, value: string) => void;\n  remove: (key: keyof ImageCardData, value: string) => void;\n  update: (key: keyof ImageCardData, value: string[]) => void;\n  toggleHighlight: () => void;\n};\n\nexport function useRandomCard(\n  cardData: FirebaseImageCardLibrary,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n): UseRandomCardReturnValue {\n  const [deck, setDeck] = useState(getRandomDeck());\n  const [cardNumber, setCardNumber] = useState(getRandomCardNumber());\n  const cardId = `td-d${deck}-${cardNumber}`;\n\n  const onRandomCard = () => {\n    setDeck(getRandomDeck());\n    setCardNumber(getRandomCardNumber());\n  };\n\n  const card = merge(cloneDeep(DEFAULT_ENTRY), cardData?.[cardId] ?? {});\n\n  const add = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      card[key]?.push(value);\n      setDirty(true);\n    }\n  };\n\n  const remove = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      const entry = card[key] ?? [];\n      entry.splice(entry.indexOf(value), 1);\n      setDirty(true);\n    }\n  };\n\n  const update = (key: keyof ImageCardData, value: string[]) => {\n    if (key !== 'highlight') {\n      card[key] = value.map((v) => v.trim().toLowerCase());\n      setDirty(true);\n    }\n  };\n\n  const toggleHighlight = () => {\n    card.highlight = !card.highlight;\n    setDirty(true);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    cardData[cardId] = card;\n  }, [card]);\n\n  return {\n    cardId,\n    deck,\n    onRandomCard,\n    card,\n    add,\n    remove,\n    update,\n    toggleHighlight,\n  };\n}\n\nexport function useImageCardsData() {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCards'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    refetch,\n  } = useQuery<any>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as FirebaseImageCardLibrary;\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      printFirebase('Loaded data/imageCards');\n    }\n  }, [isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: error handling\n  useEffect(() => {\n    if (isError) {\n      notification.error({\n        message: 'Error loading data/imageCards',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [isError]);\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<unknown, unknown, FirebaseImageCardLibrary, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const cleanData = cleanupData(data);\n      await setDoc(docRef, cleanData);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n  };\n}\n\nexport function useRandomCards(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n) {\n  const [deckA, setDeckA] = useState(getRandomDeck());\n  const [cardNumberA, setCardNumberA] = useState(getRandomCardNumber());\n  const [deckB, setDeckB] = useState(getRandomDeck());\n  const [cardNumberB, setCardNumberB] = useState(getRandomCardNumber());\n  const cardAId = `td-d${deckA}-${cardNumberA}`;\n  const cardBId = `td-d${deckB}-${cardNumberB}`;\n  const [unrelatedCount, setUnrelatedCount] = useState(0);\n  const { queryParams } = useQueryParams();\n  const unrelatedThreshold = Number(queryParams.get('cycle') ?? 3);\n\n  const cardA = cardData?.[cardAId] ?? [];\n  const cardB = cardData?.[cardBId] ?? [];\n\n  const onRandomCards = () => {\n    setUnrelatedCount(0);\n    setDeckA(getRandomDeck());\n    setCardNumberA(getRandomCardNumber());\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const relate = () => {\n    setUnrelatedCount(0);\n    cardA.push(cardBId);\n    cardData[cardAId] = removeDuplicates(cardA);\n    cardB.push(cardAId);\n    cardData[cardBId] = removeDuplicates(cardB);\n    setDirty(true);\n    setDeckA(deckB);\n    setCardNumberA(cardNumberB);\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const unrelate = () => {\n    if (unrelatedCount >= unrelatedThreshold) {\n      setUnrelatedCount(0);\n      onRandomCards();\n    } else {\n      setUnrelatedCount((ps) => ps + 1);\n      setDeckB(getRandomDeck());\n      setCardNumberB(getRandomCardNumber());\n    }\n  };\n\n  useEffect(() => {\n    if (cardAId === cardBId) {\n      setCardNumberB(getRandomCardNumber());\n    }\n  }, [cardAId, cardBId]);\n\n  return {\n    cardAId,\n    cardA,\n    cardBId,\n    cardB,\n    relate,\n    unrelate,\n    areRelated: cardA.includes(cardBId),\n    onRandomCards,\n  };\n}\n\ntype Stats = {\n  total: number;\n  overdone: number;\n  complete: number;\n  single: number;\n};\n\nexport type UseImageCardsRelationshipDataReturnValue = {\n  data: ImageCardRelationship;\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  error: Error | null;\n  hasData: boolean;\n  refetch: () => void;\n  isSaving: boolean;\n  isMutationError: boolean;\n  isSaved: boolean;\n  save: UseMutateFunction<unknown, unknown, ImageCardRelationship, unknown>;\n  setDirty: (value: React.SetStateAction<boolean>) => void;\n  isDirty: boolean;\n  stats: Stats;\n};\n\nexport function useImageCardsRelationshipData(): UseImageCardsRelationshipDataReturnValue {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCardsRelationships'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n  const [stats, setStats] = useState<Stats>({ total: 0, overdone: 0, complete: 0, single: 0 });\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    isFetched,\n    isRefetching,\n    refetch,\n  } = useQuery<Record<string, string[]>>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as ImageCardRelationship;\n    },\n  });\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<unknown, unknown, ImageCardRelationship, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n\n      await setDoc(docRef, data);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    if (!isRefetching && isFetched) {\n      const total = Object.keys(data).length;\n      let overdone = 0;\n      let complete = 0;\n      let single = 0;\n      Object.values(data).forEach((v) => {\n        if (v.length > 8) {\n          overdone += 1;\n        }\n        if (v.length === 1) {\n          single += 1;\n        }\n        if (v.length > 2) {\n          complete += 1;\n        }\n      });\n      setStats({ total, overdone, complete, single });\n    }\n  }, [isFetched, isRefetching]);\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n    stats,\n  };\n}\n\nexport type UseRandomGroupReturnValue = {\n  cardIds: string[];\n  cards: string[][];\n  selection: string[];\n  onSelect: (id: string) => void;\n  relate: () => void;\n  nextSet: () => void;\n  deselectAll: () => void;\n  cycles: number;\n  filters: { useCycles: boolean; toggleUseCycles: () => void };\n};\n\nexport function useRandomGroups(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n  sampleSize: number,\n  tagThreshold: number,\n): UseRandomGroupReturnValue {\n  const [cardIds, setCardIds] = useState<string[]>([]);\n  const [cards, setCards] = useState<string[][]>([]);\n  const [cycledCards, setCycleCards] = useState<string[]>([]);\n  const [cycles, setCycles] = useState(0);\n  const [filterUseCycles, setFIlterUseCycles] = useState(true);\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  const updateCards = (ids?: string[]) => {\n    setCards((ids ?? cardIds).map((id) => cardData?.[id] ?? []));\n  };\n\n  const onRandomCards = () => {\n    // setSelection([]);\n    const ids: string[] = [...selection];\n    let cycleCount = 0;\n    const cycledCardsSample = cycledCards.length < 2000 ? cycledCards : [];\n\n    // Avoid infinite loop failsafe\n    let tries = 0;\n    while (tries < 400 && ids.length < sampleSize) {\n      const id = getRandomCardId();\n      const card = cardData[id] ?? [];\n      const isNew = tagThreshold > 0 ? card.length < tagThreshold : true;\n      const isCycled = filterUseCycles ? cycledCardsSample.includes(id) : false;\n      if (!ids.includes(id) && !isCycled && isNew) {\n        ids.push(id);\n        cycleCount += 1;\n      }\n      tries += 1;\n    }\n    setCardIds(ids);\n    setCycleCards((pv) => [...pv, ...ids]);\n    updateCards(ids);\n    setCycles((ps) => ps + cycleCount);\n  };\n\n  // On Load get sample of cards\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    if (cardIds.length === 0) {\n      onRandomCards();\n    }\n  }, [cardIds]);\n\n  /**\n   * Selects or deselects a card\n   */\n  const onSelect = (id: string) => {\n    setSelection((ps) => {\n      const copy = [...ps];\n      const index = copy.indexOf(id);\n      if (index > -1) {\n        copy.splice(index, 1);\n      } else {\n        copy.push(id);\n      }\n      return copy;\n    });\n  };\n\n  /**\n   * Relates all selected cards in the selection array\n   */\n  const relate = () => {\n    selection.forEach((id) => {\n      const card = cardData[id] ?? [];\n\n      card.push(...selection.filter((s) => s !== id));\n      cardData[id] = removeDuplicates(card);\n    });\n    setDirty(true);\n    setSelection([]);\n    updateCards();\n    setCycleCards([]);\n    setCycles(0);\n  };\n\n  /**\n   * Deselects all cards\n   */\n  const deselectAll = () => {\n    setSelection([]);\n  };\n\n  const toggleFilterUseCycles = () => {\n    setFIlterUseCycles((ps) => !ps);\n  };\n\n  return {\n    cardIds,\n    cards,\n    selection,\n    onSelect,\n    relate,\n    nextSet: onRandomCards,\n    deselectAll,\n    cycles,\n    filters: {\n      useCycles: filterUseCycles,\n      toggleUseCycles: toggleFilterUseCycles,\n    },\n  };\n}\n","import {\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { Card, FloatButton, Image, Tag } from 'antd';\nimport { TransparentButton } from 'components/Common';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { isEmpty } from 'lodash';\nimport { useMemo, useRef } from 'react';\nimport { useMeasure } from 'react-use';\nimport { ImageCard } from '../ImageCard';\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipCountTag } from './RelationshipCountTag';\n\nexport function RelationshipsContent() {\n  const {\n    query: { isDirty, isSaving, save, stats, ...query },\n    randomGroups: { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles },\n    showIds,\n    cardSize,\n  } = useImagesRelationshipsContext();\n\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n\n  const [cardQuantity, cardWidth] = useMemo(() => {\n    const cq = Math.floor(containerWidth / cardSize) + 1;\n    const cw = Math.floor(containerWidth / cq);\n    return [cq, cw];\n  }, [cardSize, containerWidth]);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <DataLoadingWrapper\n      isLoading={query.isLoading}\n      error={query.error}\n      hasResponseData={!isEmpty(query.data)}\n    >\n      <div ref={ref} className=\"my-6\">\n        <Card\n          title=\"Card Relationship Matching\"\n          extra={\n            <span>\n              <FileImageOutlined /> {cycles}\n            </span>\n          }\n          className=\"image-card-categorizer-card\"\n          ref={cardRef}\n        >\n          <Image.PreviewGroup>\n            <div\n              className=\"image-cards-group\"\n              style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n            >\n              {cardIds.map((cardId: string, index: number) => {\n                const isSelected = selection.includes(cardId);\n                const card = cards[index];\n\n                return (\n                  <div className=\"image-card-card__image\" key={cardId}>\n                    <TransparentButton\n                      onClick={() => onSelect(cardId)}\n                      active={isSelected}\n                      className=\"image-cards-group__button\"\n                      activeClass=\"image-cards-group__button--active\"\n                    >\n                      <ImageCard id={cardId} width={cardWidth - 24} preview={false} />\n                      <div>\n                        {showIds && <Tag>{cardId}</Tag>}\n                        {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                        <RelationshipCountTag card={card} />\n                      </div>\n                    </TransparentButton>\n                  </div>\n                );\n              })}\n            </div>\n          </Image.PreviewGroup>\n          <Actions\n            isSaving={isSaving}\n            isDirty={isDirty}\n            selection={selection}\n            relate={relate}\n            deselectAll={deselectAll}\n            onNextSet={onNextSet}\n          />\n        </Card>\n      </div>\n    </DataLoadingWrapper>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    // </FloatButton.Group>\n    <>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>\n  );\n};\n","import { Flex } from 'antd';\nimport { FilterSelect, FilterSwitch, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\nimport { CARD_SIZE_OPTIONS, SAMPLE_SIZE_OPTIONS, TAGS_SELECTOR_OPTIONS } from 'utils/constants';\n\nimport { useImagesRelationshipsContext } from './ImagesRelationshipsContext';\nimport { RelationshipsStats } from './RelationshipsStats';\n\nexport function RelationshipsFilters() {\n  const {\n    query: { isDirty, isSaving, save, data, isLoading, isError },\n    randomGroups: { filters },\n    showIds,\n    setShowIds,\n    tagThreshold,\n    setTagThreshold,\n    sampleSize,\n    setSampleSize,\n    cardSize,\n    setCardSize,\n  } = useImagesRelationshipsContext();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Flex vertical gap={6}>\n          <SaveButton\n            isDirty={isDirty}\n            dirt={JSON.stringify(data)}\n            onSave={() => save({})}\n            isSaving={isSaving}\n          />\n\n          <DownloadButton\n            data={data}\n            fileName=\"imageCardsRelationships.json\"\n            loading={isSaving}\n            disabled={isEmpty(data)}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <FilterSwitch\n          label=\"Use Cycles\"\n          value={filters.useCycles}\n          onChange={() => filters.toggleUseCycles()}\n        />\n\n        <FilterSwitch label=\"Show Ids\" value={showIds} onChange={(c) => setShowIds(c)} />\n\n        <FilterSelect\n          onChange={(value) => setTagThreshold(value)}\n          value={tagThreshold}\n          options={TAGS_SELECTOR_OPTIONS}\n          label=\"Tag Count\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setSampleSize(value)}\n          value={sampleSize}\n          options={SAMPLE_SIZE_OPTIONS}\n          label=\"Sample Size\"\n        />\n\n        <FilterSelect\n          onChange={(value) => setCardSize(value)}\n          value={cardSize}\n          options={CARD_SIZE_OPTIONS}\n          label=\"Card Size\"\n        />\n      </SiderContent>\n\n      <SiderContent>\n        <RelationshipsStats />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { ImagesRelationshipsProvider } from 'components/Images/ImageCards/ImagesRelationshipsContext';\nimport { RelationshipsContent } from 'components/Images/ImageCards/RelationshipsContent';\nimport { RelationshipsFilters } from 'components/Images/ImageCards/RelationshipsFilters';\n\nimport { PageLayout } from 'components/Layout';\n\nfunction ImageCardsRelationships() {\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Relationships\">\n      <ImagesRelationshipsProvider>\n        <Layout hasSider>\n          <RelationshipsFilters />\n\n          <Layout.Content className=\"content\">\n            <RelationshipsContent />\n          </Layout.Content>\n        </Layout>\n      </ImagesRelationshipsProvider>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsRelationships;\n"],"names":["FilterSelect","label","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","className","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","layout","length","block","option","arrow","trigger","title","icon","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","onClick","loading","danger","SectionTitle","children","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","props","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","ImagesRelationshipsContext","createContext","ImagesRelationshipsProvider","query","useImageCardsRelationshipData","sampleSize","setSampleSize","useState","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","randomGroups","useRandomGroups","data","setDirty","Provider","useImagesRelationshipsContext","useContext","RelationshipCountTag","card","undefined","RelationshipsStats","stats","shape","marginRight","Math","floor","total","complete","overdone","single","getRandomCardNumber","padStart","String","random","getRandomDeck","useRandomCards","cardData","deckA","setDeckA","cardNumberA","setCardNumberA","deckB","setDeckB","cardNumberB","setCardNumberB","cardAId","cardBId","unrelatedCount","setUnrelatedCount","queryParams","useQueryParams","unrelatedThreshold","Number","get","cardA","cardB","onRandomCards","relate","push","removeDuplicates","unrelate","ps","areRelated","includes","queryKey","queryClient","useQueryClient","notification","App","setStats","isSuccess","isFetched","isRefetching","refetch","useQuery","queryFn","async","docRef","doc","firestore","getDoc","isPending","isMutationError","isSaved","mutate","save","useMutation","mutationKey","mutationFn","setDoc","onSuccess","success","placement","refetchQueries","Object","keys","values","forEach","hasData","cardIds","setCardIds","cards","setCards","cycledCards","setCycleCards","cycles","setCycles","filterUseCycles","setFIlterUseCycles","selection","setSelection","updateCards","ids","cycleCount","cycledCardsSample","tries","isNew","isCycled","pv","onSelect","copy","index","indexOf","splice","filter","s","nextSet","deselectAll","filters","useCycles","toggleUseCycles","RelationshipsContent","cardRef","useRef","ref","containerWidth","useMeasure","cardQuantity","cardWidth","useMemo","cq","DataLoadingWrapper","isEmpty","extra","FileImageOutlined","gridTemplateColumns","cardId","isSelected","Actions","onNextSet","current","scrollIntoView","behavior","LoadingOutlined","WarningOutlined","right","ExpandOutlined","ForkOutlined","badge","count","SyncOutlined","RelationshipsFilters","vertical","gap","JSON","stringify","DownloadButton","fileName","c","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","subtitle","hasSider"],"sourceRoot":""}