{"version":3,"file":"static/js/ItemsAttribution.fa91c644.chunk.js","mappings":"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","sources":["components/Items/ItemBuildingBlocks.tsx","toolKits/alien-attributes.ts","components/Items/utils.ts","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","hooks/useItemQueryParams.ts","components/Common/Stat.tsx","components/Items/Attributes/ItemAttributionFiltersSections.tsx","components/Items/Attributes/ItemAttributionFilters.tsx","components/Common/GoToTopButton.tsx","components/Common/PopoverInfo.tsx","components/Items/Attributes/AttributionValueButtons.tsx","components/Items/Attributes/ItemAttributeDescription.tsx","components/Items/Attributes/ItemAttributeStats.tsx","components/Items/Attributes/ItemAttributionCard.tsx","components/Items/Attributes/ItemAttributionNavigation.tsx","components/Items/Attributes/ItemAttributionDrawer.tsx","components/Items/Attributes/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/Attributes/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","hooks/useItemSampler.ts","components/Items/Attributes/ItemSamplerCard.tsx","components/Items/Attributes/DailyAlienSimulator.tsx","components/Items/Attributes/ItemSimulation.tsx","components/Items/Attributes/ItemStats.tsx","components/Items/Attributes/ItemAttributionPageContent.tsx","pages/Items/ItemsAttribution.tsx"],"sourcesContent":["import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport type { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useSearchParams } from 'react-router-dom';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { keyBy, keys, orderBy, sampleSize, shuffle, sortBy } from 'lodash';\nimport type { ItemAttributesValues, ItemAttribute, Item, ItemId } from 'types';\n/**\n * TD ALIEN ATTRIBUTES TOOLKIT FUNCTIONS\n * Version 1.1.0\n */\n\n/**\n * Alien Item object\n */\ntype AlienItem = Pick<Item, 'id' | 'name' | 'nsfw'> &\n  Pick<ItemAttributesValues, 'attributes'> & {\n    /**\n     * The type of aliem item\n     */\n    type: 'ITEM' | 'CURSE' | 'BLANK';\n    /**\n     * Number of times the item has been inquired about\n     */\n    inquiries?: number;\n    /**\n     * List of players who offered the item\n     */\n    offerings: string[];\n  };\n\n/**\n * Alien Attribute object\n */\ntype AlienAttribute = Pick<\n  ItemAttribute,\n  'id' | 'name' | 'description' | 'limited' | 'spriteId' | 'priority'\n> & {\n  /**\n   * Flag indicating if the players have been given information about this attribute\n   */\n  known?: boolean;\n};\n\nconst ATTRIBUTE_VALUE_DICT = {\n  OPPOSITE: {\n    value: -10,\n    prefix: '^',\n    name: 'OPPOSITE',\n    label: {\n      en: 'Opposite',\n      pt: 'Oposto',\n    },\n    prefixLabel: {\n      en: 'really not ',\n      pt: 'muito não ',\n    },\n  },\n  UNRELATED: {\n    value: -3,\n    prefix: '!',\n    name: 'UNRELATED',\n    label: {\n      en: 'Unrelated',\n      pt: 'Desconexo',\n    },\n    prefixLabel: {\n      en: 'not ',\n      pt: 'não ',\n    },\n  },\n  UNCLEAR: {\n    value: -1,\n    prefix: '~',\n    name: 'UNCLEAR',\n    label: {\n      en: 'Unclear',\n      pt: 'Incerto',\n    },\n    prefixLabel: {\n      en: 'sorta ',\n      pt: 'meio ',\n    },\n  },\n  RELATED: {\n    value: 5,\n    prefix: '+',\n    name: 'RELATED',\n    label: {\n      en: 'Related',\n      pt: 'Relacionado',\n    },\n    prefixLabel: {\n      en: '',\n      pt: '',\n    },\n  },\n  DETERMINISTIC: {\n    value: 10,\n    prefix: '*',\n    name: 'DETERMINISTIC',\n    label: {\n      en: 'Deterministic',\n      pt: 'Determinístico',\n    },\n    prefixLabel: {\n      en: 'very ',\n      pt: 'muito ',\n    },\n  },\n};\nconst prefixDictionary = keyBy(ATTRIBUTE_VALUE_DICT, 'prefix');\n\n/**\n * Creates an AlienItem object from the given item and its attribute values.\n *\n * @param item - The item to be transformed into an AlienItem.\n * @param itemAttributesValues - The attribute values associated with the item.\n * @param attributeKeysInUse - The list of attribute keys that are in use and should be included in the AlienItem.\n * @returns The newly created AlienItem object.\n */\nfunction createAlienItem(\n  item: Item,\n  itemAttributesValues: ItemAttributesValues,\n  attributeKeysInUse: string[],\n): AlienItem {\n  const itemAttributes = itemAttributesValues.attributes;\n  const attributes: AlienItem['attributes'] = {};\n  for (const key of attributeKeysInUse) {\n    attributes[key] = itemAttributes[key];\n  }\n\n  const result: AlienItem = {\n    id: item.id,\n    name: item.name,\n    attributes,\n    type: 'ITEM',\n    inquiries: 0,\n    offerings: [],\n  };\n\n  if (item.nsfw) {\n    result.nsfw = item.nsfw;\n  }\n\n  return result;\n}\n\n/**\n * Creates an AlienAttribute object from an ItemAttribute object.\n *\n * @param itemAttribute - The item attribute to convert.\n * @returns The created AlienAttribute object.\n */\nfunction createAlienAttribute(itemAttribute: ItemAttribute): AlienAttribute {\n  const { id, name, description, limited, spriteId, priority } = itemAttribute;\n\n  const result: AlienAttribute = {\n    id,\n    name,\n    description,\n    spriteId,\n    priority,\n    known: false,\n  };\n\n  if (limited) {\n    result.limited = limited;\n  }\n\n  return result;\n}\n\n/**\n * Builds alien game grids by selecting and scoring item attributes and their representative items.\n *\n * @param items - A record of items where the key is the item ID and the value is the item object.\n * @param itemAttributesValues - An array of item attribute values, each containing attributes and their values.\n * @param itemAttributes - An array of item attributes, each containing attribute metadata.\n * @param options - Additional options for building the alien game grids.\n * @param options.nsfw - Flag indicating whether to include NSFW items. (default: false)\n * @param options.itemsGridSize - The number of items to include in the grid. (default: 25)\n * @param options.attributesGridSize - The number of attributes to include in the grid. (default: 25)\n * @param options.reliability - The minimum reliability value for an item attribute to be considered. (default: 70)\n * @returns An object containing the selected attributes and their representative items.\n *\n * The function performs the following steps:\n * 1. Gathers complete items with signatures from itemAttributesValues.\n * 2. For each itemAttribute, selects a unique item where its value is deterministic (10) and reliable (reliability > 70).\n * 3. Scores each itemAttribute based on the positive values it has on each item.\n * 4. Selects the top 24 non-limited attributes by score, removing any opposite or related attribute.\n * 5. For limited itemAttributes, selects the single best limited attribute to join the final list.\n * 6. Returns the top 25 attributes and their representative items.\n */\nfunction buildAlienGameGrids(\n  items: Record<string, Item>,\n  itemAttributesValues: ItemAttributesValues[],\n  itemAttributes: ItemAttribute[],\n  options?: {\n    nsfw?: boolean;\n    itemsGridSize?: number;\n    attributesGridSize?: number;\n    reliability?: number;\n  },\n) {\n  const nsfw = options?.nsfw ?? false;\n  const itemsGridSize = options?.itemsGridSize ?? 25;\n  const attributesGridSize = options?.attributesGridSize ?? 25;\n  const reliability = options?.reliability ?? 70;\n\n  // Step 1: Gather complete items with signatures from itemAttributesValues\n  const completeItems = shuffle(\n    itemAttributesValues.filter(\n      (itemAttrVal) =>\n        itemAttrVal.complete &&\n        itemAttrVal.signature &&\n        (itemAttrVal.reliability ?? 0) > reliability &&\n        (nsfw || !items[itemAttrVal.id].nsfw),\n    ),\n  );\n\n  // Step 2: For each itemAttribute, select an unique item where its value is deterministic (10) and reliable (reliability > 80)\n  const usedItems: Record<string, boolean> = {};\n  const uniqueItemsPerAttribute = itemAttributes\n    .map((attr) => {\n      let selection: ItemAttributesValues | null = null;\n      let tries = 0;\n      while (tries < 500 && !selection) {\n        if (tries === 499) throw new Error('Could not find a deterministic item for attribute');\n        if (attr.limited) {\n          const candidate = completeItems.find(\n            (itemAttrVal) =>\n              itemAttrVal.attributes[attr.id] === ATTRIBUTE_VALUE_DICT.RELATED.value &&\n              !usedItems[itemAttrVal.id],\n          );\n          if (candidate) {\n            selection = candidate;\n            usedItems[candidate.id] = true;\n          }\n        } else {\n          const candidate = completeItems.find(\n            (itemAttrVal) =>\n              itemAttrVal.attributes[attr.id] === ATTRIBUTE_VALUE_DICT.DETERMINISTIC.value &&\n              !usedItems[itemAttrVal.id],\n          );\n          if (candidate) {\n            selection = candidate;\n            usedItems[candidate.id] = true;\n          }\n        }\n        tries += 1;\n      }\n      return selection;\n    })\n    .filter(Boolean) as ItemAttributesValues[];\n\n  // Step 3: Score each itemAttribute based on the positive values it has on each items\n  const attributeAggregatedScores = itemAttributes.reduce((acc: Record<string, number>, attr) => {\n    acc[attr.id] = 0;\n    return acc;\n  }, {});\n  const uniqueItemsPerAttributePerId: Record<string, ItemAttributesValues> = {};\n  uniqueItemsPerAttribute.forEach((itemAttrVal, index) => {\n    uniqueItemsPerAttributePerId[itemAttributes[index].id] = itemAttrVal;\n    Object.keys(itemAttrVal.attributes).forEach((attrId) => {\n      if (itemAttrVal.attributes[attrId] > 0) {\n        attributeAggregatedScores[attrId] += itemAttrVal.attributes[attrId];\n      }\n    });\n  });\n\n  // Step 4: Select the top 24 non-limited attributes by score removing any opposite or related attribute\n  const nonLimitedAttributes = itemAttributes.filter((attr) => !attr.limited);\n  const topNonLimitedAttributes = sortBy(nonLimitedAttributes, (attr) => -attributeAggregatedScores[attr.id])\n    .filter((attr, index, arr) => {\n      if (!attr.oppositeId && !attr.relatedId) {\n        return true;\n      }\n      // If attribute has oppositeId, or relatedId, keep only the earliest one\n      const relativeId = attr.oppositeId ?? attr.relatedId;\n      for (let i = 0; i < index; i++) {\n        if (arr[i].id === relativeId) {\n          return false;\n        }\n      }\n\n      return true;\n    })\n    .slice(0, attributesGridSize - 1);\n\n  // Step 5: For limited itemAttributes, select the single best limited attribute to join the final list\n  const limitedAttributes = itemAttributes.filter((attr) => attr.limited);\n  const topLimitedAttribute = sortBy(limitedAttributes, (attr) => -attributeAggregatedScores[attr.id])[0];\n\n  // Step 6: Return the top 25 attributes, and their representative items\n  const selectedAttributes = [...topNonLimitedAttributes, topLimitedAttribute];\n  const selectedAttributesIds = selectedAttributes.map((attr) => attr.id);\n  const selectedItems = sampleSize(\n    selectedAttributes.map((itemAttribute) => {\n      return uniqueItemsPerAttributePerId[itemAttribute.id];\n    }),\n    itemsGridSize,\n  );\n\n  return {\n    attributes: sortBy(selectedAttributes.map(createAlienAttribute), ['priority']),\n    items: selectedItems.map((itemAttributesValuesEntry) =>\n      createAlienItem(items[itemAttributesValuesEntry.id], itemAttributesValuesEntry, selectedAttributesIds),\n    ),\n  };\n}\n\n/**\n * Finds the top fitting common attributes shared by the inquired items.\n * @param alienItems - Array of AlienItem objects.\n * @param alienAttributes - Array of AlienAttribute objects.\n * @param inquiredItemIds - Array of inquired item IDs (1 to 5 IDs).\n * @returns The top fitting AlienAttributes or an empty array if no common attributes are found.\n */\nfunction getBestAttributes(\n  alienItems: AlienItem[],\n  alienAttributes: AlienAttribute[],\n  inquiredItemIds: ItemId[],\n): AlienAttribute[] {\n  // Filter the alien items to include only those with IDs in inquiredItemIds\n  const inquiredItems = alienItems.filter((item) => inquiredItemIds.includes(item.id));\n\n  if (inquiredItems.length === 0) {\n    return []; // No matching items found\n  }\n\n  // Aggregate attribute scores across inquired items\n  const attributeScores: Record<string, number> = {};\n\n  inquiredItems.forEach((item) => {\n    Object.entries(item.attributes).forEach(([attributeId, value]) => {\n      if (!attributeScores[attributeId]) {\n        attributeScores[attributeId] = 0;\n      }\n      attributeScores[attributeId] += value; // Sum the values of the attributes\n    });\n  });\n\n  // Sort attributes by their cumulative scores in descending order\n  const sortedAttributeIds = Object.entries(attributeScores)\n    .filter(([, score]) => score > 0) // Filter out non-positive scores\n    .sort(([, scoreA], [, scoreB]) => scoreB - scoreA)\n    .map(([attributeId]) => attributeId);\n\n  // Match the top attribute IDs with the AlienAttribute list\n  return sortedAttributeIds\n    .map((attributeId) => alienAttributes.find((attr) => attr.id === attributeId))\n    .filter((attr): attr is AlienAttribute => attr !== undefined);\n}\n\nconst ATTRIBUTE_VALUE_PRIORITY = ['*', '^', '+', '~', '!'];\n\n/**\n * Generates a signature string for a given AlienItem based on its attributes and their values.\n * @param alienItems - Array of AlienItem objects.\n * @param alienAttributes - Array of AlienAttribute objects.\n * @param itemId - The ID of the item to generate the signature for.\n * @param options - Additional options for generating the signature.\n * @param options.useOnlyKnownAttributes - Flag indicating whether to use only known attributes.\n * @param options.length - The maximum number of attributes to include in the signature.\n * @param options.prioritizedNegatives - An array of negative prefixes to prioritize.\n * @returns The generated signature string for the item or an empty string if the item is not found.\n */\nfunction getAlienItemSignature(\n  alienItems: AlienItem[],\n  alienAttributes: AlienAttribute[],\n  itemId: ItemId,\n  options?: {\n    useOnlyKnownAttributes?: boolean;\n    length?: number;\n    prioritizedNegatives?: string[];\n  },\n): string {\n  // Find the item by ID\n  const item = alienItems.find((i) => i.id === itemId);\n  if (!item) {\n    return ''; // Return an empty string if the item is not found\n  }\n\n  // Filter attributes based on `useOnlyKnownAttributes`\n  const validAttributes = alienAttributes.filter((attr) =>\n    options?.useOnlyKnownAttributes ? attr.known : true,\n  );\n\n  // Map the valid attributes by their ID for quick lookup\n  const attributeMap = new Map(validAttributes.map((attr) => [attr.id, attr]));\n\n  // Create a list of signature entries based on the item attributes\n  const signatureEntries: { prefix: string; id: string; priority: number }[] = [];\n\n  for (const [attributeId, value] of Object.entries(item.attributes)) {\n    const attribute = attributeMap.get(attributeId);\n    if (attribute) {\n      // Find the prefix for the value from ATTRIBUTE_VALUE_DICT\n      const entry = Object.values(ATTRIBUTE_VALUE_DICT).find((dictEntry) => dictEntry.value === value);\n\n      if (entry) {\n        signatureEntries.push({\n          prefix: entry.prefix,\n          id: attribute.id,\n          priority: attribute.priority,\n        });\n      }\n    }\n  }\n\n  const sortedEntries = sortBy(signatureEntries, [\n    (o) => ATTRIBUTE_VALUE_PRIORITY.indexOf(o.prefix),\n    (o) => {\n      if (\n        o.prefix === ATTRIBUTE_VALUE_DICT.UNRELATED.prefix &&\n        options?.prioritizedNegatives?.includes(o.prefix)\n      ) {\n        return -1;\n      }\n      return o.priority;\n    },\n    ['asc', 'asc'],\n  ]);\n\n  // Limit the number of attributes if a length is provided\n  const limitedEntries = options?.length ? sortedEntries.slice(0, options?.length) : sortedEntries;\n\n  // Generate the final signature string\n  return limitedEntries.map((entry) => `${entry.prefix}${entry.id}`).join('');\n}\n\n/**\n * Parses a given item signature string and extracts entries with specific prefixes.\n * The function looks for patterns in the signature string that match the format:\n * [prefix][id], where the prefix is one of the characters: ^, *, +, ~, !, and the id\n * is a sequence of alphanumeric characters.\n * @param signature - The item signature string to parse.\n * @returns An array of objects, each containing:\n * - `prefix`: The prefix character.\n * - `id`: The alphanumeric identifier following the prefix.\n * - `variant`: The name of the variant corresponding to the prefix from the `prefixDictionary`.\n * - `spriteId`: An empty string (to be populated later).\n */\nfunction parseItemSignature(signature: string) {\n  const entries = signature.match(/[\\^*+~!][a-zA-Z0-9]+/g) ?? [];\n  return entries.map((entry) => ({\n    prefix: entry[0],\n    id: entry.slice(1),\n    variant: prefixDictionary[entry[0]].name,\n    spriteId: '',\n  }));\n}\n\n/**\n * Retrieves the IDs of deterministic attributes from a list of alien items.\n * @param alienItems - An array of AlienItem objects to be filtered and processed.\n * @returns An array of attribute IDs that have deterministic values.\n */\nfunction getCursesDeterministicAttributesIds(alienItems: AlienItem[]) {\n  const curses = alienItems.filter((item) => item.type === 'CURSE');\n  const deterministicValues = curses.reduce((acc: Record<string, boolean>, curse) => {\n    Object.entries(curse.attributes).forEach(([attrId, value]) => {\n      if (value === ATTRIBUTE_VALUE_DICT.DETERMINISTIC.value) {\n        acc[attrId] = true;\n      }\n    });\n    return acc;\n  }, {});\n\n  return Object.keys(deterministicValues);\n}\n\n/**\n * Determines the best AlienItem of type 'ITEM' that does not clash with any 'CURSE' item signatures\n * and excludes items with any offerings.\n * @param alienItems - Array of AlienItem objects.\n * @param alienAttributes - Array of AlienAttribute objects.\n * @returns The best AlienItem or undefined if no suitable item is found.\n */\nfunction getNonClashingItem(\n  alienItems: AlienItem[],\n  alienAttributes: AlienAttribute[],\n  previouslyInquiredItemsIds?: ItemId[],\n  recentlyInquiredItemsIds?: ItemId[],\n) {\n  // Filter items by type and exclude items with offerings\n  const items = alienItems.filter((item) => item.type === 'ITEM' && item.offerings.length === 0);\n  const blanks = alienItems.filter((item) => item.type === 'BLANK' && item.offerings.length === 0);\n  const curses = alienItems.filter((item) => item.type === 'CURSE');\n\n  const prioritizedNegatives = getCursesDeterministicAttributesIds(curses);\n\n  // Generate known attribute signatures for curses\n  const curseSignatures = curses.reduce((acc: Record<string, string>, curse) => {\n    const signature = getAlienItemSignature(alienItems, alienAttributes, curse.id, {\n      useOnlyKnownAttributes: true,\n      length: 5,\n      prioritizedNegatives,\n    });\n    acc[curse.id] = signature;\n    return acc;\n  }, {});\n\n  // Generate know attribute signatures for blanks\n  const blankSignatures = blanks.reduce((acc: Record<string, string>, blank) => {\n    const signature = getAlienItemSignature(alienItems, alienAttributes, blank.id, {\n      useOnlyKnownAttributes: true,\n      length: 5,\n      prioritizedNegatives,\n    });\n    acc[blank.id] = signature;\n    return acc;\n  }, {});\n\n  // Generate known attribute signatures for items\n  const itemSignatures = items.reduce((acc: Record<string, string>, item) => {\n    const signature = getAlienItemSignature(alienItems, alienAttributes, item.id, {\n      useOnlyKnownAttributes: true,\n      length: 5,\n      prioritizedNegatives,\n    });\n    acc[item.id] = signature;\n    return acc;\n  }, {});\n\n  const getCountForMatches = (signature: string, signatures: Record<string, string>) => {\n    return Object.values(signatures).filter((sig) => sig === signature).length;\n  };\n\n  const itemsRanking = orderBy(\n    items.map((item) => {\n      const signature = itemSignatures[item.id];\n      const result = {\n        item,\n        signature,\n        equivalentCurses: getCountForMatches(signature, curseSignatures),\n        equivalentBlanks: getCountForMatches(signature, blankSignatures),\n        isRecentlyInquiredItem: recentlyInquiredItemsIds?.includes(item.id) ?? false,\n        isPreviouslyInquiredItem: previouslyInquiredItemsIds?.includes(item.id) ?? false,\n      };\n      return result;\n    }),\n    ['equivalentCurses', 'equivalentBlanks', 'isRecentlyInquiredItem', 'isPreviouslyInquiredItem'],\n    ['asc', 'asc', 'desc', 'desc'],\n  );\n\n  return itemsRanking;\n}\n\n/**\n * Calculates the initial known attributes for a set of alien items based on their attributes.\n * @param alienItems - An array of alien items, each containing a set of attributes.\n * @param alienAttributes - An array of alien attributes, each with an id.\n * @returns An array containing the ids of the highest, median, and lowest scoring attributes.\n */\nconst getInitialKnownAttributes = (alienItems: AlienItem[], alienAttributes: AlienAttribute[]) => {\n  const scores: Record<string, number> = {};\n  alienAttributes.forEach((attr) => {\n    scores[attr.id] = 0;\n  });\n\n  alienItems.forEach((item) => {\n    Object.entries(item.attributes).forEach(([attrId, value]) => {\n      if (value > 0) {\n        if (scores[attrId]) {\n          scores[attrId] = value;\n        }\n      }\n    });\n  });\n\n  const sortedScores = orderBy(keys(scores), (attrId) => -scores[attrId]);\n\n  return [\n    sortedScores[1],\n    sortedScores[Math.ceil(sortedScores.length / 2)],\n    sortedScores[sortedScores.length - 1],\n  ];\n};\n\n/**\n * Generates a list of inquiry suggestions based on missing alien attributes.\n * @param alienItems - An array of AlienItem objects representing the items associated with aliens.\n * @param alienAttributes - An array of AlienAttribute objects representing the attributes of aliens.\n * @param playerKnownAttributesIds - An array of strings representing the IDs of attributes already known to the player.\n * @returns An array of up to 3 shuffled objects, each containing an attribute and the items associated with it,\n *          ordered by the number of items that have the attribute in descending order.\n */\nconst getInquirySuggestions = (\n  alienItems: AlienItem[],\n  alienAttributes: AlienAttribute[],\n  playerKnownAttributesIds: string[],\n) => {\n  const missingAttributes = orderBy(\n    alienAttributes\n      .filter((attr) => !playerKnownAttributesIds.includes(attr.id))\n      .map((attr) => {\n        const itemsWithAttribute = alienItems\n          .filter((item) => item.attributes[attr.id] > 0 && item.offerings.length === 0)\n          .slice(0, 5);\n        return {\n          attribute: attr,\n          items: itemsWithAttribute,\n        };\n      }),\n    ['items.length'],\n    ['desc'],\n  );\n\n  return orderBy(\n    shuffle(missingAttributes.slice(0, 5)).slice(0, 3),\n    ['items.length', 'attribute.id'],\n    ['desc', 'asc'],\n  );\n};\n\nexport const alienAttributesUtils = {\n  createAlienItem,\n  createAlienAttribute,\n  buildAlienGameGrids,\n  getBestAttributes,\n  getAlienItemSignature,\n  getNonClashingItem,\n  getInitialKnownAttributes,\n  parseItemSignature,\n  getInquirySuggestions,\n  ATTRIBUTE_VALUE_DICT,\n  ATTRIBUTE_VALUE_PRIORITY,\n};\n\nexport type { AlienItem, AlienAttribute };\n","import { cloneDeep, keyBy, memoize, merge, orderBy, sortBy } from 'lodash';\nimport { alienAttributesUtils } from 'toolKits/alien-attributes';\nimport type { Item, ItemAttributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE, ATTRIBUTE_VALUE_PREFIX } from 'utils/constants';\n\n/**\n * Creates a new item with default values and merges it with the provided partial item.\n *\n * @param partialItem - The partial item to merge with the default values.\n * @returns The new item with merged values.\n */\nexport const getNewItem = (partialItem: Partial<Item> = {}): Item => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        name: { en: '', pt: '' },\n        groups: [],\n        attributes: {},\n      },\n      partialItem,\n    ),\n  );\n};\n\n/**\n * Creates a new `ItemAttributesValues` object by merging the provided `partialItemAttributeValues`\n * with a default object that has an empty `id` and an empty `attributes` object.\n *\n * @param partialItemAttributeValues - The partial item attribute values to merge.\n * @returns The new `ItemAttributesValues` object.\n */\nexport const getNewItemAttributeValues = (\n  partialItemAttributeValues: Partial<ItemAttributesValues> = {},\n): ItemAttributesValues => {\n  return cloneDeep(\n    merge(\n      {\n        id: '',\n        attributes: {},\n      },\n      partialItemAttributeValues,\n    ),\n  );\n};\n\n/**\n *\n * @param itemAttributesValues\n * @param itemAttributes\n * @param onlyRelevant\n * @deprecated - i don't know what to do yet\n * @returns\n */\nexport const getItemAttributePriorityResponse = (\n  itemAttributesValues: ItemAttributesValues,\n  itemAttributes: Dictionary<ItemAttribute>,\n  /**\n   * Ignore attributes that are UNRELATED or UNCLEAR\n   */\n  onlyRelevant?: boolean,\n) => {\n  const priorityOrder: string[] = orderBy(\n    Object.values(itemAttributes),\n    ['priority', 'id'],\n    ['asc', 'asc'],\n  ).map((attribute) => attribute.id);\n\n  function sortAttributesByPriority(attributeKeys: string[], prefix: string) {\n    return orderBy(attributeKeys, (key) => priorityOrder.indexOf(key), ['asc']).map(\n      (key) => `${prefix}${key}`,\n    );\n  }\n\n  const opposite: string[] = [];\n  const deterministic: string[] = [];\n  const related: string[] = [];\n  const unrelated: string[] = [];\n  const unclear: string[] = [];\n\n  Object.entries(itemAttributesValues.attributes).forEach(([attributeId, value]) => {\n    const attribute = itemAttributes[attributeId];\n    if (!attribute) return;\n\n    switch (value) {\n      case ATTRIBUTE_VALUE.OPPOSITE:\n        opposite.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.DETERMINISTIC:\n        deterministic.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.RELATED:\n        related.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNRELATED:\n        unrelated.push(attributeId);\n        break;\n      case ATTRIBUTE_VALUE.UNCLEAR:\n        unclear.push(attributeId);\n        break;\n      default:\n        unclear.push(attributeId);\n        break;\n    }\n  });\n\n  return [\n    ...sortAttributesByPriority(opposite, ATTRIBUTE_VALUE_PREFIX.OPPOSITE),\n    ...sortAttributesByPriority(deterministic, ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC),\n    ...sortAttributesByPriority(related, ATTRIBUTE_VALUE_PREFIX.RELATED),\n\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unrelated, ATTRIBUTE_VALUE_PREFIX.UNRELATED)),\n    ...(onlyRelevant ? [] : sortAttributesByPriority(unclear, ATTRIBUTE_VALUE_PREFIX.UNCLEAR)),\n  ];\n};\n\nexport const parseAttribute = memoize((keyVariant: string) => {\n  if (keyVariant.length === 3) {\n    return {\n      key: keyVariant,\n      className: '',\n      text: '',\n    };\n  }\n\n  const variant = keyVariant[0];\n  const key = keyVariant.slice(1, 4);\n\n  return {\n    key,\n    className: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'deterministic',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'unrelated',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'unclear',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'opposite',\n    }[variant],\n    text: {\n      [ATTRIBUTE_VALUE_PREFIX.DETERMINISTIC]: 'very',\n      [ATTRIBUTE_VALUE_PREFIX.UNRELATED]: 'not',\n      [ATTRIBUTE_VALUE_PREFIX.UNCLEAR]: 'maybe',\n      [ATTRIBUTE_VALUE_PREFIX.OPPOSITE]: 'very not',\n    }[variant],\n  };\n});\n\nexport const filterMessage = (message: string[], showUnclear: boolean, showUnrelated: boolean) => {\n  return message.filter((keyVariant) => {\n    if (!showUnclear && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNCLEAR)) {\n      return false;\n    }\n\n    if (!showUnrelated && keyVariant.includes(ATTRIBUTE_VALUE_PREFIX.UNRELATED)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\n/**\n * Generates a signature string for a given AlienItem based on its attributes and their values.\n * The signature string is constructed by concatenating the prefix character for each attribute value with the attribute ID.\n * The prefix character is determined by the value of the attribute and is one of the following: ^, *, +, ~, !.\n * The attribute ID is a sequence of alphanumeric characters.\n * @param item - The AlienItem for which to generate the signature.\n * @param itemAttributes - A dictionary of all available item attributes.\n * @param options - An optional object containing additional options:\n * - `onlyRelevant`: A boolean indicating whether to include only relevant attributes in the signature.\n * - `length`: A number indicating the maximum number of attributes to include in the signature.\n **/\nexport function constructItemSignature(\n  item: ItemAttributesValues,\n  itemAttributes: Dictionary<ItemAttribute>,\n  options?: {\n    onlyRelevant?: boolean;\n    length?: number;\n  },\n): string {\n  // Create a list of signature entries based on the item attributes\n  const signatureEntries: { prefix: string; id: string; priority: number }[] = [];\n\n  for (const [attributeId, value] of Object.entries(item.attributes)) {\n    const attribute = itemAttributes[attributeId];\n    if (attribute) {\n      // Find the prefix for the value from ATTRIBUTE_VALUE_DICT\n      const entry = Object.values(alienAttributesUtils.ATTRIBUTE_VALUE_DICT).find(\n        (dictEntry) => dictEntry.value === value,\n      );\n\n      if (entry) {\n        signatureEntries.push({\n          prefix: entry.prefix,\n          id: attribute.id,\n          priority: attribute.priority,\n        });\n      }\n    }\n  }\n\n  const sortedEntries = sortBy(signatureEntries, [\n    (o) => alienAttributesUtils.ATTRIBUTE_VALUE_PRIORITY.indexOf(o.prefix),\n    (o) => {\n      if (o.prefix === alienAttributesUtils.ATTRIBUTE_VALUE_DICT.UNRELATED.prefix) {\n        return -1;\n      }\n      return o.priority;\n    },\n    ['asc', 'asc'],\n  ]);\n\n  // Limit the number of attributes if a length is provided\n  const limitedEntries = options?.length ? sortedEntries.slice(0, options?.length) : sortedEntries;\n\n  if (options?.onlyRelevant) {\n    return limitedEntries\n      .filter((entry) => {\n        return [\n          alienAttributesUtils.ATTRIBUTE_VALUE_DICT.UNCLEAR.prefix,\n          alienAttributesUtils.ATTRIBUTE_VALUE_DICT.UNRELATED.prefix,\n        ].includes(entry.prefix);\n      })\n      .map((entry) => `${entry.prefix}${entry.id}`)\n      .join('');\n  }\n\n  // Generate the final signature string\n  return limitedEntries.map((entry) => `${entry.prefix}${entry.id}`).join('');\n}\n\nconst prefixDictionary = keyBy(alienAttributesUtils.ATTRIBUTE_VALUE_DICT, 'prefix');\n\n/**\n * Constructs item attributes from a given signature string.\n *\n * The function parses the signature string to extract entries that match\n * a specific pattern (prefix followed by alphanumeric characters). It then\n * uses a dictionary to map the prefix to a value and constructs an object\n * where the keys are the extracted IDs and the values are the corresponding\n * values from the dictionary.\n *\n * @param signature - The signature string containing the attributes.\n * @returns An object representing the item attributes.\n */\nexport function constructItemAttributes(signature: string): ItemAttributesValues['attributes'] {\n  const entries = signature.match(/[\\^*+~!][a-zA-Z0-9]+/g) ?? [];\n  return entries.reduce((acc: ItemAttributesValues['attributes'], entry) => {\n    const prefix = entry[0];\n    const id = entry.slice(1);\n    const value = prefixDictionary[prefix].value;\n    acc[id] = value;\n    return acc;\n  }, {});\n}\n\nexport function calculateItemScore(itemAttributesValues: ItemAttributesValues): number {\n  return Object.values(itemAttributesValues.attributes).reduce((acc: number, value) => {\n    if (value <= 0) {\n      if (value === alienAttributesUtils.ATTRIBUTE_VALUE_DICT.OPPOSITE.value) {\n        acc += value / 2;\n      }\n      return acc;\n    }\n\n    return acc + value;\n  }, 0);\n}\n\nexport function calculateItemReliability(\n  itemAttributesValues: ItemAttributesValues,\n  totalAttributes: number,\n): number {\n  const unclearCount = Object.values(itemAttributesValues.attributes).filter(\n    (value) => value === alienAttributesUtils.ATTRIBUTE_VALUE_DICT.UNCLEAR.value,\n  ).length;\n  return Math.floor(((totalAttributes - unclearCount) / totalAttributes) * 100);\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { Item, ItemAttributesValues, ItemAttribute, ItemAttributesValuesFirestore } from 'types';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport {\n  calculateItemReliability,\n  calculateItemScore,\n  constructItemAttributes,\n  constructItemSignature,\n  getNewItem,\n  getNewItemAttributeValues,\n} from 'components/Items/utils';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAttributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAttributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAttributesValues>\n  >('tdr', 'itemsAttributeValues', {\n    select: (data) =>\n      deserializeItemAttributesValues({\n        itemAttributesValues: data,\n        itemAttributes: tdrAttributesQuery.data ?? {},\n      }),\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAttributesValues>>(\n    {},\n  );\n\n  const mutation = useUpdateFirebaseDoc('tdr', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', 'itemsAttributeValues'],\n      });\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAttributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAttributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id',\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(\n      serializeItemAttributesValues({ ...firebaseData, ...modifiedAttributeValues }, tdrAttributesQuery.data),\n    );\n  };\n\n  // Filter items that have the alien deck only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.decks ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc',\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if (tdrItemsQuery.data?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n\nconst serializeItemAttributesValues = (\n  itemAttributesValues: Dictionary<ItemAttributesValues>,\n  itemAttributes: Dictionary<ItemAttribute>,\n): Dictionary<string> => {\n  const serializeEntry = (entry: ItemAttributesValues): ItemAttributesValuesFirestore => {\n    return {\n      id: entry.id,\n      tempSignature: constructItemSignature(entry, itemAttributes),\n      updatedAt: entry.updatedAt,\n    };\n  };\n\n  return serializeFirebaseData<ItemAttributesValues, ItemAttributesValuesFirestore>(\n    itemAttributesValues,\n    serializeEntry,\n  );\n};\n\nconst deserializeItemAttributesValues = (data: {\n  itemAttributesValues: Dictionary<string>;\n  itemAttributes: Dictionary<ItemAttribute>;\n}): Dictionary<ItemAttributesValues> => {\n  const { itemAttributesValues, itemAttributes } = data;\n  const totalAttributes = Object.keys(itemAttributes).length;\n\n  const deserializeEntry = (entry: ItemAttributesValuesFirestore): ItemAttributesValues => {\n    const attributes = constructItemAttributes(entry.tempSignature);\n    const complete = Object.keys(attributes).length === totalAttributes;\n\n    const newEntry = {\n      id: entry.id,\n      updatedAt: entry.updatedAt,\n      attributes,\n    };\n\n    if (complete) {\n      return {\n        ...newEntry,\n        complete,\n        reliability: calculateItemReliability(newEntry, totalAttributes),\n        score: calculateItemScore(newEntry),\n      };\n    }\n\n    return newEntry;\n  };\n\n  return deserializeFirebaseData<ItemAttributesValuesFirestore, ItemAttributesValues>(\n    itemAttributesValues,\n    deserializeEntry,\n  );\n};\n","import { App } from 'antd';\nimport { getNewItem, getNewItemAttributeValues } from 'components/Items/utils';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { type ReactNode, createContext, useContext, useMemo, useState } from 'react';\nimport type { Item, ItemAttributesValues, ItemAttribute } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAttributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAttributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAttributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAttributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAttributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n  attributesToUpdate: Dictionary<ItemAttributesValues>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n  attributesToUpdate: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n      return;\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n      return;\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n      return;\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n      return;\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n      return;\n    }\n\n    if (direction === 'incomplete') {\n      setItemIndex((prev) => {\n        let index = prev + 1;\n        while (index < availableItemIds.length) {\n          const item = getItemAttributeValues(availableItemIds[index]);\n          if (Object.keys(item.attributes).length !== attributesList.length) {\n            // TODO: Account for filtered attributes in qp\n            return index;\n          }\n          if (index === availableItemIds.length - 1) {\n            message.info('No more incomplete items found.');\n            return prev;\n          }\n          index++;\n        }\n        return prev;\n      });\n      return;\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n        return;\n      }\n      message.error(`Item ${itemId} is not available for attribution.`);\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAttributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          // biome-ignore lint/performance/noDelete: <explanation>\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {}),\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n        attributesToUpdate,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { Tag, Typography } from 'antd';\nimport type { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name, ...rest }) => ({\n      label: `${name.en}${rest.default ? '*' : ''}`,\n      value: id,\n    }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionStatsFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Show Glyphs\"\n        value={searchParams.get('showGlyphs') === 'true'}\n        onChange={(v) => addQueryParam('showGlyphs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport type { ItemAttributesValues, ItemAttribute } from 'types';\nimport { deepCleanObject, sortJsonKeys } from 'utils';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n  ItemAttributionStatsFilters,\n} from './ItemAttributionFiltersSections';\nimport { calculateItemReliability, calculateItemScore, constructItemSignature } from '../utils';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload, attributes, isSaving, attributesToUpdate } =\n    useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(attributesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(prepareItemsAttributesFileForDownload(), attributes)}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator', 'simulator', 'stats']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n      {view === 'stats' && <ItemAttributionStatsFilters />}\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(\n  itemsAttributes: Dictionary<ItemAttributesValues>,\n  attributes: Dictionary<ItemAttribute>,\n) {\n  const total = Object.keys(attributes).length;\n\n  Object.keys(itemsAttributes).forEach((key) => {\n    const itemAttributeValues = itemsAttributes[key];\n\n    // // TODO: Tempo Rename hol to gra (grab)\n    // const originalHolValue = itemAttributeValues.attributes['hol'];\n    // delete itemAttributeValues.attributes['hol'];\n    // itemAttributeValues.attributes['gra'] = originalHolValue;\n\n    // // TODO: TEMP Rename sol to har, and base values in soft\n    // const originalSolValue = itemAttributeValues.attributes['sol'];\n    // delete itemAttributeValues.attributes['sol'];\n    // const softValue = itemAttributeValues.attributes['sof'];\n    // if (softValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (originalSolValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['har'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n\n    // // TODO: TEMP Auto-add cold if warm\n    // const warmValue = itemAttributeValues.attributes['war'];\n    // if (warmValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.OPPOSITE) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.DETERMINISTIC;\n    // }\n    // if (warmValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['col'] = ATTRIBUTE_VALUE.UNCLEAR;\n    // }\n\n    // const bigValue = itemAttributeValues.attributes['big'];\n    // if (bigValue === ATTRIBUTE_VALUE.RELATED) {\n    //   itemAttributeValues.attributes['sma'] = ATTRIBUTE_VALUE.UNRELATED;\n    // }\n    // if (bigValue === ATTRIBUTE_VALUE.DETERMINISTIC) {\n    //   itemAttributeValues.attributes['sma'] = ATTRIBUTE_VALUE.OPPOSITE;\n    // }\n\n    // const toolValue = itemAttributeValues.attributes.too;\n    // const accessoryValue = itemAttributeValues.attributes.acc;\n    // const instrumentValue = itemAttributeValues.attributes.ins;\n    // let changed = false;\n    // const toBeChanged =\n    //   (toolValue > 0 || accessoryValue > 0 || instrumentValue > 0) &&\n    //   (!toolValue ||\n    //     toolValue < 0 ||\n    //     !accessoryValue ||\n    //     accessoryValue < ATTRIBUTE_VALUE.UNCLEAR ||\n    //     !instrumentValue ||\n    //     instrumentValue < ATTRIBUTE_VALUE.UNCLEAR);\n    // if (toBeChanged) {\n    //   console.log('id', itemAttributeValues.id);\n    //   console.log(toolValue, accessoryValue, instrumentValue);\n    // }\n\n    // if (toolValue > 0) {\n    //   console.log('tool is set resetting the rest');\n    //   if (!accessoryValue || accessoryValue < ATTRIBUTE_VALUE.UNCLEAR) {\n    //     console.log('resetting accessory');\n    //     changed = true;\n    //     itemAttributeValues.attributes.acc = ATTRIBUTE_VALUE.UNCLEAR;\n    //   }\n    //   if (!instrumentValue || instrumentValue < ATTRIBUTE_VALUE.UNCLEAR) {\n    //     console.log('resetting instrument');\n    //     changed = true;\n    //     itemAttributeValues.attributes.ins = ATTRIBUTE_VALUE.UNCLEAR;\n    //   }\n    // }\n\n    // if (accessoryValue > 0) {\n    //   console.log('accessory is set resetting the rest');\n    //   if (!toolValue || toolValue < ATTRIBUTE_VALUE.UNCLEAR) {\n    //     console.log('resetting tool');\n    //     changed = true;\n    //     itemAttributeValues.attributes.too = ATTRIBUTE_VALUE.UNCLEAR;\n    //   }\n    //   if (!instrumentValue || instrumentValue < ATTRIBUTE_VALUE.UNCLEAR) {\n    //     console.log('resetting instrument');\n    //     changed = true;\n    //     itemAttributeValues.attributes.ins = ATTRIBUTE_VALUE.UNCLEAR;\n    //   }\n    // }\n\n    // if (instrumentValue > 0) {\n    //   console.log('instrument is set resetting the rest');\n    //   if (!toolValue || toolValue < ATTRIBUTE_VALUE.UNCLEAR) {\n    //     console.log('resetting tool');\n    //     changed = true;\n    //     itemAttributeValues.attributes.too = ATTRIBUTE_VALUE.UNCLEAR;\n    //   }\n    //   if (!accessoryValue || accessoryValue < ATTRIBUTE_VALUE.UNCLEAR) {\n    //     console.log('resetting accessory');\n    //     changed = true;\n    //     itemAttributeValues.attributes.acc = ATTRIBUTE_VALUE.UNCLEAR;\n    //   }\n    // }\n\n    // if (toBeChanged) {\n    //   if (changed) {\n    //     console.log(\n    //       itemAttributeValues.attributes.too,\n    //       itemAttributeValues.attributes.acc,\n    //       itemAttributeValues.attributes.ins,\n    //     );\n    //   } else {\n    //     console.log('no change');\n    //   }\n\n    //   console.log('-----------------');\n    // }\n\n    // Remove any key that is not an attribute\n    const attributeKeys = Object.keys(itemAttributeValues.attributes);\n    attributeKeys.forEach((k) => {\n      if (!attributes[k]) {\n        delete itemAttributeValues.attributes[k];\n      }\n    });\n\n    // Check completion\n    const completed = attributeKeys.length;\n\n    if (completed === total) {\n      // Add completion\n      itemAttributeValues.complete = true;\n\n      // Add score\n      itemAttributeValues.score = calculateItemScore(itemAttributeValues);\n\n      // Add reliability\n      itemAttributeValues.reliability = calculateItemReliability(itemAttributeValues, total);\n\n      // Add signature with only relevant attributes\n      itemAttributeValues.signature = constructItemSignature(itemAttributeValues, attributes, {\n        onlyRelevant: true,\n      });\n    } else {\n      itemAttributeValues.complete = undefined;\n      itemAttributeValues.score = undefined;\n      itemAttributeValues.reliability = undefined;\n      itemAttributeValues.signature = undefined;\n    }\n  });\n\n  return sortJsonKeys(deepCleanObject(itemsAttributes));\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport type { ButtonProps } from 'antd/lib/button';\nimport { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.scrollY > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffectOnce(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  });\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Tooltip } from 'antd';\nimport type { ReactNode } from 'react';\n\ntype PopoverInfoProps = {\n  title: ReactNode;\n  icon?: ReactNode;\n};\n\nexport function PopoverInfo({ title, icon }: PopoverInfoProps) {\n  return <Tooltip title={title}>{icon ?? <QuestionCircleOutlined />}</Tooltip>;\n}\n","import { Radio, type RadioGroupProps } from 'antd';\nimport type { ItemAttribute } from 'types';\nimport { CheckCircleFilled } from '@ant-design/icons';\nimport { PopoverInfo } from 'components/Common/PopoverInfo';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { truncate } from 'lodash';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n  size?: RadioGroupProps['size'];\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n  size,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {truncate(attribute.name.en, { length: 12 })} <PopoverInfo title={attribute.description.en} />\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n        size={size}\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport type { ItemAttributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from '../utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAttributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated,\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated],\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Tooltip, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport type { ItemAttributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAttributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n          acc += v / 2;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Tooltip title=\"The percentage of conclusive attributes (not unclear)\">\n          <Stat label=\"Reliability\">{relevancy}%</Stat>\n        </Tooltip>\n      </Flex>\n    </div>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n  const filteredAttributesIds = searchParams.get('filters');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const filteredAttributesList = useMemo(() => {\n    const shortlist = showOnlyUnset\n      ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n      : attributesList;\n\n    if (filteredAttributesIds) {\n      const parsedList = filteredAttributesIds.split(',').reduce((acc: BooleanDictionary, id) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n\n      return shortlist.filter((attribute) => parsedList[attribute.id]);\n    }\n\n    return shortlist;\n  }, [showOnlyUnset, activeItem.id, filteredAttributesIds]);\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover, Select } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  FilterFilled,\n  FilterOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useMemo } from 'react';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group>\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Go to item\">\n        <Button>Go To</Button>\n      </Popover>\n      <Button onClick={() => jumpToItem('incomplete')}>Next Incomplete</Button>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return <ItemsTypeahead isPending={false} onFinish={(itemId) => jumpToItem('goTo', itemId)} />;\n}\n\nexport function ItemAttributionFilterAttributes() {\n  const { addParam, queryParams } = useQueryParams();\n\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(\n    () =>\n      attributesList.map((attribute) => ({\n        label: attribute.name.en,\n        value: attribute.id,\n      })),\n    [attributesList],\n  );\n\n  const onChangeFilters = (values: string[]) => {\n    addParam('filters', values.join(','));\n  };\n\n  const activeFilters = queryParams.get('filters');\n\n  const content = (\n    <Select\n      mode=\"multiple\"\n      style={{ width: 300 }}\n      options={options}\n      value={activeFilters?.split(',')}\n      onChange={(values) => onChangeFilters(values)}\n      allowClear\n    />\n  );\n\n  return (\n    <Popover content={content} title=\"Filter Attributes\">\n      <Button>{activeFilters ? <FilterFilled style={{ color: 'gold' }} /> : <FilterOutlined />}</Button>\n    </Popover>\n  );\n}\n","import { Divider, Drawer, Flex, Space, Switch } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\n\nexport function ItemAttributionDrawer() {\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('drawer');\n  const [showOnlyUnset, setUnsetOnly] = useState(false);\n\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem } =\n    useItemsAttributeValuesContext();\n\n  const onClose = () => {\n    removeQueryParam('drawer');\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: function\n  useEffect(() => {\n    if (queryParamsItemId) {\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id],\n  );\n\n  return (\n    <Drawer open={!!queryParamsItemId} title={`Edit: ${activeItem.name.en}`} onClose={onClose} width=\"640px\">\n      <Flex gap={6}>\n        <Flex vertical gap={6}>\n          <ItemSprite item={activeItem} width={50} />\n          <ItemId item={activeItem} />\n        </Flex>\n        <Flex vertical gap={6}>\n          <ItemName item={activeItem} language=\"en\" />\n          <ItemName item={activeItem} language=\"pt\" />\n        </Flex>\n        <Flex vertical gap={6}>\n          <Switch\n            checked={showOnlyUnset}\n            onChange={setUnsetOnly}\n            checkedChildren=\"Unset\"\n            unCheckedChildren=\"All\"\n          />\n        </Flex>\n      </Flex>\n\n      <Divider className=\"my-1\" />\n\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n        {filteredAttributesList.map((attribute) => (\n          <AttributionValueButtons\n            size=\"small\"\n            key={attribute.id}\n            attribute={attribute}\n            value={itemAttributeValues.attributes[attribute.id]}\n            onChange={onAttributeChange}\n          />\n        ))}\n      </Space>\n    </Drawer>\n  );\n}\n","import { Button, Flex, Table, type TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { type ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport type { Item } from 'types';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributeSprite } from './ItemAttributeDescription';\nimport { ItemAttributionDrawer } from './ItemAttributionDrawer';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n  const { addQueryParam } = useItemQueryParams();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <Button.Group>\n            <ItemGoTo item={item} />\n            <Button size=\"small\" shape=\"round\" onClick={() => addQueryParam('drawer', item.id)}>\n              Drawer\n            </Button>\n          </Button.Group>\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : '0'}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} pagination={{ showQuickJumper: true }} />\n      <ItemAttributionDrawer />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type { Item, ItemAttributesValues } from 'types';\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { filterMessage, getItemAttributePriorityResponse } from 'components/Items/utils';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAttributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc'],\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { Button, Card, Empty, Flex, Pagination, Popconfirm, Select, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributionDrawer } from './ItemAttributionDrawer';\n\nconst getStatSentence = (stats: Record<string, number>, scope: string | null) => {\n  if (scope === 'unset' || !scope) {\n    return `${100 - stats.percent}% done, ${stats.group} left`;\n  }\n\n  return `${stats.percent}%  - ${stats.group} items`;\n};\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n\n  const { attribute, pageIds, updateAttributeValue, updatePageItemsAsUnrelated, pagination, stats, sorting } =\n    useItemGrouping();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const sortingComponent = (\n    <Flex align=\"center\">\n      <Typography.Text className=\"mr-2\">Sort by</Typography.Text>\n      <Select style={{ width: 120 }} value={sorting.sortBy} onChange={(v) => sorting.setSortBy(v)}>\n        <Select.Option value={null}>Last Updated</Select.Option>\n        <Select.Option value=\"prop::id\">Id</Select.Option>\n        {attributesList.map((a) => (\n          <Select.Option key={a.id} value={`attribute::${a.id}`}>\n            {a.name.en}\n          </Select.Option>\n        ))}\n      </Select>\n    </Flex>\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({getStatSentence(stats, searchParams.get('scope'))}) -{' '}\n          {attribute.description.en}\n        </Typography.Text>\n      }\n      extra={\n        <Flex align=\"center\">\n          {sortingComponent}\n\n          {paginationComponent}\n        </Flex>\n      }\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.length === 0 && (\n        <Empty\n          description=\"No items found in this scope for this attribute.\"\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n        />\n      )}\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <Button.Group>\n                  <ItemGoTo item={item} />\n                  <Button size=\"small\" shape=\"round\" onClick={() => addQueryParam('drawer', item.id)}>\n                    Drawer\n                  </Button>\n                </Button.Group>\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute}\n                value={itemAttributes.attributes[attribute.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n      <ItemAttributionDrawer />\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { orderBy } from 'lodash';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const [sortBy, setSortBy] = useState<string | null>(null);\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    const [sortType, sortValue] = (sortBy ?? '::').split('::');\n\n    return orderBy(\n      filteredItemIds,\n      [\n        (id) => (sortType === 'attribute' ? getItemAttributeValues(id)?.attributes?.[sortValue] : true),\n        (id) => (sortType === 'prop' ? Number(id) : true),\n        (id) => getItemAttributeValues(id)?.updatedAt,\n        (id) => Number(id),\n      ],\n      [sortOrder, 'asc', 'desc', 'asc'],\n    );\n  }, [attributeKey, scope, sortBy, sortOrder]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]);\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      }),\n    );\n  };\n\n  return {\n    group,\n    stats: {\n      total: availableItemIds.length,\n      group: group.length,\n      percent: Math.round((group.length / availableItemIds.length) * 100),\n    },\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    sorting: {\n      sortBy,\n      setSortBy,\n      sortOrder,\n      setSortOrder,\n    },\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport type { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  const getSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    return {\n      selectedAttribute,\n      selected,\n    };\n  };\n\n  // Create sample\n  const onGetSample = () => {\n    let tempSample = getSample();\n    let attempts = 0;\n    while (tempSample.selected.length === 0 && attempts < 30) {\n      tempSample = getSample();\n      attempts++;\n    }\n\n    setAttribute(tempSample.selectedAttribute);\n    setSampleIds(tempSample.selected);\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: getItemAttributeValues should not be a dependency\n  const itemsLeftForAttribute = useMemo(() => {\n    if (!attribute) return 0;\n\n    return availableItemIds.filter((id) => !getItemAttributeValues(id).attributes[attribute?.id]).length;\n  }, [attribute, availableItemIds]);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    itemsLeftForAttribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { Button, Card, Divider, Empty, Flex, Modal, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\nimport { useToggle } from 'react-use';\nimport { wait } from 'utils';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributionDrawer } from './ItemAttributionDrawer';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue, itemsLeftForAttribute } = useItemSampler();\n  const { addQueryParam } = useItemQueryParams();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n\n        <Divider />\n\n        <SingleSampleModalFlow />\n      </Card>\n    );\n  }\n\n  const sample = sampleIds.map((itemId) => ({\n    itemAttributes: getItemAttributeValues(itemId),\n    item: getItem(itemId),\n  }));\n\n  const unsetItems = sample.filter(\n    ({ itemAttributes }) => attribute?.id && !itemAttributes.attributes[attribute.id],\n  );\n\n  const onMarkRestAsUnrelated = () => {\n    unsetItems.forEach(({ item }) => {\n      if (attribute?.id) {\n        updateAttributeValue(item.id, attribute.id, -3);\n      }\n    });\n  };\n\n  return (\n    <>\n      <SingleSampleModalFlow />\n      <Card\n        className=\"my-4\"\n        title={\n          <Typography.Text>\n            {attribute?.name.en} - {attribute?.description.en} ({itemsLeftForAttribute} items left)\n          </Typography.Text>\n        }\n        actions={[\n          <Button key=\"1\" onClick={onMarkRestAsUnrelated} danger disabled={unsetItems.length === 0}>\n            Mark rest as unrelated\n          </Button>,\n          <Button key=\"2\" type=\"primary\" ghost onClick={onGetSample}>\n            Get New Sample\n          </Button>,\n        ]}\n        extra={\n          <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n            Get New Sample\n          </Button>\n        }\n      >\n        <Flex vertical gap={6}>\n          {sample.length === 0 && (\n            <Empty\n              description=\"No unset items found for this attribute.\"\n              image={Empty.PRESENTED_IMAGE_SIMPLE}\n            />\n          )}\n          {sample.map(({ item, itemAttributes }) => {\n            return (\n              <Fragment key={`${item.id}-${itemAttributes.updatedAt}`}>\n                <Flex gap={6}>\n                  <ItemSprite item={item} width={75} />\n                  <Flex vertical gap={6}>\n                    <Flex gap={6}>\n                      <ItemId item={item} />\n                      <Button.Group>\n                        <ItemGoTo item={item} />\n                        <Button size=\"small\" shape=\"round\" onClick={() => addQueryParam('drawer', item.id)}>\n                          Drawer\n                        </Button>\n                      </Button.Group>\n                    </Flex>\n                    <ItemName item={item} language=\"en\" />\n                    <ItemName item={item} language=\"pt\" />\n                  </Flex>\n                  {!!attribute && (\n                    <AttributionValueButtons\n                      attribute={attribute}\n                      value={itemAttributes.attributes[attribute.id]}\n                      onChange={(attributeId: string, value: number) =>\n                        updateAttributeValue(item.id, attributeId, value)\n                      }\n                    />\n                  )}\n                </Flex>\n                <Divider className=\"my-1\" />\n              </Fragment>\n            );\n          })}\n        </Flex>\n        <ItemAttributionDrawer />\n      </Card>\n    </>\n  );\n}\n\nexport function SingleSampleModalFlow() {\n  const [open, toggleOpen] = useToggle(false);\n  const { addQueryParam, removeQueryParam } = useItemQueryParams();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue } = useItemSampler();\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n\n  const handleOpenSingleSampler = () => {\n    addQueryParam('size', '1');\n    toggleOpen(true);\n    onGetSample();\n  };\n\n  const onClose = () => {\n    removeQueryParam('size');\n    toggleOpen(false);\n  };\n\n  const itemId = sampleIds[0];\n  const item = getItem(itemId);\n  const itemAttributes = getItemAttributeValues(itemId);\n\n  return (\n    <Flex className=\"mt-4\">\n      <Button type=\"primary\" onClick={handleOpenSingleSampler}>\n        Single Sampler\n      </Button>\n      <Modal\n        title={\n          <Typography>\n            Single Sampler: <strong>{attribute?.name.en}</strong>\n          </Typography>\n        }\n        open={open}\n        width=\"100vw\"\n        maskClosable={false}\n        onOk={onClose}\n        onClose={onClose}\n        onCancel={onClose}\n        cancelButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        {itemId && item && itemAttributes && attribute && (\n          <Flex gap={6} className=\"my-10\" wrap=\"wrap\" key={itemId}>\n            <ItemSprite item={item} width={150} />\n            <Flex vertical gap={6}>\n              <Flex gap={6}>\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n              </Flex>\n              <ItemName item={item} language=\"en\" />\n              <ItemName item={item} language=\"pt\" />\n            </Flex>\n            {!!attribute && (\n              <AttributionValueButtons\n                size=\"large\"\n                attribute={attribute}\n                value={itemAttributes.attributes[attribute.id]}\n                onChange={async (attributeId: string, value: number) => {\n                  updateAttributeValue(item.id, attributeId, value);\n                  await wait(500);\n                  onGetSample();\n                }}\n              />\n            )}\n          </Flex>\n        )}\n        <Button onClick={onGetSample}>Another Sample</Button>\n      </Modal>\n    </Flex>\n  );\n}\n","import { Alert, Button, Divider, Flex, Space, Typography } from 'antd';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { keys, sample, sampleSize, shuffle, values } from 'lodash';\nimport { useState } from 'react';\nimport type { ItemAttributesValues, ItemAttribute } from 'types';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nexport function DailyAlienSimulator() {\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAttributesValues>('items-attribute-values');\n\n  const [simulation, setSimulation] = useState<DailyAlienGame | null>(null);\n\n  // Choose 3 random attributes that are not limited\n  // Get examples for each attribute of items that have value 10 in that attribute but are -3 in the other two\n\n  const onSimulate = () => {\n    setSimulation(generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data));\n  };\n\n  const onSimulateMany = () => {\n    const simulations: Dictionary<DailyAlienGame> = {};\n    let tries = 0;\n    while (tries < 300 || keys(simulations).length === 15) {\n      const simulation = generateDailyAlienGame(tdrAttributesQuery.data, tdrItemsAttributesValuesQuery.data);\n      if (simulation.valid && !simulations[simulation.setId]) {\n        simulations[simulation.setId] = simulation;\n      }\n      if (keys(simulations).length >= 15) {\n        break;\n      }\n      tries += 1;\n    }\n    console.log('TRIES', tries);\n    console.log(Object.values(simulations).map((e, i) => ({ ...e, number: e.number - i })));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Daily Simulator</Typography.Title>\n\n      <Typography.Paragraph>Generates a daily game for Alien Communication</Typography.Paragraph>\n\n      <Space>\n        <Button type=\"primary\" onClick={onSimulate}>\n          Generate\n        </Button>\n        <Button onClick={onSimulateMany}>Generate List</Button>\n      </Space>\n\n      <div>\n        {Boolean(simulation) && (\n          <Space direction=\"vertical\" key={simulation?.setId}>\n            <Typography.Title level={5}>{simulation?.setId}</Typography.Title>\n            {!simulation?.valid && <Alert type=\"error\" message=\"Invalid game\" />}\n            <Space direction=\"vertical\">\n              {simulation?.attributes.map((attr) => (\n                <Flex key={attr.id} gap={8}>\n                  <AlienSign id={attr.spriteId} width={50} />\n                  {attr.itemsIds.map((itemId) => (\n                    <Item key={itemId} id={itemId || '0'} width={50} />\n                  ))}\n                </Flex>\n              ))}\n            </Space>\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.requests.map((req) => (\n                <Flex key={req.itemId} vertical>\n                  <AlienSign id={req.spritesIds[2]} width={50} />\n                  <AlienSign id={req.spritesIds[1]} width={50} />\n                  <AlienSign id={req.spritesIds[0]} width={50} />\n                </Flex>\n              ))}\n            </Space>\n\n            <Divider className=\"my-1\" />\n            <Space direction=\"horizontal\">\n              {simulation?.itemsIds.map((itemId) => (\n                <Item key={itemId} id={itemId || '0'} width={50} />\n              ))}\n            </Space>\n          </Space>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype DailyAlienGameAttribute = {\n  id: string;\n  name: string;\n  description: string;\n  spriteId: string;\n  itemsIds: string[];\n};\n\ntype DailyAlienGameRequest = {\n  spritesIds: string[];\n  itemId: string;\n};\n\ntype DailyAlienGame = {\n  id: string;\n  setId: string;\n  number: number;\n  type: 'comunicação-alienígena';\n  attributes: DailyAlienGameAttribute[];\n  requests: DailyAlienGameRequest[];\n  solution: string;\n  itemsIds: string[];\n  valid: boolean;\n};\n\nconst generateDailyAlienGame = (\n  attributes: Dictionary<ItemAttribute>,\n  itemsAttributesValues: Dictionary<ItemAttributesValues>,\n): DailyAlienGame => {\n  const allAttributes = values(attributes).filter((attr) => !attr.limited || attr.id === 'sol');\n  const allItems = shuffle(values(itemsAttributesValues).filter((i) => i.complete));\n\n  const spriteIDs = shuffle(makeArray(38, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(allAttributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  allItems.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyAlienGameAttribute[] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyAlienGameRequest[] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB) ?? '',\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC) ?? '',\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC) ?? '',\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC) ?? '',\n    });\n  }\n  const simpleRequests: DailyAlienGameRequest[] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  console.log({\n    attributeA,\n    attributeB,\n    attributeC,\n    attributeAB,\n    attributeAC,\n    attributeBC,\n    attributeABC,\n  });\n\n  console.log('COMPLEX REQUEST SIZE', complexRequests.length);\n  console.log('SIMPLE REQUEST SIZE', simpleRequests.length);\n  let requests = sampleSize(complexRequests, 4);\n  console.log('REQUEST SIZE', requests.length);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.warn('Not enough requests');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyAlienGame = {\n    id: '2024-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([...requestItemsIds, none[0], none[1], none[2], none[3]]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    // TODO: verify if it should be 6\n    result.itemsIds.length > 5,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  console.log(result);\n\n  return result;\n};\n","import {\n  CheckSquareOutlined,\n  CloseSquareOutlined,\n  LineChartOutlined,\n  PlusSquareOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { App, Button, Flex, InputNumber, Space, Typography } from 'antd';\nimport clsx from 'clsx';\nimport {\n  FilterCheckBox,\n  FilterNumber,\n  FilterSelect,\n  FilterSwitch,\n  TransparentButton,\n} from 'components/Common';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keys, sampleSize, shuffle, sortBy } from 'lodash';\nimport { useState } from 'react';\nimport type { ItemAttributesValues, ItemAttribute } from 'types';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from '../ItemBuildingBlocks';\nimport { DailyAlienSimulator } from './DailyAlienSimulator';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nconst ROMAN_NUMERALS = ['', 'I', 'II', 'III', 'IV', 'V'];\n\ntype AttributeSummary = {\n  relatedCount: number;\n  deterministicCount: number;\n  unclearCount: number;\n  oppositeCount: number;\n} & ItemAttribute;\n\nexport function ItemSimulation() {\n  const { attributes, availableItemIds, getItemAttributeValues, getItem } = useItemsAttributeValuesContext();\n  const { message } = App.useApp();\n\n  const [gridSize, setGridSize] = useState<16 | 25>(25);\n  const [reliabilityThreshold, setReliabilityThreshold] = useState<number>(80);\n  const [nsfw, setNsfw] = useState<boolean>(false);\n  const [selectedItemsIds, setSelectedItemsIds] = useState<string[]>([]);\n  const [selectedAttributes, setSelectedAttributes] = useState<AttributeSummary[]>([]);\n  const [highlightedAttributeKey, setHighlightedAttributeKey] = useState<string | null>(null);\n  const [displays, setDisplays] = useState<BooleanDictionary>({\n    id: true,\n    nameEn: true,\n    namePt: true,\n    reliability: true,\n  });\n\n  const onGetSample = () => {\n    const keysDict: Record<string, string> = {};\n\n    const shuffledIds = shuffle(availableItemIds);\n\n    while (Object.values(keysDict).length < gridSize) {\n      const itemId = shuffledIds.pop();\n      if (!itemId) break;\n\n      const itemAttributeValues = getItemAttributeValues(itemId);\n\n      if (!itemAttributeValues) continue;\n\n      if (\n        !itemAttributeValues.complete ||\n        !itemAttributeValues.reliability ||\n        itemAttributeValues.reliability < reliabilityThreshold\n      )\n        continue;\n\n      if (!nsfw && getItem(itemId).nsfw) continue;\n\n      if (itemAttributeValues.signature && !keysDict[itemAttributeValues.signature]) {\n        keysDict[itemAttributeValues.signature] = itemId;\n      } else {\n        console.log('Item has identical key to another item. Skipping.', getItem(itemId).name.en);\n      }\n    }\n    const result = Object.values(keysDict);\n    if (result.length < gridSize) {\n      message.error(`Could not generate sample. Got only ${result.length} items`);\n    }\n\n    setSelectedItemsIds(sortBy(result, (itemId) => Number(itemId)));\n\n    // Get the most common attributes\n    const attributesResult = getHighestAttributeKeys(\n      result.map((itemId) => getItemAttributeValues(itemId)),\n      25,\n      attributes,\n    );\n\n    // If less than 25 attributes are found, add more by priority\n    if (attributesResult.length < 25) {\n      const remainingAttributes = keys(attributes).filter((key) => !attributesResult.includes(key));\n      const remainingAttributesByPriority = sortBy(remainingAttributes, (key) => attributes[key].priority);\n      const toBeAdded = remainingAttributesByPriority.slice(0, 25 - attributesResult.length);\n      console.log('Adding more attributes by priority', toBeAdded);\n      attributesResult.push(...toBeAdded);\n    }\n\n    const dicts = attributesResult.reduce(\n      (\n        acc: {\n          relatedCount: NumberDictionary;\n          deterministicCount: NumberDictionary;\n          unclearCount: NumberDictionary;\n          oppositeCount: NumberDictionary;\n        },\n        key,\n      ) => {\n        result.forEach((itemId) => {\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          if (!itemAttributeValues) return;\n          switch (itemAttributeValues.attributes[key]) {\n            case ATTRIBUTE_VALUE.RELATED:\n              acc.relatedCount[key] = (acc.relatedCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.DETERMINISTIC:\n              acc.deterministicCount[key] = (acc.deterministicCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.UNCLEAR:\n              acc.unclearCount[key] = (acc.unclearCount[key] || 0) + 1;\n              break;\n            case ATTRIBUTE_VALUE.OPPOSITE:\n              acc.oppositeCount[key] = (acc.oppositeCount[key] || 0) + 1;\n              break;\n          }\n        });\n\n        return acc;\n      },\n      { relatedCount: {}, deterministicCount: {}, unclearCount: {}, oppositeCount: {} },\n    );\n\n    setSelectedAttributes(\n      attributesResult.sort().map((key) => ({\n        ...attributes[key],\n        relatedCount: dicts.relatedCount[key],\n        deterministicCount: dicts.deterministicCount[key],\n        unclearCount: dicts.unclearCount[key],\n        oppositeCount: dicts.oppositeCount[key],\n      })),\n    );\n  };\n\n  const onUpdateDisplays = (key: string) => {\n    setDisplays((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={3}>Simulator</Typography.Title>\n\n      <Typography.Paragraph>\n        Generates a board with items different enough to get Deterministic values in all selected attributes.\n      </Typography.Paragraph>\n\n      <Flex wrap gap={12}>\n        <FilterSelect\n          label=\"Grid Size\"\n          value={gridSize}\n          onChange={(value) => setGridSize(value)}\n          options={[16, 25]}\n        />\n        <FilterNumber\n          label=\"Reliability Threshold\"\n          value={reliabilityThreshold}\n          onChange={(value) => setReliabilityThreshold(value)}\n          step={5}\n          min={10}\n          max={100}\n        />\n        <FilterSwitch label=\"NSFW\" value={nsfw} onChange={setNsfw} />\n        <Button onClick={onGetSample} type=\"primary\">\n          Get Sample Board\n        </Button>\n      </Flex>\n      <Flex wrap gap={12}>\n        <FilterCheckBox label=\"Show Id\" value={!!displays.id} onChange={() => onUpdateDisplays('id')} />\n        <FilterCheckBox\n          label=\"Show Name (EN)\"\n          value={!!displays.nameEn}\n          onChange={() => onUpdateDisplays('nameEn')}\n        />\n        <FilterCheckBox\n          label=\"Show Name (PT)\"\n          value={!!displays.namePt}\n          onChange={() => onUpdateDisplays('namePt')}\n        />\n        <FilterCheckBox\n          label=\"Show Reliability\"\n          value={!!displays.reliability}\n          onChange={() => onUpdateDisplays('reliability')}\n        />\n      </Flex>\n\n      <div className=\"simulator-grid\" style={{ gridTemplateColumns: `repeat(${Math.sqrt(gridSize)}, 1fr)` }}>\n        {selectedItemsIds.map((itemId) => {\n          const item = getItem(itemId);\n          const itemAttributeValues = getItemAttributeValues(itemId);\n          return (\n            <Space\n              key={itemId}\n              direction=\"vertical\"\n              className={clsx(\n                'simulator-grid__entry',\n                highlightedAttributeKey &&\n                  itemAttributeValues.attributes[highlightedAttributeKey] > 0 &&\n                  'simulator-grid__entry--highlighted',\n              )}\n              align=\"center\"\n            >\n              <Space>\n                <Flex vertical>\n                  {displays.id && <ItemId item={item} />}\n\n                  {displays.reliability && (\n                    <span>\n                      <InputNumber\n                        prefix={<LineChartOutlined />}\n                        placeholder=\"Reliability\"\n                        variant=\"borderless\"\n                        size=\"small\"\n                        value={itemAttributeValues.reliability}\n                        readOnly\n                        style={{ width: '8ch' }}\n                        formatter={(value) => `${value}%`}\n                      />\n                    </span>\n                  )}\n\n                  {displays.id && <ItemGoTo item={item} />}\n                </Flex>\n\n                <ItemSprite item={item} width={50} />\n              </Space>\n\n              {displays.nameEn && <ItemName item={item} language=\"en\" />}\n              {displays.namePt && <ItemName item={item} language=\"pt\" />}\n            </Space>\n          );\n        })}\n      </div>\n\n      <div className=\"simulator-grid my-4\">\n        {selectedAttributes.map((attributeSummary) => (\n          <TransparentButton\n            key={attributeSummary.id}\n            className={clsx(\n              'simulator-grid__entry',\n              'simulator-grid__button',\n              highlightedAttributeKey === attributeSummary.id && 'simulator-grid__entry--highlighted',\n            )}\n            onClick={() => setHighlightedAttributeKey(attributeSummary.id)}\n          >\n            {attributeSummary.name.en} {ROMAN_NUMERALS[attributeSummary.level]}\n            <Flex gap={6} justify=\"center\" className=\"my-1\">\n              <span>\n                <CheckSquareOutlined\n                  style={{ color: attributeSummary.deterministicCount ? 'dodgerblue' : undefined }}\n                />{' '}\n                {attributeSummary.deterministicCount ?? 0}\n              </span>\n              <span>\n                <PlusSquareOutlined style={{ color: attributeSummary.relatedCount ? 'green' : undefined }} />{' '}\n                {attributeSummary.relatedCount ?? 0}\n              </span>\n              <span>\n                <CloseSquareOutlined style={{ color: attributeSummary.oppositeCount ? 'red' : undefined }} />{' '}\n                {attributeSummary.oppositeCount ?? 0}\n              </span>\n              <span>\n                <QuestionCircleOutlined\n                  style={{ color: attributeSummary.unclearCount ? 'gold' : undefined }}\n                />{' '}\n                {attributeSummary.unclearCount ?? 0}\n              </span>\n            </Flex>\n          </TransparentButton>\n        ))}\n      </div>\n\n      <DailyAlienSimulator />\n    </div>\n  );\n}\n\nfunction getHighestAttributeKeys(\n  selectedItemsAttributesValues: ItemAttributesValues[],\n  quantity: number,\n  attributes: Dictionary<ItemAttribute>,\n): string[] {\n  // 1. Count the number of times each attribute is present. Make sure to gather any deterministic value\n  const attributesCounts: Record<string, number> = {};\n  const deterministicKeysDict: BooleanDictionary = {};\n  selectedItemsAttributesValues.forEach((itemAttributeValues) => {\n    if (!itemAttributeValues) return;\n    Object.keys(itemAttributeValues.attributes).forEach((key) => {\n      if (itemAttributeValues.attributes[key] > 0) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        deterministicKeysDict[key] = true;\n        attributesCounts[key] = (attributesCounts[key] || 0) + 2;\n      }\n      if (itemAttributeValues.attributes[key] === ATTRIBUTE_VALUE.OPPOSITE) {\n        attributesCounts[key] = (attributesCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  const levelCount: NumberDictionary = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n  };\n\n  /**\n   * Filters the given keys array based on the count of attribute levels and guards against having more than one level 4 attribute.\n   */\n  function filterCountLevelsAndGuardLevel4(keys: string[]) {\n    return keys.filter((key) => {\n      levelCount[attributes[key].level]++;\n\n      if (levelCount[4] > 1) {\n        console.log('Discarding level 4 attribute', key);\n        return false;\n      }\n      return true;\n    });\n  }\n\n  const deterministicKeys = filterCountLevelsAndGuardLevel4(Object.keys(deterministicKeysDict));\n  const nondeterministicKeys = filterCountLevelsAndGuardLevel4(\n    keys(attributesCounts).filter((key) => !deterministicKeys.includes(key)),\n  );\n  console.log({ levelCount });\n\n  // 1.b If deterministic keys are exactly the quantity, return them\n  if (quantity === deterministicKeys.length) {\n    console.log('All keys are deterministic');\n    return deterministicKeys;\n  }\n\n  // 2. Get all keys and sort them by value in descending order, but have only one level 5 attribute\n  console.log(attributesCounts);\n  // let hasLevel5Attribute = false;\n  // const sortedKeys = keys(attributesCounts)\n  //   .sort((a, b) => {\n  //     if (attributesCounts[a] !== attributesCounts[b]) {\n  //       return attributesCounts[b] - attributesCounts[a];\n  //     }\n\n  //     return attributes[a].priority - attributes[b].priority;\n  //   })\n  //   .filter((key) => {\n  //     if (attributes[key].level !== 4) return true;\n\n  //     if (!hasLevel5Attribute) {\n  //       console.log('Keeping level 4 attribute', key, attributesCounts[key]);\n  //       hasLevel5Attribute = true;\n  //       return true;\n  //     }\n  //     console.log('Discarding level 4 attribute', key, attributesCounts[key]);\n\n  //     return false;\n  //   });\n\n  // console.log(sortedKeys);\n\n  // 2.b. Handle edge cases: empty object or quantity exceeding keys\n  if (deterministicKeys.length === 0) {\n    return [];\n  }\n\n  const deterministicTiedGroups = deterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  const sortedDeterministicTiedGroupsKeys = keys(deterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a),\n  );\n  console.log({ sortedDeterministicTiedGroupsKeys });\n\n  const nondeterministicTiedGroups = nondeterministicKeys.reduce((acc: Record<string, string[]>, key) => {\n    const value = attributesCounts[key];\n    if (!acc[value]) {\n      acc[value] = [];\n    }\n    acc[value].push(key);\n    return acc;\n  }, {});\n  console.log(nondeterministicTiedGroups);\n  const sortedNondeterministicTiedGroupsKeys = keys(nondeterministicTiedGroups).sort(\n    (a, b) => Number(b) - Number(a),\n  );\n\n  const result: string[] = [];\n\n  for (const group of sortedDeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(deterministicTiedGroups[group], quantity - result.length));\n  }\n\n  for (const group of sortedNondeterministicTiedGroupsKeys) {\n    if (result.length === quantity) {\n      break;\n    }\n    result.push(...sampleSize(nondeterministicTiedGroups[group], quantity - result.length));\n  }\n\n  return result;\n}\n\n// From those, select 30 items with reliability > 90 (reliableItems) and different signatures\n// Also select 20 items with reliability < 80 (extraItems) and different signatures\n// Gather all itemAttributes from reliableItems with deterministic values (attribute value is 10) (adding up scores)\n// If less than 30 attributes are found, add more attributes with relates values (5) until there are 30.\n// If the selected attributes have a oppositeId or relatedId in the selected list, remove the one with the lowest score\n// Return the 25 top attributes by score and the top 25 items by score (the sum of all their attribute values, except -3)\n","import { SkinOutlined, SwapOutlined } from '@ant-design/icons';\nimport { Button, Flex, Progress, Rate, Space, Table, type TableProps, Tabs, Tag, Typography } from 'antd';\nimport type { TabsProps } from 'antd/lib';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { PopoverInfo } from 'components/Common/PopoverInfo';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { cloneDeep } from 'lodash';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport type { ItemAttributesValues, ItemAttribute } from 'types';\nimport { deepCleanObject, sortJsonKeys } from 'utils';\n\nexport function ItemStats() {\n  const { attributes } = useItemsAttributeValuesContext();\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'All Attributes',\n      children: <AttributesStatsTable type=\"all\" />,\n    },\n    {\n      key: '2',\n      label: 'Default',\n      children: <AttributesStatsTable type=\"default\" />,\n    },\n    {\n      key: '3',\n      label: 'Custom',\n      children: <AttributesStatsTable type=\"custom\" />,\n    },\n    {\n      key: '4',\n      label: 'Limited',\n      children: <AttributesStatsTable type=\"limited\" />,\n    },\n\n    {\n      key: '5',\n      label: 'Specific',\n      children: <AttributesStatsTable type=\"specific\" />,\n    },\n    {\n      key: '6',\n      label: 'Opposite',\n      children: <AttributesStatsTable type=\"opposite\" />,\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Flex justify=\"space-between\" align=\"center\">\n        <Typography.Title level={5}>Stats</Typography.Title>\n        <DownloadButton data={() => prepareFileForDownload(attributes)} fileName=\"items-attributes.json\">\n          Download Attribute Json\n        </DownloadButton>\n      </Flex>\n      <Tabs defaultActiveKey=\"1\" items={items} />\n    </div>\n  );\n}\n\nconst calculateAttributeStats = (attribute: ItemAttribute, itemsAttributes: ItemAttributesValues[]) => {\n  let completionCount = 0;\n  let tensCount = 0;\n  let fivesCount = 0;\n  let zerosCount = 0;\n  let negativeOnesCount = 0;\n  let negativeThreesCount = 0;\n  let negativeTensCount = 0;\n  let positiveCount = 0;\n\n  itemsAttributes.forEach(({ attributes }) => {\n    if (attributes[attribute.id]) {\n      completionCount++;\n\n      const value = attributes[attribute.id];\n      if (value === 10) {\n        tensCount++;\n      } else if (value === 5) {\n        fivesCount++;\n      } else if (value === 0 || !value) {\n        zerosCount++;\n      } else if (value === -1) {\n        negativeOnesCount++;\n      } else if (value === -3) {\n        negativeThreesCount++;\n      } else if (value === -10) {\n        negativeTensCount++;\n      }\n\n      if (value > 0) {\n        positiveCount++;\n      }\n    }\n  });\n\n  const total = itemsAttributes.length;\n  const completionPercentage = (completionCount / total) * 100;\n  const tensPercentage = (tensCount / total) * 100;\n  const fivesPercentage = (fivesCount / total) * 100;\n  const zerosPercentage = (zerosCount / total) * 100;\n  const negativeOnesPercentage = (negativeOnesCount / total) * 100;\n  const negativeThreesPercentage = (negativeThreesCount / total) * 100;\n  const negativeTensPercentage = (negativeTensCount / total) * 100;\n  const positivePercentage = (positiveCount / total) * 100;\n\n  return {\n    completionPercentage: completionPercentage.toFixed(1),\n    tensPercentage: tensPercentage.toFixed(1),\n    fivesPercentage: fivesPercentage.toFixed(1),\n    zerosPercentage: zerosPercentage.toFixed(1),\n    negativeOnesPercentage: negativeOnesPercentage.toFixed(1),\n    negativeThreesPercentage: negativeThreesPercentage.toFixed(1),\n    negativeTensPercentage: negativeTensPercentage.toFixed(1),\n    positivePercentage: positivePercentage.toFixed(1),\n  };\n};\n\ntype AttributesStatsTableProps = {\n  type: 'all' | 'default' | 'custom' | 'limited' | 'specific' | 'opposite';\n};\n\nfunction AttributesStatsTable({ type }: AttributesStatsTableProps) {\n  const { availableItemIds, getItemAttributeValues, attributesList } = useItemsAttributeValuesContext();\n  const navigate = useNavigate();\n  const { is } = useQueryParams();\n\n  const unusedSpriteIds = useMemo(() => {\n    const allSprites = new Array(65).fill(0).map((_, index) => index);\n    const usedSprites = attributesList.map((attribute) => attribute.spriteId);\n    return allSprites.filter((id) => !usedSprites.includes(`sign-${id}`));\n  }, [attributesList]);\n\n  const attributesPool = useMemo(() => {\n    if (type === 'default') {\n      return attributesList.filter((attribute) => attribute.default);\n    }\n\n    if (type === 'custom') {\n      return attributesList.filter((attribute) => !attribute.default);\n    }\n\n    if (type === 'limited') {\n      return attributesList.filter((attribute) => attribute.limited);\n    }\n\n    if (type === 'specific') {\n      return attributesList.filter((attribute) => attribute.specific);\n    }\n\n    if (type === 'opposite') {\n      return attributesList.filter((attribute) => attribute.oppositeId);\n    }\n\n    return attributesList;\n  }, [attributesList, type]);\n\n  const rows = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n\n    return attributesPool.map((attribute) => {\n      return {\n        ...attribute,\n        ...calculateAttributeStats(attribute, itemsAttributes),\n      };\n    });\n  }, [attributesPool, availableItemIds, getItemAttributeValues]);\n\n  const columns: TableProps['columns'] = [\n    {\n      title: 'Attribute',\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, record) => (\n        <Flex align=\"center\" gap={8}>\n          {is('showGlyphs') && <AlienSign id={record.spriteId} width={30} />}\n          {name.en}\n          {record.default && <Tag className=\"ml-1\">default</Tag>}\n          {record.limited && <Tag className=\"ml-1\">limited</Tag>}\n          {(record.specific || record.parentId) && <Tag className=\"ml-1\">specific</Tag>}\n          {record.oppositeId && (\n            <Tag className=\"ml-1\">\n              <SwapOutlined />\n            </Tag>\n          )}\n          <PopoverInfo title={record.description.en} />\n        </Flex>\n      ),\n      sorter: (a, b) => a.name.en.localeCompare(b.name.en),\n    },\n    {\n      title: <SkinOutlined />,\n      dataIndex: 'spriteId',\n      key: 'spriteId',\n      render: (spriteId) => <AlienSign id={spriteId} width={18} padding={0} />,\n    },\n    {\n      title: 'Priority',\n      dataIndex: 'priority',\n      key: 'priority',\n      sorter: (a, b) => a.priority - b.priority,\n    },\n\n    {\n      title: 'Positive',\n      dataIndex: 'positivePercentage',\n      key: 'positivePercentage',\n      render: (positivePercentage: string) => `${positivePercentage}%`,\n      sorter: (a, b) => Number.parseFloat(a.positivePercentage) - Number.parseFloat(b.positivePercentage),\n    },\n    {\n      title: '10',\n      dataIndex: 'tensPercentage',\n      key: 'tensPercentage',\n      render: (tensPercentage: string, record) => {\n        if (record.limited) {\n          return '-';\n        }\n\n        return `${tensPercentage}%`;\n      },\n      sorter: (a, b) => Number.parseFloat(a.tensPercentage) - Number.parseFloat(b.tensPercentage),\n    },\n    {\n      title: '5',\n      dataIndex: 'fivesPercentage',\n      key: 'fivesPercentage',\n      render: (fivesPercentage: string) => `${fivesPercentage}%`,\n      sorter: (a, b) => Number.parseFloat(a.fivesPercentage) - Number.parseFloat(b.fivesPercentage),\n    },\n    {\n      title: '-1',\n      dataIndex: 'negativeOnesPercentage',\n      key: 'negativeOnesPercentage',\n      render: (negativeOnesPercentage: string) => `${negativeOnesPercentage}%`,\n      sorter: (a, b) =>\n        Number.parseFloat(a.negativeOnesPercentage) - Number.parseFloat(b.negativeOnesPercentage),\n    },\n    {\n      title: '-3',\n      dataIndex: 'negativeThreesPercentage',\n      key: 'negativeThreesPercentage',\n      render: (negativeThreesPercentage: string) => `${negativeThreesPercentage}%`,\n      sorter: (a, b) =>\n        Number.parseFloat(a.negativeThreesPercentage) - Number.parseFloat(b.negativeThreesPercentage),\n    },\n    {\n      title: '-10',\n      dataIndex: 'negativeTensPercentage',\n      key: 'negativeTensPercentage',\n      render: (negativeTensPercentage: string) => `${negativeTensPercentage}%`,\n      sorter: (a, b) =>\n        Number.parseFloat(a.negativeTensPercentage) - Number.parseFloat(b.negativeTensPercentage),\n    },\n    {\n      title: 'Completion',\n      dataIndex: 'completionPercentage',\n      key: 'completionPercentage',\n      render: (completionPercentage: string) => (\n        <Progress percent={Number.parseFloat(completionPercentage)} size=\"small\" />\n      ),\n      sorter: (a, b) => Number.parseFloat(a.completionPercentage) - Number.parseFloat(b.completionPercentage),\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level',\n      render: (level) => <Rate count={4} value={level} disabled />,\n      sorter: (a, b) => a.level - b.level,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record) => (\n        <Space>\n          <Button.Group>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=grouping&attribute=${record.id}&page=1`)}\n            >\n              Grouping\n            </Button>\n            <Button\n              size=\"small\"\n              shape=\"round\"\n              onClick={() => navigate(`/items/attribution?view=sampler&attribute=${record.id}&size=6`)}\n            >\n              Sample\n            </Button>\n          </Button.Group>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Typography.Paragraph>Total: {rows.length}</Typography.Paragraph>\n\n      <Table columns={columns} dataSource={rows} pagination={false} rowKey=\"id\" size=\"small\" />\n\n      <Flex wrap=\"wrap\" gap={8}>\n        {unusedSpriteIds.map((id) => (\n          <div key={id}>\n            #{id}\n            <AlienSign key={id} id={`sign-${id}`} />\n          </div>\n        ))}\n      </Flex>\n    </>\n  );\n}\n\nfunction prepareFileForDownload(attributes: Dictionary<ItemAttribute>) {\n  const copy = cloneDeep(attributes);\n\n  // Object.values(copy).forEach((attribute) => {\n\n  // });\n\n  return sortJsonKeys(deepCleanObject(copy), [\n    'description',\n    'priority',\n    'level',\n    'spriteId',\n    'oppositeId',\n    'relatedId',\n    'default',\n    'limited',\n    'specific',\n    'keywords',\n  ]);\n}\n","import { Empty, Flex } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionFilterAttributes, ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { ItemComparatorCard } from './ItemComparatorCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemSimulation } from './ItemSimulation';\nimport { ItemStats } from './ItemStats';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <Flex className=\"my-4\" gap={8}>\n          <ItemAttributionNavigation />\n          <ItemAttributionFilterAttributes />\n        </Flex>\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  if (view === 'simulator') {\n    return <ItemSimulation />;\n  }\n\n  if (view === 'stats') {\n    return <ItemStats />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionFilters } from 'components/Items/Attributes/ItemAttributionFilters';\nimport { ItemAttributionPageContent } from 'components/Items/Attributes/ItemAttributionPageContent';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n"],"names":["ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","size","value","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","ATTRIBUTE_VALUE_DICT","OPPOSITE","label","prefixLabel","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","prefixDictionary","keyBy","createAlienItem","itemAttributesValues","attributeKeysInUse","itemAttributes","attributes","key","result","type","inquiries","offerings","createAlienAttribute","itemAttribute","description","limited","spriteId","priority","known","ATTRIBUTE_VALUE_PRIORITY","getAlienItemSignature","alienItems","alienAttributes","options","find","i","validAttributes","filter","attr","useOnlyKnownAttributes","attributeMap","Map","map","signatureEntries","attributeId","Object","entries","attribute","get","entry","values","dictEntry","push","sortedEntries","sortBy","o","indexOf","prioritizedNegatives","includes","length","slice","join","alienAttributesUtils","buildAlienGameGrids","items","itemsGridSize","attributesGridSize","reliability","completeItems","shuffle","itemAttrVal","complete","signature","usedItems","uniqueItemsPerAttribute","selection","tries","Error","candidate","Boolean","attributeAggregatedScores","reduce","acc","uniqueItemsPerAttributePerId","forEach","index","keys","attrId","nonLimitedAttributes","topNonLimitedAttributes","arr","oppositeId","relatedId","relativeId","limitedAttributes","selectedAttributes","selectedAttributesIds","selectedItems","sampleSize","itemAttributesValuesEntry","getBestAttributes","inquiredItemIds","inquiredItems","attributeScores","score","sort","scoreA","scoreB","undefined","getNonClashingItem","previouslyInquiredItemsIds","recentlyInquiredItemsIds","blanks","curses","deterministicValues","curse","getCursesDeterministicAttributesIds","curseSignatures","blankSignatures","blank","itemSignatures","getCountForMatches","signatures","sig","orderBy","equivalentCurses","equivalentBlanks","isRecentlyInquiredItem","isPreviouslyInquiredItem","getInitialKnownAttributes","scores","sortedScores","Math","ceil","parseItemSignature","match","getInquirySuggestions","playerKnownAttributesIds","missingAttributes","itemsWithAttribute","getNewItem","partialItem","cloneDeep","merge","groups","getNewItemAttributeValues","partialItemAttributeValues","getItemAttributePriorityResponse","onlyRelevant","priorityOrder","sortAttributesByPriority","attributeKeys","opposite","deterministic","related","unrelated","unclear","ATTRIBUTE_VALUE","ATTRIBUTE_VALUE_PREFIX","parseAttribute","memoize","keyVariant","text","filterMessage","message","showUnclear","showUnrelated","constructItemSignature","limitedEntries","calculateItemScore","calculateItemReliability","totalAttributes","unclearCount","floor","globalNewItemsAttributesValues","serializeItemAttributesValues","serializeFirebaseData","tempSignature","updatedAt","deserializeItemAttributesValues","data","deserializeFirebaseData","constructItemAttributes","newEntry","ItemsAttributeValuesContext","createContext","getItem","getItemAttributeValues","isLoading","error","hasResponseData","isDirty","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","isSaving","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributesToUpdate","ItemsAttributeValuesProvider","children","notification","App","queryClient","useQueryClient","tdrItemsQuery","useTDResource","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","useGetFirebaseDoc","select","modifiedAttributeValues","setModifiedAttributeValues","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","refetchQueries","queryKey","onError","savedItemsAttributeValues","useMemo","isEmpty","firebaseData","decks","Number","info","storedValue","modifiedValue","isPending","mutate","prev","Date","now","itemsArr","mapKeys","useItemsAttribution","itemIndex","setItemIndex","random","Provider","direction","sortJsonKeys","useItemsAttributeValuesContext","useContext","useItemQueryParams","searchParams","setView","addQueryParam","set","removeQueryParam","delete","Stat","ItemAttributionStats","total","completionPercentage","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","toFixed","vertical","strong","ItemAttributionClassifierFilters","block","onChange","ItemAttributionSamplerFilters","v","String","min","max","step","ItemAttributionGroupingFilters","rest","default","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionStatsFilters","ItemAttributionFilters","gap","SaveButton","onSave","dirt","JSON","stringify","DownloadButton","itemsAttributes","k","deepCleanObject","prepareFileForDownload","fileName","disabled","GoToTopButton","props","isVisible","setIsVisible","handleScroll","window","scrollY","useEffectOnce","addEventListener","removeEventListener","scrollTo","top","behavior","icon","VerticalAlignTopOutlined","PopoverInfo","QuestionCircleOutlined","attributeOptions","attributeLimitedOptions","AttributionValueButtons","onlyButtons","target","optionType","buttonStyle","truncate","CheckCircleFilled","ItemAttributeDescription","filteredResponse","Component","AttributeSprite","AttributeText","wrap","firstElement","lastElement","withText","align","clsx","justify","maxWidth","textAlign","wordBreak","toLowerCase","suffix","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","completed","percent","CloseCircleOutlined","ItemAttributionCard","queryParamsItemId","filteredAttributesIds","useEffect","showOnlyUnset","filteredAttributesList","shortlist","parsedList","split","offsetTop","ItemAttributionNavigation","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","ItemsTypeahead","onFinish","ItemAttributionFilterAttributes","addParam","queryParams","useQueryParams","activeFilters","mode","onChangeFilters","allowClear","FilterFilled","FilterOutlined","ItemAttributionDrawer","setUnsetOnly","open","onClose","checked","checkedChildren","unCheckedChildren","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemMessage","fullMessage","moreThanOne","ids","console","log","useItemsComparator","columns","dataIndex","render","sorter","a","b","localeCompare","group","groupA","level","dataSource","pagination","showQuickJumper","getStatSentence","stats","scope","ItemGroupingCard","pageIds","updateAttributeValue","updatePageItemsAsUnrelated","sorting","attributeKey","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","setSortBy","sortOrder","setSortOrder","scopeValue","filteredItemIds","sortType","sortValue","start","end","round","currentItemAttributeValues","current","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","sortingComponent","unrelateButton","onConfirm","danger","extra","actions","image","Empty","useItemSampler","sampleIds","setSampleIds","setAttribute","getSample","lodashSample","selectedAttribute","selected","itemsLeftForAttribute","onGetSample","tempSample","attempts","ItemSamplerCard","SingleSampleModalFlow","sample","unsetItems","ghost","Fragment","toggleOpen","useToggle","maskClosable","onOk","onCancel","cancelButtonProps","display","async","wait","DailyAlienSimulator","simulation","setSimulation","generateDailyAlienGame","simulations","valid","setId","e","number","itemsIds","requests","req","spritesIds","itemsAttributesValues","allAttributes","allItems","spriteIDs","makeArray","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","POSITIVE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","usedItemsIds","complexRequests","simpleRequests","warn","requestItemsIds","solution","every","ROMAN_NUMERALS","ItemSimulation","gridSize","setGridSize","reliabilityThreshold","setReliabilityThreshold","setNsfw","selectedItemsIds","setSelectedItemsIds","setSelectedAttributes","highlightedAttributeKey","setHighlightedAttributeKey","displays","setDisplays","nameEn","namePt","onUpdateDisplays","keysDict","shuffledIds","attributesResult","selectedItemsAttributesValues","quantity","attributesCounts","deterministicKeysDict","levelCount","filterCountLevelsAndGuardLevel4","deterministicKeys","nondeterministicKeys","deterministicTiedGroups","sortedDeterministicTiedGroupsKeys","nondeterministicTiedGroups","sortedNondeterministicTiedGroupsKeys","getHighestAttributeKeys","remainingAttributes","toBeAdded","dicts","relatedCount","deterministicCount","oppositeCount","gridTemplateColumns","sqrt","LineChartOutlined","formatter","attributeSummary","CheckSquareOutlined","PlusSquareOutlined","CloseSquareOutlined","ItemStats","AttributesStatsTable","copy","defaultActiveKey","navigate","useNavigate","is","unusedSpriteIds","allSprites","Array","fill","usedSprites","attributesPool","specific","rows","completionCount","tensCount","fivesCount","zerosCount","negativeOnesCount","negativeThreesCount","negativeTensCount","positiveCount","tensPercentage","fivesPercentage","zerosPercentage","negativeOnesPercentage","negativeThreesPercentage","negativeTensPercentage","positivePercentage","calculateAttributeStats","record","parentId","SwapOutlined","SkinOutlined","padding","parseFloat","count","rowKey","ItemAttributionPageContent","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}