{"version":3,"file":"static/js/Items.be6e7ea2.chunk.js","mappings":"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","sources":["context/ItemsContext.tsx","components/Items/ItemCard.tsx","hooks/useItemUpdate.ts","components/Items/ItemListing.tsx","components/Items/AddNewItem.tsx","components/Items/ItemListingFilters.tsx","components/Items/ItemRandomized.tsx","components/Items/ItemSearch.tsx","pages/Items/Items.tsx"],"sourcesContent":["import { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { createContext, ReactNode, useContext, useMemo } from 'react';\nimport { Item } from 'types';\n\nexport type ItemsContextType = {\n  items: Dictionary<Item>;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  decksDict: Dictionary<string>;\n  decks: { value: string }[];\n  listing: Item[];\n  isDirty: boolean;\n  addItemToUpdate: (id: string, item: Item) => void;\n  itemsToUpdate: Dictionary<Item>;\n  isSaving: boolean;\n  save: () => void;\n  newId: string;\n};\n\nconst ItemsContext = createContext<ItemsContextType>({\n  items: {},\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  decksDict: {},\n  decks: [],\n  listing: [],\n  isDirty: false,\n  addItemToUpdate: () => {},\n  itemsToUpdate: {},\n  isSaving: false,\n  save: () => {},\n  newId: '-1',\n});\n\ntype ItemsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsProvider = ({ children }: ItemsProviderProps) => {\n  const { queryParams } = useQueryParams();\n\n  const {\n    data: items,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addEntryToUpdate: addItemToUpdate,\n    entriesToUpdate: itemsToUpdate,\n    isDirty,\n  } = useResourceFirebaseData<Item>({\n    tdrResourceName: 'items',\n    firebaseDataCollectionName: 'items',\n  });\n\n  const { decksDict, decks } = useMemo(() => {\n    console.log('Recomputing item decks typeahead...');\n    const decksDict: Dictionary<string> = {};\n    const duplicationCheckEn: Dictionary<string> = {};\n    const duplicationCheckPt: Dictionary<string> = {};\n    const duplicatedNames: string[][] = [];\n\n    Object.values(items).forEach((entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n\n      if (duplicationCheckEn[entry.name.en]) {\n        duplicatedNames.push([`${entry.name.en} (${duplicationCheckEn[entry.name.en]})`, nameEn]);\n      } else {\n        duplicationCheckEn[entry.name.en] = entry.id;\n      }\n      if (duplicationCheckPt[entry.name.pt]) {\n        duplicatedNames.push([`${entry.name.pt} (${duplicationCheckPt[entry.name.pt]})`, namePt]);\n      } else {\n        duplicationCheckPt[entry.name.pt] = entry.id;\n      }\n\n      entry?.decks?.forEach((deck) => {\n        decksDict[deck] = deck;\n      });\n    });\n\n    const decks = orderBy(Object.keys(decksDict)).map((name) => ({ value: name }));\n\n    if (duplicatedNames.length > 0) {\n      console.warn('Possible duplicated items', duplicatedNames);\n    }\n\n    return { decksDict, decks };\n  }, [items, isSaving, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const deck = queryParams.get('deck') ?? 'all';\n  const listing = useMemo(() => {\n    const orderedList = orderBy(Object.values(items), [(item) => Number(item.id)], 'asc');\n\n    switch (deck) {\n      case 'all':\n        return orderedList;\n      case '!all':\n        return orderedList.filter((item) => !item?.decks?.length ?? true);\n      case 'nsfw':\n        return orderedList.filter((item) => item.nsfw);\n      case '!nsfw':\n        return orderedList.filter((item) => !item.nsfw);\n      default:\n        if (deck.startsWith('!')) {\n          return orderedList.filter((item) => !item?.decks?.includes(deck.slice(1)));\n        }\n        return orderedList.filter((item) => item?.decks?.includes(deck));\n    }\n  }, [items, deck]);\n\n  // Handle id for new items\n  const newId = useMemo(() => {\n    const newIds = orderBy(Object.keys(itemsToUpdate), [(id) => Number(id)], 'asc');\n    const latestSavedId = listing[listing.length - 1]?.id;\n    const newestId = orderBy([...newIds, latestSavedId], [(id) => Number(id)], 'desc')[0];\n    return String(Number(newestId) + 1);\n  }, [listing, itemsToUpdate]);\n\n  return (\n    <ItemsContext.Provider\n      value={{\n        items,\n        listing,\n        isLoading,\n        error,\n        decksDict,\n        decks,\n        hasResponseData: listing.length > 0,\n        isDirty,\n        addItemToUpdate,\n        isSaving,\n        save,\n        itemsToUpdate,\n        newId,\n      }}\n    >\n      {children}\n    </ItemsContext.Provider>\n  );\n};\n\nexport const useItemsContext = () => useContext(ItemsContext);\n","import { Button, Card, Flex, Form, Input, Popover, Select, Space, Switch, Typography } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useItemUpdate } from 'hooks/useItemUpdate';\nimport { memoize, snakeCase } from 'lodash';\nimport { Item as ItemT } from 'types';\n\nimport { EditOutlined, FireFilled, MenuOutlined, RollbackOutlined, SaveOutlined } from '@ant-design/icons';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useToggle } from 'react-use';\n\ntype ItemCardProps = {\n  item: ItemT;\n  editMode?: boolean;\n  simplified?: boolean;\n};\n\nexport function ItemCard({ item, editMode = false, simplified }: ItemCardProps) {\n  const { decks } = useItemsContext();\n  const { isEditing, toggleEditMode, onEdit, isDirty, onModify, onReset, editableItem } = useItemUpdate(\n    item,\n    editMode\n  );\n  const copyToClipboard = useCopyToClipboardFunction();\n  const { is } = useQueryParams();\n\n  return (\n    <Card\n      title={<Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>}\n      extra={<ItemPopoverOptions item={item} />}\n      style={{ maxWidth: 250 }}\n      size={simplified ? 'small' : 'default'}\n      actions={\n        simplified\n          ? undefined\n          : isDirty\n            ? [\n                <RollbackOutlined key=\"reset\" onClick={onReset} />,\n                <SaveOutlined key=\"save\" onClick={onModify} />,\n              ]\n            : [<EditOutlined key=\"edit\" onClick={toggleEditMode} />]\n      }\n    >\n      <Item id={item.id} width={simplified ? 75 : 125} title={`${item.name.en} | ${item.name.pt}`} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <Input\n          prefix={<LanguageFlag language=\"en\" width=\"1em\" />}\n          placeholder=\"Name in EN\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.en}\n          readOnly={!isEditing}\n          key={`en-${item.name.en}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, en: e.target.value } })}\n        />\n        <Input\n          prefix={<LanguageFlag language=\"pt\" width=\"1em\" />}\n          placeholder=\"Name in PT\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.pt}\n          readOnly={!isEditing}\n          key={`pt-${item.name.pt}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, pt: e.target.value } })}\n        />\n        {!simplified && (\n          <>\n            <div>\n              <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Select a deck\"\n                defaultValue={item.decks}\n                disabled={!isEditing}\n                options={decks}\n                variant={isEditing ? 'outlined' : 'borderless'}\n                size=\"small\"\n                key={String(item.decks)}\n                onChange={(value) => onEdit({ decks: value.sort() })}\n              />\n            </div>\n            {is('showVerifyThing') && (\n              <div>\n                <VerifyIfThing item={item} />\n              </div>\n            )}\n            {(isEditing || item.nsfw) && (\n              <div>\n                <Form.Item label=\"nsfw\" valuePropName=\"checked\">\n                  <Switch\n                    checked={item.nsfw}\n                    onChange={(checked) => onEdit({ nsfw: checked })}\n                    size=\"small\"\n                    checkedChildren={<FireFilled style={{ color: 'hotpink' }} />}\n                    disabled={!isEditing}\n                  />\n                </Form.Item>\n              </div>\n            )}\n          </>\n        )}\n      </Space>\n    </Card>\n  );\n}\n\ntype VerifyIfThingProps = {\n  item: ItemT;\n};\n\nconst verifyIfThingCheck = memoize((item: ItemT) => {\n  const hasThing = !!item.decks?.includes('thing');\n  const hasManufactured = !!item.decks?.includes('manufactured');\n  const singleWordNameEn = item.name.en.split(' ').length === 1;\n  const singleWordNamePt = item.name.pt.split(' ').length === 1;\n\n  const result = {\n    en: hasThing || (singleWordNameEn && hasManufactured),\n    pt: hasThing || (singleWordNamePt && hasManufactured),\n  };\n\n  if (!result.pt && !result.en) return '';\n\n  return (\n    <>\n      {result.en && <LanguageFlag language=\"en\" width=\"1em\" />}\n      {result.pt && <LanguageFlag language=\"pt\" width=\"1em\" />}\n    </>\n  );\n});\n\nconst VerifyIfThing = ({ item }: VerifyIfThingProps) => {\n  const result = verifyIfThingCheck(item);\n\n  if (result) {\n    return <Flex gap={6}>Thing: {result}</Flex>;\n  }\n\n  return <></>;\n};\n\nexport type EscapeRoomItemCard = {\n  /**\n   * The unique identifier of the card.\n   * Usually used to verify the end game played cards condition.\n   */\n  id: string;\n  /**\n   * The type of the card.\n   */\n  type: 'item';\n  /**\n   * The header of the card\n   */\n  header: {\n    /**\n     * The title of the header in both languages.\n     */\n    title: DualLanguageValue;\n    /**\n     * Illustrative small icon in the header.\n     */\n    iconId?: string;\n  };\n  /**\n   * The metadata of the card.\n   */\n  metadata?: {\n    /**\n     * The level of the card to determine the difficulty.\n     */\n    level: 'basic';\n    /**\n     * When played, adds this keyword to the result.\n     */\n    keyword?: string;\n  };\n  content: {\n    /**\n     * The item id for the Item Sprite\n     */\n    itemId: string;\n    /**\n     * Descriptive text of the item, usually its name\n     */\n    caption?: DualLanguageValue;\n  };\n};\n\nconst buildEscapeRoomItemCard = (item: ItemT): EscapeRoomItemCard => ({\n  id: item.id,\n  type: 'item',\n  header: {\n    title: {\n      en: 'Item',\n      pt: 'Item',\n    },\n    iconId: '2077',\n  },\n  metadata: {\n    level: 'basic',\n    keyword: snakeCase(item.name.en).toUpperCase(),\n  },\n  content: {\n    itemId: item.id,\n    caption: item.name,\n  },\n});\n\nexport function ItemPopoverOptions({ item }: Pick<ItemCardProps, 'item'>) {\n  const [open, toggleOpen] = useToggle(false);\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <Popover\n      content={\n        <Space direction=\"vertical\">\n          <Button size=\"small\" onClick={() => copyToClipboard(JSON.stringify(item, null, 2))}>\n            Complete Item\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.en)}>\n            EN Name\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.pt)}>\n            PT Name\n          </Button>\n          <Button\n            size=\"small\"\n            onClick={() => copyToClipboard(JSON.stringify(buildEscapeRoomItemCard(item), null, 2))}\n          >\n            Escape Room Item\n          </Button>\n        </Space>\n      }\n      title=\"Copy\"\n      trigger=\"click\"\n      open={open}\n      onOpenChange={toggleOpen}\n    >\n      <Button type=\"text\" icon={<MenuOutlined />} />\n    </Popover>\n  );\n}\n","import { cloneDeep } from 'lodash';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\nimport { useItemsContext } from 'context/ItemsContext';\n\nexport function useItemUpdate(currentItem: ItemT, editMode = false) {\n  const { addItemToUpdate, itemsToUpdate } = useItemsContext();\n  const [isEditing, setEditing] = useState(editMode);\n  const [editableItem, setEditableItem] = useState<ItemT>(cloneDeep(currentItem));\n  const originalItem = itemsToUpdate[currentItem.id] ?? currentItem;\n\n  const onEdit = (change: Partial<ItemT>) => {\n    const newItem = { ...cloneDeep(editableItem), ...change };\n    if (Object.keys(change).includes('nsfw') && change.nsfw === false) {\n      delete newItem.nsfw;\n    }\n    setEditableItem(newItem);\n  };\n\n  const onModify = async () => {\n    addItemToUpdate(editableItem.id, editableItem);\n  };\n\n  const onReset = () => {\n    setEditableItem(cloneDeep(currentItem));\n    setEditing(false);\n  };\n\n  const isDirty = JSON.stringify(originalItem) !== JSON.stringify(editableItem);\n\n  return {\n    isEditing,\n    toggleEditMode: () => setEditing((e) => !e),\n    editableItem,\n    onEdit,\n    isDirty,\n    onModify,\n    onReset,\n  };\n}\n","import { Col, Row, Typography } from 'antd';\n\nimport { ItemCard } from './ItemCard';\nimport { capitalize } from 'lodash';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemListing() {\n  const { queryParams } = useQueryParams();\n  const listingType = queryParams.get('type') ?? 'all';\n  const { listing } = useItemsContext();\n\n  const { page, pagination } = useGridPagination({ data: listing, resetter: listingType });\n\n  return (\n    <>\n      <Typography.Title level={2}>\n        Listing - {capitalize(listingType)} items ({listing.length})\n      </Typography.Title>\n\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemCard item={item} />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Button, Modal } from 'antd';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useState } from 'react';\nimport { ItemCard } from './ItemCard';\nimport { cloneDeep } from 'lodash';\n\nconst PLACEHOLDER_ITEM = {\n  id: '',\n  name: {\n    en: '',\n    pt: '',\n  },\n  groups: [],\n};\n\ntype NewItemModalProps = {\n  isModalOpen: boolean;\n  handleOk: () => void;\n  handleCancel: () => void;\n  newId: string;\n};\n\nfunction NewItemModal({ isModalOpen, handleOk, handleCancel, newId }: NewItemModalProps) {\n  const [newItem] = useState(cloneDeep({ ...PLACEHOLDER_ITEM, id: newId }));\n  return (\n    <Modal title=\"Add new item\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n      <ItemCard item={newItem} editMode />\n    </Modal>\n  );\n}\n\nexport function AddNewItem() {\n  const [isModalOpen, setOpenModal] = useState(false);\n\n  const { newId } = useItemsContext();\n\n  const showModal = () => {\n    setOpenModal(true);\n  };\n\n  const handleOk = () => {\n    setOpenModal(false);\n  };\n\n  const handleCancel = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <Button block onClick={showModal}>\n        Add New Item\n      </Button>\n      {isModalOpen && (\n        <NewItemModal\n          isModalOpen={isModalOpen}\n          handleOk={handleOk}\n          handleCancel={handleCancel}\n          newId={newId}\n          key={newId}\n        />\n      )}\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSelect, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { capitalize, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { AddNewItem } from './AddNewItem';\nimport { Item } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { SaveButton } from 'components/Common/SaveButton';\n\nexport function ItemListingFilters() {\n  const { isDirty, save, items, decks, itemsToUpdate, isSaving } = useItemsContext();\n  const { queryParams, is, addParam } = useQueryParams();\n\n  const deckOptions = useMemo(() => {\n    const includingOptions = orderBy(\n      decks.map(({ value }) => ({ label: capitalize(value), value })),\n      'label'\n    );\n    const excludingOptions = includingOptions.map(({ label, value }) => ({\n      label: `NOT ${label}`,\n      value: `!${value}`,\n    }));\n    return [...includingOptions, ...excludingOptions];\n  }, [decks]);\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={6}>\n        <SaveButton\n          isDirty={isDirty}\n          dirt={JSON.stringify(itemsToUpdate)}\n          onSave={save}\n          isSaving={isSaving}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(items)}\n          fileName=\"items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSwitch\n        label=\"Show Search\"\n        value={!is('hideSearch')}\n        onChange={(v) => addParam('hideSearch', v ? '' : 'true', '')}\n      />\n\n      <FilterSwitch\n        label=\"Show Randomizer\"\n        value={is('showRandomizer')}\n        onChange={(v) => addParam('showRandomizer', v ? 'true' : '', '')}\n      />\n\n      <FilterSwitch\n        label=\"Verify Thing\"\n        value={is('showVerifyThing')}\n        onChange={(v) => addParam('showVerifyThing', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n\n      <FilterSelect\n        label=\"Deck\"\n        value={queryParams.get('deck') ?? 'all'}\n        onChange={(value) => addParam('deck', value, 'all')}\n        options={[\n          { label: 'All', value: 'all' },\n          { label: 'NSFW', value: 'nsfw' },\n          { label: 'SFW', value: '!nsfw' },\n          ...deckOptions,\n          { label: 'No decks', value: '!all' },\n        ]}\n      />\n\n      <Divider />\n\n      <AddNewItem />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(items: Dictionary<Item>) {\n  return sortJsonKeys(\n    Object.values(items).reduce((acc: Dictionary<Item>, item) => {\n      // Sort deck\n      item.decks = (item?.decks ?? []).sort();\n\n      // Remove decks if no deck is present\n      if (item.decks.length === 0) {\n        delete item.decks;\n\n        acc[item.id] = item;\n        return acc;\n      }\n\n      // Remove thing from deck if either evidence, dream, alien, or manufactured is present and both pt and en names are single words\n      if (\n        item.decks.includes('thing') &&\n        item.name.en.split(' ').length === 1 &&\n        item.name.pt.split(' ').length === 1\n      ) {\n        if (\n          item.decks.includes('evidence') ||\n          item.decks.includes('dream') ||\n          item.decks.includes('alien') ||\n          item.decks.includes('manufactured')\n        ) {\n          item.decks = item.decks.filter((deck) => deck !== 'thing');\n        }\n\n        acc[item.id] = item;\n      }\n\n      acc[item.id] = item;\n\n      return acc;\n    }, {})\n  );\n}\n","import { Button, Divider, Dropdown, Flex, Form, InputNumber, Space, Typography } from 'antd';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { sampleSize } from 'lodash';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\nexport function ItemRandomized() {\n  const { listing } = useItemsContext();\n  const [randomItems, setRandomItems] = useState<ItemT[]>([]);\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  const [sampleQuantity, setSampleQuantity] = useState(5);\n\n  const onRandomSample = () => {\n    setRandomItems(sampleSize(listing, sampleQuantity));\n  };\n\n  const items = [\n    { label: 'Copy IDs', key: 'copy_ids' },\n    { label: 'Copy Names EN', key: 'copy_names_en' },\n    { label: 'Copy Names PT', key: 'copy_names_pt' },\n  ];\n\n  const onMenuClick = ({ key }: { key: string }) => {\n    console.log(key);\n\n    if (key === 'copy_ids') {\n      const ids = randomItems.map((item) => item.id);\n      copyToClipboard(JSON.stringify(ids));\n      return;\n    }\n\n    if (key === 'copy_names_en') {\n      const names = randomItems.map((item) => item.name.en).join(', ');\n      copyToClipboard(names);\n      return;\n    }\n\n    if (key === 'copy_names_pt') {\n      const names = randomItems.map((item) => item.name.pt).join(', ');\n      copyToClipboard(names);\n      return;\n    }\n  };\n\n  return (\n    <div>\n      <Typography.Title level={2}>Randomized Sample</Typography.Title>\n\n      <Flex gap={12}>\n        <Form.Item label=\"Quantity\"></Form.Item>\n        <div>\n          <InputNumber\n            min={3}\n            max={15}\n            value={sampleQuantity}\n            onChange={(v) => setSampleQuantity(Number(v))}\n            style={{ minWidth: '100px' }}\n          />\n        </div>\n        <Button onClick={onRandomSample} type=\"primary\">\n          Get Sample\n        </Button>\n\n        <Dropdown.Button\n          menu={{ items, onClick: onMenuClick }}\n          disabled={randomItems.length === 0}\n          onClick={() => copyToClipboard(JSON.stringify(randomItems, null, 2))}\n        >\n          Copy\n        </Dropdown.Button>\n      </Flex>\n\n      <Space wrap className=\"my-4\">\n        {randomItems.map((item) => (\n          <ItemCard key={item.id} item={item} simplified />\n        ))}\n      </Space>\n\n      <Divider />\n    </div>\n  );\n}\n","import { Divider, Space, Typography } from 'antd';\nimport { Fragment, useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from './ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nexport function ItemSearch() {\n  const { items, isLoading, isSaving } = useItemsContext();\n  const [activeItem, setActiveItem] = useState<ItemT | null>(null);\n\n  return (\n    <Fragment key={`item-search-${isLoading}`}>\n      <Typography.Title level={2}>Search for an item</Typography.Title>\n\n      <div>\n        <ItemsTypeahead\n          items={items}\n          isPending={isLoading || isSaving}\n          onFinish={(id) => setActiveItem(items[id])}\n        />\n      </div>\n\n      {Boolean(activeItem) && (\n        <Space direction=\"vertical\" className=\"my-4\" key={activeItem?.id}>\n          <ItemCard item={activeItem!} />\n        </Space>\n      )}\n      <Divider />\n    </Fragment>\n  );\n}\n","import { Layout, Space } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemListing } from 'components/Items/ItemListing';\nimport { ItemListingFilters } from 'components/Items/ItemListingFilters';\nimport { ItemRandomized } from 'components/Items/ItemRandomized';\nimport { ItemSearch } from 'components/Items/ItemSearch';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ItemsProvider, useItemsContext } from 'context/ItemsContext';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nfunction ItemsPage() {\n  const { isLoading, error, hasResponseData } = useItemsContext();\n  const { is } = useQueryParams();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Listing\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemListingFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            {!isLoading && (\n              <Space size=\"large\">\n                {!is('hideSearch') && <ItemSearch />}\n                {is('showRandomizer') && <ItemRandomized />}\n              </Space>\n            )}\n            <ItemListing />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction Items() {\n  return (\n    <ItemsProvider>\n      <ItemsPage />\n    </ItemsProvider>\n  );\n}\n\nexport default Items;\n"],"names":["ItemsContext","createContext","items","isLoading","error","hasResponseData","decksDict","decks","listing","isDirty","addItemToUpdate","itemsToUpdate","isSaving","save","newId","ItemsProvider","children","queryParams","useQueryParams","data","addEntryToUpdate","entriesToUpdate","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","useMemo","console","log","duplicationCheckEn","duplicationCheckPt","duplicatedNames","Object","values","forEach","entry","nameEn","name","en","id","namePt","pt","push","deck","orderBy","keys","map","value","length","warn","get","orderedList","item","Number","filter","nsfw","startsWith","includes","slice","newIds","latestSavedId","newestId","String","Provider","useItemsContext","useContext","ItemCard","editMode","simplified","isEditing","toggleEditMode","onEdit","onModify","onReset","editableItem","currentItem","setEditing","useState","setEditableItem","cloneDeep","originalItem","change","newItem","async","JSON","stringify","e","useItemUpdate","copyToClipboard","useCopyToClipboardFunction","is","title","onClick","extra","ItemPopoverOptions","style","maxWidth","size","actions","undefined","RollbackOutlined","SaveOutlined","EditOutlined","width","direction","className","prefix","LanguageFlag","language","placeholder","variant","defaultValue","readOnly","onChange","target","mode","disabled","options","sort","VerifyIfThing","label","valuePropName","checked","checkedChildren","FireFilled","color","verifyIfThingCheck","memoize","hasThing","hasManufactured","singleWordNameEn","split","singleWordNamePt","result","gap","open","toggleOpen","useToggle","content","type","header","iconId","metadata","level","keyword","snakeCase","toUpperCase","itemId","caption","buildEscapeRoomItemCard","trigger","onOpenChange","icon","MenuOutlined","ItemListing","listingType","page","pagination","useGridPagination","resetter","capitalize","PaginationWrapper","gutter","xs","sm","md","lg","xl","PLACEHOLDER_ITEM","groups","NewItemModal","isModalOpen","handleOk","handleCancel","onOk","onCancel","AddNewItem","setOpenModal","block","ItemListingFilters","addParam","deckOptions","includingOptions","excludingOptions","vertical","SaveButton","dirt","onSave","DownloadButton","sortJsonKeys","reduce","acc","prepareFileForDownload","fileName","v","ItemRandomized","randomItems","setRandomItems","sampleQuantity","setSampleQuantity","min","max","minWidth","sampleSize","menu","key","names","join","ids","wrap","ItemSearch","activeItem","setActiveItem","Fragment","ItemsTypeahead","isPending","onFinish","Boolean","ItemsPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}