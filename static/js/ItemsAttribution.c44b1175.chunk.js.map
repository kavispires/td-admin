{"version":3,"file":"static/js/ItemsAttribution.c44b1175.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Items/ItemsTypeahead.tsx","hooks/useGetFirebaseDoc.ts","hooks/useTDResource.ts","hooks/useUpdateFirebaseDoc.tsx","hooks/useItemQueryParams.ts","hooks/useItemsAttribution.ts","context/ItemsAttributeValuesContext.tsx","components/Items/AttributionValueButtons.tsx","components/Items/ItemAttributeDescription.tsx","components/Common/Stat.tsx","components/Items/ItemAttributeStats.tsx","components/Items/ItemBuildingBlocks.tsx","components/Items/ItemAttributionCard.tsx","components/Items/ItemAttributionNavigation.tsx","components/Items/ItemSamplerCard.tsx","hooks/useItemSampler.ts","components/Common/GoToTopButton.tsx","components/Items/ItemGroupingCard.tsx","hooks/useItemGrouping.ts","components/Items/ItemComparatorCard.tsx","hooks/useItemsComparator.ts","components/Items/ItemAttributionPageContent.tsx","components/Items/ItemAttributionFilersSections.tsx","components/Items/ItemAttributionFilters.tsx","pages/Images/ItemsAttribution.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      Download JSON\n    </Button>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items: Dictionary<Item>;\n  isPending: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items).reduce((acc: Dictionary<string>, entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n      acc[nameEn] = entry.id;\n      acc[namePt] = entry.id;\n\n      return acc;\n    }, {});\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n\n  const handleSearch = (searchText: string) => {\n    setFilteredOptions(\n      options.filter(\n        (option) =>\n          String(option?.value ?? '')\n            .toUpperCase()\n            .indexOf(searchText?.toUpperCase()) !== -1\n      )\n    );\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={options}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={handleSearch}\n      notFoundContent=\"No items found\"\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: UseQueryOptions<any, Error, TData, QueryKey>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? {},\n    hasResponseData,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { useSearchParams } from 'react-router-dom';\n\nexport function useItemQueryParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addQueryParam = (key: string, value: string) => {\n    searchParams.set(key, `${value}`);\n    setSearchParams(searchParams);\n  };\n\n  const removeQueryParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  return {\n    view: searchParams.get('view') ?? 'classifier',\n    setView: (value: string) => setSearchParams({ view: value }),\n    addQueryParam,\n    removeQueryParam,\n    searchParams,\n  };\n}\n","import { App } from 'antd';\nimport { isEmpty, mapKeys, merge, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues } from 'utils';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\n\n/**\n * This is to avoid new items being generated and unused just for the sake of placeholders.\n */\nconst globalNewItemsAttributesValues: Dictionary<ItemAtributesValues> = {};\n\nexport function useItemsAttribution() {\n  const { notification, message } = App.useApp();\n  const queryClient = useQueryClient();\n\n  // Gather basic item data\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes');\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAtributesValues>('items-attribute-values');\n  const firebaseItemsAttributeValuesQuery = useGetFirebaseDoc<\n    Dictionary<string>,\n    Dictionary<ItemAtributesValues>\n  >('data', 'itemsAttributeValues', {\n    select: parseItemsAttributeValuesData,\n  });\n\n  const [modifiedAttributeValues, setModifiedAttributeValues] = useState<Dictionary<ItemAtributesValues>>({});\n\n  const mutation = useUpdateFirebaseDoc('data', 'itemsAttributeValues', {\n    onSuccess: () => {\n      notification.success({\n        message: 'itemsAttributeValues updated',\n      });\n      queryClient.refetchQueries(['firebase', 'data', 'itemsAttributeValues']);\n      setModifiedAttributeValues({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: 'itemsAttributeValues update failed',\n        description: error.message,\n      });\n    },\n  });\n\n  const savedItemsAttributeValues = useMemo(() => {\n    return {\n      ...(tdrItemsAttributesValuesQuery.data ?? {}),\n      ...(firebaseItemsAttributeValuesQuery.data ?? {}),\n    };\n  }, [tdrItemsAttributesValuesQuery.data, firebaseItemsAttributeValuesQuery.data]);\n\n  const isDirty = !isEmpty(modifiedAttributeValues);\n  const addAttributesToUpdate = (id: string, item: ItemAtributesValues) => {\n    setModifiedAttributeValues((prev) => ({ ...prev, [id]: { ...item, updatedAt: Date.now() } }));\n  };\n  const addMultipleAttributesToUpdate = (itemsArr: ItemAtributesValues[]) => {\n    setModifiedAttributeValues((prev) => ({\n      ...prev,\n      ...mapKeys(\n        itemsArr.map((item) => ({ ...item, updatedAt: Date.now() })),\n        'id'\n      ),\n    }));\n  };\n\n  const firebaseData = firebaseItemsAttributeValuesQuery.data;\n\n  const save = () => {\n    mutation.mutate(stringifyItemsAttributeValuesData({ ...firebaseData, ...modifiedAttributeValues }));\n  };\n\n  // Filter items that have the alien group only\n  const availableItemIds = useMemo(() => {\n    const items = tdrItemsQuery.data ?? {};\n    return orderBy(\n      Object.keys(items).filter((id) => {\n        return (items[id]?.groups ?? []).includes('alien');\n      }),\n      (id) => Number(id),\n      'asc'\n    );\n  }, [tdrItemsQuery.data]);\n\n  const getItem = (id: string) => {\n    if ((tdrItemsQuery.data ?? {})?.[id]) {\n      return tdrItemsQuery.data[id];\n    }\n    if (id) {\n      message.info(`Item ${id} not found in TDR. Creating a new item...`);\n    }\n    return getNewItem({ id });\n  };\n\n  const getItemAttributeValues = (id: string) => {\n    const storedValue = savedItemsAttributeValues?.[id] ?? {};\n    const modifiedValue = modifiedAttributeValues[id] ?? {};\n\n    if (isEmpty(storedValue) && isEmpty(modifiedValue)) {\n      globalNewItemsAttributesValues[id] = getNewItemAttributeValues({ id });\n      return globalNewItemsAttributesValues[id];\n    }\n\n    return merge(globalNewItemsAttributesValues?.[id] ?? {}, storedValue, modifiedValue);\n  };\n\n  return {\n    availableItemIds,\n    getItem,\n    getItemAttributeValues,\n    attributes: tdrAttributesQuery.data ?? {},\n    isLoading:\n      tdrItemsQuery.isLoading ||\n      tdrAttributesQuery.isLoading ||\n      tdrItemsAttributesValuesQuery.isLoading ||\n      firebaseItemsAttributeValuesQuery.isLoading,\n    error:\n      tdrItemsQuery.error ||\n      tdrAttributesQuery.error ||\n      tdrItemsAttributesValuesQuery.error ||\n      firebaseItemsAttributeValuesQuery.error,\n    firebaseData,\n    isSaving: mutation.isLoading,\n    save,\n    addAttributesToUpdate,\n    addMultipleAttributesToUpdate,\n    attributesToUpdate: modifiedAttributeValues,\n    isDirty,\n  };\n}\n\nconst parseItemsAttributeValuesData = (data: Dictionary<string>) => {\n  return Object.keys(data).reduce((acc: Dictionary<ItemAtributesValues>, key) => {\n    acc[key] = JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\nconst stringifyItemsAttributeValuesData = (data: Dictionary<ItemAtributesValues>) => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(data[key]);\n    return acc;\n  }, {});\n};\n","import { App } from 'antd';\nimport { useItemsAttribution } from 'hooks/useItemsAttribution';\nimport { isEmpty, orderBy, random } from 'lodash';\nimport { ReactNode, useContext, createContext, useMemo, useState } from 'react';\nimport { Item, ItemAtributesValues, ItemAttribute } from 'types';\nimport { getNewItem, getNewItemAttributeValues, sortJsonKeys } from 'utils';\n\nexport type ItemsAttributeValuesContextType = {\n  getItem: (itemId: string) => Item;\n  getItemAttributeValues: (itemId: string) => ItemAtributesValues;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  isDirty: boolean;\n  itemAttributeValues: ItemAtributesValues;\n  prepareItemsAttributesFileForDownload: () => Dictionary<ItemAtributesValues>;\n  jumpToItem: (direction: string, itemId?: string) => void;\n  activeItem: Item;\n  onAttributeChange: (attributeId: string, value: number) => void;\n  isSaving: boolean;\n  save: () => void;\n  attributesList: ItemAttribute[];\n  availableItemIds: string[];\n  addAttributesToUpdate: (itemId: string, attributes: ItemAtributesValues) => void;\n  addMultipleAttributesToUpdate: (itemsArr: ItemAtributesValues[]) => void;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nconst ItemsAttributeValuesContext = createContext<ItemsAttributeValuesContextType>({\n  getItem: () => getNewItem(),\n  getItemAttributeValues: () => getNewItemAttributeValues(),\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  isDirty: false,\n  jumpToItem: () => {},\n  activeItem: getNewItem(),\n  itemAttributeValues: getNewItemAttributeValues(),\n  onAttributeChange: () => {},\n  isSaving: false,\n  save: () => {},\n  attributesList: [],\n  availableItemIds: [],\n  addAttributesToUpdate: () => {},\n  addMultipleAttributesToUpdate: () => {},\n  prepareItemsAttributesFileForDownload: () => ({}),\n  attributes: {},\n});\n\ntype ItemsAttributeValuesProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsAttributeValuesProvider = ({ children }: ItemsAttributeValuesProviderProps) => {\n  const {\n    getItem,\n    getItemAttributeValues,\n    availableItemIds,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addAttributesToUpdate,\n    isDirty,\n    attributes,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttribution();\n  const { message } = App.useApp();\n\n  const [itemIndex, setItemIndex] = useState(random(0, availableItemIds.length - 1));\n  const activeItem = getItem(availableItemIds[itemIndex]);\n  const itemAttributeValues = getItemAttributeValues(activeItem.id);\n\n  const jumpToItem = (direction: string, itemId?: string) => {\n    if (direction === 'next') {\n      setItemIndex((prev) => (prev + 1) % availableItemIds.length);\n    }\n    if (direction === 'previous') {\n      setItemIndex((prev) => (prev - 1 + availableItemIds.length) % availableItemIds.length);\n    }\n    if (direction === 'random') {\n      setItemIndex(random(0, availableItemIds.length - 1));\n    }\n\n    if (direction === 'first') {\n      setItemIndex(0);\n    }\n    if (direction === 'last') {\n      setItemIndex(availableItemIds.length - 1);\n    }\n    if (direction === 'next10') {\n      setItemIndex((prev) => (prev + 10) % availableItemIds.length);\n    }\n    if (direction === 'previous10') {\n      setItemIndex((prev) => (prev - 10 + availableItemIds.length) % availableItemIds.length);\n    }\n\n    if (direction === 'goTo' && itemId !== undefined) {\n      const index = availableItemIds.indexOf(itemId);\n      if (index !== -1) {\n        setItemIndex(index);\n      } else {\n        message.error(`Item ${itemId} is not available for attribution.`);\n      }\n    }\n  };\n\n  const attributesList = useMemo(() => orderBy(Object.values(attributes), 'name.en', 'asc'), [attributes]);\n\n  const onAttributeChange = (attributeId: string, value: number) => {\n    addAttributesToUpdate(activeItem.id, {\n      ...itemAttributeValues,\n      attributes: {\n        ...itemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const prepareItemsAttributesFileForDownload = () => {\n    return sortJsonKeys(\n      availableItemIds.reduce((acc: Dictionary<ItemAtributesValues>, itemId) => {\n        // Get items and only the ones with attributes\n        const item = getItemAttributeValues(itemId);\n\n        if (isEmpty(item.attributes)) {\n          return acc;\n        }\n\n        // Assess item completion\n        if (Object.keys(item.attributes).length === attributesList.length) {\n          item.complete = true;\n        } else {\n          delete item.complete;\n        }\n\n        acc[item.id] = item;\n\n        return acc;\n      }, {})\n    );\n  };\n\n  return (\n    <ItemsAttributeValuesContext.Provider\n      value={{\n        getItem,\n        getItemAttributeValues,\n        availableItemIds,\n        isLoading,\n        error,\n        hasResponseData: availableItemIds.length > 0 && !isEmpty(attributes),\n        isDirty,\n        itemAttributeValues,\n        jumpToItem,\n        activeItem,\n        onAttributeChange,\n        isSaving,\n        save,\n        attributes,\n        attributesList,\n        addAttributesToUpdate,\n        addMultipleAttributesToUpdate,\n        prepareItemsAttributesFileForDownload,\n      }}\n    >\n      {children}\n    </ItemsAttributeValuesContext.Provider>\n  );\n};\n\nexport const useItemsAttributeValuesContext = () => useContext(ItemsAttributeValuesContext);\n","import { Radio, Tooltip } from 'antd';\nimport { ItemAttribute } from 'types';\n\nimport { CheckCircleFilled, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\nconst attributeOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC },\n];\n\nconst attributeLimitedOptions = [\n  { label: 'Opposite', value: ATTRIBUTE_VALUE.OPPOSITE },\n  { label: 'Unrelated', value: ATTRIBUTE_VALUE.UNRELATED },\n  { label: 'Unclear', value: ATTRIBUTE_VALUE.UNCLEAR },\n  { label: 'Related', value: ATTRIBUTE_VALUE.RELATED },\n  { label: 'Deterministic', value: ATTRIBUTE_VALUE.DETERMINISTIC, disabled: true },\n];\n\ntype AttributionValueButtonsProps = {\n  attribute: ItemAttribute;\n  value?: number;\n  onChange: (attributeId: string, value: number) => void;\n  onlyButtons?: boolean;\n};\n\nexport function AttributionValueButtons({\n  attribute,\n  value,\n  onChange,\n  onlyButtons,\n}: AttributionValueButtonsProps) {\n  if (!attribute) return <></>;\n\n  if (onlyButtons) {\n    return (\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n      />\n    );\n  }\n\n  return (\n    <div key={attribute.id} className=\"attribute-button-container__row\">\n      <span className=\"attribute-button-container__label\">\n        {attribute.name.en}{' '}\n        <Tooltip title={attribute.description.en}>\n          <QuestionCircleOutlined />\n        </Tooltip>\n      </span>\n\n      <Radio.Group\n        options={attribute.limited ? attributeLimitedOptions : attributeOptions}\n        onChange={({ target: { value: v } }) => onChange(attribute.id, v)}\n        value={value}\n        optionType=\"button\"\n        buttonStyle=\"solid\"\n      />\n\n      <span>\n        <CheckCircleFilled style={{ color: value && value > 7 ? 'green' : 'transparent' }} />\n      </span>\n    </div>\n  );\n}\n","import { Flex } from 'antd';\nimport clsx from 'clsx';\nimport { FilterSwitch } from 'components/Common';\nimport { AlienSign } from 'components/Sprites';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { filterMessage, getItemAttributePriorityResponse, parseAttribute } from 'utils';\n\ntype ItemAttributeDescriptionProps = {\n  itemAttributeValues: ItemAtributesValues;\n  attributes: Dictionary<ItemAttribute>;\n};\n\nexport function ItemAttributeDescription({ itemAttributeValues, attributes }: ItemAttributeDescriptionProps) {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const filteredResponse = useMemo(\n    () =>\n      filterMessage(\n        getItemAttributePriorityResponse(itemAttributeValues, attributes),\n        showUnclear,\n        showUnrelated\n      ),\n    [itemAttributeValues, attributes, showUnclear, showUnrelated]\n  );\n\n  const Component = searchParams.get('signs') === 'true' ? AttributeSprite : AttributeText;\n\n  return (\n    <Flex gap={6} vertical>\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Alien Sings\"\n        value={searchParams.get('signs') === 'true'}\n        onChange={(v) => addQueryParam('signs', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <Flex gap={6} wrap=\"wrap\" className=\"item-attribute-value-statement\">\n        {filteredResponse.map((keyVariant, index, arr) => (\n          <Component\n            key={keyVariant}\n            keyVariant={keyVariant}\n            attributes={attributes}\n            firstElement={index === 0}\n            lastElement={index === arr.length - 1}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\ntype AttributeSpriteProps = {\n  keyVariant: string;\n  attributes: Dictionary<ItemAttribute>;\n  firstElement: boolean;\n  lastElement: boolean;\n};\n\nexport function AttributeSprite({\n  keyVariant,\n  attributes,\n  withText,\n}: AttributeSpriteProps & { withText?: boolean }) {\n  const { key, className, text } = parseAttribute(keyVariant);\n\n  return (\n    <Flex vertical align=\"center\">\n      <AlienSign\n        width={50}\n        id={attributes[key].spriteId}\n        className={clsx('item-attribute-alien-sign', `item-attribute-alien-sign--${className}`)}\n      />\n      {withText && (\n        <Flex\n          wrap=\"wrap\"\n          justify=\"center\"\n          align=\"center\"\n          style={{ maxWidth: 50, textAlign: 'center', wordBreak: 'break-word' }}\n        >\n          {text} {attributes[key].name.en.toLowerCase()}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nfunction AttributeText({ keyVariant, attributes, firstElement, lastElement }: AttributeSpriteProps) {\n  const { key, text } = parseAttribute(keyVariant);\n\n  const prefix = firstElement ? \"It's \" : '';\n  const suffix = lastElement ? '.' : ', ';\n\n  return (\n    <>\n      {prefix}\n      {text} {attributes[key].name.en.toLowerCase()}\n      {suffix}\n    </>\n  );\n}\n","import { Tag, Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StatProps = {\n  label: ReactNode;\n  children: ReactNode;\n};\n\nexport function Stat({ label, children }: StatProps) {\n  return (\n    <Typography.Text>\n      {label} <Tag>{children}</Tag>\n    </Typography.Text>\n  );\n}\n","import { CheckCircleFilled, CloseCircleOutlined } from '@ant-design/icons';\nimport { Flex, Progress, Typography } from 'antd';\nimport { Stat } from 'components/Common/Stat';\nimport { useMemo } from 'react';\nimport { ItemAtributesValues, ItemAttribute } from 'types';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\n\ntype ItemAttributeStatsProps = {\n  attributesList: ItemAttribute[];\n  itemAttributeValues: ItemAtributesValues;\n};\n\nexport function ItemAttributeStats({ attributesList, itemAttributeValues }: ItemAttributeStatsProps) {\n  const { completion, isDeterministic, value, isOpposing, relevancy } = useMemo(() => {\n    const total = attributesList.length;\n    const completed = Object.keys(itemAttributeValues.attributes).length;\n    const completion = Math.floor((completed / total) * 100);\n\n    let isDeterministic = false;\n    let isOpposing = false;\n    let unclearCount = 0;\n    const value = Object.values(itemAttributeValues.attributes).reduce((acc: number, v) => {\n      if (v <= 0) {\n        if (v === ATTRIBUTE_VALUE.UNCLEAR) {\n          unclearCount += 1;\n        }\n        if (v === ATTRIBUTE_VALUE.OPPOSITE) {\n          isOpposing = true;\n        }\n        return acc;\n      }\n      if (v === ATTRIBUTE_VALUE.DETERMINISTIC) {\n        isDeterministic = true;\n      }\n\n      return acc + v;\n    }, 0);\n\n    const relevancy = Math.floor(((completed - unclearCount) / total) * 100);\n\n    return { completion, isDeterministic, value, isOpposing, relevancy };\n  }, [attributesList, itemAttributeValues.attributes]);\n\n  return (\n    <div>\n      <Typography.Text strong>Completion</Typography.Text>\n      <Progress percent={completion} size=\"small\" />\n      <Typography.Text strong>Stats</Typography.Text>\n      <Flex vertical>\n        <Stat label=\"Deterministic\">\n          {isDeterministic ? (\n            <CheckCircleFilled style={{ color: 'green' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'red' }} />\n          )}\n        </Stat>\n        <Stat label=\"Opposing\">\n          {isOpposing ? (\n            <CheckCircleFilled style={{ color: 'CornflowerBlue' }} />\n          ) : (\n            <CloseCircleOutlined style={{ color: 'grey' }} />\n          )}\n        </Stat>\n        <Stat label=\"Value\">{value}</Stat>\n        <Stat label=\"Reliability\">{relevancy}%</Stat>\n      </Flex>\n    </div>\n  );\n}\n","import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { Affix, Button, Card, Divider, Flex, Space, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { useEffect, useMemo } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemAttributeDescription } from './ItemAttributeDescription';\nimport { ItemAttributeStats } from './ItemAttributeStats';\nimport { ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemAttributionCard() {\n  const { activeItem, attributesList, itemAttributeValues, onAttributeChange, jumpToItem, attributes } =\n    useItemsAttributeValuesContext();\n  const { searchParams, removeQueryParam } = useItemQueryParams();\n  const queryParamsItemId = searchParams.get('itemId');\n\n  useEffect(() => {\n    if (queryParamsItemId) {\n      removeQueryParam('itemId');\n      jumpToItem('goTo', queryParamsItemId);\n    }\n  }, [queryParamsItemId, jumpToItem, removeQueryParam]);\n\n  const showOnlyUnset = searchParams.get('scope') === 'unset';\n  const filteredAttributesList = useMemo(\n    () =>\n      showOnlyUnset\n        ? attributesList.filter((attribute) => !itemAttributeValues.attributes[attribute.id])\n        : attributesList,\n    [showOnlyUnset, activeItem.id] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  if (!activeItem)\n    return (\n      <Card>\n        <Typography.Text type=\"secondary\">\n          No item selected.{' '}\n          <Button size=\"small\" type=\"primary\" onClick={() => jumpToItem('random')}>\n            Random Item\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div className=\"item-attribution-card\" key={`${activeItem.id}`}>\n        <Affix offsetTop={120} className=\"item-attribution-card__item\">\n          <Flex vertical gap={6}>\n            <ItemSprite item={activeItem} width={150} />\n            <ItemId item={activeItem} />\n            <ItemName item={activeItem} language=\"en\" />\n            <ItemName item={activeItem} language=\"pt\" />\n\n            <Divider className=\"my-2\" />\n            <ItemAttributeStats attributesList={attributesList} itemAttributeValues={itemAttributeValues} />\n            <Divider className=\"my-2\" />\n            <Typography.Text type=\"secondary\">\n              <ItemAttributeDescription itemAttributeValues={itemAttributeValues} attributes={attributes} />\n            </Typography.Text>\n          </Flex>\n        </Affix>\n\n        <Space size=\"small\" direction=\"vertical\" className=\"my-4 attribute-button-container\" wrap>\n          {filteredAttributesList.map((attribute, index) => (\n            <AttributionValueButtons\n              key={attribute.id}\n              attribute={attribute}\n              value={itemAttributeValues.attributes[attribute.id]}\n              onChange={onAttributeChange}\n            />\n          ))}\n        </Space>\n      </div>\n    </Card>\n  );\n}\n","import { Button, Popover } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { Item } from 'types';\n\nimport {\n  DoubleLeftOutlined,\n  DoubleRightOutlined,\n  LeftOutlined,\n  RightOutlined,\n  VerticalLeftOutlined,\n  VerticalRightOutlined,\n} from '@ant-design/icons';\n\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nexport function ItemAttributionNavigation() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <Button.Group className=\"my-4\">\n      <Button onClick={() => jumpToItem('first')} icon={<VerticalRightOutlined />}>\n        First\n      </Button>\n      <Button onClick={() => jumpToItem('previous10')} icon={<DoubleLeftOutlined />}>\n        Previous 10\n      </Button>\n      <Button onClick={() => jumpToItem('previous')} icon={<LeftOutlined />}>\n        Previous\n      </Button>\n      <Button onClick={() => jumpToItem('next')}>\n        Next <RightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('next10')}>\n        Next 10 <DoubleRightOutlined />\n      </Button>\n      <Button onClick={() => jumpToItem('last')}>\n        Last <VerticalLeftOutlined />\n      </Button>\n      <Popover content={<GoToItemPopOverContent />} title=\"Title\">\n        <Button>Go To</Button>\n      </Popover>\n    </Button.Group>\n  );\n}\n\nfunction GoToItemPopOverContent() {\n  const tdrItemsQuery = useTDResource<Item>('items');\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  return (\n    <ItemsTypeahead\n      items={tdrItemsQuery.data ?? {}}\n      isPending={false}\n      onFinish={(itemId) => jumpToItem('goTo', itemId)}\n    />\n  );\n}\n","import { Button, Card, Divider, Flex, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemSampler } from 'hooks/useItemSampler';\nimport { isEmpty } from 'lodash';\nimport { Fragment } from 'react';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemSamplerCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { sampleIds, attribute, onGetSample, updateAttributeValue } = useItemSampler();\n\n  if (isEmpty(sampleIds) && isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">\n          No sample has been generated. Tweak options and{' '}\n          <Button size=\"small\" type=\"primary\" onClick={onGetSample}>\n            Get Sample\n          </Button>\n        </Typography.Text>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      className=\"my-4\"\n      title={<Typography.Text>{attribute?.name.en}</Typography.Text>}\n      actions={[\n        <Button type=\"primary\" block ghost onClick={onGetSample}>\n          Get New Sample\n        </Button>,\n      ]}\n      extra={\n        <Button type=\"primary\" size=\"small\" onClick={onGetSample}>\n          Get New Sample\n        </Button>\n      }\n    >\n      <Flex vertical gap={6}>\n        {sampleIds.map((itemId) => {\n          const itemAttributes = getItemAttributeValues(itemId);\n          const item = getItem(itemId);\n\n          return (\n            <Fragment key={`${itemId}-${itemAttributes.updatedAt}`}>\n              <Flex gap={6}>\n                <ItemSprite item={item} width={75} />\n                <Flex vertical gap={6}>\n                  <Flex gap={6}>\n                    <ItemId item={item} />\n                    <ItemGoTo item={item} />\n                  </Flex>\n                  <ItemName item={item} language=\"en\" />\n                  <ItemName item={item} language=\"pt\" />\n                </Flex>\n                <AttributionValueButtons\n                  attribute={attribute!}\n                  value={itemAttributes.attributes[attribute!.id]}\n                  onChange={(attributeId: string, value: number) =>\n                    updateAttributeValue(item.id, attributeId, value)\n                  }\n                />\n              </Flex>\n              <Divider className=\"my-1\" />\n            </Fragment>\n          );\n        })}\n      </Flex>\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { sample as lodashSample, shuffle } from 'lodash';\nimport { useState } from 'react';\nimport { ItemAttribute } from 'types';\n\nimport { useItemQueryParams } from './useItemQueryParams';\n\nexport function useItemSampler() {\n  const { attributesList, availableItemIds, addAttributesToUpdate, getItemAttributeValues } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n\n  const [sampleIds, setSampleIds] = useState<string[]>([]);\n  const [attribute, setAttribute] = useState<ItemAttribute>();\n\n  // Create sample\n  const onGetSample = () => {\n    const attributeKey = searchParams.get('attribute') ?? lodashSample(attributesList)?.id ?? 'ali';\n    const selectedAttribute =\n      attributesList.find((a) => a.id === attributeKey) ?? lodashSample(attributesList);\n    const sampleSize = Number(searchParams.get('size')) || 9;\n\n    const selected: string[] = [];\n    const options = shuffle(availableItemIds);\n\n    for (let i = 0; i < options.length; i++) {\n      if (selected.length === sampleSize) break;\n\n      const itemId = options[i];\n      const currentAttributeValues = getItemAttributeValues(itemId).attributes;\n\n      if (!currentAttributeValues[attributeKey]) {\n        selected.push(itemId);\n      }\n    }\n\n    setAttribute(selectedAttribute);\n    setSampleIds(selected);\n  };\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  return {\n    sampleIds,\n    attribute,\n    onGetSample,\n    updateAttributeValue,\n  };\n}\n","import { VerticalAlignTopOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { ButtonProps } from 'antd/lib/button';\nimport { useEffect, useState } from 'react';\n\nexport function GoToTopButton(props: ButtonProps) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleScroll = () => {\n    setIsVisible(window.pageYOffset > 300);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <Button\n      className={`go-to-top-button ${isVisible ? 'visible' : ''}`}\n      onClick={scrollToTop}\n      icon={<VerticalAlignTopOutlined />}\n      {...props}\n    >\n      Go to Top\n    </Button>\n  );\n}\n","import { Button, Card, Flex, Pagination, Popconfirm, Typography } from 'antd';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemGrouping } from 'hooks/useItemGrouping';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMedia } from 'react-use';\n\nimport { AttributionValueButtons } from './AttributionValueButtons';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemGroupingCard() {\n  const { getItem, getItemAttributeValues } = useItemsAttributeValuesContext();\n  const { attribute, pageIds, group, updateAttributeValue, updatePageItemsAsUnrelated, pagination } =\n    useItemGrouping();\n  const { searchParams } = useItemQueryParams();\n  const isNarrow = useMedia('(max-width: 1024px)');\n\n  if (isEmpty(attribute)) {\n    return (\n      <Card className=\"my-4\">\n        <Typography.Text type=\"secondary\">No group attribute has been selected.</Typography.Text>\n      </Card>\n    );\n  }\n\n  const paginationComponent = (\n    <Pagination\n      key=\"pagination\"\n      onChange={pagination.onChange}\n      current={pagination.current}\n      total={pagination.total}\n      pageSizeOptions={pagination.pageSizeOptions}\n      pageSize={pagination.pageSize}\n      onShowSizeChange={pagination.onShowSizeChange}\n    />\n  );\n\n  const isUnsetSet = searchParams.get('scope') === 'unset' || !searchParams.get('scope');\n  const unrelateButton = isUnsetSet && (\n    <Popconfirm\n      key=\"unrelate-button\"\n      title={`Are you sure everything is unrelated to ${attribute.name.en}?`}\n      onConfirm={updatePageItemsAsUnrelated}\n    >\n      <Button type=\"primary\" danger disabled={pageIds.length === 0}>\n        Unrelate Unset Items on Page\n      </Button>\n    </Popconfirm>\n  );\n  return (\n    <Card\n      className=\"my-4\"\n      title={\n        <Typography.Text>\n          {attribute?.name.en} ({group.length})\n        </Typography.Text>\n      }\n      extra={paginationComponent}\n      actions={[unrelateButton, <GoToTopButton key=\"go-to-top\" />, paginationComponent].filter(Boolean)}\n    >\n      {pageIds.map((itemId) => {\n        const itemAttributes = getItemAttributeValues(itemId);\n        const item = getItem(itemId);\n\n        return (\n          <Card.Grid\n            key={`${itemId}-${itemAttributes.updatedAt}`}\n            style={{ width: isNarrow ? '50%' : '25%' }}\n          >\n            <Flex gap={6}>\n              <Flex vertical gap={6}>\n                <ItemSprite item={item} width={75} />\n                <ItemId item={item} />\n                <ItemGoTo item={item} />\n                <ItemName item={item} language=\"en\" />\n                <ItemName item={item} language=\"pt\" />\n              </Flex>\n              <AttributionValueButtons\n                attribute={attribute!}\n                value={itemAttributes.attributes[attribute!.id]}\n                onlyButtons\n                onChange={(attributeId: string, value: number) =>\n                  updateAttributeValue(item.id, attributeId, value)\n                }\n              />\n            </Flex>\n          </Card.Grid>\n        );\n      })}\n    </Card>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useMemo, useState } from 'react';\n\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport { orderBy } from 'lodash';\n\nexport function useItemGrouping() {\n  const {\n    attributesList,\n    addAttributesToUpdate,\n    getItemAttributeValues,\n    availableItemIds,\n    addMultipleAttributesToUpdate,\n  } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  const attributeKey = searchParams.get('attribute') ?? 'ali';\n  const scope = searchParams.get('scope') ?? 'unset';\n\n  const page = searchParams.get('page') ?? '1';\n  const pageSize = searchParams.get('pageSize') ?? '12';\n\n  const [previousAttribute, setPreviousAttribute] = useState<string>('ali');\n  const [previousScope, setPreviousScope] = useState<string>('unset');\n\n  const group = useMemo(() => {\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    const scopeValue =\n      scope === 'unset' ? undefined : ATTRIBUTE_VALUE[scope.toUpperCase() as keyof typeof ATTRIBUTE_VALUE];\n\n    const filteredItemIds = itemsAttributes\n      .filter((item) => item.attributes?.[attributeKey] === scopeValue)\n      .map((item) => item.id);\n\n    return orderBy(\n      filteredItemIds,\n      [(id) => getItemAttributeValues(id)?.updatedAt, (id) => Number(id)],\n      ['desc', 'asc']\n    );\n  }, [attributeKey, scope]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const pageIds = useMemo(() => {\n    if (previousAttribute !== attributeKey || previousScope !== scope) {\n      setPreviousAttribute(attributeKey);\n      setPreviousScope(scope);\n      addQueryParam('page', '1');\n      return group.slice(0, Number(pageSize));\n    }\n\n    const start = (Number(page) - 1) * Number(pageSize);\n    const end = start + Number(pageSize);\n\n    return group.slice(start, end);\n  }, [page, pageSize, group]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attribute = attributesList.find((a) => a.id === attributeKey);\n\n  const updateAttributeValue = (itemId: string, attributeId: string, value: number) => {\n    const currentItemAttributeValues = getItemAttributeValues(itemId);\n\n    addAttributesToUpdate(itemId, {\n      ...currentItemAttributeValues,\n      attributes: {\n        ...currentItemAttributeValues.attributes,\n        [attributeId]: value,\n      },\n    });\n  };\n\n  const updatePageItemsAsUnrelated = () => {\n    addMultipleAttributesToUpdate(\n      pageIds.map((id) => {\n        const prev = getItemAttributeValues(id);\n        if (!prev.attributes[attributeKey]) {\n          prev.attributes[attributeKey] = ATTRIBUTE_VALUE.UNRELATED;\n        }\n\n        return prev;\n      })\n    );\n  };\n\n  return {\n    group,\n    pageIds,\n    attribute,\n    updateAttributeValue,\n    updatePageItemsAsUnrelated,\n    pagination: {\n      total: group.length,\n      current: Number(page),\n      pageSize: Number(pageSize),\n      onChange: (page: number) => addQueryParam('page', String(page)),\n      onShowSizeChange: (_: number, pageSize: number) => addQueryParam('pageSize', String(pageSize)),\n      pageSizeOptions: [12, 24, 48, 96],\n    },\n  };\n}\n","import { Flex, Table, TableColumnsType, Typography } from 'antd';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { ItemMessageObject, useItemsComparator } from 'hooks/useItemsComparator';\nimport { Item } from 'types';\n\nimport { AttributeSprite } from './ItemAttributeDescription';\nimport { ItemGoTo, ItemId, ItemName, ItemSprite } from './ItemBuildingBlocks';\n\nexport function ItemComparatorCard() {\n  const { attributes } = useItemsAttributeValuesContext();\n  const { itemMessages, grouping } = useItemsComparator();\n\n  const columns: TableColumnsType<ItemMessageObject> = [\n    {\n      title: 'Item Id',\n      dataIndex: 'item',\n      key: 'id',\n      render: (item: Item) => (\n        <div>\n          <ItemId item={item} />\n          <ItemGoTo item={item} />\n        </div>\n      ),\n      sorter: (a, b) => Number(a.item.id) - Number(b.item.id),\n    },\n    {\n      title: 'Sprite',\n      dataIndex: 'item',\n      key: 'sprite',\n      render: (item: Item) => <ItemSprite item={item} width={75} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'item',\n      key: 'name',\n      render: (item: Item) => (\n        <>\n          <ItemName item={item} language=\"en\" />\n          <ItemName item={item} language=\"pt\" />\n        </>\n      ),\n      sorter: (a, b) => a.item.name.en.localeCompare(b.item.name.en),\n    },\n    {\n      title: 'Address',\n      dataIndex: 'message',\n      key: 'message',\n      render: (message: string[], { item }) => (\n        <Flex gap={6}>\n          {message.map((keyVariant, index, arr) => (\n            <AttributeSprite\n              key={`${keyVariant}-${item.id}`}\n              keyVariant={keyVariant}\n              attributes={attributes}\n              firstElement={index === 0}\n              lastElement={index === arr.length - 1}\n              withText\n            />\n          ))}\n        </Flex>\n      ),\n      sorter: (a, b) => a.message.join(' ').localeCompare(b.message.join(' ')),\n    },\n    {\n      title: 'Complete',\n      dataIndex: 'itemAttributesValues',\n      key: 'complete',\n      render: (itemAttributesValues: { complete: boolean }) => (itemAttributesValues.complete ? 'Yes' : 'No'),\n    },\n    {\n      title: 'Identical',\n      dataIndex: 'message',\n      key: 'identical',\n      render: (message: string[]) => {\n        const group = grouping[message.join(' ')] ?? [];\n        return <>{group.length > 1 ? group.length : ''}</>;\n      },\n      sorter: (a, b) => {\n        const groupA = grouping[a.message.join(' ')] ?? [];\n        const groupB = grouping[b.message.join(' ')] ?? [];\n        return groupB.length - groupA.length;\n      },\n    },\n  ];\n\n  return (\n    <div className=\"my-4\">\n      <Typography.Title level={5}>Item Comparator</Typography.Title>\n      <Table dataSource={itemMessages} columns={columns} />\n    </div>\n  );\n}\n","import { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { keyBy, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { filterMessage, getItemAttributePriorityResponse } from 'utils';\nimport { useItemQueryParams } from './useItemQueryParams';\nimport { Item, ItemAtributesValues } from 'types';\n\nexport type ItemMessageObject = {\n  item: Item;\n  itemAttributesValues: ItemAtributesValues;\n  message: string[];\n  fullMessage: string[];\n};\n\nexport function useItemsComparator() {\n  const { attributes, getItemAttributeValues, availableItemIds, getItem, isLoading } =\n    useItemsAttributeValuesContext();\n  const { searchParams } = useItemQueryParams();\n  const showComplete = searchParams.get('showComplete') === 'true';\n  const showUnclear = searchParams.get('showUnclear') === 'true';\n  const showUnrelated = searchParams.get('showUnrelated') === 'true';\n\n  const { itemMessages, itemMessagesDict, grouping } = useMemo(() => {\n    if (isLoading) {\n      const itemMessages: ItemMessageObject[] = [];\n      return {\n        itemMessages,\n        itemMessagesDict: {},\n        grouping: {},\n      };\n    }\n    console.log('useItemsComparator');\n\n    const itemMessages = orderBy(\n      availableItemIds\n        .map((id) => {\n          const itemAttributesValues = getItemAttributeValues(id);\n          const itemMessage = getItemAttributePriorityResponse(itemAttributesValues, attributes);\n          return {\n            item: getItem(id),\n            itemAttributesValues,\n            message: filterMessage(itemMessage, showUnclear, showUnrelated),\n            fullMessage: itemMessage,\n          };\n        })\n        .filter(({ itemAttributesValues }) => (showComplete ? itemAttributesValues.complete : true)),\n      ['message'],\n      ['asc']\n    );\n\n    const grouping = itemMessages.reduce((acc: Dictionary<string[]>, { message, item: { id } }) => {\n      const key = message.join(' ');\n\n      if (acc[key] === undefined) {\n        acc[key] = [];\n      }\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    const moreThanOne = Object.values(grouping).filter((ids) => ids.length > 1);\n    if (moreThanOne.length > 0) {\n      console.log('More than one', moreThanOne);\n    }\n    console.log(grouping);\n\n    return {\n      itemMessages,\n      itemMessagesDict: keyBy(itemMessages, 'item.id'),\n      grouping,\n    };\n  }, [\n    attributes,\n    availableItemIds,\n    getItemAttributeValues,\n    getItem,\n    isLoading,\n    showComplete,\n    showUnclear,\n    showUnrelated,\n  ]);\n\n  return {\n    itemMessages,\n    itemMessagesDict,\n    grouping,\n  };\n}\n","import { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { ItemAttributionCard } from './ItemAttributionCard';\nimport { ItemAttributionNavigation } from './ItemAttributionNavigation';\nimport { Empty, Flex } from 'antd';\nimport { ItemSamplerCard } from './ItemSamplerCard';\nimport { ItemGroupingCard } from './ItemGroupingCard';\nimport { GoToTopButton } from 'components/Common/GoToTopButton';\nimport { ItemComparatorCard } from './ItemComparatorCard';\n\nexport function ItemAttributionPageContent() {\n  const { view } = useItemQueryParams();\n\n  if (view === 'classifier') {\n    return (\n      <>\n        <ItemAttributionNavigation />\n        <ItemAttributionCard />\n        <Flex justify=\"flex-end\" className=\"my-4\">\n          <GoToTopButton />\n        </Flex>\n      </>\n    );\n  }\n\n  if (view === 'sampler') {\n    return <ItemSamplerCard />;\n  }\n\n  if (view === 'grouping') {\n    return <ItemGroupingCard />;\n  }\n\n  if (view === 'comparator') {\n    return <ItemComparatorCard />;\n  }\n\n  return <Empty className=\"my-10\" description=\"Unknown view has been selected\" />;\n}\n","import { Button, Divider, Flex, Typography } from 'antd';\nimport { FilterNumber, FilterSelect, FilterSwitch } from 'components/Common';\nimport { Stat } from 'components/Common/Stat';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\nimport { isEmpty } from 'lodash';\nimport { useMemo } from 'react';\nimport { ATTRIBUTE_GROUP_VALUES } from 'utils/constants';\n\nexport function ItemAttributionStats() {\n  const { getItemAttributeValues, availableItemIds, attributesList } = useItemsAttributeValuesContext();\n\n  const {\n    total,\n    complete,\n    completionPercentage,\n    hasDataCount,\n    initiatedPercentage,\n    progress,\n    progressTotal,\n    currentProgress,\n  } = useMemo(() => {\n    const total = availableItemIds.length;\n    let someData = 0;\n    let complete = 0;\n    let currentProgress = 0;\n    const itemsAttributes = availableItemIds.map((id) => getItemAttributeValues(id));\n    itemsAttributes.forEach(({ complete: isComplete, attributes }) => {\n      if (!isEmpty(attributes)) {\n        someData += 1;\n      }\n      if (Object.values(attributes).length === attributesList.length) {\n        complete += 1;\n      }\n\n      currentProgress += Object.values(attributes).length;\n    });\n\n    const progressTotal = Object.values(attributesList).length * availableItemIds.length;\n\n    return {\n      total,\n      complete,\n      completionPercentage: total > 0 ? ((complete / total) * 100).toFixed(1) : 0,\n      hasDataCount: someData,\n      initiatedPercentage: total > 0 ? Math.floor((someData / total) * 100) : 0,\n      progress: ((currentProgress / progressTotal) * 100).toFixed(1),\n      currentProgress,\n      progressTotal,\n    };\n  }, [attributesList, availableItemIds, getItemAttributeValues]);\n\n  return (\n    <>\n      <Flex vertical>\n        <Typography.Text strong className=\"mb-2\">\n          Items Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{total}</Stat>\n        <Stat label=\"Complete\">\n          {complete} ({completionPercentage}%)\n        </Stat>\n        <Stat label=\"Initiated\">\n          {hasDataCount} ({initiatedPercentage}%)\n        </Stat>\n        <Typography.Text strong className=\"mt-4 mb-2\">\n          Attributes Stats\n        </Typography.Text>\n        <Stat label=\"Total\">{progressTotal}</Stat>\n        <Stat label=\"Set\">{currentProgress}</Stat>\n        <Stat label=\"Progress\">{progress}%</Stat>\n      </Flex>\n      <Divider />\n    </>\n  );\n}\n\nexport function ItemAttributionClassifierFilters() {\n  const { jumpToItem } = useItemsAttributeValuesContext();\n  const { searchParams, addQueryParam } = useItemQueryParams();\n\n  return (\n    <>\n      <Button block onClick={() => jumpToItem('random')} type=\"primary\">\n        Random Item\n      </Button>\n      <FilterSwitch\n        label=\"Unset Only\"\n        value={searchParams.get('scope') === 'unset'}\n        onChange={(value) => addQueryParam('scope', value ? 'unset' : '')}\n        className=\"mt-4\"\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionSamplerFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return [\n      { label: 'Random Attribute', value: 'random' },\n      ...attributesList.map(({ id, name }) => ({ label: name.en, value: id })),\n    ];\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Sampler Attribute\"\n        value={searchParams.get('attribute') || 'random'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n      <FilterNumber\n        label=\"Sample Size\"\n        value={Number(searchParams.get('size') || 9)}\n        onChange={(v) => addQueryParam('size', String(v))}\n        min={3}\n        max={21}\n        step={3}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionGroupingFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  const { attributesList } = useItemsAttributeValuesContext();\n\n  const options = useMemo(() => {\n    return attributesList.map(({ id, name }) => ({ label: name.en, value: id }));\n  }, [attributesList]);\n\n  return (\n    <>\n      <FilterSelect\n        label=\"Attribute\"\n        value={searchParams.get('attribute') || 'ali'}\n        onChange={(v) => addQueryParam('attribute', v)}\n        options={options}\n      />\n\n      <FilterSelect\n        label=\"Scope\"\n        value={searchParams.get('scope') || 'unset'}\n        onChange={(v) => addQueryParam('scope', v)}\n        options={[{ value: 'unset', label: 'Unset' }, ...ATTRIBUTE_GROUP_VALUES]}\n      />\n\n      <FilterSelect\n        label=\"Results per page\"\n        value={searchParams.get('pageSize') || 12}\n        onChange={(v) => addQueryParam('pageSize', v)}\n        options={[12, 24, 48, 96]}\n      />\n    </>\n  );\n}\n\nexport function ItemAttributionComparatorFilters() {\n  const { searchParams, addQueryParam } = useItemQueryParams();\n  return (\n    <>\n      <FilterSwitch\n        label=\"Only Complete\"\n        value={searchParams.get('showComplete') === 'true'}\n        onChange={(v) => addQueryParam('showComplete', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unrelated\"\n        value={searchParams.get('showUnrelated') === 'true'}\n        onChange={(v) => addQueryParam('showUnrelated', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Show Unclear\"\n        value={searchParams.get('showUnclear') === 'true'}\n        onChange={(v) => addQueryParam('showUnclear', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n    </>\n  );\n}\n","import { Button, Divider, Flex } from 'antd';\nimport { FilterSelect } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsAttributeValuesContext } from 'context/ItemsAttributeValuesContext';\nimport { useItemQueryParams } from 'hooks/useItemQueryParams';\n\nimport {\n  ItemAttributionClassifierFilters,\n  ItemAttributionComparatorFilters,\n  ItemAttributionGroupingFilters,\n  ItemAttributionSamplerFilters,\n  ItemAttributionStats,\n} from './ItemAttributionFilersSections';\n\nexport function ItemAttributionFilters() {\n  const { isDirty, save, prepareItemsAttributesFileForDownload } = useItemsAttributeValuesContext();\n\n  const { view, setView } = useItemQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <Button block danger type=\"primary\" disabled={!isDirty} onClick={save} size=\"large\">\n          Save\n        </Button>\n        <DownloadButton\n          data={() => prepareItemsAttributesFileForDownload()}\n          fileName=\"items-attribute-values.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <ItemAttributionStats />\n\n      <FilterSelect\n        label=\"View\"\n        value={view}\n        onChange={setView}\n        options={['classifier', 'sampler', 'grouping', 'comparator']}\n      />\n      <Divider />\n\n      {view === 'classifier' && <ItemAttributionClassifierFilters />}\n      {view === 'sampler' && <ItemAttributionSamplerFilters />}\n      {view === 'grouping' && <ItemAttributionGroupingFilters />}\n      {view === 'comparator' && <ItemAttributionComparatorFilters />}\n    </SiderContent>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemAttributionPageContent } from 'components/Items/ItemAttributionPageContent';\nimport { ItemAttributionFilters } from 'components/Items/ItemAttributionFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport {\n  ItemsAttributeValuesProvider,\n  useItemsAttributeValuesContext,\n} from 'context/ItemsAttributeValuesContext';\n\nfunction ItemsAttributionPage() {\n  const { isLoading, error, hasResponseData } = useItemsAttributeValuesContext();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Attribution\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemAttributionFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <ItemAttributionPageContent />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction ItemsAttribution() {\n  return (\n    <ItemsAttributeValuesProvider>\n      <ItemsAttributionPage />\n    </ItemsAttributeValuesProvider>\n  );\n}\n\nexport default ItemsAttribution;\n"],"names":["DownloadButton","data","fileName","loading","props","onClick","downloadObjectAsFile","ItemsTypeahead","items","isPending","style","size","placeholder","allowClear","onFinish","rest","namesDict","options","useMemo","console","log","Object","values","reduce","acc","entry","nameEn","name","en","id","namePt","pt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","width","filterOption","inputValue","option","String","toUpperCase","indexOf","onSearch","searchText","filter","notFoundContent","onSelect","key","undefined","onPressEnter","length","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useTDResource","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","hasResponseData","isEmpty","updateQueryFunction","updateDoc","useUpdateFirebaseDoc","useMutation","mutationFn","useItemQueryParams","searchParams","setSearchParams","useSearchParams","view","get","setView","addQueryParam","set","removeQueryParam","delete","globalNewItemsAttributesValues","parseItemsAttributeValuesData","JSON","parse","stringifyItemsAttributeValuesData","stringify","ItemsAttributeValuesContext","createContext","getItem","getNewItem","getItemAttributeValues","getNewItemAttributeValues","isLoading","error","isDirty","jumpToItem","activeItem","itemAttributeValues","onAttributeChange","isSaving","save","attributesList","availableItemIds","addAttributesToUpdate","addMultipleAttributesToUpdate","prepareItemsAttributesFileForDownload","attributes","ItemsAttributeValuesProvider","children","notification","message","App","queryClient","useQueryClient","tdrItemsQuery","tdrAttributesQuery","tdrItemsAttributesValuesQuery","firebaseItemsAttributeValuesQuery","select","modifiedAttributeValues","setModifiedAttributeValues","mutation","onSuccess","success","refetchQueries","onError","description","savedItemsAttributeValues","firebaseData","groups","includes","Number","info","storedValue","modifiedValue","merge","mutate","item","prev","updatedAt","Date","now","itemsArr","mapKeys","attributesToUpdate","useItemsAttribution","itemIndex","setItemIndex","random","Provider","direction","itemId","index","attributeId","sortJsonKeys","complete","useItemsAttributeValuesContext","useContext","attributeOptions","label","ATTRIBUTE_VALUE","attributeLimitedOptions","disabled","AttributionValueButtons","attribute","onChange","onlyButtons","limited","target","v","optionType","buttonStyle","className","title","QuestionCircleOutlined","CheckCircleFilled","color","ItemAttributeDescription","showUnclear","showUnrelated","filteredResponse","filterMessage","getItemAttributePriorityResponse","Component","AttributeSprite","AttributeText","gap","vertical","wrap","keyVariant","arr","firstElement","lastElement","withText","text","parseAttribute","align","spriteId","clsx","justify","maxWidth","textAlign","wordBreak","prefix","suffix","Stat","ItemAttributeStats","completion","isDeterministic","isOpposing","relevancy","total","completed","Math","floor","unclearCount","strong","percent","CloseCircleOutlined","ItemSprite","ItemId","nsfw","FireFilled","IdcardOutlined","variant","readOnly","ItemName","language","LanguageFlag","ItemGoTo","shape","ItemAttributionCard","queryParamsItemId","useEffect","showOnlyUnset","filteredAttributesList","offsetTop","type","ItemAttributionNavigation","icon","VerticalRightOutlined","DoubleLeftOutlined","LeftOutlined","RightOutlined","DoubleRightOutlined","VerticalLeftOutlined","content","GoToItemPopOverContent","ItemSamplerCard","sampleIds","onGetSample","updateAttributeValue","setSampleIds","setAttribute","attributeKey","lodashSample","selectedAttribute","find","a","sampleSize","selected","shuffle","i","push","currentItemAttributeValues","useItemSampler","actions","block","ghost","extra","itemAttributes","Fragment","GoToTopButton","isVisible","setIsVisible","handleScroll","window","pageYOffset","addEventListener","removeEventListener","scrollTo","top","behavior","VerticalAlignTopOutlined","ItemGroupingCard","pageIds","group","updatePageItemsAsUnrelated","pagination","scope","page","pageSize","previousAttribute","setPreviousAttribute","previousScope","setPreviousScope","itemsAttributes","scopeValue","filteredItemIds","slice","start","end","current","onShowSizeChange","_","pageSizeOptions","useItemGrouping","isNarrow","useMedia","paginationComponent","unrelateButton","onConfirm","danger","Boolean","ItemComparatorCard","itemMessages","grouping","showComplete","itemMessagesDict","itemAttributesValues","itemMessage","fullMessage","join","moreThanOne","ids","keyBy","useItemsComparator","columns","dataIndex","render","sorter","b","localeCompare","groupA","level","dataSource","ItemAttributionPageContent","ItemAttributionStats","completionPercentage","hasDataCount","initiatedPercentage","progress","progressTotal","currentProgress","someData","forEach","isComplete","toFixed","ItemAttributionClassifierFilters","ItemAttributionSamplerFilters","min","max","step","ItemAttributionGroupingFilters","ATTRIBUTE_GROUP_VALUES","ItemAttributionComparatorFilters","ItemAttributionFilters","ItemsAttributionPage","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}