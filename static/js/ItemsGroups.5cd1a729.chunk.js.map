{"version":3,"file":"static/js/ItemsGroups.5cd1a729.chunk.js","mappings":"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","sources":["components/Items/ItemBuildingBlocks.tsx","components/Items/Groups/ItemGroupsCard.tsx","components/Items/Groups/ItemsGroupsContent.tsx","components/Items/Groups/ItemsGroupsFilters.tsx","pages/Items/ItemsGroups.tsx"],"sourcesContent":["import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { Card, Select, Space, Typography } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { Item as ItemT } from 'types';\n\nimport { ItemName, ItemNsfw, ItemSprite } from '../ItemBuildingBlocks';\n\ntype ItemGroupsCardProps = {\n  item: ItemT;\n  itemGroups?: string[];\n  groupsTypeahead: { label: string; value: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nexport function ItemGroupsCard({\n  item,\n  itemGroups,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemGroupsCardProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Card\n      title={\n        <>\n          <Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>\n          <ItemNsfw item={item} />\n        </>\n      }\n      style={{ maxWidth: 250 }}\n    >\n      <ItemSprite item={item} width={75} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <ItemName item={item} language=\"en\" />\n        <ItemName item={item} language=\"pt\" />\n\n        <Select\n          mode=\"tags\"\n          style={{ width: '100%' }}\n          placeholder=\"Select a group\"\n          defaultValue={itemGroups}\n          options={groupsTypeahead}\n          showSearch\n          size=\"small\"\n          key={String(itemGroups)}\n          onChange={(groups) => onUpdateItemGroups(item.id, groups)}\n        />\n      </Space>\n    </Card>\n  );\n}\n","import { Col, Drawer, Flex, Row, Table, TableProps, Typography } from 'antd';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item as ItemT, ItemGroup } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { ItemGroupsCard } from './ItemGroupsCard';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { TransparentButton } from 'components/Common';\nimport { ItemsTypeahead } from '../ItemsTypeahead';\nimport { CopyIdsButton } from '../CopyIdsButton';\n\nexport function ItemsGroupsContent({ data, addEntryToUpdate }: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { is, queryParams } = useQueryParams();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const grousByItem = useMemo(() => {\n    return Object.values(data ?? []).reduce((acc: Record<string, string[]>, group) => {\n      if (!group.itemsIds) {\n        console.warn('Group without items', group);\n      }\n      group.itemsIds.forEach((itemId) => {\n        if (!acc[itemId]) {\n          acc[itemId] = [];\n        }\n        acc[itemId].push(group.id);\n      });\n\n      return acc;\n    }, {});\n  }, [data]);\n\n  const groupsTypeahead = useMemo(\n    () =>\n      orderBy(\n        Object.keys(data).map((id) => ({ label: id, value: id })),\n        'label'\n      ),\n    [data]\n  );\n\n  const onUpdateItemGroups = (itemId: string, groupIds: string[]) => {\n    // Compare previous groups in items with new groups\n    const previousGroups = grousByItem[itemId] ?? [];\n    const groupsToAdd = groupIds.filter((id) => !previousGroups.includes(id));\n    const groupsToRemove = previousGroups.filter((id) => !groupIds.includes(id));\n\n    // Add item to groups\n    groupsToAdd.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates([...(data[groupId]?.itemsIds ?? []), itemId]),\n      });\n    });\n\n    // Remove item from groups\n    groupsToRemove.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates(data[groupId]?.itemsIds.filter((id) => id !== itemId)),\n      });\n    });\n  };\n\n  const onUpdateGroupItems = (groupId: string, itemIds: string[]) => {\n    addEntryToUpdate(groupId, {\n      id: groupId,\n      itemsIds: removeDuplicates(itemIds),\n    });\n  };\n\n  return (\n    <>\n      {(is('display', 'group') || !queryParams.has('display')) && (\n        <ItemsGroupsByGroupTable\n          data={data}\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n          onUpdateGroupItems={onUpdateGroupItems}\n        />\n      )}\n      {is('display', 'item') && (\n        <ItemsGroupsByItemTable\n          data={data}\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n          onUpdateGroupItems={onUpdateGroupItems}\n        />\n      )}\n    </>\n  );\n}\n\ntype ItemsGroupsTablesProps = {\n  items: Dictionary<ItemT>;\n  grousByItem: Record<string, string[]>;\n  groupsTypeahead: { value: string; label: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n  onUpdateGroupItems: (groupId: string, itemIds: string[]) => void;\n} & Pick<UseResourceFirebaseDataReturnType<ItemGroup>, 'data'>;\n\nfunction ItemsGroupsByGroupTable({\n  data,\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n  onUpdateGroupItems,\n}: ItemsGroupsTablesProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const [selectedItemId, setSelectedItemId] = useState<null | string>(null);\n\n  const paginationProps = useTablePagination({\n    showQuickJumper: true,\n    total: Object.keys(data).length,\n  });\n\n  const columns: TableProps<ItemGroup>['columns'] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n      render: (id) => <span>{id}</span>,\n    },\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <Flex gap={6} wrap=\"wrap\" key={`items-${record.id}`}>\n          {itemsIds.map((itemId) => (\n            <Flex key={`${record.id}-${itemId}`} gap={2} vertical>\n              <TransparentButton onClick={() => setSelectedItemId(itemId)}>\n                <Item id={itemId} width={60} />\n              </TransparentButton>\n              <Flex justify=\"center\">\n                <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n              </Flex>\n            </Flex>\n          ))}\n        </Flex>\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Actions',\n      dataIndex: 'itemsIds',\n      key: 'actions',\n      render: (itemsIds: string[]) => <CopyIdsButton ids={itemsIds} />,\n    },\n  ];\n\n  const selectedItem = selectedItemId ? items[selectedItemId] : null;\n\n  return (\n    <>\n      <Table\n        columns={columns}\n        dataSource={Object.values(data)}\n        className=\"my-4\"\n        rowKey=\"id\"\n        pagination={paginationProps}\n        expandable={{\n          expandedRowRender: (record) => (\n            <AddItemFlow group={record} onUpdateGroupItems={onUpdateGroupItems} />\n          ),\n          rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n        }}\n      />\n      <Drawer title=\"Edit Item Group\" onClose={() => setSelectedItemId(null)} open={!!selectedItem}>\n        {selectedItem && (\n          <ItemGroupsCard\n            item={selectedItem}\n            itemGroups={grousByItem[selectedItem.id]}\n            groupsTypeahead={groupsTypeahead}\n            onUpdateItemGroups={onUpdateItemGroups}\n          />\n        )}\n      </Drawer>\n    </>\n  );\n}\n\ntype AddItemFlowProps = {\n  group: ItemGroup;\n  onUpdateGroupItems: (groupId: string, itemIds: string[]) => void;\n};\n\nexport function AddItemFlow({ group, onUpdateGroupItems }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    onUpdateGroupItems(group.id, [...group.itemsIds, itemId]);\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\nfunction ItemsGroupsByItemTable({\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemsGroupsTablesProps) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const data = useMemo(\n    () => (showOnlyEmpty ? Object.values(items).filter((v) => !grousByItem[v.id]) : Object.values(items)),\n    [items, grousByItem, showOnlyEmpty]\n  );\n\n  const { page, pagination } = useGridPagination({ data });\n\n  return (\n    <>\n      <Typography.Title level={2}>Groups by Items ({data.length})</Typography.Title>\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemGroupsCard\n                item={item}\n                itemGroups={grousByItem[item.id]}\n                groupsTypeahead={groupsTypeahead}\n                onUpdateItemGroups={onUpdateItemGroups}\n              />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { ItemGroup } from 'types';\nimport { removeDuplicates, sortItemsIds, sortJsonKeys } from 'utils';\n\nimport { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { cloneDeep, isEmpty, omitBy } from 'lodash';\n\nexport function ItemsGroupsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { queryParams, addParam, addParams, is } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(prepareObjectToSave(entriesToUpdate))}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"items-groups.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'group'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Groups',\n            icon: <ClusterOutlined />,\n            value: 'group',\n          },\n          {\n            title: 'By Items',\n            icon: <TableOutlined />,\n            value: 'item',\n          },\n        ]}\n      />\n\n      {is('display', 'item') && (\n        <FilterSwitch\n          label=\"No Groups Only\"\n          value={is('emptyOnly')}\n          onChange={(mode) => addParam('emptyOnly', mode, false)}\n        />\n      )}\n    </SiderContent>\n  );\n}\n\nfunction prepareObjectToSave(groups: Dictionary<ItemGroup>) {\n  return omitBy(cloneDeep(groups), (group) => isEmpty(group.itemsIds));\n}\n\nfunction prepareFileForDownload(groups: Dictionary<ItemGroup>) {\n  Object.keys(groups).forEach((key) => {\n    groups[key].itemsIds = sortItemsIds(removeDuplicates(groups[key].itemsIds));\n  });\n  return sortJsonKeys(prepareObjectToSave(groups));\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsGroupsContent } from 'components/Items/Groups/ItemsGroupsContent';\nimport { ItemsGroupsFilters } from 'components/Items/Groups/ItemsGroupsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { Item, ItemGroup } from 'types';\n\nexport function ItemsGroups() {\n  const groupsQuery = useResourceFirebaseData<ItemGroup>({\n    tdrResourceName: 'items-groups',\n    firebaseDataCollectionName: 'itemsGroups',\n    serialize: true,\n  });\n  const itemsTypeaheadQuery = useTDResource<Item>('items');\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Groups Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsGroupsFilters {...groupsQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={groupsQuery.isLoading || itemsTypeaheadQuery.isLoading}\n            error={groupsQuery.error || itemsTypeaheadQuery.error}\n            hasResponseData={!isEmpty(groupsQuery.data) && !isEmpty(itemsTypeaheadQuery.data)}\n          >\n            <ItemsGroupsContent {...groupsQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsGroups;\n"],"names":["ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","size","value","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","ItemGroupsCard","itemGroups","groupsTypeahead","onUpdateItemGroups","maxWidth","direction","mode","defaultValue","options","showSearch","onChange","groups","String","ItemsGroupsContent","data","addEntryToUpdate","is","queryParams","useQueryParams","itemsTypeaheadQuery","useTDResource","grousByItem","useMemo","Object","values","reduce","acc","group","itemsIds","console","warn","forEach","push","orderBy","keys","map","label","groupIds","previousGroups","groupsToAdd","filter","includes","groupsToRemove","groupId","removeDuplicates","onUpdateGroupItems","itemIds","has","ItemsGroupsByGroupTable","items","ItemsGroupsByItemTable","selectedItemId","setSelectedItemId","useState","paginationProps","useTablePagination","showQuickJumper","total","length","columns","dataIndex","key","render","record","gap","wrap","vertical","justify","Table","Boolean","CopyIdsButton","ids","selectedItem","dataSource","rowKey","pagination","expandable","expandedRowRender","AddItemFlow","rowExpandable","isSuccess","onClose","open","ItemsTypeahead","onFinish","showOnlyEmpty","v","page","useGridPagination","level","PaginationWrapper","gutter","xs","sm","md","lg","xl","ItemsGroupsFilters","save","isDirty","isSaving","entriesToUpdate","addParam","addParams","SaveButton","onSave","dirt","JSON","stringify","prepareObjectToSave","DownloadButton","prepareFileForDownload","sortItemsIds","sortJsonKeys","fileName","disabled","block","get","display","icon","ClusterOutlined","TableOutlined","omitBy","cloneDeep","isEmpty","ItemsGroups","groupsQuery","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","subtitle","hasSider","PageSider","DataLoadingWrapper","isLoading","error","hasResponseData"],"sourceRoot":""}