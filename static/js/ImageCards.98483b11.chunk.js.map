{"version":3,"file":"static/js/ImageCards.98483b11.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","components/Images/ImageCard.tsx","hooks/useCardWidth.ts","hooks/useQueryParams.ts","components/Images/ImageCardsFilters.tsx","pages/Images/ImageCards.tsx","hooks/useTDIData.ts","../node_modules/react-use/esm/misc/util.js","../node_modules/react-use/esm/useIsomorphicLayoutEffect.js","../node_modules/react-use/esm/useMeasure.js"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('tdi');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { Ref, useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\n/**\n * Get a card width in px based on the window size of given container used with the containerRef\n * @param quantity how many cards should be fitted in the page screen width\n * @param options the options object\n * @param options.gap total value of padding and margin on the left and right of the card\n * @param options.minWidth minimum width of a card\n * @param options.maxWidth maximum width of a card\n * @param options.margin the outer margin of the container that should be removed from the width\n * @returns\n */\nexport function useCardWidth(\n  quantity: number,\n  options?: {\n    gap?: number;\n    minWidth?: number;\n    maxWidth?: number;\n    margin?: number;\n  }\n): [number, Ref<HTMLDivElement>] {\n  const [ref, { width }] = useMeasure();\n  const { gap = 32, minWidth = 120, maxWidth = 300, margin = 0 } = options ?? {};\n\n  const cardWidth = useMemo(() => {\n    const value = Math.min(Math.max(Math.floor((width - margin) / quantity) - gap, minWidth), maxWidth);\n    return Number.isNaN(value) ? minWidth : value;\n  }, [width, quantity, gap, minWidth, maxWidth, margin]);\n\n  const containerRef = ref as Ref<HTMLDivElement>;\n\n  return [cardWidth, containerRef];\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown) => {\n    if (value === undefined || value === '') {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string, value: unknown) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    addParam,\n    removeParam,\n    queryParams,\n  };\n}\n","import { FilterNumber, FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { useMemo } from 'react';\n\ntype ImageCardsFiltersProps = {\n  decksData: NumberDictionary;\n  selectedDeck: string;\n  setSelectedDeck: (deck: string) => void;\n  cardsPerRow: number;\n  setCardsPerRow: (cardsPerRow: number) => void;\n};\n\nexport function ImageCardsFilters({\n  decksData,\n  selectedDeck,\n  setSelectedDeck,\n  cardsPerRow,\n  setCardsPerRow,\n}: ImageCardsFiltersProps) {\n  const deckOptions = useMemo(() => {\n    return Object.keys(decksData)\n      .filter((deck) => deck.startsWith('td-'))\n      .map((deck) => deck.replace('td-', ''));\n  }, [decksData]);\n  return (\n    <SiderContent>\n      <FilterSelect label=\"Deck\" value={selectedDeck} onChange={setSelectedDeck} options={deckOptions} />\n      <FilterNumber\n        label=\"Cards Per Row\"\n        min={1}\n        max={8}\n        value={cardsPerRow}\n        onChange={(v) => setCardsPerRow(v ?? 8)}\n      />\n    </SiderContent>\n  );\n}\n","import { Image, Layout, Space, Typography } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ImageCardsFilters } from 'components/Images/ImageCardsFilters';\nimport { ImageCard } from 'components/Images/ImageCard';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ResponseState } from 'components/Common';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useTDIData } from 'hooks/useTDIData';\nimport { isEmpty } from 'lodash';\nimport { useState } from 'react';\n\nconst DECK = Array(252).fill(1);\n\nfunction ImageCards() {\n  // Set default query params\n  const qp = useQueryParams({ deck: 'd1' });\n  const { deck = 'd1' } = qp.queryParams;\n\n  const { isLoading, error, data } = useTDIData();\n  const hasResponseData = !isEmpty(data);\n  const [cardsPerRow, setCardsPerRow] = useState(8);\n  const [cardWidth, ref] = useCardWidth(cardsPerRow);\n\n  return (\n    <PageLayout title=\"Images\" subtitle=\"Image Cards\">\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState hasResponseData={hasResponseData} isLoading={isLoading} error={error} />\n          <ImageCardsFilters\n            decksData={data}\n            selectedDeck={deck}\n            setSelectedDeck={(d) => qp.addParam('deck', d)}\n            cardsPerRow={cardsPerRow}\n            setCardsPerRow={setCardsPerRow}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            <Typography.Title level={2}>\n              Deck {deck} ({DECK.length})\n            </Typography.Title>\n\n            <Image.PreviewGroup>\n              <Space ref={ref} wrap className=\"my-2\" key={deck}>\n                {Boolean(deck) &&\n                  DECK.map((e, i) => {\n                    const num = e + i < 10 ? `0${e + i}` : `${e + i}`;\n                    const id = `td-${deck}-${num}`;\n\n                    return <ImageCard id={id} width={cardWidth} key={id} />;\n                  })}\n              </Space>\n            </Image.PreviewGroup>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\nexport default ImageCards;\n","import { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDIData() {\n  const { getUrl } = useBaseUrl('tdi-data');\n  const query = useQuery<NumberDictionary, ResponseError>({\n    queryKey: ['tdi-data'],\n    queryFn: async () => {\n      const res = await fetch(getUrl('info.json'));\n      return (await res.json()) as NumberDictionary;\n    },\n  });\n\n  return {\n    ...query,\n    data: query.data ?? {},\n  };\n}\n","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import { useEffect, useLayoutEffect } from 'react';\nimport { isBrowser } from './misc/util';\nvar useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useMemo, useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nimport { isBrowser, noop } from './misc/util';\nvar defaultState = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n};\nfunction useMeasure() {\n    var _a = useState(null), element = _a[0], ref = _a[1];\n    var _b = useState(defaultState), rect = _b[0], setRect = _b[1];\n    var observer = useMemo(function () {\n        return new window.ResizeObserver(function (entries) {\n            if (entries[0]) {\n                var _a = entries[0].contentRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, top_1 = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n                setRect({ x: x, y: y, width: width, height: height, top: top_1, left: left, bottom: bottom, right: right });\n            }\n        });\n    }, []);\n    useIsomorphicLayoutEffect(function () {\n        if (!element)\n            return;\n        observer.observe(element);\n        return function () {\n            observer.disconnect();\n        };\n    }, [element]);\n    return [ref, rect];\n}\nexport default isBrowser && typeof window.ResizeObserver !== 'undefined'\n    ? useMeasure\n    : (function () { return [noop, defaultState]; });\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","useCardWidth","quantity","ref","useMeasure","gap","maxWidth","margin","useMemo","Math","floor","Number","isNaN","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","undefined","delete","set","String","removeParam","useEffect","Object","entries","forEach","has","queryParams","toString","split","reduce","qp","ImageCardsFilters","decksData","selectedDeck","setSelectedDeck","cardsPerRow","setCardsPerRow","deckOptions","keys","filter","deck","startsWith","DECK","Array","fill","data","query","useQuery","queryKey","queryFn","async","res","fetch","json","useTDIData","isEmpty","useState","cardWidth","title","subtitle","hasSider","PageSider","d","DataLoadingWrapper","length","wrap","Boolean","e","i","num","noop","isBrowser","window","useLayoutEffect","defaultState","x","y","height","top","left","bottom","right","ResizeObserver","_a","element","_b","rect","setRect","observer","contentRect","top_1","useIsomorphicLayoutEffect","observe","disconnect"],"sourceRoot":""}