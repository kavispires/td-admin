{"version":3,"file":"static/js/Other.2daa9d47.chunk.js","mappings":"qJASO,SAASA,EAAT,GAMyB,IANM,QACpCC,EADoC,MAEpCC,EAFoC,KAGpCC,EAHoC,KAIpCC,KACGC,GAC0B,EAC7B,MAAMC,GAAkBC,EAAAA,EAAAA,KAExB,OACE,SAAC,KAAD,CACEL,MAAK,OAAEA,QAAF,IAAEA,EAAAA,EAAS,SAChBC,KAAI,OAAEA,QAAF,IAAEA,EAAAA,GAAQ,SAAC,IAAD,IACdC,KAAI,OAAEA,QAAF,IAAEA,EAAAA,EAAQ,QACdI,QAAS,IAAMF,EAAgBL,MAC3BI,GAGT,C,6ECtBM,SAASE,IACd,MAAOE,EAAOH,IAAmBI,EAAAA,EAAAA,MAC3B,QAAEC,GAAYC,EAAAA,EAAAA,SAYpB,OAVAC,EAAAA,EAAAA,YAAU,KACJJ,EAAMK,QACJL,EAAMK,MAAMC,OAAS,GACvBJ,EAAQK,KAAR,gCAAqCC,EAAAA,EAAAA,UAASR,EAAMK,MAAO,CAAEC,OAAQ,GAAIG,SAAU,UAEnFP,EAAQQ,QAAQ,UAEnB,GACA,CAACV,EAAOE,IAEJL,CACR,C,oLCND,MAAM,KAAEc,GAASC,EAAAA,EAkXjB,QAhXA,YACEC,EAAAA,EAAAA,GAAS,SAuCT,MA+SM,aAAEC,EAAF,SAAgBC,IAAaC,EAAAA,EAAAA,MACnCC,QAAQC,IAAIJ,EAAaK,MAEzB,MAAMC,GAAaC,EAAAA,EAAAA,UAAQ,IAAMC,KAAKC,UAAUT,EAAaK,KAAM,KAAM,IAAI,CAACL,EAAaK,OAE3F,OACE,UAAC,IAAD,YACE,SAACK,EAAA,EAAD,CAAQC,MAAM,WAEd,SAAC,IAAD,KAEA,SAAC,YAAD,CAAgBC,UAAU,UAA1B,UACE,iBAAKA,UAAU,IAAf,WACE,mBAAQ3B,QAAS,IAAMgB,EAASY,OAAOb,EAAaK,MAApD,mBACA,UAACR,EAAD,sBACS,SAACpB,EAAA,EAAD,CAAuBC,QAAS4B,QAGzC,SAAC,aAAD,CAAgBQ,KAAK,iBAAiBC,GAAG,GAAGC,KAAK,KAAKC,KAAK,KAAKC,UAAQ,EAAC3B,MAAOe,WAKzF,C","sources":["components/CopyToClipboardButton.tsx","hooks/useCopyToClipboardFunction.ts","pages/Other.jsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\n\nimport { CopyOutlined } from '@ant-design/icons';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype CopyToClipboardButtonProps = {\n  content: string;\n} & ButtonProps;\n\nexport function CopyToClipboardButton({\n  content,\n  shape,\n  icon,\n  size,\n  ...buttonProps\n}: CopyToClipboardButtonProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Button\n      shape={shape ?? 'circle'}\n      icon={icon ?? <CopyOutlined />}\n      size={size ?? 'small'}\n      onClick={() => copyToClipboard(content)}\n      {...buttonProps}\n    />\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","/* eslint-disable no-unused-vars */\nimport { Alert, Divider, Input, Layout, Typography } from 'antd';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { useAsync, useTitle } from 'react-use';\nimport { LOCALHOST_RESOURCE_URL } from '../utils/constants';\nimport { DataLoadingWrapper } from '../components/DataLoadingWrapper';\nimport { checkForDuplicates, findSimilar, stringRemoveAccents } from '../utils';\nimport { SEARCH_THRESHOLD } from '../utils/constants';\nimport { CopyToClipboardButton } from 'components/CopyToClipboardButton';\nimport rawData from './rawData.json';\nimport { Header } from 'components/Layout/Header';\nimport { useTempDaily } from 'components/Daily/hooks';\n\nconst { Text } = Typography;\n\nfunction Other() {\n  useTitle('Other');\n\n  // const result = Array(50)\n  //   .fill(1)\n  //   .reduce((acc, e, index) => {\n  //     const num = e + index;\n  //     const idNum = num < 10 ? `00${num}` : num < 100 ? `0${num}` : `${num}`;\n  //     const id = `md-rb-${idNum}`;\n\n  //     acc[id] = {\n  //       id,\n  //       orientation: 'vertical',\n  //     };\n\n  //     return acc;\n  //   }, {});\n\n  // const result = Object.entries(data).reduce((acc, [id, value]) => {\n  //   acc[id] = {\n  //     id: value.id,\n  //     name: {\n  //       pt: value.pt,\n  //       en: value.en,\n  //     },\n  //     gender: value.gender,\n  //   };\n  //   return acc;\n  // }, {});\n\n  // const result = Object.entries(SUSPECTS_NAMES).reduce((acc, [id, value]) => {\n  //   if (!value.gender) throw Error(`a, id ${id}`);\n  //   acc[id] = {\n  //     id,\n  //     ...value,\n  //   };\n\n  //   return acc;\n  // }, {});\n\n  const makeCrimesHediondosEnries = (quantity, startingId = 0, type) => {\n    return Array(quantity)\n      .fill(startingId)\n      .reduce((acc, e, index) => {\n        const num = e + index;\n        const idNum = num < 10 ? `00${num}` : num < 100 ? `0${num}` : `${num}`;\n        const id = `dmhk-${type}-${idNum}`;\n\n        acc[id] = {\n          id,\n          type: type === 'wp' ? 'weapon' : 'evidence',\n          name: {\n            en: '',\n            pt: '',\n          },\n        };\n\n        return acc;\n      }, {});\n  };\n\n  // const result = makeCrimesHediondosEnries(200, 66, 'ev');\n\n  const convertCsvJsonSceneTiles = (d) => {\n    return d.map((e) => {\n      const entry = {\n        title: {},\n        values: [],\n      };\n\n      Object.entries(e).forEach(([key, value]) => {\n        const [category, language] = key.split('-');\n\n        if (!language) {\n          entry[key] = value;\n          return;\n        }\n\n        if (category === 'title') {\n          entry.title[language] = value;\n          return;\n        }\n\n        if (category.startsWith('value')) {\n          const index = Number(category.substring(5));\n          if (entry.values[index] === undefined) {\n            entry.values[index] = {};\n          }\n          entry.values[index][language] = value;\n          return;\n        }\n\n        console.log({ [key]: value });\n      });\n\n      return entry;\n    });\n  };\n\n  const convertToDualLanguage = (d) => {\n    return Object.values(d).reduce((acc, entry) => {\n      acc[entry.id] = {\n        id: entry.id,\n        type: entry.type,\n        name: {\n          en: entry.en,\n          pt: entry.pt,\n        },\n      };\n      return acc;\n    }, {});\n  };\n  // const result = convertToDualLanguage(data);\n\n  const parseEspiao = () => {\n    const cache = {};\n\n    db.forEach((entry) => {\n      if (cache[entry.location] === undefined) {\n        cache[entry.location] = [];\n      }\n      cache[entry.location].push(entry.role);\n    });\n\n    return Object.entries(cache).reduce((acc, [location, roles], index) => {\n      const idNum = index + 1 < 10 ? `0${index + 1}` : index + 1;\n      const id = `e-${idNum}-en`;\n      acc[id] = {\n        id,\n        name: location,\n        roles: roles,\n      };\n\n      return acc;\n    }, {});\n  };\n\n  // const result = parseEspiao();\n\n  const parseLinhasCruzadas = () => {\n    return db.reduce((acc, entry, index) => {\n      const id = `lc-${index + 1}-pt`;\n      acc[id] = {\n        id,\n        text: entry.text,\n      };\n      return acc;\n    }, {});\n  };\n\n  // const result = parseLinhasCruzadas();\n\n  const parseGaleriaDeSonhos = () => {\n    return rawData.reduce((acc, entry, index) => {\n      const id = `gs-${index + 1}-pt`;\n      acc[id] = {\n        id,\n        text: entry.text,\n      };\n      return acc;\n    }, {});\n  };\n\n  // const result = parseGaleriaDeSonhos();\n\n  const parseCategories = () => {\n    return rawData.reduce((acc, entry, index) => {\n      const id = `ct-${index + 1}-pt`;\n      acc[id] = {\n        id,\n        text: entry.category,\n      };\n      return acc;\n    }, {});\n  };\n\n  // const result = parseCategories();\n\n  // const parseInspirations = () => {\n  //   return rawData.reduce((acc, entry, index) => {\n  //     const id = `mui-${index + 1}-pt`;\n  //     acc[id] = {\n  //       id,\n  //       text: entry.text,\n  //       level: entry.level,\n  //       set: entry.set,\n  //     };\n  //     return acc;\n  //   }, {});\n  // };\n\n  // const result = parseInspirations();\n\n  // const parseAdjectives = () => {\n  //   return rawData.reduce((acc, entry, index) => {\n  //     const id = `adj-${index + 1}-pt`;\n  //     acc[id] = {\n  //       id,\n  //       text: entry.texto,\n  //     };\n  //     return acc;\n  //   }, {});\n  // };\n\n  // const result = parseAdjectives();\n\n  // const parsePairs = () => {\n  //   return rawData.reduce((acc, entry, index) => {\n  //     const id = `ap-${index + 1}-pt`;\n  //     acc[id] = {\n  //       id,\n  //       values: [entry.CARD_1, entry.CARD_2],\n  //     };\n  //     return acc;\n  //   }, {});\n  // };\n\n  // const result = parsePairs();\n\n  // const cache = {};\n  // const duplicated = {};\n  // const uniqueSingleWords = () => {\n  //   const resArr = [];\n\n  //   Object.values(rawData).forEach((entry) => {\n  //     const raw = stringRemoveAccents(entry.text).toLowerCase();\n\n  //     if (raw.includes(' ')) {\n  //       console.warn('SPACE IN', raw);\n  //     }\n\n  //     if (cache[raw]) {\n  //       duplicated[raw] = true;\n  //     } else {\n  //       cache[raw] = true;\n  //       resArr.push(entry.text.toLowerCase());\n  //     }\n  //   });\n\n  //   const sortedArr = resArr.sort((a, b) => a.localeCompare(b));\n\n  //   return sortedArr.reduce((acc, entry, index) => {\n  //     const id = `sw-${index + 1}-pt`;\n  //     acc[id] = {\n  //       id,\n  //       text: entry,\n  //     };\n\n  //     return acc;\n  //   }, {});\n  // };\n  // const result = uniqueSingleWords();\n  // console.log(duplicated);\n\n  // const parseContenders = () =>\n  //   rawData.reduce((acc, entry, index) => {\n  //     const id = `cnt-${index + 1}`;\n  //     const item = {\n  //       id,\n  //       name: {\n  //         en: entry.name_en,\n  //         pt: entry.name_pt,\n  //       },\n  //     };\n\n  //     if (entry.exclusivity) {\n  //       item.exclusivity = entry.exclusivity;\n  //     }\n\n  //     acc[id] = item;\n\n  //     return acc;\n  //   }, {});\n\n  // const result = parseContenders();\n\n  // const parseChallenges = () =>\n  //   rawData.reduce((acc, entry, index) => {\n  //     const id = `clg-${index + 1}-pt`;\n  //     acc[id] = {\n  //       id,\n  //       text: entry.challenge_pt,\n  //     };\n  //     return acc;\n  //   }, {});\n\n  // const result = parseChallenges();\n\n  // const parseQuantitativeQuestions = () =>\n  //   rawData.reduce((acc, entry, index) => {\n  //     const id = `qq-${index + 1}-pt`;\n  //     const e = {\n  //       id,\n  //       question: entry.question,\n  //     };\n\n  //     if (entry.scale) {\n  //       e.scale = true;\n  //     }\n\n  //     acc[id] = e;\n  //     return acc;\n  //   }, {});\n\n  // const result = parseQuantitativeQuestions();\n\n  // const parseQuantitativeQuestions = () =>\n  //   rawData.reduce((acc, entry, index) => {\n  //     const id = `dlm-${index + 1}-pt`;\n  //     const e = {\n  //       id,\n  //       prompt: entry.Prompt,\n  //       left: entry.Left,\n  //       right: entry.Right,\n  //     };\n\n  //     if (entry.NSFW) {\n  //       e.nsfw = true;\n  //     }\n\n  //     acc[id] = e;\n  //     return acc;\n  //   }, {});\n\n  // const result = parseQuantitativeQuestions();\n\n  // const parseMovies = () => {\n  //   const result = {};\n  //   rawData.forEach((entry, index) => {\n  //     const id = `mr-${index + 1}-pt`;\n  //     const e = {\n  //       id,\n  //       text: entry.text.trim(),\n  //       type: entry.type,\n  //       highlights: [''],\n  //     };\n  //     result[id] = e;\n  //   });\n  //   return result;\n  // };\n\n  // const result = parseMovies();\n\n  const { historyQuery, mutation } = useTempDaily();\n  console.log(historyQuery.data);\n\n  const jsonString = useMemo(() => JSON.stringify(historyQuery.data, null, 4), [historyQuery.data]);\n\n  return (\n    <Layout>\n      <Header title=\"Other\" />\n\n      <Divider />\n\n      <Layout.Content className=\"content\">\n        <div className=\"a\">\n          <button onClick={() => mutation.mutate(historyQuery.data)}>save</button>\n          <Text>\n            Output <CopyToClipboardButton content={jsonString} />\n          </Text>\n\n          <Input.TextArea name=\"search-results\" id=\"\" cols=\"10\" rows=\"10\" readOnly value={jsonString} />\n        </div>\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default Other;\n\nfunction parse(a) {\n  return a.map((v) => {\n    if (v.FIELD2) return `${v.question}, ${v.FIELD2}`;\n    return v.question;\n  });\n}\n\nconst db = [];\n"],"names":["CopyToClipboardButton","content","shape","icon","size","buttonProps","copyToClipboard","useCopyToClipboardFunction","onClick","state","useCopyToClipboard","message","App","useEffect","value","length","info","truncate","omission","success","Text","Typography","useTitle","historyQuery","mutation","useTempDaily","console","log","data","jsonString","useMemo","JSON","stringify","Header","title","className","mutate","name","id","cols","rows","readOnly"],"sourceRoot":""}