{"version":3,"file":"static/js/DailySetup.4bf8377f.chunk.js","mappings":"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","sources":["components/Daily/CanvasSVG.tsx","components/Daily/hooks/useDailyHistoryQuery.ts","components/DataLoadingWrapper.tsx","components/Images/ImageCard.tsx","components/Sprites/Sprite.tsx","components/Sprites/WarehouseGood.tsx","components/Sprites/AlienSign.tsx","components/Sprites/Emoji.tsx","components/Sprites/Glyph.tsx","components/Sprites/Item.tsx","hooks/useBaseUrl.ts","hooks/useLoadWordLibrary.tsx","pages/ArteRuim/useArteRuimDrawings.ts","components/Daily/utils/games/daily-aqui-o.ts","components/Daily/utils/games/daily-arte-ruim.ts","components/Daily/utils/games/daily-artista.ts","components/Daily/utils/games/daily-comunicacao-alienigena.ts","components/Daily/utils/games/daily-controle-de-estoque.ts","components/Daily/utils/games/daily-filmaco.ts","components/Daily/utils/games/daily-palavreado.ts","components/Daily/utils/games/daily-ta-na-cara.ts","components/Daily/utils/games/daily-quartetos.ts","components/Daily/hooks/useLoadDailySetup.ts","components/Daily/DataPopulation.tsx","components/Daily/hooks/useSaveDailySetup.ts","components/Daily/SideFilters.tsx","pages/DailySetup.tsx","utils/constants.ts","utils/index.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: number[][]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { type QueryKey, type UseQueryOptions, useQuery } from '@tanstack/react-query';\n\nimport { printFirebase } from 'services/firebase';\nimport type { DailyHistory } from '../utils/types';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {},\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only the error should cause this notification\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]);\n\n  return historyQuery;\n}\n","import { Alert, Empty, Layout, Spin } from 'antd';\n\ntype DataLoadingWrapperProps = {\n  isIdle?: boolean;\n  isLoading: boolean;\n  error?: ResponseError;\n  hasResponseData: boolean;\n  children: any;\n};\n\nexport function DataLoadingWrapper({\n  isLoading,\n  isIdle,\n  error,\n  hasResponseData,\n  children,\n}: DataLoadingWrapperProps) {\n  if (!isIdle && isLoading) {\n    return <Spin tip=\"Loading\">{children}</Spin>;\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Alert message=\"Error\" description={error.message} type=\"error\" showIcon />\n      </Layout.Content>\n    );\n  }\n\n  if (isIdle || hasResponseData === false) {\n    return (\n      <Layout.Content className=\"content content-center\">\n        <Empty />\n      </Layout.Content>\n    );\n  }\n\n  return <>{children}</>;\n}\n","// Ant Design Resources\nimport { Image, type ImageProps } from 'antd';\nimport clsx from 'clsx';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { WarningOutlined } from '@ant-design/icons';\nimport { useQuery } from '@tanstack/react-query';\nimport { Spin, Tooltip } from 'antd';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const { getUrl } = useBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${getUrl('sprites')}/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - 12;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype WarehouseGoodProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\nconst BASE = 64;\n\n/**\n * Retrieves the source and good ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and good ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const goodId = `good-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `warehouse-goods-${sourceId}`;\n  return [source, goodId];\n};\n\n/**\n * An warehouse good card component.\n */\nexport function WarehouseGood({ id, width = 75, className }: WarehouseGoodProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={itemId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype AlienSignProps = {\n  /**\n   * The id of the sign (do not prefix with sign)\n   */\n  id: string;\n  /**\n   * The width of the sign\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Optional padding\n   */\n  padding?: number;\n};\n\n/**\n * An alien sign card component.\n */\nexport function AlienSign({ id, width = 75, padding = 6, className = '' }: AlienSignProps) {\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px`, padding }}>\n      <svg\n        viewBox=\"0 0 512 512\"\n        style={{ width: `${width - padding * 2}px`, height: `${width - padding * 2}px` }}\n      >\n        <Sprite source=\"alien-signs\" id={id} width={width} />\n      </svg>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Sprite } from './Sprite';\n\ntype EmojiProps = {\n  /**\n   * The id of the emoji\n   */\n  id: string;\n  /**\n   * The width of the emoji\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * An emoji card component.\n */\nexport function Emoji({ id, width, className }: EmojiProps): JSX.Element {\n  const emojiId = id.startsWith('emoji') ? id : `emoji-${id}`;\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source=\"emojis\" id={emojiId} width={width} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\ntype GlyphProps = {\n  /**\n   * The id of the glyph\n   */\n  id: string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n});\n\n/**\n * A glyph card component.\n */\nexport function Glyph({ id, width, className }: GlyphProps) {\n  const [source, glyphId] = getSource(id);\n\n  return (\n    <div className={clsx('sprite', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { memoize } from 'lodash';\n// Components\nimport { Sprite } from './Sprite';\n\nexport type ItemProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nconst getSource = memoize((str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n});\n\n/**\n * An item card component.\n */\nexport function Item({ id, width, className, title }: ItemProps) {\n  const [source, itemId] = getSource(id);\n\n  return (\n    <div\n      className={clsx('sprite', className)}\n      style={{ width: `${width ?? 75}px`, height: `${width ?? 75}px` }}\n    >\n      <Sprite source={source} id={itemId} width={width} title={title} />\n    </div>\n  );\n}\n","/**\n * Returns the base url for the given library and path\n * @param library\n * @param path\n * @returns\n */\nexport function useBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic') {\n  const baseUrl: string | undefined = process.env.REACT_APP_TD_BASE_URL;\n  let folder: string | undefined = '';\n\n  switch (library) {\n    case 'images':\n      folder = process.env.REACT_APP_TD_IMAGES;\n      break;\n    case 'sprites':\n      folder = process.env.REACT_APP_TD_SPRITES;\n      break;\n    case 'resources':\n      folder = process.env.REACT_APP_TD_RESOURCES;\n      break;\n    case 'classic':\n      folder = process.env.REACT_APP_TD_CLASSIC;\n      break;\n    default:\n      // TODO: The default should be removed\n      // baseUrl =\n      //   process.env.NODE_ENV === 'development'\n      //     ? process.env.REACT_APP_LOCAL_URL\n      //     : process.env.REACT_APP_TD_BASE_URL;\n      // folder = process.env.REACT_APP_TD_RESOURCES;\n      throw new Error('Invalid library');\n  }\n\n  return {\n    baseUrl,\n    getUrl: (path: string) => [baseUrl, folder, path].join('/'),\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport function useLoadWordLibrary(\n  wordLength: number,\n  language: Language,\n  enabled = true,\n  selected?: boolean,\n) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const resourceName = selected\n    ? `words-${wordLength}-letters-selected-${language}`\n    : `words-${wordLength}-letters-${language}`;\n  const query = useQuery<string[], ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as string[];\n    },\n    enabled: enabled && !!wordLength && !!language,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? [],\n    hasResponseData,\n  };\n}\n","import { type QueryKey, type UseQueryOptions, useQueries, useQuery } from '@tanstack/react-query';\nimport { App } from 'antd';\nimport type { FirebaseDataDrawing } from 'components/Daily/utils/types';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { printFirebase } from 'services/firebase';\nimport type { DrawingData, DrawingEntry } from 'types';\nimport { SEPARATOR } from 'utils/constants';\n\n/**\n * Custom hook for loading drawings.\n * @param enabled - Indicates whether the loading of drawings is enabled.\n * @param libraryCount - The number of libraries to load drawings from.\n * @param queryLanguage - The language for the query.\n * @returns The result of the useQueries hook.\n */\nexport function useLoadFirebaseDrawings(enabled: boolean, queryLanguage: Language) {\n  type DataSuffixCounts = {\n    drawingsPT: number;\n    drawingsEN: number;\n  };\n\n  const DRAWING_SUFFIX_DATA = {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  };\n\n  const { notification } = App.useApp();\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled,\n  });\n\n  useEffect(() => {\n    if (suffixCountsQuery.isSuccess) {\n      printFirebase('Loaded data/suffixCounts');\n    }\n  }, [suffixCountsQuery.isSuccess]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only notify on error\n  useEffect(() => {\n    if (suffixCountsQuery.isError) {\n      notification.error({\n        message: 'Error loading data/suffixCounts',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [suffixCountsQuery.isError]);\n\n  const suffixData = DRAWING_SUFFIX_DATA[queryLanguage ?? 'pt'];\n\n  const libraryCount = suffixCountsQuery.data?.[suffixData as keyof DataSuffixCounts] ?? 0;\n\n  const docPrefix = `drawings${queryLanguage === 'pt' ? 'PT' : 'EN'}`;\n  // biome-ignore lint/correctness/useExhaustiveDependencies: notification function shouldn't trigger\n  const queries: UseQueryOptions[] = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `${docPrefix}${index + 1}`],\n        queryFn: getDocQueryFunction('data', `${docPrefix}${index + 1}`),\n        enabled: enabled && Boolean(libraryCount),\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings ${docPrefix}${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount, docPrefix, enabled]);\n\n  return useQueries({ queries });\n}\n\nfunction extractCreatedAt(key: string): number {\n  const parts = key.split(/::|:;|;;/); // Split by either '::' or ':;'\n  const createdAtPart = parts[1];\n  const createdAt = Number(createdAtPart);\n  if (Number.isNaN(createdAt)) {\n    console.log('🔆 Invalid createdAt', key, createdAt);\n  }\n  return Number.isNaN(createdAt) ? 1619161200000 : createdAt;\n}\n\nexport function useDrawingsResourceData(enabled: boolean, language: string) {\n  const firebaseDrawingsQueries = useLoadFirebaseDrawings(enabled, language as Language);\n  const tdrDrawingsQuery = useTDResource<DrawingData>(`arte-ruim-drawings-${language}`, enabled);\n\n  const isDrawingsLoading = firebaseDrawingsQueries.some((q) => q.isLoading);\n  const isDrawingsSuccess = firebaseDrawingsQueries.every((q) => q.isSuccess);\n\n  const drawings = useMemo(() => {\n    if (!isDrawingsSuccess) return {};\n    if (!tdrDrawingsQuery.isSuccess) return {};\n\n    const allDrawings = tdrDrawingsQuery.data ?? {};\n\n    (firebaseDrawingsQueries ?? []).forEach((drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, FirebaseDataDrawing>;\n      // Build entries for each available card possible\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        const cardId = dataDrawing.cardId ?? dataDrawing.id;\n\n        // Remove cards from \"Level 5\" or cards that were already used\n        if (cardId?.includes('--')) {\n          return;\n        }\n\n        // Skip empty drawings\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('🔆 Empty drawing', cardId);\n          return;\n        }\n\n        const createdAt = extractCreatedAt(key);\n        const artistId = dataDrawing.playerId ?? 'unknown';\n        const entryId = [cardId, artistId, createdAt].join(SEPARATOR);\n        const drawingEntry: DrawingEntry = {\n          id: entryId,\n          drawing: dataDrawing.drawing,\n          artistId,\n          createdAt,\n        };\n\n        if (allDrawings[cardId] === undefined) {\n          allDrawings[cardId] = {\n            id: cardId,\n            text: dataDrawing.text,\n            drawings: [drawingEntry],\n            updatedAt: drawingEntry.createdAt,\n          };\n        } else {\n          if (!allDrawings[cardId].drawings.some((d) => d.id === drawingEntry.id)) {\n            allDrawings[cardId].drawings.push(drawingEntry);\n\n            if (drawingEntry.createdAt > allDrawings[cardId].updatedAt) {\n              allDrawings[cardId].updatedAt = drawingEntry.createdAt;\n            }\n          }\n        }\n      });\n    });\n\n    return allDrawings;\n  }, [firebaseDrawingsQueries, isDrawingsSuccess, tdrDrawingsQuery.data, tdrDrawingsQuery.isSuccess]);\n\n  const drawingsPerArtist = useMemo(() => {\n    return Object.values(drawings).reduce((acc: Record<string, DrawingPerArtist>, drawing) => {\n      drawing.drawings.forEach((drawingEntry) => {\n        const artistId = drawingEntry.artistId;\n        if (acc[artistId] === undefined) {\n          acc[artistId] = {\n            artistId,\n            drawingsCount: 1,\n            firstDrawingAt: drawingEntry.createdAt,\n            lastDrawingAt: drawingEntry.createdAt,\n          };\n        } else {\n          acc[artistId].drawingsCount += 1;\n\n          if (drawingEntry.createdAt < acc[artistId].firstDrawingAt) {\n            acc[artistId].firstDrawingAt = drawingEntry.createdAt;\n          }\n          if (drawingEntry.createdAt > acc[artistId].lastDrawingAt) {\n            acc[artistId].lastDrawingAt = drawingEntry.createdAt;\n          }\n        }\n      });\n\n      return acc;\n    }, {});\n  }, [drawings]);\n\n  return {\n    isLoading: isDrawingsLoading || tdrDrawingsQuery.isLoading,\n    error: tdrDrawingsQuery.error,\n    hasResponseData: !isEmpty(drawings),\n    drawings,\n    drawingsPerArtist: Object.values(drawingsPerArtist),\n  };\n}\n\nexport type DrawingPerArtist = {\n  artistId: string;\n  drawingsCount: number;\n  firstDrawingAt: DateMilliseconds;\n  lastDrawingAt: DateMilliseconds;\n};\n\nexport const ARTIST_ID_ALIAS: Record<string, string> = {\n  '3PkJr': 'Flaviane',\n  '3c4lY': 'Kavis',\n  BPTEL: 'Maris',\n  '0vuXf': 'Marcio',\n  Bm6dr: 'Livia',\n  QrfLz: 'Stephanie',\n  AlRvI: 'Unknown',\n  pK3OY: 'Unknown',\n  VF9iG: 'Zenaide',\n  WWUvD: 'Fernanda',\n  aec7L: 'Anonymous',\n  Xsimf: 'Carol',\n  fV5ns: 'Diego',\n  qQo9N: 'Laura',\n  yVAl7: 'Rodrigo',\n  O2IQm: 'Drica',\n  '24qec': 'Mariana',\n};\n","import { intersection, sampleSize, shuffle } from 'lodash';\nimport type { DailyDiscSet, Item } from 'types';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useMemo } from 'react';\n\nexport type DailyAquiOEntry = {\n  id: DateKey;\n  number: number;\n  type: 'aqui-o';\n  setId: string;\n  title: DualLanguageValue;\n  itemsIds: string[];\n};\n\nexport const useDailyAquiOGames = (\n  enabled: boolean,\n  _queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  updateWarnings: (warning: string) => void,\n) => {\n  const [aquiOHistory] = useParsedHistory(DAILY_GAMES_KEYS.AQUI_O, dailyHistory);\n\n  const tdrItemsQuery = useTDResource<Item>('items', enabled);\n  const aquiOSetsQuery = useTDResource<DailyDiscSet>('daily-disc-sets', enabled);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const entries = useMemo(() => {\n    if (!enabled || !aquiOSetsQuery.isSuccess || !aquiOHistory || !tdrItemsQuery.isSuccess) {\n      return {};\n    }\n\n    return buildDailyAquiOGames(\n      batchSize,\n      aquiOHistory,\n      aquiOSetsQuery.data,\n      tdrItemsQuery.data,\n      updateWarnings,\n    );\n  }, [enabled, aquiOSetsQuery, tdrItemsQuery, aquiOHistory, batchSize]);\n\n  return {\n    entries,\n    isLoading: tdrItemsQuery.isLoading || aquiOSetsQuery.isLoading,\n  };\n};\n\n/**\n * Builds a dictionary of DailyAquiOEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyAquiOEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param discSets - The dictionary of DailyDiscSet objects.\n * @returns A dictionary of DailyAquiOEntry objects.\n */\nexport const buildDailyAquiOGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  discSets: Dictionary<DailyDiscSet>,\n  items: Dictionary<Item>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Aqui Ó...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(discSets).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length >= 20),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    console.log('🔆 Not enough aqui-o sets left, shuffling...');\n    updateWarnings('Not enough aqui-o sets left');\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  const availableItems = Object.values(items).filter((item) => {\n    if (item?.nsfw) return false;\n    return intersection(item.decks ?? [], ['alien', 'dream', 'thing']).length > 0;\n  });\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyAquiOEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No aqui-o sets left');\n    }\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    lastDate = id;\n\n    if (isWeekend) {\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: history.latestNumber + i + 1,\n        setId: 'special',\n        title: {\n          pt: 'Especial Fim de Semana',\n          en: 'Weekend Special',\n        },\n        itemsIds: ['0', ...sampleSize(availableItems, 25).map((item) => item.id)],\n      };\n    } else {\n      entries[id] = {\n        id,\n        type: 'aqui-o',\n        number: history.latestNumber + i + 1,\n        setId: setEntry.id,\n        title: setEntry.title,\n        itemsIds: ['0', ...sampleSize(setEntry.itemsIds, 20)],\n      };\n    }\n  }\n\n  return entries;\n};\n","import { sampleSize, shuffle } from 'lodash';\nimport { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useMemo } from 'react';\n\nexport type DailyArteRuimEntry = {\n  id: DateKey;\n  number: number;\n  type: 'arte-ruim';\n  language: Language;\n  cardId: CardId;\n  text: string;\n  drawings: string[];\n  dataIds: string[];\n};\n\nexport const useDailyArteRuimGames = (\n  enabled: boolean,\n  queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n) => {\n  const [arteRuimHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTE_RUIM, dailyHistory);\n\n  const drawingsQuery = useDrawingsResourceData(enabled, queryLanguage);\n\n  const entries = useMemo(() => {\n    if (!enabled || drawingsQuery.isLoading || !arteRuimHistory) {\n      return [];\n    }\n\n    return buildDailyArteRuimGames(batchSize, arteRuimHistory, drawingsQuery, queryLanguage);\n  }, [enabled, drawingsQuery, queryLanguage, arteRuimHistory, batchSize, drawingsQuery.isLoading]);\n\n  return {\n    entries,\n    isLoading: drawingsQuery.isLoading,\n  };\n};\n\n/**\n * Builds the daily Arte Ruim games.\n *\n * @param batchSize - The number of games to generate.\n * @param drawingsQuery - The result of the drawings query.\n * @param queryLanguage - The language for the query.\n * @param drawingsCount - The minimum number of drawings required for a game.\n * @param history - The parsed daily history entry.\n * @returns An array of generated Arte Ruim games.\n */\nconst buildDailyArteRuimGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  drawingsQuery: ReturnType<typeof useDrawingsResourceData>,\n  queryLanguage: Language,\n) => {\n  console.count('Creating Arte Ruim...');\n  const drawings: DailyArteRuimEntry[] = Object.values(drawingsQuery.drawings)\n    .filter((d) => {\n      // Remove used cards\n      if (history.used.includes(d.id)) {\n        return false;\n      }\n\n      // Remove cards with less than the required number of drawings\n      if (d.drawings.length < 3) {\n        return false;\n      }\n\n      return true;\n    })\n    .map((d) => ({\n      id: d.id,\n      type: 'arte-ruim',\n      language: queryLanguage ?? 'pt',\n      cardId: d.id,\n      text: d.text,\n      drawings: d.drawings.map((drawing) => drawing.drawing),\n      number: 0,\n      dataIds: d.drawings.map((drawing) => drawing.id),\n    }));\n\n  // Slice to batchSize\n  const shuffledShortList = sampleSize(shuffle(drawings), batchSize);\n\n  let lastDate = history.latestDate;\n\n  const entries: DailyArteRuimEntry[] = shuffledShortList.map((e, index) => {\n    const id = getNextDay(lastDate);\n\n    lastDate = id;\n    return {\n      ...e,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n","import { sampleSize } from 'lodash';\nimport { useDrawingsResourceData } from 'pages/ArteRuim/useArteRuimDrawings';\nimport type { ArteRuimCard } from 'types';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useMemo } from 'react';\nimport { useTDResource } from 'hooks/useTDResource';\nimport type { DailyArteRuimEntry } from './daily-arte-ruim';\n\nexport type DailyArtistaEntry = {\n  id: DateKey;\n  number: number;\n  type: 'artista';\n  cards: ArteRuimCard[];\n};\n\nexport const useDailyArtistaGames = (\n  enabled: boolean,\n  queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n  arteRuimEntries: DailyArteRuimEntry[],\n) => {\n  const [artistaHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTISTA, dailyHistory);\n  const [arteRuimHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTE_RUIM, dailyHistory);\n\n  const arteRuimCardsQuery = useTDResource<ArteRuimCard>(`arte-ruim-cards-${queryLanguage}`, enabled);\n  const drawingsQuery = useDrawingsResourceData(enabled, queryLanguage);\n\n  const entries = useMemo(() => {\n    if (!enabled || !arteRuimCardsQuery.isSuccess || drawingsQuery.isLoading || !artistaHistory) {\n      return {};\n    }\n\n    const usedArteRuimIds = arteRuimEntries.map((arteRuim) => arteRuim.cardId);\n\n    return buildDailyArtistaGames(\n      batchSize,\n      artistaHistory,\n      arteRuimHistory,\n      arteRuimCardsQuery.data,\n      usedArteRuimIds,\n      drawingsQuery.drawings,\n    );\n  }, [\n    enabled,\n    arteRuimCardsQuery,\n    arteRuimHistory,\n    artistaHistory,\n    batchSize,\n    arteRuimEntries,\n    drawingsQuery.drawings,\n    drawingsQuery.isLoading,\n  ]);\n\n  return {\n    entries,\n    isLoading: arteRuimCardsQuery.isLoading || drawingsQuery.isLoading,\n  };\n};\n\nexport const buildDailyArtistaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  arteRuimHistory: ParsedDailyHistoryEntry,\n  arteRuimCards: Dictionary<ArteRuimCard>,\n  recentlyUsedIds: CardId[],\n  drawings: ReturnType<typeof useDrawingsResourceData>['drawings'],\n) => {\n  console.count('Creating Artista...');\n\n  let lastDate = history.latestDate;\n\n  const entries: Dictionary<DailyArtistaEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const availableCardsIds = Object.keys(arteRuimCards ?? {}).filter(\n      (cardId) =>\n        !arteRuimHistory.used.includes(cardId) &&\n        !recentlyUsedIds.includes(cardId) &&\n        drawings?.[cardId]?.drawings?.length < 4,\n    );\n    console.log('availableCardsIds', availableCardsIds);\n    const cards = sampleSize(availableCardsIds, 20).map((cardId) => arteRuimCards[cardId]);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'artista',\n      number: history.latestNumber + i + 1,\n      cards,\n    };\n  }\n  return entries;\n};\n","import { keys, random, sample, sampleSize, shuffle, values } from 'lodash';\nimport type { Item, ItemAttribute, ItemAttributesValues } from 'types';\nimport { makeArray } from 'utils';\nimport { ATTRIBUTE_VALUE } from 'utils/constants';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport { useMemo } from 'react';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useTDResource } from 'hooks/useTDResource';\n\ntype DailyAlienGameAttribute = {\n  id: string;\n  name: string;\n  description: string;\n  spriteId: string;\n  itemsIds: string[];\n};\n\ntype DailyAlienGameRequest = {\n  spritesIds: string[];\n  itemId: string;\n};\n\nexport type DailyComunicacaoAlienigenaEntry = {\n  id: DateKey;\n  setId: string;\n  number: number;\n  type: 'comunicação-alienígena';\n  attributes: DailyAlienGameAttribute[];\n  requests: DailyAlienGameRequest[];\n  solution: string;\n  itemsIds: string[];\n  valid?: boolean;\n};\n\nexport const useDailyComunicacaoAlienigenaGames = (\n  enabled: boolean,\n  _queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  updateWarnings: (warning: string) => void,\n) => {\n  const [comunicacaoAlienigenaHistory] = useParsedHistory(\n    DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA,\n    dailyHistory,\n  );\n\n  const tdrItemsQuery = useTDResource<Item>('items', enabled);\n  const tdrAttributesQuery = useTDResource<ItemAttribute>('items-attributes', enabled);\n  const tdrItemsAttributesValuesQuery = useTDResource<ItemAttributesValues>(\n    'items-attribute-values',\n    enabled,\n  );\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: functions shouldn't be used as dependencies\n  const entries = useMemo(() => {\n    if (\n      !enabled ||\n      !comunicacaoAlienigenaHistory ||\n      !tdrAttributesQuery.isSuccess ||\n      !tdrItemsAttributesValuesQuery.isSuccess ||\n      !tdrItemsQuery.isSuccess\n    ) {\n      return {};\n    }\n\n    return buildDailyComunicacaoAlienigenaGames(\n      batchSize,\n      comunicacaoAlienigenaHistory,\n      tdrAttributesQuery.data,\n      tdrItemsAttributesValuesQuery.data,\n      tdrItemsQuery.data,\n      updateWarnings,\n    );\n  }, [\n    enabled,\n    batchSize,\n    comunicacaoAlienigenaHistory,\n    comunicacaoAlienigenaHistory,\n    tdrAttributesQuery,\n    tdrItemsAttributesValuesQuery,\n    tdrItemsQuery,\n  ]);\n\n  return {\n    entries,\n    isLoading:\n      tdrItemsQuery.isLoading || tdrAttributesQuery.isLoading || tdrItemsAttributesValuesQuery.isLoading,\n  };\n};\n\nexport const buildDailyComunicacaoAlienigenaGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  attributes: Dictionary<ItemAttribute>,\n  attributeValues: Dictionary<ItemAttributesValues>,\n  items: Dictionary<Item>,\n  updateWarnings: (warning: string) => void,\n) => {\n  console.count('Creating Comunicacao Alienigena...');\n  let lastDate = history.latestDate;\n\n  const allAttributes = values(attributes);\n  // .filter((attr) => !attr.limited);\n  const allAttributesValues = values(attributeValues).filter(\n    (i) => i.complete && items?.[i.id]?.nsfw !== true,\n  );\n\n  const preliminaryEntries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  let tries = 0;\n  while (keys(preliminaryEntries).length < batchSize && tries < 100) {\n    const entry = generateComunicacaoAlienigenaGame(allAttributes, allAttributesValues);\n    if (entry.valid && !preliminaryEntries[entry.setId] && !history.used.includes(entry.setId)) {\n      preliminaryEntries[entry.setId] = entry;\n    }\n    if (keys(preliminaryEntries).length >= batchSize) {\n      break;\n    }\n    tries += 1;\n  }\n\n  console.log(`🔆 Generating this batch took ${tries} tries`);\n\n  if (tries >= 100) {\n    updateWarnings('Not enough valid comunicacao alienigena games (over 100 attempts)');\n  }\n\n  const entries: Dictionary<DailyComunicacaoAlienigenaEntry> = {};\n  Object.values(preliminaryEntries).forEach((entry, index) => {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = {\n      ...entry,\n      id,\n      number: history.latestNumber + index + 1,\n    };\n  });\n\n  return entries;\n};\n\nconst generateComunicacaoAlienigenaGame = (\n  attributes: ItemAttribute[],\n  attributeValues: ItemAttributesValues[],\n): DailyComunicacaoAlienigenaEntry => {\n  const shuffledAttributeValues = shuffle(attributeValues);\n\n  const spriteIDs = shuffle(makeArray(50, 0));\n\n  // Select 3 attributes and reassign random sprites\n  const selectedAttributes = sampleSize(attributes, 3).map((attr) => ({\n    ...attr,\n    spriteId: `${spriteIDs.pop()}`,\n  }));\n  const attributeA: string[] = [];\n  const attributeB: string[] = [];\n  const attributeC: string[] = [];\n  const attributeAB: string[] = [];\n  const attributeAC: string[] = [];\n  const attributeBC: string[] = [];\n  const attributeABC: string[] = [];\n  const none: string[] = [];\n\n  shuffledAttributeValues.forEach((item) => {\n    const POSITIVE = [ATTRIBUTE_VALUE.DETERMINISTIC, ATTRIBUTE_VALUE.RELATED];\n    const isVeryValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueA = POSITIVE.includes(item.attributes[selectedAttributes[0].id]);\n    const isNotValueA = item.attributes[selectedAttributes[0].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueB = POSITIVE.includes(item.attributes[selectedAttributes[1].id]);\n    const isNotValueB = item.attributes[selectedAttributes[1].id] === ATTRIBUTE_VALUE.UNRELATED;\n    const isVeryValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.DETERMINISTIC;\n    const isValueC = POSITIVE.includes(item.attributes[selectedAttributes[2].id]);\n    const isNotValueC = item.attributes[selectedAttributes[2].id] === ATTRIBUTE_VALUE.UNRELATED;\n\n    if (isNotValueA && isNotValueB && isNotValueC) {\n      return none.push(item.id);\n    }\n    if (isVeryValueA && isNotValueB && isNotValueC) {\n      attributeA.push(item.id);\n    }\n    if (isNotValueA && isVeryValueB && isNotValueC) {\n      attributeB.push(item.id);\n    }\n    if (isNotValueA && isNotValueB && isVeryValueC) {\n      attributeC.push(item.id);\n    }\n    if (isValueA && isValueB && isNotValueC) {\n      attributeAB.push(item.id);\n    }\n    if (isValueA && isNotValueB && isValueC) {\n      attributeAC.push(item.id);\n    }\n    if (isNotValueA && isValueB && isValueC) {\n      attributeBC.push(item.id);\n    }\n    if (isValueA && isValueB && isValueC) {\n      attributeABC.push(item.id);\n    }\n  });\n\n  const gameAttributes: DailyComunicacaoAlienigenaEntry['attributes'] = selectedAttributes.map((attr) => ({\n    id: attr.id,\n    name: attr.name.pt,\n    description: attr.description.pt,\n    spriteId: attr.spriteId,\n    itemsIds: [],\n  }));\n  gameAttributes[0].itemsIds = sampleSize(\n    attributeA,\n    attributeA.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[1].itemsIds = sampleSize(\n    attributeB,\n    attributeB.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n  gameAttributes[2].itemsIds = sampleSize(\n    attributeC,\n    attributeC.length > 3 ? 3 : Math.max(attributeA.length - 1, 1),\n  );\n\n  const usedItemsIds: string[] = [];\n  gameAttributes.forEach((attr) => {\n    usedItemsIds.push(...attr.itemsIds);\n  });\n\n  const complexRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // AB request\n  if (attributeAB.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[1].spriteId],\n      itemId: sample(attributeAB) ?? '',\n    });\n  }\n  // AC request\n  if (attributeAC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeAC) ?? '',\n    });\n  }\n  // BC request\n  if (attributeBC.length > 0) {\n    complexRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId, selectedAttributes[2].spriteId],\n      itemId: sample(attributeBC) ?? '',\n    });\n  }\n  // ABC request\n  if (attributeABC.length > 0) {\n    complexRequests.push({\n      spritesIds: selectedAttributes.map((attr) => attr.spriteId),\n      itemId: sample(attributeABC) ?? '',\n    });\n  }\n  const simpleRequests: DailyComunicacaoAlienigenaEntry['requests'] = [];\n  // Additional request A\n  if (attributeA.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[0].spriteId],\n      itemId: attributeA.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request B\n  if (attributeB.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[1].spriteId],\n\n      itemId: attributeB.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n  // Additional request C\n  if (attributeC.length > 0) {\n    simpleRequests.push({\n      spritesIds: [selectedAttributes[2].spriteId],\n      itemId: attributeC.filter((id) => !usedItemsIds.includes(id))[0],\n    });\n  }\n\n  let requests = sampleSize(complexRequests, 4);\n\n  if (requests.length < 3) {\n    requests.push(...sampleSize(simpleRequests, 4 - requests.length));\n  }\n\n  if (requests.length < 4) {\n    console.log('🔆 Not enough requests for an alien communication, marking it as invalid');\n  }\n\n  requests = shuffle(requests);\n\n  const requestItemsIds: string[] = requests.map((req) => req.itemId);\n\n  const result: DailyComunicacaoAlienigenaEntry = {\n    id: '0000-00-00',\n    setId: gameAttributes\n      .map((attr) => attr.id)\n      .sort()\n      .join('-'),\n    number: 0,\n    type: 'comunicação-alienígena',\n    attributes: gameAttributes,\n    requests,\n    solution: requestItemsIds.join('-'),\n    itemsIds: shuffle([\n      ...requestItemsIds,\n      ...sampleSize([none[0], none[1], none[2], none[3]], random(1, 3)),\n    ]).filter(Boolean),\n    valid: false,\n  };\n\n  // Validate game\n  result.valid = [\n    result.attributes.length === 3,\n    result.requests.length === 4,\n    result.itemsIds.length > 4,\n    result.attributes.every((attr) => attr.itemsIds.length > 0),\n    result.requests.every((req) => req.itemId),\n  ].every(Boolean);\n\n  return result;\n};\n","import { sampleSize, shuffle } from 'lodash';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { useMemo } from 'react';\n\nexport type DailyControleDeEstoqueEntry = {\n  id: DateKey;\n  number: number;\n  type: 'controle-de-estoque';\n  language: Language;\n  title: string;\n  goods: string[];\n  orders: string[];\n};\n\nexport const useDailyControleDeEstoqueGames = (\n  enabled: boolean,\n  _queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n) => {\n  const [controleDeEstoqueHistory] = useParsedHistory(DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE, dailyHistory);\n\n  const entries = useMemo(() => {\n    if (!enabled || !controleDeEstoqueHistory) {\n      return {};\n    }\n\n    return buildDailyControleDeEstoqueGames(batchSize, controleDeEstoqueHistory);\n  }, [enabled, batchSize, controleDeEstoqueHistory]);\n\n  return {\n    entries,\n    isLoading: false,\n  };\n};\n\n/**\n * Builds the Controle de Estoque games for the Daily component.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @returns The dictionary of Controle de Estoque games.\n */\nexport const buildDailyControleDeEstoqueGames = (batchSize: number, history: ParsedDailyHistoryEntry) => {\n  console.count('Creating Controle de Estoque...');\n\n  let lastDate = history.latestDate;\n\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyControleDeEstoqueEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    lastDate = id;\n\n    entries[id] = generateControleDeEstoqueGame(id, history.latestNumber + i + 1);\n  }\n  return entries;\n};\n\nconst TOTAL_GOODS = 256;\nconst GOODS_SIZE = 16;\nconst ORDER_SIZE = 4;\nconst OUT_OF_STOCK_SIZE = 1;\n/**\n * Generates a DailyControleDeEstoqueEntry object based on the provided id and number.\n *\n * @param id - The id of the entry in the format \"YYYY-MM-DD\".\n * @param num - The number associated with the entry.\n * @returns The generated DailyControleDeEstoqueEntry object.\n */\nexport const generateControleDeEstoqueGame = (id: string, num: number) => {\n  const [year, month, day] = id.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const dayOfWeekIndex = date.getDay();\n\n  const dayOfTheWeek = [\n    'Domingo',\n    'Segunda-feira',\n    'Terça-feira',\n    'Quarta-feira',\n    'Quinta-feira',\n    'Sexta-feira',\n    'Sábado',\n  ][dayOfWeekIndex];\n\n  const entry: DailyControleDeEstoqueEntry = {\n    id,\n    number: num,\n    type: 'controle-de-estoque',\n    language: 'pt',\n    title: dayOfTheWeek,\n    goods: [],\n    orders: [],\n  };\n\n  const goods = sampleSize(\n    Array(TOTAL_GOODS)\n      .fill('')\n      .map((_, i) => `good-${i + 1}`),\n    GOODS_SIZE + OUT_OF_STOCK_SIZE,\n  );\n  const outOfStockGood = goods.pop();\n\n  entry.goods = goods;\n  entry.orders = sampleSize(entry.goods, ORDER_SIZE);\n  // Add non-available requests\n  if (!outOfStockGood) {\n    throw new Error('No out of stock good');\n  }\n  entry.orders.push(outOfStockGood);\n  entry.orders = shuffle(entry.orders);\n\n  return entry;\n};\n","import { shuffle } from 'lodash';\nimport type { DailyMovieSet } from 'types';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { useMemo } from 'react';\n\nexport type DailyFilmacoEntry = {\n  id: DateKey;\n  number: number;\n  type: 'filmaco';\n  setId: string;\n  title: string;\n  itemsIds: string[];\n  year: number;\n};\n\nexport const useDailyFilmacoGames = (\n  enabled: boolean,\n  _queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n) => {\n  const [filmacoHistory] = useParsedHistory(DAILY_GAMES_KEYS.FILMACO, dailyHistory);\n\n  const movieSetsQuery = useTDResource<DailyMovieSet>('daily-movie-sets', enabled);\n\n  const entries = useMemo(() => {\n    if (!enabled || !movieSetsQuery.isSuccess || !filmacoHistory) {\n      return {};\n    }\n\n    return buildDailyFilmacoGames(batchSize, filmacoHistory, movieSetsQuery.data);\n  }, [enabled, movieSetsQuery, filmacoHistory, batchSize]);\n\n  return {\n    entries,\n    isLoading: movieSetsQuery.isLoading,\n  };\n};\n\n/**\n * Builds a dictionary of DailyFilmacoEntry objects based on the given parameters.\n *\n * @param batchSize - The number of DailyFilmacoEntry objects to generate.\n * @param history - The parsed daily history entry.\n * @param movies - The dictionary of DailyMovieSet objects.\n * @returns A dictionary of DailyFilmacoEntry objects.\n */\nexport const buildDailyFilmacoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  movies: Dictionary<DailyMovieSet>,\n) => {\n  console.count('Creating Filmaço...');\n  // Filter complete sets only\n  const completeSets = shuffle(\n    Object.values(movies).filter((setEntry) => setEntry.itemsIds.filter(Boolean).length > 0),\n  );\n  // Filter not-used sets only\n  const notUsedSets = completeSets.filter((setEntry) => !history.used.includes(setEntry.id));\n\n  if (notUsedSets.length < batchSize) {\n    notUsedSets.push(...shuffle(completeSets));\n  }\n\n  let lastDate = history.latestDate;\n  // Get list, if not enough, get from complete\n  const entries: Dictionary<DailyFilmacoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const setEntry = notUsedSets[i];\n    if (!setEntry) {\n      console.error('No filmaço sets left');\n      break;\n    }\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'filmaco',\n      number: history.latestNumber + i + 1,\n      setId: setEntry.id,\n      title: setEntry.title,\n      itemsIds: setEntry.itemsIds,\n      year: setEntry.year,\n    };\n  }\n\n  return entries;\n};\n","import { difference, flatMap, intersection, shuffle, sortBy, uniq } from 'lodash';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { checkWeekend, getNextDay } from '../utils';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { useMemo } from 'react';\nimport { useLoadWordLibrary } from 'hooks/useLoadWordLibrary';\n\nexport type DailyPalavreadoEntry = {\n  id: DateKey;\n  number: number;\n  type: 'palavreado';\n  keyword: string;\n  words: string[];\n  letters: string[];\n};\n\nexport const useDailyPalavreadoGames = (\n  enabled: boolean,\n  queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n) => {\n  const [palavreadoHistory] = useParsedHistory(DAILY_GAMES_KEYS.PALAVREADO, dailyHistory);\n\n  const wordsFourQuery = useLoadWordLibrary(4, queryLanguage, enabled, true);\n  const wordsFiveQuery = useLoadWordLibrary(5, queryLanguage, enabled, true);\n  const entries = useMemo(() => {\n    if (\n      !enabled ||\n      !wordsFourQuery.data ||\n      !wordsFourQuery.data.length ||\n      !wordsFiveQuery.data ||\n      !wordsFiveQuery.data.length ||\n      !palavreadoHistory\n    ) {\n      return {};\n    }\n\n    return buildDailyPalavreadoGames(batchSize, palavreadoHistory, wordsFourQuery.data, wordsFiveQuery.data);\n  }, [enabled, wordsFourQuery, wordsFiveQuery, palavreadoHistory, batchSize]);\n\n  return {\n    entries,\n    isLoading: wordsFourQuery.isLoading || wordsFiveQuery.isLoading,\n  };\n};\n\n/**\n * Builds a dictionary of DailyPalavreadoEntry games.\n *\n * @param batchSize - The number of games to generate.\n * @param history - The parsed daily history entry.\n * @param fourLetterWords - An array of four-letter words.\n * @returns A dictionary of DailyPalavreadoEntry games.\n */\nexport const buildDailyPalavreadoGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  fourLetterWords: string[],\n  fiveLetterWords: string[],\n) => {\n  console.count('Creating Palavreado...');\n  let lastDate = history.latestDate;\n  const usedWords: string[] = [];\n\n  const entries: Dictionary<DailyPalavreadoEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const id = getNextDay(lastDate);\n    const isWeekend = checkWeekend(id);\n    const size = isWeekend ? 5 : 4;\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'palavreado',\n      number: history.latestNumber + i + 1,\n      ...generatePalavreadoGame(\n        isWeekend ? fiveLetterWords : fourLetterWords,\n        [...Object.values(entries).map((e) => e.keyword), ...history.used],\n        usedWords,\n        size,\n      ),\n    };\n  }\n  return entries;\n};\n\n/**\n * Generates a Palavreado game.\n *\n * @param words - An array of words to choose from.\n * @param previouslyUsedWords - An array of words that have been used previously.\n * @param newUsedWords - An array of words that have been used in this game.\n * @param size - The number of words to generate.\n * @returns An object containing the keyword, selected words, and shuffled letters.\n */\nexport const generatePalavreadoGame = (\n  words: string[],\n  previouslyUsedWords: string[],\n  newUsedWords: string[],\n  size = 4,\n  fixedKeyword?: string,\n) => {\n  let shuffledWords = shuffle(difference(words, newUsedWords, previouslyUsedWords));\n\n  // Select a random word from the list and call it 'keyword'\n  const keyword = fixedKeyword ? fixedKeyword : (shuffledWords.pop() ?? '');\n  if (fixedKeyword) {\n    shuffledWords = difference(shuffledWords, [fixedKeyword]);\n  }\n\n  const selectedWords: string[] = [];\n  for (let i = 0; i < size; i++) {\n    const newWord = getNewWord(words, keyword, selectedWords, i);\n    selectedWords.push(newWord);\n  }\n\n  newUsedWords.push(keyword, ...selectedWords);\n\n  return {\n    keyword,\n    words: selectedWords,\n    letters: shuffleLetters(selectedWords, keyword.length),\n  };\n};\n\n/**\n * Retrieves a new word from the given list of words based on the provided keyword, selected words, and index.\n *\n * @param words - The list of words to choose from.\n * @param keyword - The keyword to match against.\n * @param selectedWords - The list of already selected words.\n * @param index - The index to compare against in each word.\n * @returns The new word selected based on the keyword, selected words, and index.\n */\nconst getNewWord = (words: string[], keyword: string, selectedWords: string[], index: number) => {\n  const usedLetters = uniq([...flatMap(selectedWords.map((word) => word.split(''))), ...keyword.split('')]);\n\n  const shortList = shuffle(\n    words.filter((word) => word[index] === keyword[index] && !selectedWords.includes(word)),\n  );\n  const rankedList = sortBy(shortList, (word) => {\n    const matchCount = intersection(word.split(''), usedLetters).length;\n\n    return matchCount;\n  });\n\n  return rankedList[0];\n};\n\nconst shuffleLetters = (selectedWords: string[], size: number) => {\n  const letters = flatMap(selectedWords.map((word) => word.split('')));\n  const preservedIndexes = size === 4 ? [0, 5, 10, 15] : [0, 6, 12, 18, 24];\n  const otherLetters = shuffle(letters.filter((_, index) => !preservedIndexes.includes(index)));\n\n  const shuffledLetters: string[] = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (preservedIndexes.includes(i)) {\n      shuffledLetters.push(letters[i]);\n    } else {\n      shuffledLetters.push(otherLetters.shift() ?? '');\n    }\n  }\n\n  return shuffledLetters;\n};\n","import { orderBy, sampleSize, shuffle } from 'lodash';\nimport type { SuspectCard, TestimonyQuestionCard } from 'types';\nimport { SEPARATOR } from 'utils/constants';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useMemo } from 'react';\nimport { useTDResource } from 'hooks/useTDResource';\n\ntype TaNaCaraQuestion = {\n  testimonyId: string;\n  question: string;\n  nsfw?: boolean;\n  /**\n   * @deprecated\n   */\n  suspectsIds?: string[];\n};\n\nexport type DailyTaNaCaraEntry = {\n  id: DateKey;\n  number: number;\n  type: 'ta-na-cara';\n  testimonies: TaNaCaraQuestion[];\n  suspectsIds?: string[];\n};\n\nexport const useDailyTaNaCaraGames = (\n  enabled: boolean,\n  queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n) => {\n  const [taNaCaraHistory] = useParsedHistory(DAILY_GAMES_KEYS.TA_NA_CARA, dailyHistory);\n\n  const suspectsQuery = useTDResource<SuspectCard>('suspects', enabled);\n  const testimoniesQuery = useTDResource<TestimonyQuestionCard>(\n    `testimony-questions-${queryLanguage}`,\n    enabled,\n  );\n\n  const entries = useMemo(() => {\n    if (!enabled || !suspectsQuery.isSuccess || !testimoniesQuery.isSuccess || !taNaCaraHistory) {\n      return {};\n    }\n\n    return buildDailyTaNaCaraGames(batchSize, taNaCaraHistory, suspectsQuery.data, testimoniesQuery.data);\n  }, [enabled, suspectsQuery, testimoniesQuery, taNaCaraHistory, batchSize]);\n\n  return {\n    entries,\n    isLoading: suspectsQuery.isLoading || testimoniesQuery.isLoading,\n  };\n};\n\nconst POOL_SIZE = 30;\nconst TESTIMONY_SIZE = 12;\nconst SUSPECTS_SIZE = 12;\n\nexport const buildDailyTaNaCaraGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  suspects: Dictionary<SuspectCard>,\n  testimonies: Dictionary<TestimonyQuestionCard>,\n) => {\n  console.count('Creating Tá Na Cara...');\n\n  const dict = getTaNaCaraUsedDictionary(history.used);\n\n  const suspectsBatch = orderBy(\n    shuffle(Object.values(suspects).slice(0, POOL_SIZE)).map((suspect) => {\n      const [, idNum] = suspect.id.split('-');\n      return `us-ct-${idNum}`;\n    }),\n    [(o) => dict?.[o]],\n    ['asc'],\n  );\n\n  const testimoniesBatch = shuffle(Object.values(testimonies).slice(0, POOL_SIZE));\n\n  let lastDate = history.latestDate;\n  const entries: Dictionary<DailyTaNaCaraEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    const testimonies = sampleSize(testimoniesBatch, TESTIMONY_SIZE).map((testimony) => {\n      return {\n        testimonyId: testimony.id,\n        question: testimony.question,\n        nsfw: !!testimony.nsfw,\n      };\n    });\n\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      type: 'ta-na-cara',\n      number: history.latestNumber + i + 1,\n      suspectsIds: sampleSize(suspectsBatch, SUSPECTS_SIZE),\n      testimonies,\n    };\n  }\n\n  return entries;\n};\n\nconst getTaNaCaraUsedDictionary = (previousHistory: string[]) => {\n  return previousHistory.reduce((acc: Dictionary<number>, entry) => {\n    const split = entry.split(SEPARATOR);\n    const entryId = split[0];\n    const count = Number(split[1]);\n    acc[entryId] = count || 0;\n\n    return acc;\n  }, {});\n};\n\nexport const gatherUsedTaNaCaraEntries = (previousHistory: string[], currentData: DailyTaNaCaraEntry[]) => {\n  const dict = getTaNaCaraUsedDictionary(previousHistory);\n\n  currentData.forEach((entry) => {\n    entry.testimonies.forEach((testimony) => {\n      if (dict[testimony.testimonyId] === undefined) {\n        dict[testimony.testimonyId] = 0;\n      }\n      dict[testimony.testimonyId] += 1;\n\n      testimony?.suspectsIds?.forEach((suspectId) => {\n        if (dict[suspectId] === undefined) {\n          dict[suspectId] = 0;\n        }\n        dict[suspectId] += 1;\n      });\n    });\n    entry.suspectsIds?.forEach((suspectId) => {\n      if (dict[suspectId] === undefined) {\n        dict[suspectId] = 0;\n      }\n      dict[suspectId] += 1;\n    });\n  });\n\n  return Object.entries(dict).map(([id, count]) => `${id}${SEPARATOR}${count}`);\n};\n","import { capitalize, orderBy, sample, sampleSize, shuffle } from 'lodash';\nimport type { DailyHistory, DateKey, ParsedDailyHistoryEntry } from '../types';\nimport { getNextDay } from '../utils';\nimport type { DailyQuartetSet, ItemGroup } from 'types';\nimport { SEPARATOR } from 'utils/constants';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { DAILY_GAMES_KEYS } from '../constants';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { useMemo } from 'react';\nimport { removeDuplicates } from 'utils';\n\ntype QuartetosSet = {\n  id: string;\n  title: string;\n  itemsIds: string[];\n  level: number;\n};\n\nexport type DailyQuartetosEntry = {\n  id: DateKey;\n  setId: string;\n  number: number;\n  type: 'quartetos';\n  grid: string[]; // 4x4\n  difficulty: number;\n  sets: QuartetosSet[];\n};\n\nexport const useDailyQuartetosGames = (\n  enabled: boolean,\n  queryLanguage: Language,\n  batchSize: number,\n  dailyHistory: DailyHistory,\n  _updateWarnings: (warning: string) => void,\n) => {\n  const [quartetosHistory] = useParsedHistory(DAILY_GAMES_KEYS.ARTE_RUIM, dailyHistory);\n\n  const dailyQuartetSetQuery = useTDResource<DailyQuartetSet>('daily-quartet-sets', enabled);\n  const itemGroupsQuery = useTDResource<ItemGroup>('items-groups', enabled);\n\n  const entries = useMemo(() => {\n    if (!enabled || dailyQuartetSetQuery.isLoading || itemGroupsQuery.isLoading || !quartetosHistory) {\n      return {};\n    }\n\n    return buildDailyQuartetosGames(\n      batchSize,\n      quartetosHistory,\n      queryLanguage,\n      dailyQuartetSetQuery.data,\n      itemGroupsQuery.data,\n    );\n  }, [enabled, queryLanguage, quartetosHistory, batchSize, dailyQuartetSetQuery, itemGroupsQuery]);\n\n  return {\n    entries,\n    isLoading: dailyQuartetSetQuery.isLoading || itemGroupsQuery.isLoading,\n  };\n};\n\nexport const buildDailyQuartetosGames = (\n  batchSize: number,\n  history: ParsedDailyHistoryEntry,\n  queryLanguage: Language,\n  quartetsSets: Dictionary<DailyQuartetSet>,\n  itemsGroups: Dictionary<ItemGroup>,\n) => {\n  console.count('Creating Quartetos...');\n\n  // Filter out any incomplete sets and used sets\n  let eligibleSets = Object.values(quartetsSets).filter(\n    (setEntry) => setEntry.itemsIds.length >= 4 && !history.used.includes(setEntry.id),\n  );\n\n  let lastDate = history.latestDate;\n  const entries: Dictionary<DailyQuartetosEntry> = {};\n  for (let i = 0; i < batchSize; i++) {\n    // The game always consists of 3 quartets sets and 1 random group entry\n    const takenItemsIds: string[] = [];\n    // Get 3 sets\n    const sets: QuartetosSet[] = sampleSize(eligibleSets, 3).map((set) => {\n      takenItemsIds.push(...set.itemsIds);\n      return {\n        id: set.id,\n        title: set.title,\n        itemsIds: sampleSize(set.itemsIds, 4),\n        level: set.level,\n      };\n    });\n    const selectedSetsIds = sets.map((set) => set.id);\n\n    // Remove selected sets from eligibleSets\n    eligibleSets = eligibleSets.filter((set) => !selectedSetsIds.includes(set.id));\n\n    // Get a group that does not share any items with the selected sets\n    const eligibleGroups = Object.values(itemsGroups).filter(\n      (group) => !takenItemsIds.some((id) => group.itemsIds.includes(id)),\n    );\n    const selectedGroup = sample(eligibleGroups);\n    if (!selectedGroup) {\n      throw Error('No eligible group found for Quartetos game');\n    }\n    sets.push({\n      id: selectedGroup.id,\n      title: capitalize(selectedGroup.name[queryLanguage]),\n      itemsIds: sampleSize(selectedGroup.itemsIds, 4),\n      level: 2,\n    });\n\n    const orderedSets = orderBy(sets, ['level'], ['desc']);\n    const setId = sets.map((set) => set.id).join(SEPARATOR);\n    const grid = shuffle(sets.flatMap((set) => set.itemsIds));\n    const difficulty = Math.ceil(sets.reduce((acc, set) => acc + set.level, 0) / sets.length);\n\n    const id = getNextDay(lastDate);\n    lastDate = id;\n    entries[id] = {\n      id,\n      number: history.latestNumber + i + 1,\n      setId,\n      type: 'quartetos',\n      grid,\n      difficulty,\n      sets: orderedSets,\n    };\n  }\n\n  return entries;\n};\n\nexport const gatherUsedQuartetosEntries = (previousHistory: string[], currentData: DailyQuartetosEntry[]) => {\n  return removeDuplicates([\n    ...previousHistory,\n    ...currentData.flatMap((entry) => entry.sets.map((set) => set.id)),\n  ]);\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LANGUAGE_PREFIX } from '../utils/constants';\nimport { type DailyAquiOEntry, useDailyAquiOGames } from '../utils/games/daily-aqui-o';\nimport { type DailyArteRuimEntry, useDailyArteRuimGames } from '../utils/games/daily-arte-ruim';\nimport { type DailyArtistaEntry, useDailyArtistaGames } from '../utils/games/daily-artista';\nimport {\n  type DailyComunicacaoAlienigenaEntry,\n  useDailyComunicacaoAlienigenaGames,\n} from '../utils/games/daily-comunicacao-alienigena';\nimport {\n  type DailyControleDeEstoqueEntry,\n  useDailyControleDeEstoqueGames,\n} from '../utils/games/daily-controle-de-estoque';\nimport { type DailyFilmacoEntry, useDailyFilmacoGames } from '../utils/games/daily-filmaco';\nimport { type DailyPalavreadoEntry, useDailyPalavreadoGames } from '../utils/games/daily-palavreado';\nimport { type DailyTaNaCaraEntry, useDailyTaNaCaraGames } from '../utils/games/daily-ta-na-cara';\nimport {\n  type DailyTeoriaDeConjuntosEntry,\n  useDailyTeoriaDeConjuntosGames,\n} from '../utils/games/daily-teoria-de-conjuntos';\nimport type { DateKey } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { type DailyQuartetosEntry, useDailyQuartetosGames } from '../utils/games/daily-quartetos';\n\nexport type DailyEntry = {\n  id: DateKey;\n  // Games\n  'arte-ruim': DailyArteRuimEntry;\n  'aqui-o': DailyAquiOEntry;\n  'comunicacao-alienigena': DailyComunicacaoAlienigenaEntry;\n  'controle-de-estoque': DailyControleDeEstoqueEntry;\n  filmaco: DailyFilmacoEntry;\n  palavreado: DailyPalavreadoEntry;\n  quartetos: DailyQuartetosEntry;\n  'teoria-de-conjuntos': DailyTeoriaDeConjuntosEntry;\n  // Contributions\n  artista: DailyArtistaEntry;\n  'ta-na-cara': DailyTaNaCaraEntry;\n};\n\nexport type UseLoadDailySetup = {\n  isLoading: boolean;\n  entries: DailyEntry[];\n  warnings: string[];\n};\n\n/**\n * Custom hook for loading daily setup data.\n *\n * @param enabled - Indicates whether the loading is enabled or not.\n * @param queryLanguage - Optional language parameter for the query.\n * @param drawingsCount - The number of drawings to load.\n * @param batchSize - The size of the batch to load.\n * @returns An object containing the loading status, daily entries, latest date, latest number, and round 5 sample.\n */\nexport function useLoadDailySetup(\n  enabled: boolean,\n  queryLanguage: Language,\n  batchSize: number,\n): UseLoadDailySetup {\n  // STEP 1: HISTORY\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled });\n  const [warnings, setWarnings] = useState<string[]>([]);\n\n  const updateWarnings = useCallback((newWarning: string) => {\n    setWarnings((prev) => [...prev, newWarning]);\n  }, []);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: reset warnings on change of basic props\n  useEffect(() => {\n    setWarnings([]);\n  }, [batchSize, queryLanguage]);\n\n  const enableBuilders = enabled && historyQuery.isSuccess;\n\n  // BUILD AQUI Ó\n  const aquiO = useDailyAquiOGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD ARTE RUIM\n  const arteRuim = useDailyArteRuimGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD COMUNICAÇÃO ALIENÍGENA\n  const comunicacaoAlienigena = useDailyComunicacaoAlienigenaGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD CONTROLE DE ESTOQUE\n  const controleDeEstoque = useDailyControleDeEstoqueGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD FILMAÇO\n  const filmaco = useDailyFilmacoGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD PALAVREADO\n  const palavreado = useDailyPalavreadoGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // QUARTETOS\n  const quartetos = useDailyQuartetosGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD TEORIA DE CONJUNTOS\n  const teoriaDeConjuntos = useDailyTeoriaDeConjuntosGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // BUILD ARTISTA\n  const artista = useDailyArtistaGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n    arteRuim.entries,\n  );\n\n  // BUILD TA NA CARA\n  const taNaCara = useDailyTaNaCaraGames(\n    enableBuilders,\n    queryLanguage,\n    batchSize,\n    historyQuery.data ?? {},\n    updateWarnings,\n  );\n\n  // STEP N: Create entries\n  const entries = useMemo(() => {\n    if (arteRuim.entries.length === 0) {\n      return [];\n    }\n    console.count('Bundling entries...');\n    return arteRuim.entries.map((arteRuim) => {\n      return {\n        id: arteRuim.id,\n        // Games\n        'arte-ruim': arteRuim,\n        'aqui-o': aquiO.entries[arteRuim.id],\n        'comunicacao-alienigena': comunicacaoAlienigena.entries[arteRuim.id],\n        'controle-de-estoque': controleDeEstoque.entries[arteRuim.id],\n        filmaco: filmaco.entries[arteRuim.id],\n        palavreado: palavreado.entries[arteRuim.id],\n        quartetos: quartetos.entries[arteRuim.id],\n        'teoria-de-conjuntos': teoriaDeConjuntos.entries[arteRuim.id],\n        // Contributions\n        artista: artista.entries[arteRuim.id],\n        'ta-na-cara': taNaCara.entries[arteRuim.id],\n      };\n    });\n  }, [\n    arteRuim.entries,\n    aquiO.entries,\n    filmaco.entries,\n    comunicacaoAlienigena.entries,\n    controleDeEstoque.entries,\n    palavreado.entries,\n    quartetos.entries,\n    teoriaDeConjuntos.entries,\n    artista.entries,\n    taNaCara.entries,\n  ]);\n\n  return {\n    isLoading:\n      historyQuery.isLoading ||\n      aquiO.isLoading ||\n      arteRuim.isLoading ||\n      comunicacaoAlienigena.isLoading ||\n      controleDeEstoque.isLoading ||\n      filmaco.isLoading ||\n      palavreado.isLoading ||\n      quartetos.isLoading ||\n      teoriaDeConjuntos.isLoading ||\n      artista.isLoading ||\n      taNaCara.isLoading,\n    entries,\n    warnings,\n  };\n}\n","import { Alert, Button, Flex, Space, Table, type TableColumnsType } from 'antd';\nimport { CanvasSVG } from 'components/Daily/CanvasSVG';\nimport { ImageCard } from 'components/Images/ImageCard';\nimport { AlienSign, Item } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport type { ArteRuimCard } from 'types';\nimport { type DailyEntry, type UseLoadDailySetup, useSaveDailySetup } from './hooks';\nimport type { DailyComunicacaoAlienigenaEntry } from './utils/games/daily-comunicacao-alienigena';\nimport type { DailyTaNaCaraEntry } from './utils/games/daily-ta-na-cara';\nimport { truncate } from 'lodash';\n\ntype DataPopulationProps = {\n  language: string;\n  dataLoad: UseLoadDailySetup;\n};\n\nexport function DataPopulation({ language, dataLoad }: DataPopulationProps) {\n  const queryLanguage = language as Language;\n  console.log(dataLoad.entries);\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Arte Ruim',\n      dataIndex: 'arte-ruim',\n      key: 'arte-ruim',\n      render: ({ number, cardId, text, drawings }) => {\n        return (\n          <Space direction=\"vertical\">\n            <Flex vertical>\n              <span>#{number}</span>\n              <span>CardId: {cardId}</span>\n              <span>Count: {drawings.length}</span>\n            </Flex>\n            <div>\n              \"\n              {text\n                .split('')\n                .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n                .join('')}\n              \"\n            </div>\n            <Space wrap>\n              {drawings.map((d: string) => (\n                <CanvasSVG key={d} drawing={d} width={75} height={75} className=\"canvas\" />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Aqui O',\n      dataIndex: 'aqui-o',\n      key: 'aqui-o',\n      render: ({ number, setId, title, itemsIds }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Title: {title[language]}</span>\n            <Flex gap={6} wrap>\n              <Item id={itemsIds[1]} width={50} />\n              <Item id={itemsIds[5]} width={50} />\n              <Item id={itemsIds[10]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Palavreado',\n      dataIndex: 'palavreado',\n      key: 'palavreado',\n      render: ({ number, words, letters, keyword }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Letters: {letters.length}</span>\n            <span>Keyword: {keyword}</span>\n            <Space direction=\"vertical\">\n              {words.map((word: string, index: number) => (\n                <span key={`${number}-${word}`}>\n                  {word\n                    .split('')\n                    .map((l: string, i: number) => (i === index || l === ' ' ? l : '⏹'))\n                    .join('')}\n                </span>\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Filmaço',\n      dataIndex: 'filmaco',\n      key: 'filmaco',\n      render: ({ number, setId, year, title }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {setId}</span>\n            <span>Year: {year}</span>\n            <span>\n              Title:{' '}\n              {title\n                .split('')\n                .map((l: string, i: number) => (i < 1 || l === ' ' ? l : '⏹'))\n                .join('')}\n            </span>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Controle de Estoque',\n      dataIndex: 'controle-de-estoque',\n      key: 'controle-de-estoque',\n      render: ({ number, title, goods }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <WarehouseGood id={goods[0]} width={50} />\n              <WarehouseGood id={goods[1]} width={50} />\n              <WarehouseGood id={goods[2]} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Teoria de Conjuntos',\n      dataIndex: 'teoria-de-conjuntos',\n      key: 'teoria-de-conjuntos',\n      render: ({ number, title, intersectingThing }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>Title: {title}</span>\n            <Flex gap={6} wrap>\n              <Item id={intersectingThing.id} width={50} />\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Comunicação Alienígena',\n      dataIndex: 'comunicacao-alienigena',\n      key: 'comunicacao-alienigena',\n      render: (entry: DailyComunicacaoAlienigenaEntry) => {\n        if (!entry) {\n          return <Alert message=\"No entry\" type=\"error\" />;\n        }\n\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <span>{entry.itemsIds.length} items</span>\n            <Space>\n              <Space direction=\"vertical\">\n                {entry.attributes.map((req) => (\n                  <AlienSign key={req.spriteId} id={`sign-${req.spriteId}`} width={50} />\n                ))}\n              </Space>\n              <Space direction=\"vertical\">\n                {entry.itemsIds.map((itemId) => (\n                  <Item key={itemId} id={itemId} width={50} />\n                ))}\n              </Space>\n            </Space>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Quartetos',\n      dataIndex: 'quartetos',\n      key: 'quartetos',\n      render: ({ number, setId, grid }) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{number}</span>\n            <span>SetId: {truncate(setId, { length: 9 })}</span>\n\n            <Flex gap={6} vertical>\n              {grid.slice(0, 4).map((itemId: string) => (\n                <Item key={itemId} id={itemId} width={50} />\n              ))}\n            </Flex>\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Artista',\n      dataIndex: 'artista',\n      key: 'artista',\n      render: ({ number, cards }) => {\n        return (\n          <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n            <span>#{number}</span>\n            {cards.map((card: ArteRuimCard, index: number) => (\n              <span key={`${card.id}-${index}`}>{card.text}</span>\n            ))}\n          </Space>\n        );\n      },\n    },\n    {\n      title: 'Tá Na Cara',\n      dataIndex: 'ta-na-cara',\n      key: 'ta-na-cara',\n      render: (entry: DailyTaNaCaraEntry) => {\n        return (\n          <Space direction=\"vertical\">\n            <span>#{entry.number}</span>\n            <Space direction=\"vertical\" style={{ maxHeight: 200, overflowY: 'auto' }}>\n              {entry.testimonies.map((question) => (\n                <span key={question.testimonyId}>{question.question}</span>\n              ))}\n            </Space>\n            <Space>\n              {entry.suspectsIds?.slice(0, 3).map((suspectId) => (\n                <ImageCard key={suspectId} id={suspectId} width={48} />\n              ))}\n            </Space>\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const { save, isPending } = useSaveDailySetup(queryLanguage ?? 'pt');\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      {dataLoad.warnings.map((warning) => (\n        <Alert key={warning} message={warning} type=\"warning\" showIcon />\n      ))}\n      <Flex justify=\"space-between\" align=\"center\">\n        <h4>Total: {dataLoad.entries.length}</h4>\n        <Button\n          onClick={() => save(dataLoad.entries)}\n          loading={isPending}\n          disabled={(dataLoad.entries ?? []).length === 0}\n          type=\"primary\"\n          size=\"large\"\n        >\n          Save\n        </Button>\n      </Flex>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n    </div>\n  );\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { App } from 'antd';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState } from 'react';\nimport { firestore } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\nimport { DAILY_GAMES_KEYS, LANGUAGE_PREFIX } from '../utils/constants';\nimport { gatherUsedTaNaCaraEntries } from '../utils/games/daily-ta-na-cara';\nimport type { DailyHistory } from '../utils/types';\nimport { useDailyHistoryQuery } from './useDailyHistoryQuery';\nimport { gatherUsedQuartetosEntries } from '../utils/games/daily-quartetos';\n\n/**\n * Custom hook for saving daily setup.\n *\n * @param queryLanguage The language for the query.\n * @returns An object containing the state and functions for saving daily setup.\n */\nexport function useSaveDailySetup(queryLanguage: Language) {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const source = LANGUAGE_PREFIX.DAILY[queryLanguage ?? 'pt'];\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const historyQuery = useDailyHistoryQuery(source, { enabled: Boolean(source) });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any[]) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `${source}/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `${source}/history`);\n      const previousHistory = historyQuery.data;\n\n      if (!previousHistory) {\n        throw new Error('No previous history');\n      }\n\n      const newHistory: DailyHistory = {\n        ...previousHistory,\n        [DAILY_GAMES_KEYS.ARTE_RUIM]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTE_RUIM].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.ARTE_RUIM].used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.ARTE_RUIM].cardId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.AQUI_O]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.AQUI_O].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory[DAILY_GAMES_KEYS.AQUI_O].used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.AQUI_O].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.PALAVREADO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.PALAVREADO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory.palavreado.used),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.PALAVREADO].keyword),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.ARTISTA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.ARTISTA].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.FILMACO]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.FILMACO].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.FILMACO]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.FILMACO].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.CONTROLE_DE_ESTOQUE].number,\n          used: '[]',\n        },\n        [DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].setId),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.TEORIA_DE_CONJUNTOS].intersectingThing.id),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].number,\n          used: JSON.stringify(\n            removeDuplicates([\n              ...JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA]?.used ?? '[]'),\n              ...data.map((e) => e[DAILY_GAMES_KEYS.COMUNICACAO_ALIENIGENA].setId),\n            ]),\n          ),\n        },\n        [DAILY_GAMES_KEYS.QUARTETOS]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.QUARTETOS].number,\n          used: JSON.stringify(\n            gatherUsedQuartetosEntries(\n              JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.QUARTETOS]?.used ?? '[]'),\n              data.map((e) => e[DAILY_GAMES_KEYS.QUARTETOS]),\n            ),\n          ),\n        },\n        [DAILY_GAMES_KEYS.TA_NA_CARA]: {\n          latestDate: data[data.length - 1].id,\n          latestNumber: data[data.length - 1][DAILY_GAMES_KEYS.TA_NA_CARA].number,\n          used: JSON.stringify(\n            gatherUsedTaNaCaraEntries(\n              JSON.parse(previousHistory?.[DAILY_GAMES_KEYS.TA_NA_CARA]?.used ?? '[]'),\n              data.map((e) => e[DAILY_GAMES_KEYS.TA_NA_CARA]),\n            ),\n          ),\n        },\n      };\n      setDoc(docRec, newHistory);\n\n      return Promise.all(saves);\n    },\n\n    onSuccess: () => {\n      notification.info({\n        message: 'Data saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.invalidateQueries({\n        queryKey: [source, 'history'],\n      });\n      setIsDirty(false);\n    },\n\n    onError: () => {\n      notification.error({\n        message: 'Error saving data',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: mutation.mutateAsync,\n    isPending: mutation.isPending,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { DEFAULT_LANGUAGE } from 'utils/constants';\n\ntype SideFiltersProps = {\n  language: string;\n  setLanguage: (language: string) => void;\n  drawingsCount: number;\n  setDrawingsCount: (drawingsCount: number) => void;\n  batchSize: number;\n  setBatchSize: (batchSize: number) => void;\n};\n\nexport function SideFilters({\n  language,\n  setLanguage,\n  drawingsCount,\n  setDrawingsCount,\n  batchSize,\n  setBatchSize,\n}: SideFiltersProps) {\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Language\"\n        value={language}\n        onChange={setLanguage}\n        options={[DEFAULT_LANGUAGE]}\n        placeholder=\"Select a language\"\n      />\n      <FilterSelect\n        label=\"Minimum Drawings\"\n        value={drawingsCount}\n        onChange={setDrawingsCount}\n        options={[2, 3, 4]}\n        placeholder=\"Select a number\"\n      />\n      <FilterSelect\n        label=\"Batch Size\"\n        value={batchSize}\n        onChange={setBatchSize}\n        options={[3, 7, 14, 21, 28]}\n        placeholder=\"Select a number\"\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Typography } from 'antd';\nimport { ResponseState } from 'components/Common';\nimport { DataPopulation } from 'components/Daily/DataPopulation';\nimport { SideFilters } from 'components/Daily/SideFilters';\nimport { useLoadDailySetup } from 'components/Daily/hooks';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useState } from 'react';\n\nfunction DailySetup() {\n  const [language, setLanguage] = useState('');\n  const [drawingsCount, setDrawingsCount] = useState(3);\n  const [batchSize, setBatchSize] = useState(7);\n\n  const dataLoad = useLoadDailySetup(Boolean(language), language as Language, batchSize);\n\n  return (\n    <PageLayout title=\"Daily Setup\" key={batchSize}>\n      <Layout hasSider>\n        <PageSider>\n          <ResponseState isLoading={dataLoad.isLoading} error={null} hasResponseData={!dataLoad.isLoading} />\n          <SideFilters\n            language={language}\n            setLanguage={setLanguage}\n            drawingsCount={drawingsCount}\n            setDrawingsCount={setDrawingsCount}\n            batchSize={batchSize}\n            setBatchSize={setBatchSize}\n          />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={dataLoad.isLoading}\n            error={null}\n            hasResponseData={!dataLoad.isLoading}\n          >\n            <Typography.Title level={2}>Data Population</Typography.Title>\n            <DataPopulation language={language} dataLoad={dataLoad} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default DailySetup;\n","import { AlienSign, Emoji, Glyph } from 'components/Sprites';\nimport { WarehouseGood } from 'components/Sprites/WarehouseGood';\nimport { capitalize, invert, keyBy } from 'lodash';\n\nexport const SEARCH_THRESHOLD: number = 2;\n\nexport const RESOURCE_NAMES = {\n  ADJECTIVES: 'adjectives',\n  ALIEN_ITEMS: 'alien-items',\n  ARTE_RUIM_CARDS: 'arte-ruim-cards',\n  ARTE_RUIM_GROUPS: 'arte-ruim-groups',\n  ARTE_RUIM_PAIRS: 'arte-ruim-pairs',\n  CATEGORIES: 'categories',\n  CHALLENGES: 'challenges',\n  CHARACTERS: 'characters',\n  CHOICES: 'choices',\n  CITY_LOCATIONS: 'city-locations',\n  COLORS: 'colors',\n  CONCEPTS: 'concepts',\n  CONTENDERS: 'contenders',\n  CRIME_EVIDENCE: 'crime-evidence',\n  CRIME_SCENES: 'crime-scenes',\n  CRIME_WEAPONS: 'crime-weapons',\n  DATING_CANDIDATE: 'dating-candidate',\n  DATING_CANDIDATE_BODIES: 'dating-candidate-bodies',\n  DATING_CANDIDATE_HEADS: 'dating-candidate-heads',\n  DIAGRAM_TOPICS: 'diagram-topics',\n  DILEMMAS: 'dilemmas',\n  DRAWING_WORDS: 'drawing-words',\n  EMOTIONS: 'emotions',\n  GROUP_QUESTIONS: 'group-questions',\n  ITEMS_ATTRIBUTES: 'items-attributes',\n  MONSTER_ORIENTATION: 'monster-orientation',\n  MOVIE_REVIEWS: 'movie-reviews',\n  MOVIES: 'movies',\n  NAMING_PROMPTS: 'naming-prompts',\n  OBJECT_FEATURES: 'object-features',\n  QUANTITATIVE_QUESTIONS: 'quantitative-questions',\n  SCENARIOS: 'scenarios',\n  SINGLE_WORDS: 'single-words',\n  SPECTRUMS: 'spectrums',\n  SPY_LOCATIONS: 'spy-locations',\n  SPY_QUESTIONS: 'spy-questions',\n  SUSPECTS: 'suspects',\n  TEENAGE_RUMORS: 'teenage-rumors',\n  TEENAGE_STUDENTS: 'teenage-students',\n  TESTIMONY_QUESTIONS: 'testimony-questions',\n  THEME_WORDS: 'theme-words',\n  THING_PROMPTS: 'thing-prompts',\n  THINGS_QUALITIES: 'things-qualities',\n  TOPICS: 'topics',\n  TREE_WORDS: 'tree-words',\n  TWEETS: 'tweets',\n  WAREHOUSE_BOSS_IDEAS: 'warehouse-boss-ideas',\n  WARNING_SIGNS_DESCRIPTORS: 'warning-signs-descriptors',\n  WARNING_SIGNS_SUBJECTS: 'warning-signs-subjects',\n};\n\nexport const DUAL_LANGUAGE_RESOURCES = [\n  RESOURCE_NAMES.ALIEN_ITEMS,\n  RESOURCE_NAMES.CITY_LOCATIONS,\n  RESOURCE_NAMES.CONTENDERS,\n  RESOURCE_NAMES.CRIME_EVIDENCE,\n  RESOURCE_NAMES.CRIME_SCENES,\n  RESOURCE_NAMES.CRIME_WEAPONS,\n  RESOURCE_NAMES.DATING_CANDIDATE_BODIES,\n  RESOURCE_NAMES.DATING_CANDIDATE_HEADS,\n  RESOURCE_NAMES.ITEMS_ATTRIBUTES,\n  RESOURCE_NAMES.MONSTER_ORIENTATION,\n  RESOURCE_NAMES.OBJECT_FEATURES,\n  RESOURCE_NAMES.SUSPECTS,\n  RESOURCE_NAMES.TEENAGE_RUMORS,\n  RESOURCE_NAMES.TEENAGE_STUDENTS,\n];\n\nexport const LANGUAGES: Language[] = ['pt', 'en'];\n\nexport const DEFAULT_LANGUAGE: Language = 'pt';\n\nexport const SEARCH_PROPERTY: Record<string, string> = {\n  adjectives: 'text',\n  'arte-ruim-cards': 'text',\n  'arte-ruim-groups': 'theme',\n  'arte-ruim-pairs': 'values',\n  categories: 'text',\n  challenges: 'text',\n  characters: 'text',\n  contenders: '',\n  'crime-tiles': '',\n  'diagram-topics': 'text',\n  'galeria-de-sonhos': 'text',\n  'group-questions': 'text',\n  'linhas-cruzadas': 'text',\n  'naming-prompts': 'text',\n  spectrums: '',\n  'single-words': 'text',\n  'spy-locations': '',\n  'spy-questions': '',\n  'testimony-questions': 'question',\n  'thing-prompts': 'text',\n  topics: 'text',\n};\n\nexport const TOTAL_ITEMS = 2496;\n\nexport const SPRITE_LIBRARY = keyBy(\n  [\n    {\n      key: 'alien-signs',\n      name: 'Alien Signs',\n      prefix: 'sign',\n      quantity: 38,\n      startAt: 0,\n      component: AlienSign,\n    },\n    {\n      key: 'emojis',\n      name: 'Emojis',\n      prefix: 'emoji',\n      quantity: 30,\n      startAt: 1,\n      component: Emoji,\n    },\n    {\n      key: 'glyphs',\n      name: 'Glyphs',\n      prefix: 'glyph',\n      quantity: 365,\n      startAt: 1,\n      component: Glyph,\n    },\n    {\n      key: 'warehouse-goods',\n      name: 'Warehouse Goods',\n      prefix: 'good',\n      quantity: 256,\n      startAt: 1,\n      component: WarehouseGood,\n    },\n  ],\n  'key',\n);\n\n/**\n * Options for the sample size selector\n */\nexport const TAGS_SELECTOR_OPTIONS = [\n  { label: 'Any', value: '' },\n  { label: '= 0', value: 0 },\n  { label: '< 3', value: 3 },\n  { label: '< 5', value: 5 },\n  { label: '< 10', value: 10 },\n];\n\n/**\n * Options for the sample size selector\n */\nexport const SAMPLE_SIZE_OPTIONS = [\n  {\n    label: '9',\n    value: 9,\n  },\n  {\n    label: '15',\n    value: 15,\n  },\n  {\n    label: '30',\n    value: 30,\n  },\n  {\n    label: '50',\n    value: 50,\n  },\n  {\n    label: '100',\n    value: 100,\n  },\n];\n\n/**\n * Options for the card size selector\n */\nexport const CARD_SIZE_OPTIONS = [\n  {\n    label: 'Small',\n    value: 100,\n  },\n  {\n    label: 'Medium',\n    value: 150,\n  },\n  {\n    label: 'Large',\n    value: 200,\n  },\n  {\n    label: 'X-Large',\n    value: 250,\n  },\n];\n\nexport const ATTRIBUTE_VALUE = {\n  OPPOSITE: -10,\n  UNRELATED: -3,\n  UNCLEAR: -1,\n  RELATED: 5,\n  DETERMINISTIC: 10,\n};\n\nexport const VALUE_ATTRIBUTE = invert(ATTRIBUTE_VALUE);\n\nexport const ATTRIBUTE_VALUE_PREFIX = {\n  OPPOSITE: '^',\n  UNRELATED: '!',\n  UNCLEAR: '~',\n  RELATED: '+',\n  DETERMINISTIC: '*',\n};\n\nexport const ATTRIBUTE_GROUP_VALUES = Object.keys(ATTRIBUTE_VALUE).map((key) => ({\n  value: key.toLowerCase(),\n  label: capitalize(key),\n}));\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nexport const PLACEHOLDER_DUAL_LANGUAGE_OBJECT = { en: '', pt: '' };\n\nexport const SEPARATOR = ';;';\n","import { chain, isNull, isObject, isUndefined, orderBy, set, transform } from 'lodash';\nimport stringSimilarity from 'string-similarity';\nimport { SEARCH_THRESHOLD } from './constants';\n\n/**\n * Generates a unique identifier that does not exist in the provided list of existing IDs.\n * The generated ID is a substring of a UUID, limited to 5 characters.\n * If a unique ID cannot be generated within 500 attempts, an error is logged.\n *\n * @param existingIds - An array of existing IDs to check against.\n * @param [length=5] - The length of the generated ID. Defaults to 5.\n * @returns A unique identifier.\n */\nexport function createUUID(existingIds: string[], length = 5): string {\n  let newId = crypto.randomUUID().substring(0, length);\n  let tries = 0;\n  while (existingIds.includes(newId) && tries < 500) {\n    newId = crypto.randomUUID().substring(0, length);\n    tries++;\n  }\n  if (tries > 500) {\n    console.error('Unable to generate unique id');\n  }\n  return newId;\n}\n\n/**\n * Removes accents from a given string.\n *\n * This function normalizes the input string to its decomposed form (NFD)\n * and then removes any combining diacritical marks (accents).\n *\n * @param str - The input string from which to remove accents.\n * @returns The input string with accents removed.\n */\nexport function stringRemoveAccents(str: string) {\n  // biome-ignore lint/suspicious/noMisleadingCharacterClass: the regex is used to remove accents\n  return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n * Checks for duplicate entries in the provided data based on a specified property.\n *\n * @param data - The data to check for duplicates.\n * @param [property='text'] - The property to check for duplicates. Defaults to 'text'.\n * @returns An object containing the duplicates found. The keys are the normalized property values, and the values are arrays of IDs of the duplicate entries.\n *\n * @throws {Error} If the specified property does not exist in an entry.\n */\nexport const checkForDuplicates = (data: PlainObject, property = 'text') => {\n  const unique: PlainObject = {};\n  const duplicates: PlainObject = {};\n\n  Object.values(data).forEach((entry) => {\n    if (!entry[property]) {\n      console.error(`Property ${property} does not exist in ${entry}`);\n    }\n\n    const entryKey = stringRemoveAccents(entry[property].toLowerCase());\n\n    if (unique[entryKey]) {\n      if (duplicates[entryKey] === undefined) {\n        duplicates[entryKey] = [unique[entryKey].id];\n      }\n      duplicates[entryKey].push(entry.id);\n    } else {\n      unique[entryKey] = entry;\n    }\n  });\n\n  return duplicates;\n};\n\n/**\n * Finds and returns similar entries from a given data object based on a provided string.\n *\n * @param str - The string to compare against the data entries.\n * @param data - The data object containing entries to search through.\n * @param property - The property of the data entries to compare the string with. Defaults to 'text'.\n * @returns An object containing entries that are similar to the provided string.\n */\nexport const findSimilar = (str: string, data: PlainObject, property = 'text') => {\n  const similar: PlainObject = {};\n  const value = stringRemoveAccents(str.trim().toLowerCase());\n  if (!value || value.length < SEARCH_THRESHOLD) return {};\n\n  Object.values(data).forEach((entry) => {\n    const val = typeof entry[property] === 'string' ? entry[property] : JSON.stringify(entry[property]);\n    const entryStr = stringRemoveAccents(val.toLowerCase());\n\n    if (entryStr.includes(value) || stringSimilarity.compareTwoStrings(str, entryStr) > 0.5) {\n      similar[entry.id] = val;\n    }\n  });\n\n  return similar;\n};\n\n/**\n * Creates array of given length filled with indexes\n * @param length the length of the array\n * @param startAt the starting value\n * @returns\n */\nexport const makeArray = (length = 1, startAt = 0): number[] =>\n  new Array(length).fill(0).map((e, i) => e + i + startAt);\n\n/**\n * Remove duplicated elements from a list\n * @param arr\n * @returns\n */\nexport const removeDuplicates = <T>(arr: T[]): T[] => {\n  return Array.from(new Set(arr));\n};\n\n/**\n * Checks if an array has any duplicate elements.\n * @param arr - The array to check for duplicates.\n * @returns A boolean indicating whether the array has duplicates.\n * @template T - The type of elements in the array.\n */\nexport const hasDuplicates = <T>(arr: T[]): boolean => {\n  return new Set(arr).size !== arr.length;\n};\n\n/**\n * Converts a object into a downloadable file and prompts download\n * @param obj\n * @param filename\n */\nexport function downloadObjectAsFile(obj: PlainObject, filename: string): void {\n  const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });\n  const anchorElement = document.createElement('a');\n  anchorElement.href = window.URL.createObjectURL(blob);\n  anchorElement.download = filename;\n  anchorElement.click();\n  window.URL.revokeObjectURL(anchorElement.href);\n}\n\n/**\n * Sorts the keys of a JSON object based on a predefined order.\n * The keys 'id', 'name', 'title', and 'type' will be placed first in the sorted object,\n * followed by the remaining keys in alphabetical order.\n *\n * @param library - The JSON object to sort.\n * @param keyOrder - An array of keys to place after the default keys.\n * @returns The sorted JSON object.\n */\nexport const sortJsonKeys = (library: PlainObject, keyOrder: string[] = []): PlainObject => {\n  const DEFAULT_ORDERED_KEYS = ['id', 'name', 'title', 'type'];\n\n  function sortKeys(obj: any): any {\n    if (isObject(obj) && !Array.isArray(obj)) {\n      const otherKeys = Object.keys(obj).filter(\n        (key) => !(DEFAULT_ORDERED_KEYS.includes(key) || keyOrder.includes(key)),\n      );\n\n      const sortedKeys = [...DEFAULT_ORDERED_KEYS, ...keyOrder, ...otherKeys.sort()];\n\n      return chain(obj)\n        .toPairs()\n        .sortBy(([key, _]) => sortedKeys.indexOf(key))\n        .map(([key, value]) => [key, sortKeys(value)])\n        .fromPairs()\n        .value();\n    }\n    return obj;\n  }\n\n  return sortKeys(library);\n};\n\n/**\n * Recursively removes `undefined` values from an object or array.\n * @template T - The type of the object to clean.\n * @param {T} obj - The object to clean.\n * @returns {T} - The cleaned object with no `undefined` values.\n */\nexport const deepCleanObject = <T = unknown>(obj: T): T => {\n  if (!isObject(obj) || isNull(obj)) {\n    return obj;\n  }\n\n  // If the object is an array, filter out undefined values\n  if (Array.isArray(obj)) {\n    return obj.map((item) => deepCleanObject(item)).filter((item) => !isUndefined(item)) as unknown as T;\n  }\n\n  // Recursively process each key for objects\n  return transform(\n    obj,\n    (result, value, key) => {\n      if (isObject(value)) {\n        value = deepCleanObject(value);\n      }\n\n      // Only assign if the value is not undefined\n      if (!isUndefined(value)) {\n        set(result as Partial<T>, key, value);\n      }\n    },\n    {} as T,\n  );\n};\n\n/**\n * Deserializes the data received from Firebase into a dictionary of specified type.\n *\n * @template TData - The type of data to deserialize.\n * @param data - The data to be deserialized.\n * @returns A dictionary of deserialized data.\n */\nexport const deserializeFirebaseData = <TData, TParsedData = TData>(\n  data: Dictionary<string>,\n  entryDeserializer?: (e: TData) => TParsedData,\n): Dictionary<TParsedData> => {\n  return Object.keys(data).reduce((acc: Dictionary<TParsedData>, key) => {\n    acc[key] = entryDeserializer ? entryDeserializer(JSON.parse(data[key])) : JSON.parse(data[key]);\n    return acc;\n  }, {});\n};\n\n/**\n * Serializes the data in a dictionary to a dictionary of strings.\n *\n * @param data - The dictionary containing the data to be serialized.\n * @returns A new dictionary with the same keys as the input dictionary, but with the values serialized as strings.\n */\nexport const serializeFirebaseData = <TData, TParsedData = TData>(\n  data: Dictionary<TData>,\n  entrySerializer?: (e: TData) => TParsedData,\n): Dictionary<string> => {\n  return Object.keys(data).reduce((acc: Dictionary<string>, key) => {\n    acc[key] = JSON.stringify(entrySerializer ? entrySerializer(data[key]) : data[key]);\n    return acc;\n  }, {});\n};\n\nexport const getCurrentDateTime = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n\n  return `${year}/${month}/${day} ${hours}:${minutes}`;\n};\n\nexport const sortItemsIds = (itemsIds: string[]) => {\n  return orderBy(itemsIds, (id) => Number(id));\n};\n\n/**\n * Pauses the execution for a specified duration.\n * @param duration - The duration to wait in milliseconds. Default is 1000ms.\n */\nexport const wait = async (duration = 1000) => {\n  await new Promise((resolve) => setTimeout(resolve, duration));\n};\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["CanvasSVG","drawing","className","width","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","useEffect","isSuccess","printFirebase","isError","error","message","placement","DataLoadingWrapper","isLoading","isIdle","hasResponseData","children","tip","description","type","showIcon","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","clsx","src","fallback","Sprite","padding","title","data","async","response","fetch","text","enabled","paddedWidth","display","placeItems","svgContent","xlinkHref","dangerouslySetInnerHTML","__html","background","WarehouseGood","itemId","str","match","numId","Number","parseInt","goodId","sourceId","Math","ceil","getSource","AlienSign","Emoji","emojiId","startsWith","memoize","glyphId","Glyph","Item","library","baseUrl","process","folder","Error","join","useLoadWordLibrary","wordLength","language","selected","resourceName","query","res","json","isEmpty","useDrawingsResourceData","firebaseDrawingsQueries","queryLanguage","suffixCountsQuery","suffixData","pt","en","libraryCount","docPrefix","queries","useMemo","Array","_","Boolean","onSuccess","info","useQueries","useLoadFirebaseDrawings","tdrDrawingsQuery","useTDResource","isDrawingsLoading","some","q","isDrawingsSuccess","every","drawings","allDrawings","forEach","drawingEntry","drawingsLibrary","Object","entries","key","dataDrawing","cardId","includes","trim","console","log","createdAt","createdAtPart","split","isNaN","extractCreatedAt","artistId","playerId","SEPARATOR","undefined","updatedAt","push","drawingsPerArtist","values","reduce","acc","drawingsCount","firstDrawingAt","lastDrawingAt","ARTIST_ID_ALIAS","BPTEL","Bm6dr","QrfLz","AlRvI","pK3OY","VF9iG","WWUvD","aec7L","Xsimf","fV5ns","qQo9N","yVAl7","O2IQm","buildDailyAquiOGames","batchSize","history","discSets","items","updateWarnings","count","completeSets","shuffle","filter","setEntry","itemsIds","notUsedSets","used","availableItems","item","nsfw","intersection","decks","lastDate","latestDate","i","getNextDay","isWeekend","checkWeekend","number","latestNumber","setId","sampleSize","buildDailyArteRuimGames","drawingsQuery","dataIds","shuffledShortList","e","buildDailyArtistaGames","arteRuimHistory","arteRuimCards","recentlyUsedIds","availableCardsIds","keys","cards","buildDailyComunicacaoAlienigenaGames","attributes","attributeValues","allAttributes","allAttributesValues","complete","preliminaryEntries","tries","entry","generateComunicacaoAlienigenaGame","valid","shuffledAttributeValues","spriteIDs","makeArray","selectedAttributes","attr","spriteId","pop","attributeA","attributeB","attributeC","attributeAB","attributeAC","attributeBC","attributeABC","none","POSITIVE","ATTRIBUTE_VALUE","isVeryValueA","isValueA","isNotValueA","isVeryValueB","isValueB","isNotValueB","isVeryValueC","isValueC","isNotValueC","gameAttributes","name","max","usedItemsIds","complexRequests","spritesIds","sample","simpleRequests","requests","requestItemsIds","req","result","sort","solution","random","buildDailyControleDeEstoqueGames","generateControleDeEstoqueGame","num","year","month","day","Date","getDay","goods","orders","GOODS_SIZE","outOfStockGood","buildDailyFilmacoGames","movies","buildDailyPalavreadoGames","fourLetterWords","fiveLetterWords","usedWords","size","generatePalavreadoGame","keyword","words","previouslyUsedWords","newUsedWords","fixedKeyword","shuffledWords","difference","selectedWords","newWord","getNewWord","letters","shuffleLetters","usedLetters","uniq","flatMap","word","shortList","sortBy","preservedIndexes","otherLetters","shuffledLetters","shift","buildDailyTaNaCaraGames","suspects","testimonies","dict","getTaNaCaraUsedDictionary","suspectsBatch","orderBy","slice","suspect","idNum","o","testimoniesBatch","testimony","testimonyId","question","suspectsIds","previousHistory","entryId","gatherUsedTaNaCaraEntries","currentData","suspectId","buildDailyQuartetosGames","quartetsSets","itemsGroups","eligibleSets","takenItemsIds","sets","set","level","selectedSetsIds","eligibleGroups","group","selectedGroup","capitalize","orderedSets","grid","difficulty","gatherUsedQuartetosEntries","removeDuplicates","useLoadDailySetup","LANGUAGE_PREFIX","warnings","setWarnings","useState","useCallback","newWarning","prev","enableBuilders","aquiO","_queryLanguage","dailyHistory","aquiOHistory","useParsedHistory","DAILY_GAMES_KEYS","tdrItemsQuery","aquiOSetsQuery","useDailyAquiOGames","arteRuim","_updateWarnings","useDailyArteRuimGames","comunicacaoAlienigena","comunicacaoAlienigenaHistory","tdrAttributesQuery","tdrItemsAttributesValuesQuery","useDailyComunicacaoAlienigenaGames","controleDeEstoque","controleDeEstoqueHistory","useDailyControleDeEstoqueGames","filmaco","filmacoHistory","movieSetsQuery","useDailyFilmacoGames","palavreado","palavreadoHistory","wordsFourQuery","wordsFiveQuery","useDailyPalavreadoGames","quartetos","quartetosHistory","dailyQuartetSetQuery","itemGroupsQuery","useDailyQuartetosGames","teoriaDeConjuntos","useDailyTeoriaDeConjuntosGames","artista","arteRuimEntries","artistaHistory","arteRuimCardsQuery","usedArteRuimIds","useDailyArtistaGames","taNaCara","taNaCaraHistory","suspectsQuery","testimoniesQuery","useDailyTaNaCaraGames","DataPopulation","dataLoad","columns","dataIndex","render","direction","vertical","l","wrap","gap","intersectingThing","truncate","maxHeight","overflowY","card","save","isPending","queryClient","useQueryClient","isDirty","setIsDirty","mutation","useMutation","mutationFn","saves","docRef","doc","firestore","setDoc","docRec","newHistory","stringify","Promise","all","invalidateQueries","onError","mutateAsync","useSaveDailySetup","warning","justify","align","onClick","loading","disabled","dataSource","SideFilters","setLanguage","setDrawingsCount","setBatchSize","label","value","onChange","DEFAULT_LANGUAGE","placeholder","hasSider","PageSider","SEARCH_THRESHOLD","RESOURCE_NAMES","ADJECTIVES","ALIEN_ITEMS","ARTE_RUIM_CARDS","ARTE_RUIM_GROUPS","ARTE_RUIM_PAIRS","CATEGORIES","CHALLENGES","CHARACTERS","CHOICES","CITY_LOCATIONS","COLORS","CONCEPTS","CONTENDERS","CRIME_EVIDENCE","CRIME_SCENES","CRIME_WEAPONS","DATING_CANDIDATE","DATING_CANDIDATE_BODIES","DATING_CANDIDATE_HEADS","DIAGRAM_TOPICS","DILEMMAS","DRAWING_WORDS","EMOTIONS","GROUP_QUESTIONS","ITEMS_ATTRIBUTES","MONSTER_ORIENTATION","MOVIE_REVIEWS","MOVIES","NAMING_PROMPTS","OBJECT_FEATURES","QUANTITATIVE_QUESTIONS","SCENARIOS","SINGLE_WORDS","SPECTRUMS","SPY_LOCATIONS","SPY_QUESTIONS","SUSPECTS","TEENAGE_RUMORS","TEENAGE_STUDENTS","TESTIMONY_QUESTIONS","THEME_WORDS","THING_PROMPTS","THINGS_QUALITIES","TOPICS","TREE_WORDS","TWEETS","WAREHOUSE_BOSS_IDEAS","WARNING_SIGNS_DESCRIPTORS","WARNING_SIGNS_SUBJECTS","DUAL_LANGUAGE_RESOURCES","LANGUAGES","SEARCH_PROPERTY","adjectives","categories","challenges","characters","contenders","spectrums","topics","SPRITE_LIBRARY","keyBy","prefix","quantity","startAt","component","TAGS_SELECTOR_OPTIONS","SAMPLE_SIZE_OPTIONS","CARD_SIZE_OPTIONS","OPPOSITE","UNRELATED","UNCLEAR","RELATED","DETERMINISTIC","ATTRIBUTE_VALUE_PREFIX","invert","ATTRIBUTE_GROUP_VALUES","toLowerCase","PLACEHOLDER_DUAL_LANGUAGE_OBJECT","createUUID","existingIds","newId","crypto","randomUUID","substring","stringRemoveAccents","normalize","checkForDuplicates","property","unique","duplicates","entryKey","findSimilar","similar","val","entryStr","stringSimilarity","arr","from","Set","downloadObjectAsFile","obj","filename","blob","Blob","anchorElement","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","sortJsonKeys","keyOrder","DEFAULT_ORDERED_KEYS","sortKeys","isObject","isArray","otherKeys","sortedKeys","chain","toPairs","indexOf","fromPairs","deepCleanObject","isNull","isUndefined","transform","deserializeFirebaseData","entryDeserializer","serializeFirebaseData","entrySerializer","getCurrentDateTime","now","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","sortItemsIds","wait","duration","resolve","setTimeout","MutationObserver","Subscribable","constructor","client","super","this","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","observer","mutationKey","hashKey","state","status","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","getDefaultState","notifyManager","context","onSettled","listeners","listener","React","onStoreChange","subscribe","mutateOptions","catch","noop","shouldThrowError","throwOnError"],"sourceRoot":""}