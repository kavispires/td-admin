{"version":3,"file":"static/js/Sprites.fa74633e.chunk.js","mappings":"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","sources":["components/Common/ResponseState.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/FilterEntries.tsx","hooks/useQueryParams.ts","components/Sprites/SpriteFilters.tsx","pages/Images/Sprites.tsx"],"sourcesContent":["import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, InputNumber, Select, Switch } from 'antd';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n};\n\nexport function FilterSwitch({ label, value, onChange, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" />\n    </Form.Item>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown) => {\n    if (value === undefined || value === '') {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string, value: unknown) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    addParam,\n    removeParam,\n    queryParams,\n  };\n}\n","import { FilterSelect } from 'components/Common';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { SPRITE_LIBRARY } from 'utils/constants';\n\nconst SPRITES = Object.values(SPRITE_LIBRARY).map((entry) => ({ value: entry.key, label: entry.name }));\n\nexport function SpriteFilters() {\n  const qp = useQueryParams({});\n\n  return (\n    <SiderContent>\n      <FilterSelect\n        label=\"Library\"\n        value={qp.queryParams.sprite}\n        onChange={(value) => qp.addParam('sprite', value)}\n        options={SPRITES}\n      />\n    </SiderContent>\n  );\n}\n","import { Layout, Space, Typography } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useMemo } from 'react';\nimport { SpriteFilters } from 'components/Sprites/SpriteFilters';\nimport { SPRITE_LIBRARY } from 'utils/constants';\n\nfunction Sprites() {\n  // Set default query params\n  const qp = useQueryParams();\n  const { sprite } = qp.queryParams;\n\n  const activeSprite = useMemo(() => SPRITE_LIBRARY[sprite] ?? {}, [sprite]);\n\n  const list = useMemo(() => {\n    return Array(activeSprite?.quantity ?? 0)\n      .fill(0)\n      .map((_, i) => {\n        const id = (activeSprite?.startAt ?? 0) + i;\n        return `${activeSprite?.prefix}-${id}`;\n      });\n  }, [activeSprite]);\n\n  const SpriteComponent = activeSprite?.component;\n\n  return (\n    <PageLayout title=\"Images\" subtitle=\"Sprites\">\n      <Layout hasSider>\n        <PageSider>\n          <SpriteFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={false} error={null} hasResponseData={true}>\n            <Typography.Title level={2}>\n              {activeSprite?.name ?? 'Select a library'}{' '}\n              {activeSprite?.quantity ? `(${activeSprite?.quantity})` : ''}\n            </Typography.Title>\n\n            <Space wrap>\n              {list.map((id) => (\n                <SpriteComponent key={id} id={id} />\n              ))}\n            </Space>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default Sprites;\n"],"names":["TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","SectionTitle","children","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","FilterSelect","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","valuePropName","checked","size","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","undefined","delete","set","String","removeParam","useEffect","Object","entries","forEach","has","queryParams","toString","split","reduce","qp","SPRITES","values","SPRITE_LIBRARY","name","SpriteFilters","sprite","activeSprite","useMemo","list","Array","quantity","fill","_","i","id","startAt","prefix","SpriteComponent","component","title","subtitle","hasSider","PageSider","DataLoadingWrapper","wrap"],"sourceRoot":""}