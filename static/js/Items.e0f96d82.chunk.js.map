{"version":3,"file":"static/js/Items.e0f96d82.chunk.js","mappings":"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","sources":["components/Common/PaginationWrapper.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGridPagination.tsx","context/ItemsContext.tsx","components/Items/ItemCard.tsx","hooks/useItemUpdate.ts","components/Items/Listing/ItemListing.tsx","components/Items/Listing/AddNewItem.tsx","components/Items/Listing/ItemListingFilters.tsx","components/Items/Listing/ItemRandomizer.tsx","components/Items/Listing/ItemSearch.tsx","pages/Items/Items.tsx"],"sourcesContent":["import { Pagination, Space, SpaceProps, TableProps } from 'antd';\nimport { ReactNode } from 'react';\n\ntype PaginationWrapperProps = {\n  children: ReactNode;\n  pagination: TableProps['pagination'];\n} & SpaceProps;\n\nexport function PaginationWrapper({ children, pagination, ...spaceProps }: PaginationWrapperProps) {\n  const paginationComponent = <Pagination showQuickJumper {...pagination} className=\"fixed-pagination\" />;\n  return (\n    <Space direction=\"vertical\" {...spaceProps}>\n      {paginationComponent}\n      {children}\n      {paginationComponent}\n    </Space>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { TableProps } from 'antd';\nimport { useMemo } from 'react';\n\nimport { useQueryParams } from './useQueryParams';\nimport { usePrevious } from 'react-use';\n\n/**\n * Options for configuring table pagination.\n */\ntype UsePaginationOptions<TData> = {\n  /**\n   * The data array to be paginated.\n   */\n  data: TData[];\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n  /**\n   * The value that triggers the reset of the pagination.\n   */\n  resetter?: string;\n};\n\nexport function useGridPagination<TData>({\n  prefix = '',\n  data,\n  defaultCurrent = 1,\n  defaultPageSize = 64,\n  pageSizeOptions = [16, 32, 64, 128],\n  resetter,\n}: UsePaginationOptions<TData>): {\n  page: TData[];\n  pagination: TableProps['pagination'];\n} {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n  const previous = usePrevious(resetter);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return data.slice(start, end);\n  }, [currentPage, pageSize, data]);\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  if (resetter !== previous) {\n    onChange(defaultCurrent);\n  }\n\n  return {\n    page,\n    pagination: {\n      current: currentPage,\n      pageSize,\n      onChange,\n      onShowSizeChange,\n      defaultCurrent,\n      defaultPageSize,\n      pageSizeOptions,\n      total: data.length,\n      hideOnSinglePage: true,\n    },\n  };\n}\n","import { useQueryParams } from 'hooks/useQueryParams';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { orderBy } from 'lodash';\nimport { createContext, ReactNode, useContext, useMemo } from 'react';\nimport { Item } from 'types';\n\nexport type ItemsContextType = {\n  items: Dictionary<Item>;\n  isLoading: boolean;\n  error: ResponseError;\n  hasResponseData: boolean;\n  decksDict: Dictionary<string>;\n  decks: { value: string }[];\n  listing: Item[];\n  isDirty: boolean;\n  addItemToUpdate: (id: string, item: Item) => void;\n  itemsToUpdate: Dictionary<Item>;\n  isSaving: boolean;\n  save: () => void;\n  newId: string;\n};\n\nconst ItemsContext = createContext<ItemsContextType>({\n  items: {},\n  isLoading: true,\n  error: null,\n  hasResponseData: false,\n  decksDict: {},\n  decks: [],\n  listing: [],\n  isDirty: false,\n  addItemToUpdate: () => {},\n  itemsToUpdate: {},\n  isSaving: false,\n  save: () => {},\n  newId: '-1',\n});\n\ntype ItemsProviderProps = {\n  children: ReactNode;\n};\n\nexport const ItemsProvider = ({ children }: ItemsProviderProps) => {\n  const { queryParams } = useQueryParams();\n\n  const {\n    data: items,\n    isLoading,\n    error,\n    isSaving,\n    save,\n    addEntryToUpdate: addItemToUpdate,\n    entriesToUpdate: itemsToUpdate,\n    isDirty,\n  } = useResourceFirebaseData<Item>({\n    tdrResourceName: 'items',\n    firebaseDataCollectionName: 'items',\n  });\n\n  const { decksDict, decks } = useMemo(() => {\n    console.log('Recomputing item decks typeahead...');\n    const decksDict: Dictionary<string> = {};\n    const duplicationCheckEn: Dictionary<string> = {};\n    const duplicationCheckPt: Dictionary<string> = {};\n    const duplicatedNames: string[][] = [];\n\n    Object.values(items).forEach((entry) => {\n      const nameEn = `${entry.name.en} (${entry.id})`;\n      const namePt = `${entry.name.pt} (${entry.id})`;\n\n      if (duplicationCheckEn[entry.name.en]) {\n        duplicatedNames.push([`${entry.name.en} (${duplicationCheckEn[entry.name.en]})`, nameEn]);\n      } else {\n        duplicationCheckEn[entry.name.en] = entry.id;\n      }\n      if (duplicationCheckPt[entry.name.pt]) {\n        duplicatedNames.push([`${entry.name.pt} (${duplicationCheckPt[entry.name.pt]})`, namePt]);\n      } else {\n        duplicationCheckPt[entry.name.pt] = entry.id;\n      }\n\n      entry?.decks?.forEach((deck) => {\n        decksDict[deck] = deck;\n      });\n    });\n\n    const decks = orderBy(Object.keys(decksDict)).map((name) => ({ value: name }));\n\n    if (duplicatedNames.length > 0) {\n      console.warn('Possible duplicated items', duplicatedNames);\n    }\n\n    return { decksDict, decks };\n  }, [items, isSaving, isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const deck = queryParams.get('deck') ?? 'all';\n  const listing = useMemo(() => {\n    const orderedList = orderBy(Object.values(items), [(item) => Number(item.id)], 'asc');\n\n    switch (deck) {\n      case 'all':\n        return orderedList;\n      case '!all':\n        return orderedList.filter((item) => !item?.decks?.length ?? true);\n      case 'nsfw':\n        return orderedList.filter((item) => item.nsfw);\n      case '!nsfw':\n        return orderedList.filter((item) => !item.nsfw);\n      default:\n        if (deck.startsWith('!')) {\n          return orderedList.filter((item) => !item?.decks?.includes(deck.slice(1)));\n        }\n        return orderedList.filter((item) => item?.decks?.includes(deck));\n    }\n  }, [items, deck]);\n\n  // Handle id for new items\n  const newId = useMemo(() => {\n    const newIds = orderBy(Object.keys(itemsToUpdate), [(id) => Number(id)], 'asc');\n    const latestSavedId = listing[listing.length - 1]?.id;\n    const newestId = orderBy([...newIds, latestSavedId], [(id) => Number(id)], 'desc')[0];\n    return String(Number(newestId) + 1);\n  }, [listing, itemsToUpdate]);\n\n  return (\n    <ItemsContext.Provider\n      value={{\n        items,\n        listing,\n        isLoading,\n        error,\n        decksDict,\n        decks,\n        hasResponseData: listing.length > 0,\n        isDirty,\n        addItemToUpdate,\n        isSaving,\n        save,\n        itemsToUpdate,\n        newId,\n      }}\n    >\n      {children}\n    </ItemsContext.Provider>\n  );\n};\n\nexport const useItemsContext = () => useContext(ItemsContext);\n","import { Button, Card, Flex, Form, Input, Popover, Select, Space, Switch, Typography } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useItemUpdate } from 'hooks/useItemUpdate';\nimport { memoize, snakeCase } from 'lodash';\nimport { Item as ItemT } from 'types';\n\nimport { EditOutlined, FireFilled, MenuOutlined, RollbackOutlined, SaveOutlined } from '@ant-design/icons';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useToggle } from 'react-use';\n\ntype ItemCardProps = {\n  item: ItemT;\n  editMode?: boolean;\n  simplified?: boolean;\n};\n\nexport function ItemCard({ item, editMode = false, simplified }: ItemCardProps) {\n  const { decks } = useItemsContext();\n  const { isEditing, toggleEditMode, onEdit, isDirty, onModify, onReset, editableItem } = useItemUpdate(\n    item,\n    editMode\n  );\n  const copyToClipboard = useCopyToClipboardFunction();\n  const { is } = useQueryParams();\n\n  return (\n    <Card\n      title={<Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>}\n      extra={<ItemPopoverOptions item={item} />}\n      style={{ maxWidth: 250 }}\n      size={simplified ? 'small' : 'default'}\n      actions={\n        simplified\n          ? undefined\n          : isDirty\n            ? [\n                <RollbackOutlined key=\"reset\" onClick={onReset} />,\n                <SaveOutlined key=\"save\" onClick={onModify} />,\n              ]\n            : [<EditOutlined key=\"edit\" onClick={toggleEditMode} />]\n      }\n    >\n      <Item id={item.id} width={simplified ? 75 : 125} title={`${item.name.en} | ${item.name.pt}`} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <Input\n          prefix={<LanguageFlag language=\"en\" width=\"1em\" />}\n          placeholder=\"Name in EN\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.en}\n          readOnly={!isEditing}\n          key={`en-${item.name.en}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, en: e.target.value } })}\n        />\n        <Input\n          prefix={<LanguageFlag language=\"pt\" width=\"1em\" />}\n          placeholder=\"Name in PT\"\n          variant={isEditing ? 'outlined' : 'borderless'}\n          size=\"small\"\n          defaultValue={item.name.pt}\n          readOnly={!isEditing}\n          key={`pt-${item.name.pt}`}\n          onChange={(e) => onEdit({ name: { ...editableItem.name, pt: e.target.value } })}\n        />\n        {!simplified && (\n          <>\n            {!is('simplified') && (\n              <>\n                <div>\n                  <Select\n                    mode=\"multiple\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Select a deck\"\n                    defaultValue={item.decks}\n                    disabled={!isEditing}\n                    options={decks}\n                    variant={isEditing ? 'outlined' : 'borderless'}\n                    size=\"small\"\n                    key={String(item.decks)}\n                    onChange={(value) => onEdit({ decks: value.sort() })}\n                  />\n                </div>\n\n                <Flex gap={6}>\n                  <LanguageFlag language=\"en\" width=\"1em\" />\n                  <Select\n                    mode=\"tags\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Other names EN\"\n                    defaultValue={item.aliasesEn}\n                    options={[]}\n                    size=\"small\"\n                    onChange={(aliasesEn) => onEdit({ aliasesEn: aliasesEn.sort() })}\n                  />\n                </Flex>\n\n                <Flex gap={6}>\n                  <LanguageFlag language=\"pt\" width=\"1em\" />\n                  <Select\n                    mode=\"tags\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Other names PT\"\n                    defaultValue={item.aliasesPt}\n                    options={[]}\n                    size=\"small\"\n                    onChange={(aliasesPt) => onEdit({ aliasesPt: aliasesPt.sort() })}\n                  />\n                </Flex>\n              </>\n            )}\n\n            {is('showVerifyThing') && (\n              <div>\n                <VerifyIfThing item={item} />\n              </div>\n            )}\n            {(isEditing || item.nsfw) && (\n              <div>\n                <Form.Item label=\"nsfw\" valuePropName=\"checked\">\n                  <Switch\n                    checked={item.nsfw}\n                    onChange={(checked) => onEdit({ nsfw: checked })}\n                    size=\"small\"\n                    checkedChildren={<FireFilled style={{ color: 'hotpink' }} />}\n                    disabled={!isEditing}\n                  />\n                </Form.Item>\n              </div>\n            )}\n          </>\n        )}\n      </Space>\n    </Card>\n  );\n}\n\ntype VerifyIfThingProps = {\n  item: ItemT;\n};\n\nconst verifyIfThingCheck = memoize((item: ItemT) => {\n  const hasThing = !!item.decks?.includes('thing');\n  const hasManufactured = !!item.decks?.includes('manufactured');\n  const singleWordNameEn = item.name.en.split(' ').length === 1;\n  const singleWordNamePt = item.name.pt.split(' ').length === 1;\n\n  const result = {\n    en: hasThing || (singleWordNameEn && hasManufactured),\n    pt: hasThing || (singleWordNamePt && hasManufactured),\n  };\n\n  if (!result.pt && !result.en) return '';\n\n  return (\n    <>\n      {result.en && <LanguageFlag language=\"en\" width=\"1em\" />}\n      {result.pt && <LanguageFlag language=\"pt\" width=\"1em\" />}\n    </>\n  );\n});\n\nconst VerifyIfThing = ({ item }: VerifyIfThingProps) => {\n  const result = verifyIfThingCheck(item);\n\n  if (result) {\n    return <Flex gap={6}>Thing: {result}</Flex>;\n  }\n\n  return <></>;\n};\n\nexport type EscapeRoomItemCard = {\n  /**\n   * The unique identifier of the card.\n   * Usually used to verify the end game played cards condition.\n   */\n  id: string;\n  /**\n   * The type of the card.\n   */\n  type: 'item';\n  /**\n   * The header of the card\n   */\n  header: {\n    /**\n     * The title of the header in both languages.\n     */\n    title: DualLanguageValue;\n    /**\n     * Illustrative small icon in the header.\n     */\n    iconId?: string;\n  };\n  /**\n   * The metadata of the card.\n   */\n  metadata?: {\n    /**\n     * The level of the card to determine the difficulty.\n     */\n    level: 'basic';\n    /**\n     * When played, adds this keyword to the result.\n     */\n    keyword?: string;\n  };\n  content: {\n    /**\n     * The item id for the Item Sprite\n     */\n    itemId: string;\n    /**\n     * Descriptive text of the item, usually its name\n     */\n    caption?: DualLanguageValue;\n  };\n};\n\nconst buildEscapeRoomItemCard = (item: ItemT): EscapeRoomItemCard => ({\n  id: item.id,\n  type: 'item',\n  header: {\n    title: {\n      en: 'Item',\n      pt: 'Item',\n    },\n    iconId: '2077',\n  },\n  metadata: {\n    level: 'basic',\n    keyword: snakeCase(item.name.en).toUpperCase(),\n  },\n  content: {\n    itemId: item.id,\n    caption: item.name,\n  },\n});\n\nexport function ItemPopoverOptions({ item }: Pick<ItemCardProps, 'item'>) {\n  const [open, toggleOpen] = useToggle(false);\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <Popover\n      content={\n        <Space direction=\"vertical\">\n          <Button size=\"small\" onClick={() => copyToClipboard(JSON.stringify(item, null, 2))}>\n            Complete Item\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.en)}>\n            EN Name\n          </Button>\n          <Button size=\"small\" onClick={() => copyToClipboard(item.name.pt)}>\n            PT Name\n          </Button>\n          <Button\n            size=\"small\"\n            onClick={() => copyToClipboard(JSON.stringify(buildEscapeRoomItemCard(item), null, 2))}\n          >\n            Escape Room Item\n          </Button>\n        </Space>\n      }\n      title=\"Copy\"\n      trigger=\"click\"\n      open={open}\n      onOpenChange={toggleOpen}\n    >\n      <Button type=\"text\" icon={<MenuOutlined />} />\n    </Popover>\n  );\n}\n","import { cloneDeep } from 'lodash';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\nimport { useItemsContext } from 'context/ItemsContext';\n\nexport function useItemUpdate(currentItem: ItemT, editMode = false) {\n  const { addItemToUpdate, itemsToUpdate } = useItemsContext();\n  const [isEditing, setEditing] = useState(editMode);\n  const [editableItem, setEditableItem] = useState<ItemT>(cloneDeep(currentItem));\n  const originalItem = itemsToUpdate[currentItem.id] ?? currentItem;\n\n  const onEdit = (change: Partial<ItemT>) => {\n    const newItem = { ...cloneDeep(editableItem), ...change };\n    if (Object.keys(change).includes('nsfw') && change.nsfw === false) {\n      delete newItem.nsfw;\n    }\n    setEditableItem(newItem);\n  };\n\n  const onModify = async () => {\n    addItemToUpdate(editableItem.id, editableItem);\n  };\n\n  const onReset = () => {\n    setEditableItem(cloneDeep(currentItem));\n    setEditing(false);\n  };\n\n  const isDirty = JSON.stringify(originalItem) !== JSON.stringify(editableItem);\n\n  return {\n    isEditing,\n    toggleEditMode: () => setEditing((e) => !e),\n    editableItem,\n    onEdit,\n    isDirty,\n    onModify,\n    onReset,\n  };\n}\n","import { Flex, Typography } from 'antd';\nimport { ItemCard } from '../ItemCard';\nimport { capitalize } from 'lodash';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemListing() {\n  const { queryParams } = useQueryParams();\n  const listingType = queryParams.get('deck') ?? 'all';\n  const { listing } = useItemsContext();\n\n  const { page, pagination } = useGridPagination({ data: listing, resetter: listingType });\n\n  const { is } = useQueryParams();\n  const isSimplified = is('simplified');\n\n  return (\n    <>\n      <Typography.Title level={2}>\n        Listing - {capitalize(listingType)} items ({listing.length})\n      </Typography.Title>\n\n      <PaginationWrapper pagination={pagination} className=\"full-width\">\n        <Flex gap={16} wrap=\"wrap\">\n          {page.map((item) => (\n            <ItemCard key={item.id} item={item} simplified={isSimplified} />\n          ))}\n        </Flex>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Button, Modal } from 'antd';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { useState } from 'react';\nimport { ItemCard } from '../ItemCard';\nimport { cloneDeep } from 'lodash';\n\nconst PLACEHOLDER_ITEM = {\n  id: '',\n  name: {\n    en: '',\n    pt: '',\n  },\n  groups: [],\n};\n\ntype NewItemModalProps = {\n  isModalOpen: boolean;\n  handleOk: () => void;\n  handleCancel: () => void;\n  newId: string;\n};\n\nfunction NewItemModal({ isModalOpen, handleOk, handleCancel, newId }: NewItemModalProps) {\n  const [newItem] = useState(cloneDeep({ ...PLACEHOLDER_ITEM, id: newId }));\n  return (\n    <Modal title=\"Add new item\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n      <ItemCard item={newItem} editMode />\n    </Modal>\n  );\n}\n\nexport function AddNewItem() {\n  const [isModalOpen, setOpenModal] = useState(false);\n\n  const { newId } = useItemsContext();\n\n  const showModal = () => {\n    setOpenModal(true);\n  };\n\n  const handleOk = () => {\n    setOpenModal(false);\n  };\n\n  const handleCancel = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <Button block onClick={showModal}>\n        Add New Item\n      </Button>\n      {isModalOpen && (\n        <NewItemModal\n          isModalOpen={isModalOpen}\n          handleOk={handleOk}\n          handleCancel={handleCancel}\n          newId={newId}\n          key={newId}\n        />\n      )}\n    </>\n  );\n}\n","import { Divider, Flex, Typography } from 'antd';\nimport { FilterSelect, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { capitalize, cloneDeep, orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { Item } from 'types';\nimport { sortJsonKeys } from 'utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { OpenAIOutlined } from '@ant-design/icons';\nimport { AddNewItem } from './AddNewItem';\n\nexport function ItemListingFilters() {\n  const { isDirty, save, items, decks, itemsToUpdate, isSaving } = useItemsContext();\n  const { queryParams, is, addParam } = useQueryParams();\n\n  const deckOptions = useMemo(() => {\n    const includingOptions = orderBy(\n      decks.map(({ value }) => ({ label: capitalize(value), value })),\n      'label'\n    );\n    const excludingOptions = includingOptions.map(({ label, value }) => ({\n      label: `NOT ${label}`,\n      value: `!${value}`,\n    }));\n    return [...includingOptions, ...excludingOptions];\n  }, [decks]);\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={6}>\n        <SaveButton\n          isDirty={isDirty}\n          dirt={JSON.stringify(itemsToUpdate)}\n          onSave={save}\n          isSaving={isSaving}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(items)}\n          fileName=\"items.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider className=\"my-4\" />\n\n      <Typography.Text type=\"secondary\">Tools</Typography.Text>\n\n      <FilterSwitch\n        label=\"Show Search\"\n        value={!is('hideSearch')}\n        onChange={(v) => addParam('hideSearch', v ? '' : 'true', '')}\n        className=\"full-width m-0\"\n      />\n\n      <FilterSwitch\n        label=\"Show Randomizer\"\n        value={is('showRandomizer')}\n        onChange={(v) => addParam('showRandomizer', v ? 'true' : '', '')}\n        className=\"full-width m-0\"\n      />\n\n      <Typography.Text type=\"secondary\">Display</Typography.Text>\n\n      <FilterSwitch\n        label=\"Simplified UI\"\n        value={is('simplified')}\n        onChange={(v) => addParam('simplified', v ? 'true' : '')}\n        className=\"full-width m-0\"\n      />\n      <FilterSwitch\n        label=\"Thing Verifier\"\n        value={is('showVerifyThing')}\n        onChange={(v) => addParam('showVerifyThing', v ? 'true' : '')}\n        className=\"full-width m-0\"\n        disabled={is('simplified')}\n      />\n      <FilterSwitch\n        label=\"Other Names\"\n        value={is('showOtherNames')}\n        onChange={(v) => addParam('showOtherNames', v ? 'true' : '')}\n        className=\"full-width m-0\"\n        disabled\n      />\n\n      <Divider className=\"my-4\" />\n\n      <FilterSelect\n        label=\"Deck\"\n        value={queryParams.get('deck') ?? 'all'}\n        onChange={(value) => addParam('deck', value, 'all')}\n        options={[\n          { label: 'All', value: 'all' },\n          { label: 'NSFW', value: 'nsfw' },\n          { label: 'SFW', value: '!nsfw' },\n          ...deckOptions,\n          { label: 'No decks', value: '!all' },\n        ]}\n      />\n\n      <Divider className=\"my-4\" />\n\n      <AddNewItem />\n\n      <Divider className=\"my-4\" />\n\n      <DownloadButton\n        data={() => prepareOpenAIFileForDownload(items)}\n        fileName=\"items-gpt.json\"\n        disabled={isDirty}\n        block\n        icon={<OpenAIOutlined />}\n      >\n        Open AI JSON\n      </DownloadButton>\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(items: Dictionary<Item>) {\n  return sortJsonKeys(\n    Object.values(items).reduce((acc: Dictionary<Item>, item) => {\n      // Sort deck\n      item.decks = (item?.decks ?? []).sort();\n\n      // Remove decks if no deck is present\n      if (item.decks.length === 0) {\n        delete item.decks;\n      }\n\n      acc[item.id] = item;\n      return acc;\n    }, {})\n  );\n}\n\ntype OpenAiItem = {\n  id: string;\n  names: {\n    'en-US': string;\n    'pt-BR': string;\n  };\n  aliases: {\n    'en-US'?: string[];\n    'pt-BR'?: string[];\n  };\n};\n\nfunction prepareOpenAIFileForDownload(items: Dictionary<Item>) {\n  return sortJsonKeys(\n    Object.values(cloneDeep(items)).reduce((acc: Dictionary<OpenAiItem>, item) => {\n      const entry = {\n        id: item.id,\n        names: {\n          'en-US': item.name.en,\n          'pt-BR': item.name.pt,\n        },\n        aliases: {\n          'en-US': item.aliasesEn,\n          'pt-BR': item.aliasesPt,\n        },\n      };\n\n      acc[entry.id] = entry;\n      return acc;\n    }, {})\n  );\n}\n","import { Button, Divider, Dropdown, Flex, Form, InputNumber, Space, Typography } from 'antd';\nimport { useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from '../ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { chunk, sampleSize } from 'lodash';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { CopyOutlined } from '@ant-design/icons';\n\nexport function ItemRandomizer() {\n  const { listing } = useItemsContext();\n  const [randomItems, setRandomItems] = useState<ItemT[]>([]);\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  const [sampleQuantity, setSampleQuantity] = useState(5);\n\n  const onRandomSample = () => {\n    setRandomItems(sampleSize(listing, sampleQuantity));\n  };\n\n  const items = [\n    { label: 'Copy IDs', key: 'copy_ids' },\n    { label: 'Copy Names EN', key: 'copy_names_en' },\n    { label: 'Copy Names PT', key: 'copy_names_pt' },\n  ];\n\n  const onMenuClick = ({ key }: { key: string }) => {\n    if (key === 'copy_ids') {\n      const ids = randomItems.map((item) => item.id);\n      copyToClipboard(JSON.stringify(ids));\n      return;\n    }\n\n    if (key === 'copy_names_en') {\n      const names = randomItems.map((item) => item.name.en).join(', ');\n      copyToClipboard(names);\n      return;\n    }\n\n    if (key === 'copy_names_pt') {\n      const names = randomItems.map((item) => item.name.pt).join(', ');\n      copyToClipboard(names);\n      return;\n    }\n  };\n\n  const onGenerateMidjourneySample = () => {\n    const str = chunk(sampleSize(listing, sampleQuantity * 15), sampleQuantity)\n      .map((entries) => entries.filter((entry) => !entry.nsfw))\n      .map((entries) => entries.map((entry) => entry.name.en).join(', '))\n      .map((entry, index) => `${index + 1}) ${entry}`)\n      .join('\\n');\n    copyToClipboard(str);\n  };\n\n  return (\n    <div>\n      <Typography.Title level={2}>\n        Randomized Sample{' '}\n        <Button size=\"small\" icon={<CopyOutlined />} onClick={onGenerateMidjourneySample}>\n          MJ\n        </Button>\n      </Typography.Title>\n\n      <Flex gap={12}>\n        <Form.Item label=\"Quantity\"></Form.Item>\n        <div>\n          <InputNumber\n            min={3}\n            max={15}\n            value={sampleQuantity}\n            onChange={(v) => setSampleQuantity(Number(v))}\n            style={{ minWidth: '100px' }}\n          />\n        </div>\n        <Button onClick={onRandomSample} type=\"primary\">\n          Get Sample\n        </Button>\n\n        <Dropdown.Button\n          menu={{ items, onClick: onMenuClick }}\n          disabled={randomItems.length === 0}\n          onClick={() => copyToClipboard(JSON.stringify(randomItems, null, 2))}\n          icon={<CopyOutlined />}\n        >\n          Copy\n        </Dropdown.Button>\n      </Flex>\n\n      <Space wrap className=\"my-4\">\n        {randomItems.map((item) => (\n          <ItemCard key={item.id} item={item} simplified />\n        ))}\n      </Space>\n\n      <Divider />\n    </div>\n  );\n}\n","import { Button, Divider, Space, Typography } from 'antd';\nimport { Fragment, useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { ItemCard } from '../ItemCard';\nimport { useItemsContext } from 'context/ItemsContext';\nimport { ItemsTypeahead } from '../ItemsTypeahead';\nimport { EnvironmentOutlined } from '@ant-design/icons';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nexport function ItemSearch() {\n  const { items, isLoading, isSaving } = useItemsContext();\n  const [activeItem, setActiveItem] = useState<ItemT | null>(null);\n  const { queryParams, addParam } = useQueryParams();\n\n  const onFindInListing = () => {\n    if (activeItem) {\n      const pageSize = Number(queryParams.get('pageSize') ?? 64);\n      const idNum = Number(activeItem.id);\n      const page = Math.floor(idNum / pageSize) + 1;\n      addParam('page', page.toString());\n    }\n  };\n\n  return (\n    <Fragment key={`item-search-${isLoading}`}>\n      <Typography.Title level={2}>Search for an item</Typography.Title>\n\n      <div>\n        <ItemsTypeahead\n          items={items}\n          isPending={isLoading || isSaving}\n          onFinish={(id) => setActiveItem(items[id])}\n        />\n      </div>\n\n      {Boolean(activeItem) && (\n        <Space direction=\"vertical\" className=\"my-4\" key={activeItem?.id}>\n          <ItemCard item={activeItem!} />\n          <Button onClick={onFindInListing} block icon={<EnvironmentOutlined />}>\n            Find in listing\n          </Button>\n        </Space>\n      )}\n      <Divider />\n    </Fragment>\n  );\n}\n","import { Layout, Space } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemListing } from 'components/Items/Listing/ItemListing';\nimport { ItemListingFilters } from 'components/Items/Listing/ItemListingFilters';\nimport { ItemRandomizer } from 'components/Items/Listing/ItemRandomizer';\nimport { ItemSearch } from 'components/Items/Listing/ItemSearch';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { ItemsProvider, useItemsContext } from 'context/ItemsContext';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nfunction ItemsPage() {\n  const { isLoading, error, hasResponseData } = useItemsContext();\n  const { is } = useQueryParams();\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Listing\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemListingFilters />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper isLoading={isLoading} error={error} hasResponseData={hasResponseData}>\n            {!isLoading && (\n              <Space size=\"large\" align=\"start\">\n                {!is('hideSearch') && <ItemSearch />}\n                {is('showRandomizer') && <ItemRandomizer />}\n              </Space>\n            )}\n            <ItemListing />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nfunction Items() {\n  return (\n    <ItemsProvider>\n      <ItemsPage />\n    </ItemsProvider>\n  );\n}\n\nexport default Items;\n"],"names":["PaginationWrapper","children","pagination","spaceProps","paginationComponent","showQuickJumper","className","direction","SectionTitle","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isDirty","isError","hasResponseData","color","ResponseState","props","label","ItemsTypeahead","items","isPending","style","size","placeholder","allowClear","onFinish","tdrItemsQuery","useTDResource","Boolean","namesDict","options","useMemo","console","log","Object","values","data","reduce","acc","entry","nameEn","name","en","id","namePt","pt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","option","String","includes","sorted","idMatch","match","index","indexOf","width","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","key","undefined","onPressEnter","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","message","App","useEffect","info","truncate","omission","success","useGridPagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","resetter","queryParams","addParam","useQueryParams","currentPage","Number","get","pageSize","previous","usePrevious","page","start","end","slice","onChange","toString","current","onShowSizeChange","_","total","hideOnSinglePage","ItemsContext","createContext","decksDict","decks","listing","addItemToUpdate","itemsToUpdate","isSaving","save","newId","ItemsProvider","addEntryToUpdate","entriesToUpdate","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","duplicationCheckEn","duplicationCheckPt","duplicatedNames","push","deck","warn","orderedList","item","nsfw","startsWith","newIds","latestSavedId","newestId","Provider","useItemsContext","useContext","ItemCard","editMode","simplified","isEditing","toggleEditMode","onEdit","onModify","onReset","editableItem","currentItem","setEditing","setEditableItem","cloneDeep","originalItem","change","newItem","async","JSON","stringify","e","useItemUpdate","is","title","onClick","extra","ItemPopoverOptions","maxWidth","actions","RollbackOutlined","SaveOutlined","EditOutlined","LanguageFlag","language","variant","defaultValue","readOnly","target","mode","disabled","sort","gap","VerifyIfThing","valuePropName","checked","checkedChildren","FireFilled","verifyIfThingCheck","memoize","hasThing","hasManufactured","singleWordNameEn","split","singleWordNamePt","result","open","toggleOpen","useToggle","content","type","header","iconId","metadata","keyword","snakeCase","itemId","caption","buildEscapeRoomItemCard","trigger","onOpenChange","icon","MenuOutlined","ItemListing","listingType","isSimplified","capitalize","wrap","PLACEHOLDER_ITEM","groups","NewItemModal","isModalOpen","handleOk","handleCancel","onOk","onCancel","AddNewItem","setOpenModal","block","ItemListingFilters","deckOptions","includingOptions","excludingOptions","vertical","SaveButton","dirt","onSave","DownloadButton","sortJsonKeys","prepareFileForDownload","fileName","v","names","aliases","prepareOpenAIFileForDownload","OpenAIOutlined","ItemRandomizer","randomItems","setRandomItems","sampleQuantity","setSampleQuantity","CopyOutlined","str","chunk","sampleSize","entries","join","min","max","minWidth","menu","ids","ItemSearch","activeItem","setActiveItem","Fragment","idNum","Math","floor","EnvironmentOutlined","ItemsPage","subtitle","hasSider","PageSider","DataLoadingWrapper","align"],"sourceRoot":""}