{"version":3,"file":"static/js/ItemsMovieSets.6edd1ba0.chunk.js","mappings":"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","sources":["components/Common/DownloadButton.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Daily/hooks/useDailyHistoryQuery.ts","components/Daily/hooks/useParsedHistory.ts","components/Daily/utils/constants.ts","components/Daily/utils/utils.ts","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTDResource.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/Movies/ItemsMoviesFilters.tsx","components/Items/Movies/ItemsMoviesTable.tsx","components/Items/Movies/useMovieUsedHistory.ts","components/Items/Movies/ItemsMoviesSample.tsx","pages/Items/ItemsMovieSets.tsx"],"sourcesContent":["import { Button, ButtonProps } from 'antd';\nimport { downloadObjectAsFile } from 'utils';\n\ntype DownloadButtonProps = {\n  data: PlainObject | Function;\n  fileName: string;\n} & ButtonProps;\n\n/**\n * Button to download a JSON object as a file\n */\nexport function DownloadButton({ data, fileName, loading, children, ...props }: DownloadButtonProps) {\n  return (\n    <Button\n      onClick={() => downloadObjectAsFile(typeof data === 'function' ? data() : data, fileName)}\n      loading={loading}\n      {...props}\n    >\n      {children ?? 'Download JSON'}\n    </Button>\n  );\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import { App } from 'antd';\nimport { getDocQueryFunction } from 'hooks/useGetFirebaseDoc';\nimport { useEffect } from 'react';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { DailyHistory } from '../utils/types';\nimport { printFirebase } from 'services/firebase';\n\nexport function useDailyHistoryQuery(\n  source: string,\n  options: Omit<UseQueryOptions<DailyHistory, Error, DailyHistory, QueryKey>, 'queryKey'> = {}\n) {\n  const { notification } = App.useApp();\n\n  const historyQuery = useQuery<DailyHistory, Error, DailyHistory, QueryKey>({\n    queryKey: [source, 'history'],\n    queryFn: getDocQueryFunction<DailyHistory>(source, 'history'),\n    ...options,\n  });\n\n  useEffect(() => {\n    if (historyQuery.isSuccess) {\n      printFirebase('Loaded daily/history');\n    }\n  }, [historyQuery.isSuccess]);\n\n  useEffect(() => {\n    if (historyQuery.isError) {\n      notification.error({\n        message: 'Error loading daily/history',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [historyQuery.isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return historyQuery;\n}\n","import { useMemo } from 'react';\nimport { DailyHistory, ParsedDailyHistoryEntry } from '../utils/types';\nimport { getYesterday } from '../utils/utils';\n\nexport function useParsedHistory(\n  key: keyof DailyHistory,\n  data?: DailyHistory\n): [ParsedDailyHistoryEntry, DailyHistory[keyof DailyHistory]] {\n  const history = useMemo(\n    () =>\n      data?.[key] ?? {\n        latestDate: getYesterday(),\n        latestNumber: 0,\n        used: '[]',\n      },\n    [data, key]\n  );\n\n  const parsedHistory: ParsedDailyHistoryEntry = useMemo(() => {\n    return {\n      latestNumber: history?.latestNumber ?? 0,\n      latestDate: history?.latestDate ?? getYesterday(),\n      used: JSON.parse(history?.used ?? '[]'),\n    };\n  }, [history]);\n\n  return [parsedHistory, history];\n}\n","export const LANGUAGE_PREFIX = {\n  SUFFIX_DATA: {\n    pt: 'drawingsPT',\n    en: 'drawingsEN',\n  },\n  DAILY: {\n    pt: 'diario',\n    en: 'daily',\n  },\n};\n","import { sample } from 'lodash';\nimport moment from 'moment';\n\n/**\n * Returns the current date in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The current date in 'YYYY-MM-DD' format.\n */\nexport function getToday(): string {\n  return moment().format('YYYY-MM-DD');\n}\n\n/**\n * Returns the date of yesterday in the format 'YYYY-MM-DD'.\n *\n * @returns {string} The date of yesterday in 'YYYY-MM-DD' format.\n */\nexport function getYesterday(): string {\n  return moment().subtract(1, 'days').format('YYYY-MM-DD');\n}\n\n/**\n * Calculates the next day based on the given date string.\n *\n * @param dateString - The date string in the format 'YYYY-MM-DD'.\n * @returns The next day in the format 'YYYY-MM-DD'.\n */\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n\n/**\n * Checks if a given date is a Saturday or Sunday.\n *\n * @param {string} dateString - The date in 'YYYY-MM-DD' format.\n * @returns {boolean} True if the date is a Saturday or Sunday, false otherwise.\n */\nexport function checkWeekend(dateString: string): boolean {\n  const date = moment(dateString, 'YYYY-MM-DD');\n  return [6, 0].includes(date.day()); // 0 represents Sunday and 6 represents Saturday in moment.js\n}\n\nconst THRESHOLD = 500;\nexport function getWordsWithUniqueLetters(words: string[]): string[] {\n  const selectedWords: string[] = [];\n  const usedLetters: BooleanDictionary = {};\n  let tries = 0;\n\n  while (selectedWords.length < 4 && tries < THRESHOLD) {\n    const word = sample(words) ?? '';\n    const splitWord = word.split('');\n    const isGood = splitWord.every((letter) => !usedLetters[letter]);\n    if (isGood) {\n      selectedWords.push(word);\n      splitWord.forEach((letter) => {\n        usedLetters[letter] = true;\n      });\n    } else {\n      tries++;\n    }\n  }\n  if (tries > THRESHOLD || selectedWords.length < 4) {\n    console.count('Could not find 4 words with unique letters');\n    while (selectedWords.length < 4) {\n      const word = sample(words) ?? '';\n      if (!selectedWords.includes(word)) {\n        selectedWords.push(word);\n      }\n    }\n  }\n\n  if (selectedWords.length < 4) {\n    console.error('Could not find 4 words with unique letters', selectedWords);\n  }\n\n  return selectedWords;\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        // Other names\n        if (entry.aliasesEn) {\n          entry.aliasesEn.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n        if (entry.aliasesPt) {\n          entry.aliasesPt.forEach((alias) => {\n            acc[`${alias} (${entry.id})*`] = entry.id;\n          });\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? ({} as Dictionary<TData>),\n    hasResponseData,\n  };\n}\n\nexport function useTDResourceNonCollection<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('resources');\n\n  const query = useQuery<TData, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as TData;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data,\n    hasResponseData,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { DailyMovieSet } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsMoviesFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyMovieSet>) {\n  const { is, addParam } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-movie-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSwitch\n        label=\"Pending Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n    </SiderContent>\n  );\n}\nfunction prepareFileForDownload(movies: Dictionary<DailyMovieSet>) {\n  return sortJsonKeys(movies);\n}\n","import { Button, Flex, Popconfirm, Space, Table, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyMovieSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { DeleteFilled } from '@ant-design/icons';\n\nimport { ItemsTypeahead } from '../ItemsTypeahead';\n\nimport type { TableProps } from 'antd';\nimport { useMovieUsedHistory } from './useMovieUsedHistory';\nfunction orderSets(givenSets: DailyMovieSet[]) {\n  return orderBy(givenSets, [\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length > 0,\n    (s) => s.title,\n  ]).map((s) => ({\n    ...s,\n    itemsIds: orderBy(s.itemsIds, (id) => Number(id)),\n  }));\n}\n\nexport function ItemsMoviesTable({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyMovieSet>) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const usedHistory = useMovieUsedHistory();\n\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const rows = useMemo(() => {\n    const sets = data ? orderSets(Object.values(data)) : [];\n    return showOnlyEmpty ? sets.filter((s) => s.itemsIds.length === 0) : sets;\n  }, [data, showOnlyEmpty]);\n\n  const completeMoviesCount = rows.filter((s) => s.itemsIds.length > 0).length;\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyMovieSet>['columns'] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <MovieEditableCell\n          property=\"title\"\n          value={title}\n          movie={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n      sorter: (a, b) => a.title.localeCompare(b.title),\n    },\n    {\n      title: 'Year',\n      dataIndex: 'year',\n      render: (year, record) => (\n        <MovieEditableCell property=\"year\" value={year} movie={record} addEntryToUpdate={addEntryToUpdate} />\n      ),\n      sorter: (a, b) => a.year - b.year,\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <MovieItemsCell\n          movie={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n      sorter: (a, b) => a.itemsIds.length - b.itemsIds.length,\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Used',\n      dataIndex: 'id',\n      render: (id: string) => (usedHistory[id] ? 'Yes' : 'No'),\n      sorter: (a, b) => {\n        if (usedHistory[a.id] && !usedHistory[b.id]) {\n          return -1;\n        } else if (!usedHistory[a.id] && usedHistory[b.id]) {\n          return 1;\n        } else {\n          return b.itemsIds.length - a.itemsIds.length;\n        }\n      },\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>\n        Total Movies: {rows.length} | Complete Movies: {completeMoviesCount}\n      </Typography.Title>\n      <Table\n        columns={columns}\n        rowKey=\"id\"\n        dataSource={rows}\n        expandable={{\n          expandedRowRender: (record) => <AddItemFlow movie={record} addEntryToUpdate={addEntryToUpdate} />,\n          rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n        }}\n        pagination={paginationProps}\n      />\n    </Space>\n  );\n}\n\ntype AddItemFlowProps = {\n  movie: DailyMovieSet;\n  addEntryToUpdate: (id: string, item: DailyMovieSet) => void;\n};\n\nexport function AddItemFlow({ movie, addEntryToUpdate }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(movie.id, {\n      ...movie,\n      itemsIds: [...movie.itemsIds, itemId],\n    });\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  movie: DailyMovieSet;\n  addEntryToUpdate: (id: string, updatedMovie: DailyMovieSet) => void;\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ movie, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(movie.id, {\n      ...movie,\n      itemsIds: movie.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype MovieItemsCellProps = {\n  movie: DailyMovieSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n};\n\nexport function MovieItemsCell({ movie, itemsIds, copyToClipboard, addEntryToUpdate }: MovieItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${movie.title}`}>\n      {itemsIds.map((itemId, index) => (\n        <Flex key={`${movie.title}-${itemId}-${index}`} gap={2} vertical>\n          <Item id={itemId} width={60} />\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow movie={movie} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n\ntype MovieEditableCellProps = {\n  value: string | number;\n  movie: DailyMovieSet;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n  property: keyof DailyMovieSet;\n};\n\nexport function MovieEditableCell({ value, movie, addEntryToUpdate, property }: MovieEditableCellProps) {\n  const handleChange = (newValue: string) => {\n    if (typeof value === 'number') {\n      return newValue !== String(value)\n        ? addEntryToUpdate(movie.id, { ...movie, [property]: Number(newValue) })\n        : null;\n    }\n\n    return newValue !== value ? addEntryToUpdate(movie.id, { ...movie, [property]: newValue.trim() }) : null;\n  };\n\n  return (\n    <Space>\n      <Typography.Text\n        editable={{\n          onChange: handleChange,\n        }}\n      >\n        {String(value)}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import { useDailyHistoryQuery } from 'components/Daily/hooks/useDailyHistoryQuery';\nimport { useParsedHistory } from 'components/Daily/hooks/useParsedHistory';\nimport { LANGUAGE_PREFIX } from 'components/Daily/utils/constants';\nimport { keyBy, mapValues } from 'lodash';\nimport { useMemo } from 'react';\n\nexport function useMovieUsedHistory() {\n  const source = LANGUAGE_PREFIX.DAILY['pt'];\n  const historyQuery = useDailyHistoryQuery(source, { enabled: true });\n  const [filmacoHistory] = useParsedHistory('filmaco', historyQuery.data);\n\n  const used: BooleanDictionary = useMemo(\n    () => mapValues(keyBy(filmacoHistory?.used ?? []), () => true),\n    [filmacoHistory]\n  );\n\n  return used;\n}\n","import { Button, Divider, Space, Table } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { sample } from 'lodash';\nimport { useState } from 'react';\nimport { DailyMovieSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { AddItemFlow, MovieEditableCell, MovieItemsCell } from './ItemsMoviesTable';\n\nimport type { TableProps } from 'antd';\nexport function ItemsMoviesSample({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyMovieSet>) {\n  const [sampleEntryId, setSampleEntryId] = useState<string | null>(null);\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  const onGetSample = () => {\n    let newSampleId = sample(Object.keys(data ?? {}));\n    let tries = 0;\n\n    // Tries a maximum of 15 times to find a sample with no itemsIds\n\n    while (tries < 15 && (data[String(newSampleId)]?.itemsIds ?? []).length > 0) {\n      newSampleId = sample(Object.keys(data ?? {}));\n\n      tries++;\n    }\n\n    if (tries >= 15) return console.warn('Could not find a sample with no itemsIds');\n\n    setSampleEntryId(newSampleId ?? null);\n  };\n\n  const columns: TableProps<DailyMovieSet>['columns'] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <MovieEditableCell\n          property=\"title\"\n          value={title}\n          movie={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Year',\n      dataIndex: 'year',\n      render: (year, record) => (\n        <MovieEditableCell property=\"year\" value={year} movie={record} addEntryToUpdate={addEntryToUpdate} />\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <MovieItemsCell\n          movie={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      // key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\" className=\"my-4\">\n      <Button onClick={onGetSample}>Get Sample</Button>\n      {sampleEntryId && (\n        <Table\n          key={String(sampleEntryId)}\n          columns={columns}\n          rowKey=\"id\"\n          dataSource={[data[sampleEntryId]]}\n          expandable={{\n            expandedRowRender: (record) => <AddItemFlow movie={record} addEntryToUpdate={addEntryToUpdate} />,\n            rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n          }}\n          pagination={false}\n        />\n      )}\n\n      <Divider />\n    </Space>\n  );\n}\n","import { Layout, Space } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsMoviesFilters } from 'components/Items/Movies/ItemsMoviesFilters';\nimport { ItemsMoviesSample } from 'components/Items/Movies/ItemsMoviesSample';\nimport { ItemsMoviesTable } from 'components/Items/Movies/ItemsMoviesTable';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport { DailyMovieSet } from 'types';\n\nexport function ItemsMovieSets() {\n  const moviesData = useResourceFirebaseData<DailyMovieSet>({\n    tdrResourceName: 'daily-movie-sets',\n    firebaseDataCollectionName: 'movieSets',\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Movie Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsMoviesFilters {...moviesData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={moviesData.isLoading}\n            error={moviesData.error}\n            hasResponseData={!isEmpty(moviesData.data)}\n          >\n            <Space direction=\"vertical\">\n              <ItemsMoviesSample {...moviesData} />\n              <ItemsMoviesTable {...moviesData} />\n            </Space>\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsMovieSets;\n"],"names":["DownloadButton","data","fileName","loading","children","props","onClick","downloadObjectAsFile","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","size","icon","disabled","danger","block","SectionTitle","level","rest","TransparentButton","active","activeClass","className","hoverType","clsx","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","label","useDailyHistoryQuery","source","options","notification","App","historyQuery","useQuery","queryKey","queryFn","getDocQueryFunction","isSuccess","printFirebase","placement","useParsedHistory","key","history","useMemo","latestDate","getYesterday","latestNumber","used","JSON","parse","LANGUAGE_PREFIX","SUFFIX_DATA","pt","en","DAILY","subtract","getNextDay","dateString","add","checkWeekend","date","includes","day","ItemsTypeahead","items","isPending","style","placeholder","allowClear","onFinish","tdrItemsQuery","useTDResource","Boolean","namesDict","Object","values","reduce","acc","entry","nameEn","name","id","namePt","aliasesEn","forEach","alias","aliasesPt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","option","String","sorted","idMatch","match","index","indexOf","width","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","undefined","onPressEnter","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","info","truncate","omission","success","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","get","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","queryClient","useQueryClient","tdrQuery","firebaseQuery","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","mutation","useUpdateFirebaseDoc","onSuccess","refetchQueries","onError","description","cloneDeep","isEmpty","firebaseData","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","useTDResourceNonCollection","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","updateDoc","useMutation","mutationFn","ItemsMoviesFilters","vertical","gap","stringify","prepareFileForDownload","movies","sortJsonKeys","mode","ItemsMoviesTable","itemsTypeaheadQuery","usedHistory","filmacoHistory","mapValues","keyBy","useMovieUsedHistory","showOnlyEmpty","rows","sets","givenSets","s","title","itemsIds","completeMoviesCount","paginationProps","columns","dataIndex","render","record","MovieEditableCell","property","movie","sorter","a","b","localeCompare","year","Table","MovieItemsCell","removeDuplicates","direction","rowKey","dataSource","expandable","expandedRowRender","AddItemFlow","rowExpandable","pagination","itemId","RemoveItemFlow","onConfirm","okText","cancelText","DeleteFilled","wrap","justify","editable","newValue","ItemsMoviesSample","sampleEntryId","setSampleEntryId","newSampleId","sample","tries","warn","ItemsMovieSets","moviesData","subtitle","hasSider","PageSider","DataLoadingWrapper"],"sourceRoot":""}