{"version":3,"file":"static/js/ImageCardsComparator.8c0c47f2.chunk.js","mappings":"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","sources":["components/Common/FilterEntries.tsx","components/Common/SaveButton.tsx","components/Common/SectionTitle.tsx","components/Common/TransparentButton.tsx","components/Common/ResponseState.tsx","components/Images/ImageCard.tsx","components/Images/ImageCards/RelationshipCountTag.tsx","components/Images/ImageCards/hooks.ts","components/Images/ImageCards/constants.ts","hooks/useCardWidth.ts","hooks/useQueryParams.ts","components/Images/ImageCards/Comparator.tsx","components/Images/ImageCards/ComparatorFilters.tsx","pages/Images/ImageCardsComparator.tsx"],"sourcesContent":["import { Checkbox, Form, InputNumber, Segmented, Select, Switch, Tooltip } from 'antd';\nimport { SegmentedValue } from 'antd/es/segmented';\nimport { ReactNode } from 'react';\n\ntype StrOrNum = string | number;\n\ntype FilterSelectProps = {\n  label: ReactNode;\n  value: string | number;\n  onChange: (value: any) => void;\n  options: { value: StrOrNum; label: StrOrNum }[] | StrOrNum[];\n  placeholder?: string;\n};\n\nexport function FilterSelect({ label, value, onChange, options, placeholder }: FilterSelectProps) {\n  return (\n    <Form.Item label={label}>\n      <Select style={{ minWidth: '150px' }} onChange={onChange} value={value}>\n        {placeholder && (\n          <Select.Option value={''} disabled>\n            placeholder\n          </Select.Option>\n        )}\n        {options.map((entry) =>\n          typeof entry === 'object' ? (\n            <Select.Option key={`${label}-${entry.value}`} value={entry.value}>\n              {entry.label}\n            </Select.Option>\n          ) : (\n            <Select.Option key={`${label}-${entry}`} value={entry}>\n              {entry}\n            </Select.Option>\n          )\n        )}\n      </Select>\n    </Form.Item>\n  );\n}\n\ntype FilterNumberProps = {\n  label: ReactNode;\n  value: number;\n  onChange: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n};\n\nexport function FilterNumber({ label, value, onChange, min = 0, max = 100, step }: FilterNumberProps) {\n  return (\n    <Form.Item label={label}>\n      <InputNumber\n        min={min}\n        max={max}\n        value={value}\n        onChange={(v) => onChange(v ?? max)}\n        style={{ minWidth: '150px', width: '100%' }}\n        step={step}\n      />\n    </Form.Item>\n  );\n}\n\ntype FilterSwitchProps = {\n  label: ReactNode;\n  value: boolean;\n  onChange: (value: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function FilterSwitch({ label, value, onChange, className, disabled }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Switch checked={value} onChange={onChange} size=\"small\" disabled={disabled} />\n    </Form.Item>\n  );\n}\n\nexport function FilterCheckBox({ label, value, onChange, disabled, className }: FilterSwitchProps) {\n  return (\n    <Form.Item label={label} valuePropName=\"checked\" className={className}>\n      <Checkbox checked={value} onChange={(e) => onChange(e.target.checked)} disabled={disabled} />\n    </Form.Item>\n  );\n}\n\ntype FilterSegmentsProps = {\n  label: ReactNode;\n  value?: string;\n  onChange: (mode: SegmentedValue) => void;\n  options: { value: string; title: string; icon: ReactNode }[];\n};\n\nexport function FilterSegments({ value, label, onChange, options }: FilterSegmentsProps) {\n  return (\n    <Form.Item label={label} layout={options.length > 2 ? 'vertical' : 'horizontal'}>\n      <Segmented\n        block\n        value={value}\n        onChange={onChange}\n        options={options.map((option) => ({\n          label: (\n            <Tooltip arrow trigger=\"hover\" title={option.title}>\n              {option.icon}\n            </Tooltip>\n          ),\n          value: option.value,\n        }))}\n      />\n    </Form.Item>\n  );\n}\n","import { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { useGlobalContext } from 'context/GlobalContext';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  const { togglePendingSave } = useGlobalContext();\n\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  // Reset the timeout if `isDirty` is true and dirt has\n  useEffect(() => {\n    if (isDirty) {\n      togglePendingSave(true);\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      togglePendingSave(false);\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Prevents the user from leaving the page if there are unsaved changes (browser navigation or refresh)\n  useEffect(() => {\n    const handleBeforeUnload = (event: any) => {\n      if (isDirty) {\n        const message = 'You have unsaved changes, are you sure you want to leave?';\n        // alert(message);\n        event.returnValue = message; // Standard way to set message\n        return message; // For some browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isDirty]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { Typography } from 'antd';\nimport { TitleProps } from 'antd/lib/typography/Title';\n\nexport function SectionTitle({ children, level, ...rest }: TitleProps) {\n  return (\n    <Typography.Title level={level ?? 3} {...rest}>\n      {children}\n    </Typography.Title>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { Form, Tag } from 'antd';\nimport { SiderContent } from 'components/Layout';\n\ntype TagStateProps = {\n  /**\n   * The data is loading\n   */\n  isLoading: boolean;\n  /**\n   * The data hasn't run a query yet\n   */\n  isIdle?: boolean;\n  /**\n   * The data has an error\n   */\n  isError?: boolean;\n  /**\n   * The data has an error\n   */\n  error?: ResponseError;\n  /**\n   * The data has been modified\n   */\n  isDirty?: boolean;\n  /**\n   * There is a response\n   */\n  hasResponseData: boolean;\n};\n\nexport function TagState({ isLoading, isIdle, error, isDirty, isError, hasResponseData }: TagStateProps) {\n  if (isIdle) return <Tag>No Data yet</Tag>;\n  if (isLoading) return <Tag color=\"blue\">Loading...</Tag>;\n  if (error || isError) return <Tag color=\"red\">Error</Tag>;\n  if (isDirty) return <Tag color=\"orange\">Modified</Tag>;\n  if (hasResponseData) return <Tag color=\"green\">Loaded</Tag>;\n  return <Tag>No Data</Tag>;\n}\n\nexport function ResponseState(props: TagStateProps) {\n  return (\n    <SiderContent>\n      <Form.Item label=\"Status\">\n        <TagState {...props} />\n      </Form.Item>\n    </SiderContent>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n\n// Hooks\nimport { useBaseUrl } from 'hooks/useBaseUrl';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  width?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  width = 200,\n  className = '',\n  preview = true,\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { getUrl } = useBaseUrl('images');\n  const imageURL = id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('image-card', className)}>\n      <Image\n        width={width}\n        src={getUrl(`${imageURL}.${fileExtension}`)}\n        fallback={getUrl('back/default.jpg')}\n        preview={preview}\n      />\n    </div>\n  );\n};\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","import { App } from 'antd';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { cloneDeep, merge, padStart, random } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { firestore, printFirebase } from 'services/firebase';\nimport { removeDuplicates } from 'utils';\n\nimport { UseMutateFunction, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { CARDS_PER_DECK, DEFAULT_ENTRY, TOTAL_DECKS } from './constants';\nimport { FirebaseImageCardLibrary, ImageCardData, ImageCardRelationship } from './types';\nimport { cleanupData } from './utils';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\nconst getRandomCardNumber = () => padStart(String(random(1, CARDS_PER_DECK)), 2, '0');\n\nconst getRandomDeck = () => random(1, TOTAL_DECKS);\n\nconst getRandomCardId = () => `td-d${getRandomDeck()}-${getRandomCardNumber()}`;\n\nexport type UseRandomCardReturnValue = {\n  cardId: string;\n  deck: number;\n  onRandomCard: () => void;\n  card: ImageCardData;\n  add: (key: keyof ImageCardData, value: string) => void;\n  remove: (key: keyof ImageCardData, value: string) => void;\n  update: (key: keyof ImageCardData, value: string[]) => void;\n  toggleHighlight: () => void;\n};\n\nexport function useRandomCard(\n  cardData: FirebaseImageCardLibrary,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n): UseRandomCardReturnValue {\n  const [deck, setDeck] = useState(getRandomDeck());\n  const [cardNumber, setCardNumber] = useState(getRandomCardNumber());\n  const cardId = `td-d${deck}-${cardNumber}`;\n\n  const onRandomCard = () => {\n    setDeck(getRandomDeck());\n    setCardNumber(getRandomCardNumber());\n  };\n\n  const card = merge(cloneDeep(DEFAULT_ENTRY), cardData?.[cardId] ?? {});\n\n  const add = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      card[key]!.push(value);\n      setDirty(true);\n    }\n  };\n\n  const remove = (key: keyof ImageCardData, value: string) => {\n    if (key !== 'highlight' && card[key]) {\n      const entry = card[key] ?? [];\n      entry.splice(entry.indexOf(value), 1);\n      setDirty(true);\n    }\n  };\n\n  const update = (key: keyof ImageCardData, value: string[]) => {\n    if (key !== 'highlight') {\n      card[key] = value.map((v) => v.trim().toLowerCase());\n      setDirty(true);\n    }\n  };\n\n  const toggleHighlight = () => {\n    card.highlight = !card.highlight;\n    setDirty(true);\n  };\n\n  useEffect(() => {\n    cardData[cardId] = card;\n  }, [card]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    cardId,\n    deck,\n    onRandomCard,\n    card,\n    add,\n    remove,\n    update,\n    toggleHighlight,\n  };\n}\n\nexport function useImageCardsData() {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCards'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    refetch,\n  } = useQuery<any>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as FirebaseImageCardLibrary;\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      printFirebase('Loaded data/imageCards');\n    }\n  }, [isSuccess]);\n\n  useEffect(() => {\n    if (isError) {\n      notification.error({\n        message: 'Error loading data/imageCards',\n        placement: 'bottomLeft',\n      });\n    }\n  }, [isError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, FirebaseImageCardLibrary, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCards');\n      const cleanData = cleanupData(data);\n      await setDoc(docRef, cleanData);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n  };\n}\n\nexport function useRandomCards(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void\n) {\n  const [deckA, setDeckA] = useState(getRandomDeck());\n  const [cardNumberA, setCardNumberA] = useState(getRandomCardNumber());\n  const [deckB, setDeckB] = useState(getRandomDeck());\n  const [cardNumberB, setCardNumberB] = useState(getRandomCardNumber());\n  const cardAId = `td-d${deckA}-${cardNumberA}`;\n  const cardBId = `td-d${deckB}-${cardNumberB}`;\n  const [unrelatedCount, setUnrelatedCount] = useState(0);\n  const { queryParams } = useQueryParams();\n  const unrelatedThreshold = Number(queryParams.get('cycle') ?? 3);\n\n  const cardA = cardData?.[cardAId] ?? [];\n  const cardB = cardData?.[cardBId] ?? [];\n\n  const onRandomCards = () => {\n    setUnrelatedCount(0);\n    setDeckA(getRandomDeck());\n    setCardNumberA(getRandomCardNumber());\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const relate = () => {\n    setUnrelatedCount(0);\n    cardA.push(cardBId);\n    cardData[cardAId] = removeDuplicates(cardA);\n    cardB.push(cardAId);\n    cardData[cardBId] = removeDuplicates(cardB);\n    setDirty(true);\n    setDeckA(deckB);\n    setCardNumberA(cardNumberB);\n    setDeckB(getRandomDeck());\n    setCardNumberB(getRandomCardNumber());\n  };\n\n  const unrelate = () => {\n    if (unrelatedCount >= unrelatedThreshold) {\n      setUnrelatedCount(0);\n      onRandomCards();\n    } else {\n      setUnrelatedCount((ps) => ps + 1);\n      setDeckB(getRandomDeck());\n      setCardNumberB(getRandomCardNumber());\n    }\n  };\n\n  useEffect(() => {\n    if (cardAId === cardBId) {\n      setCardNumberB(getRandomCardNumber());\n    }\n  }, [cardAId, cardBId]);\n\n  return {\n    cardAId,\n    cardA,\n    cardBId,\n    cardB,\n    relate,\n    unrelate,\n    areRelated: cardA.includes(cardBId),\n    onRandomCards,\n  };\n}\n\ntype Stats = {\n  total: number;\n  overdone: number;\n  complete: number;\n  single: number;\n};\n\nexport type UseImageCardsRelationshipDataReturnValue = {\n  data: ImageCardRelationship;\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  error: Error | null;\n  hasData: boolean;\n  refetch: () => void;\n  isSaving: boolean;\n  isMutationError: boolean;\n  isSaved: boolean;\n  save: UseMutateFunction<{}, unknown, ImageCardRelationship, unknown>;\n  setDirty: (value: React.SetStateAction<boolean>) => void;\n  isDirty: boolean;\n  stats: Stats;\n};\n\nexport function useImageCardsRelationshipData(): UseImageCardsRelationshipDataReturnValue {\n  const [isDirty, setDirty] = useState(false);\n  const queryKey = ['data/imageCardsRelationships'];\n  const queryClient = useQueryClient();\n  const { notification } = App.useApp();\n  const [stats, setStats] = useState<Stats>({ total: 0, overdone: 0, complete: 0, single: 0 });\n\n  const {\n    data = {},\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    isFetched,\n    isRefetching,\n    refetch,\n  } = useQuery<Record<string, string[]>>({\n    queryKey,\n    queryFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n      const querySnapshot = await getDoc(docRef);\n      return (querySnapshot.data() ?? {}) as ImageCardRelationship;\n    },\n  });\n\n  const {\n    isPending: isSaving,\n    isError: isMutationError,\n    isSuccess: isSaved,\n    mutate: save,\n  } = useMutation<{}, unknown, ImageCardRelationship, unknown>({\n    mutationKey: queryKey,\n    mutationFn: async () => {\n      const docRef = doc(firestore, 'data/imageCardsRelationships');\n\n      await setDoc(docRef, data);\n      return data;\n    },\n    onSuccess: () => {\n      notification.success({\n        message: 'Saved',\n        placement: 'bottomLeft',\n      });\n      queryClient.refetchQueries({\n        queryKey: queryKey,\n      });\n      setDirty(false);\n    },\n  });\n\n  useEffect(() => {\n    if (!isRefetching && isFetched) {\n      const total = Object.keys(data).length;\n      let overdone = 0;\n      let complete = 0;\n      let single = 0;\n      Object.values(data).forEach((v) => {\n        if (v.length > 8) {\n          overdone += 1;\n        }\n        if (v.length === 1) {\n          single += 1;\n        }\n        if (v.length > 2) {\n          complete += 1;\n        }\n      });\n      setStats({ total, overdone, complete, single });\n    }\n  }, [isFetched, isRefetching]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    data,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    hasData: isSuccess && Object.keys(data).length > 0,\n    refetch,\n    isSaving,\n    isMutationError,\n    isSaved,\n    save,\n    setDirty,\n    isDirty,\n    stats,\n  };\n}\n\nexport type UseRandomGroupReturnValue = {\n  cardIds: string[];\n  cards: string[][];\n  selection: string[];\n  onSelect: (id: string) => void;\n  relate: () => void;\n  nextSet: () => void;\n  deselectAll: () => void;\n  cycles: number;\n  filters: { useCycles: boolean; toggleUseCycles: () => void };\n};\n\nexport function useRandomGroups(\n  cardData: ImageCardRelationship,\n  setDirty: (value: React.SetStateAction<boolean>) => void,\n  sampleSize: number,\n  tagThreshold: number\n): UseRandomGroupReturnValue {\n  const [cardIds, setCardIds] = useState<string[]>([]);\n  const [cards, setCards] = useState<string[][]>([]);\n  const [cycledCards, setCycleCards] = useState<string[]>([]);\n  const [cycles, setCycles] = useState(0);\n  const [filterUseCycles, setFIlterUseCycles] = useState(true);\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  const updateCards = (ids?: string[]) => {\n    setCards((ids ?? cardIds).map((id) => cardData?.[id] ?? []));\n  };\n\n  const onRandomCards = () => {\n    // setSelection([]);\n    const ids: string[] = [...selection];\n    let cycleCount = 0;\n    const cycledCardsSample = cycledCards.length < 2000 ? cycledCards : [];\n\n    // Avoid infinite loop failsafe\n    let tries = 0;\n    while (tries < 400 && ids.length < sampleSize) {\n      const id = getRandomCardId();\n      const card = cardData[id] ?? [];\n      const isNew = tagThreshold > 0 ? card.length < tagThreshold : true;\n      const isCycled = filterUseCycles ? cycledCardsSample.includes(id) : false;\n      if (!ids.includes(id) && !isCycled && isNew) {\n        ids.push(id);\n        cycleCount += 1;\n      }\n      tries += 1;\n    }\n    setCardIds(ids);\n    setCycleCards((pv) => [...pv, ...ids]);\n    updateCards(ids);\n    setCycles((ps) => ps + cycleCount);\n  };\n\n  // On Load get sample of cards\n  useEffect(() => {\n    if (cardIds.length === 0) {\n      onRandomCards();\n    }\n  }, [cardIds]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Selects or deselects a card\n   */\n  const onSelect = (id: string) => {\n    setSelection((ps) => {\n      const copy = [...ps];\n      const index = copy.indexOf(id);\n      if (index > -1) {\n        copy.splice(index, 1);\n      } else {\n        copy.push(id);\n      }\n      return copy;\n    });\n  };\n\n  /**\n   * Relates all selected cards in the selection array\n   */\n  const relate = () => {\n    selection.forEach((id) => {\n      const card = cardData[id] ?? [];\n\n      card.push(...selection.filter((s) => s !== id));\n      cardData[id] = removeDuplicates(card);\n    });\n    setDirty(true);\n    setSelection([]);\n    updateCards();\n    setCycleCards([]);\n    setCycles(0);\n  };\n\n  /**\n   * Deselects all cards\n   */\n  const deselectAll = () => {\n    setSelection([]);\n  };\n\n  const toggleFilterUseCycles = () => {\n    setFIlterUseCycles((ps) => !ps);\n  };\n\n  return {\n    cardIds,\n    cards,\n    selection,\n    onSelect,\n    relate,\n    nextSet: onRandomCards,\n    deselectAll,\n    cycles,\n    filters: {\n      useCycles: filterUseCycles,\n      toggleUseCycles: toggleFilterUseCycles,\n    },\n  };\n}\n","import { ImageCardData } from './types';\n\nexport const TOTAL_DECKS = 12;\n\nexport const CARDS_PER_DECK = 252;\n\nexport const SUGGESTED_MOODS = [\n  'anxious',\n  'bright',\n  'chaotic',\n  'colorful',\n  'confusion',\n  'cozy',\n  'creepy',\n  'dark',\n  'dramatic',\n  'dreamy',\n  'fear',\n  'gloomy',\n  'happy',\n  'intense',\n  'magical',\n  'melancholic',\n  'muted',\n  'mysterious',\n  'professional',\n  'reflective',\n  'scary',\n  'serene',\n  'surreal',\n  'tension',\n  'vibrant',\n  'warm',\n  'whimsical',\n];\n\nexport const SUGGESTED_COLORS = [\n  'beige',\n  'black',\n  'blue',\n  'brown',\n  'colorful',\n  'gray',\n  'green',\n  'mixed',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'white',\n  'yellow',\n];\n\nexport const DEFAULT_ENTRY: ImageCardData = {\n  focus: [],\n  actions: [],\n  colors: [],\n  mood: [],\n  elements: [],\n  highlight: false,\n};\n","import { Ref, useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\n/**\n * Get a card width in px based on the window size of given container used with the containerRef\n * @param quantity how many cards should be fitted in the page screen width\n * @param options the options object\n * @param options.gap total value of padding and margin on the left and right of the card\n * @param options.minWidth minimum width of a card\n * @param options.maxWidth maximum width of a card\n * @param options.margin the outer margin of the container that should be removed from the width\n * @returns\n */\nexport function useCardWidth(\n  quantity: number,\n  options?: {\n    gap?: number;\n    minWidth?: number;\n    maxWidth?: number;\n    margin?: number;\n  }\n): [number, Ref<HTMLDivElement>] {\n  const [ref, { width }] = useMeasure();\n  const { gap = 32, minWidth = 120, maxWidth = 300, margin = 0 } = options ?? {};\n\n  const cardWidth = useMemo(() => {\n    const value = Math.min(Math.max(Math.floor((width - margin) / quantity) - gap, minWidth), maxWidth);\n    return Number.isNaN(value) ? minWidth : value;\n  }, [width, quantity, gap, minWidth, maxWidth, margin]);\n\n  const containerRef = ref as Ref<HTMLDivElement>;\n\n  return [cardWidth, containerRef];\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const addParams = (params: Record<string, unknown>, defaultValues: Record<string, unknown> = {}) => {\n    Object.entries(params).forEach(([key, value]) => {\n      if (defaultValues[key] === value) {\n        searchParams.delete(key);\n      } else {\n        searchParams.set(key, String(value));\n      }\n    });\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    addParams,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { Button, Flex, Image, Layout, Modal, Tag } from 'antd';\n\nimport { UseImageCardsRelationshipDataReturnValue, useRandomCards } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { ImageCard } from '../ImageCard';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useKey, useWindowSize } from 'react-use';\n\ntype ComparatorProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function Comparator({ query }: ComparatorProps) {\n  const { width } = useWindowSize();\n  const [cardWidth] = useCardWidth(1, { minWidth: width / 3 });\n\n  const { data, setDirty } = query;\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardAId, cardA, cardBId, cardB, relate, unrelate } = useRandomCards(data, setDirty);\n\n  const { addParam, is } = useQueryParams();\n\n  useKey('1', unrelate);\n  useKey('2', relate);\n\n  return (\n    <Layout.Content className=\"dev-content py-4\">\n      <Button block onClick={() => addParam('open', 'true')}>\n        Open Modal\n      </Button>\n\n      <Modal\n        title={`Card A: ${cardAId}`}\n        open={is('open')}\n        width={width * 0.95}\n        onCancel={() => addParam('open', 'false')}\n        footer={null}\n      >\n        <Image.PreviewGroup>\n          <Flex className=\"center\" wrap=\"wrap\" justify=\"center\">\n            <Flex vertical>\n              <ImageCard id={cardAId} width={cardWidth} />\n              <Flex>\n                <RelationshipCountTag card={cardA} />\n                <Tag>{cardAId}</Tag>\n              </Flex>\n            </Flex>\n            <Flex vertical>\n              <ImageCard id={cardBId} width={cardWidth} />\n              <Flex>\n                <RelationshipCountTag card={cardB} />\n                <Tag>{cardBId}</Tag>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Image.PreviewGroup>\n\n        <Flex gap={32} className=\"my-10\">\n          <Button onClick={unrelate} size=\"large\" block>\n            Unrelated\n          </Button>\n          <Button onClick={relate} size=\"large\" block type=\"primary\">\n            Related\n          </Button>\n        </Flex>\n      </Modal>\n    </Layout.Content>\n  );\n}\n","import { Button, Divider, Flex } from 'antd';\nimport { FilterSelect, ResponseState } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { PageSider, SiderContent } from 'components/Layout';\nimport { isEmpty } from 'lodash';\n\nimport { UseImageCardsRelationshipDataReturnValue } from './hooks';\nimport { useQueryParams } from 'hooks/useQueryParams';\n\ntype ComparatorFiltersProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function ComparatorFilters({ query }: ComparatorFiltersProps) {\n  const { data, isDirty, isSaving, save, isLoading, isError } = query;\n  const { queryParams, addParam } = useQueryParams();\n\n  return (\n    <PageSider>\n      <SiderContent>\n        <Flex vertical gap={6}>\n          <SaveButton\n            isDirty={isDirty}\n            dirt={JSON.stringify(data)}\n            onSave={() => save({})}\n            isSaving={isSaving}\n          />\n\n          <DownloadButton\n            data={data}\n            fileName=\"imageCardsRelationships.json\"\n            loading={isSaving}\n            disabled={isEmpty(data)}\n            block\n          />\n        </Flex>\n      </SiderContent>\n\n      <ResponseState\n        isLoading={isLoading || isSaving}\n        isDirty={isDirty}\n        isError={isError}\n        hasResponseData={!isEmpty(data)}\n      />\n\n      <SiderContent>\n        <Button block onClick={() => addParam('open', 'true')}>\n          Open Modal\n        </Button>\n\n        <Divider />\n\n        <FilterSelect\n          label=\"Cycle Threshold\"\n          value={queryParams.get('cycle') || 3}\n          onChange={(v) => addParam('cycle', v)}\n          options={[1, 3, 5, 10]}\n        />\n      </SiderContent>\n    </PageSider>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { Comparator } from 'components/Images/ImageCards/Comparator';\nimport { ComparatorFilters } from 'components/Images/ImageCards/ComparatorFilters';\nimport { useImageCardsRelationshipData } from 'components/Images/ImageCards/hooks';\n\nimport { PageLayout } from 'components/Layout';\nimport { isEmpty } from 'lodash';\n\nfunction ImageCardsComparator() {\n  const query = useImageCardsRelationshipData();\n\n  return (\n    <PageLayout title=\"Image Cards\" subtitle=\"Comparator\">\n      <DataLoadingWrapper\n        isLoading={query.isLoading}\n        error={query.error}\n        hasResponseData={!isEmpty(query.data)}\n      >\n        <Layout hasSider>\n          <ComparatorFilters query={query} />\n\n          <Layout.Content className=\"content\">\n            <Comparator query={query} />\n          </Layout.Content>\n        </Layout>\n      </DataLoadingWrapper>\n    </PageLayout>\n  );\n}\n\nexport default ImageCardsComparator;\n"],"names":["FilterSelect","label","value","onChange","options","placeholder","style","minWidth","disabled","map","entry","FilterNumber","min","max","step","v","width","FilterSwitch","className","valuePropName","checked","size","FilterCheckBox","e","target","FilterSegments","layout","length","block","option","arrow","trigger","title","icon","SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","togglePendingSave","useGlobalContext","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","handleBeforeUnload","event","message","returnValue","window","addEventListener","removeEventListener","type","onClick","loading","danger","SectionTitle","children","level","rest","TransparentButton","active","activeClass","hoverType","clsx","TagState","isLoading","isIdle","error","isError","hasResponseData","color","ResponseState","props","ImageCard","id","preview","fileExtension","getUrl","useBaseUrl","imageURL","replace","src","fallback","RelationshipCountTag","card","undefined","getRandomCardNumber","padStart","String","random","getRandomDeck","useRandomCards","cardData","setDirty","deckA","setDeckA","useState","cardNumberA","setCardNumberA","deckB","setDeckB","cardNumberB","setCardNumberB","cardAId","cardBId","unrelatedCount","setUnrelatedCount","queryParams","useQueryParams","unrelatedThreshold","Number","get","cardA","cardB","onRandomCards","relate","push","removeDuplicates","unrelate","ps","areRelated","includes","useImageCardsRelationshipData","queryKey","queryClient","useQueryClient","notification","App","stats","setStats","total","overdone","complete","single","data","isSuccess","isFetched","isRefetching","refetch","useQuery","queryFn","async","docRef","doc","firestore","getDoc","isPending","isMutationError","isSaved","mutate","save","useMutation","mutationKey","mutationFn","setDoc","onSuccess","success","placement","refetchQueries","Object","keys","values","forEach","hasData","useRandomGroups","sampleSize","tagThreshold","cardIds","setCardIds","cards","setCards","cycledCards","setCycleCards","cycles","setCycles","filterUseCycles","setFIlterUseCycles","selection","setSelection","updateCards","ids","cycleCount","cycledCardsSample","tries","isNew","isCycled","pv","onSelect","copy","index","indexOf","splice","filter","s","nextSet","deselectAll","filters","useCycles","toggleUseCycles","useCardWidth","quantity","ref","useMeasure","gap","maxWidth","margin","useMemo","Math","floor","isNaN","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","key","defaultValue","delete","set","addParams","params","defaultValues","entries","removeParam","is","has","Comparator","query","useWindowSize","cardWidth","useKey","open","onCancel","footer","wrap","justify","vertical","ComparatorFilters","JSON","stringify","DownloadButton","fileName","isEmpty","subtitle","DataLoadingWrapper","hasSider"],"sourceRoot":""}