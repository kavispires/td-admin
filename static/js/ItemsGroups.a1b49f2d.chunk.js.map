{"version":3,"file":"static/js/ItemsGroups.a1b49f2d.chunk.js","mappings":"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","sources":["components/Items/ItemBuildingBlocks.tsx","components/Items/ItemGroupsCard.tsx","components/Items/ItemsGroupsContent.tsx","components/Items/ItemsGroupsFilters.tsx","pages/Items/ItemsGroups.tsx"],"sourcesContent":["import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { Card, Flex, Input, InputRef, Popover, Select, Space, Tag, Typography } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { ChangeEvent, CSSProperties, useEffect, useRef, useState } from 'react';\nimport { Item as ItemT } from 'types';\n\nimport { EditOutlined, PlusOutlined } from '@ant-design/icons';\n\nimport { ItemName, ItemNsfw, ItemSprite } from './ItemBuildingBlocks';\n\ntype ItemGroupsCardProps = {\n  item: ItemT;\n  itemGroups?: string[];\n  groupsTypeahead: { label: string; value: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nexport function ItemGroupsCard({\n  item,\n  itemGroups,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemGroupsCardProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Card\n      title={\n        <>\n          <Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>\n          <ItemNsfw item={item} />\n        </>\n      }\n      style={{ maxWidth: 250 }}\n    >\n      <ItemSprite item={item} width={75} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <ItemName item={item} language=\"en\" />\n        <ItemName item={item} language=\"pt\" />\n\n        <Select\n          mode=\"multiple\"\n          style={{ width: '100%' }}\n          placeholder=\"Select a category\"\n          defaultValue={itemGroups}\n          options={groupsTypeahead}\n          showSearch\n          size=\"small\"\n          key={String(itemGroups)}\n          onChange={(groups) => onUpdateItemGroups(item.id, groups)}\n        />\n        <Flex gap={4}>\n          <EditItemGroupsPanel\n            item={item}\n            itemGroups={itemGroups}\n            groupsTypeahead={groupsTypeahead}\n            onUpdateItemGroups={onUpdateItemGroups}\n          />\n          <AddNewGroup\n            item={item}\n            itemGroups={itemGroups}\n            groupsTypeahead={groupsTypeahead}\n            onUpdateItemGroups={onUpdateItemGroups}\n          />\n        </Flex>\n      </Space>\n    </Card>\n  );\n}\n\nfunction EditItemGroupsPanel({\n  item,\n  itemGroups = [],\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemGroupsCardProps) {\n  const groupsPanel = (\n    <Space wrap className=\"item-groups-panel-container\">\n      {groupsTypeahead.map((group) => {\n        const isActive = itemGroups.includes(group.value);\n\n        return (\n          <Tag\n            key={group.value}\n            bordered={!isActive}\n            color={isActive ? 'processing' : undefined}\n            onClick={() =>\n              onUpdateItemGroups(\n                item.id,\n                isActive ? itemGroups.filter((g) => g !== group.value) : [...itemGroups, group.value]\n              )\n            }\n          >\n            {group.label}\n          </Tag>\n        );\n      })}\n    </Space>\n  );\n\n  return (\n    <Popover\n      content={groupsPanel}\n      title={`Select Tags for \"${item.name.en}\"`}\n      trigger=\"click\"\n      placement=\"bottom\"\n    >\n      <Tag style={{ cursor: 'pointer' }}>\n        <EditOutlined />\n      </Tag>\n    </Popover>\n  );\n}\n\nfunction AddNewGroup({ item, itemGroups = [], groupsTypeahead, onUpdateItemGroups }: ItemGroupsCardProps) {\n  const [inputVisible, setInputVisible] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const inputRef = useRef<InputRef>(null);\n\n  useEffect(() => {\n    if (inputVisible) {\n      inputRef.current?.focus();\n    }\n  }, [inputVisible]);\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleInputConfirm = () => {\n    if (inputValue && !groupsTypeahead.find((group) => group.label === inputValue)) {\n      onUpdateItemGroups(item.id, [...itemGroups, inputValue]);\n    }\n    setInputVisible(false);\n    setInputValue('');\n  };\n\n  const showInput = () => {\n    setInputVisible(true);\n  };\n\n  const tagPlusStyle: CSSProperties = {\n    height: 22,\n    // background: token.colorBgContainer,\n    borderStyle: 'dashed',\n    cursor: 'pointer',\n  };\n  const tagInputStyle: CSSProperties = {\n    width: 64,\n    height: 22,\n    marginInlineEnd: 8,\n    verticalAlign: 'top',\n  };\n\n  return (\n    <>\n      {inputVisible ? (\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          size=\"small\"\n          style={tagInputStyle}\n          value={inputValue}\n          onChange={handleInputChange}\n          onBlur={handleInputConfirm}\n          onPressEnter={handleInputConfirm}\n        />\n      ) : (\n        <Tag style={tagPlusStyle} icon={<PlusOutlined />} onClick={showInput}>\n          New Group\n        </Tag>\n      )}\n    </>\n  );\n}\n","import { Col, Flex, Row, Table, TableProps, Typography } from 'antd';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { Item as ItemT, ItemGroup } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { ItemGroupsCard } from './ItemGroupsCard';\n\nexport function ItemsGroupsContent({ data, addEntryToUpdate }: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { is } = useQueryParams();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const grousByItem = useMemo(() => {\n    return Object.values(data ?? []).reduce((acc: Record<string, string[]>, group) => {\n      if (!group.itemsIds) {\n        console.warn('Group without items', group);\n      }\n      group.itemsIds.forEach((itemId) => {\n        if (!acc[itemId]) {\n          acc[itemId] = [];\n        }\n        acc[itemId].push(group.id);\n      });\n\n      return acc;\n    }, {});\n  }, [data]);\n\n  const groupsTypeahead = useMemo(\n    () =>\n      orderBy(\n        Object.keys(data).map((id) => ({ label: id, value: id })),\n        'label'\n      ),\n    [data]\n  );\n\n  const onUpdateItemGroups = (itemId: string, groupIds: string[]) => {\n    // Compare previous groups in items with new groups\n    const previousGroups = grousByItem[itemId] ?? [];\n    const groupsToAdd = groupIds.filter((id) => !previousGroups.includes(id));\n    const groupsToRemove = previousGroups.filter((id) => !groupIds.includes(id));\n\n    // Add item to groups\n    groupsToAdd.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates([...(data[groupId]?.itemsIds ?? []), itemId]),\n      });\n    });\n\n    // Remove item from groups\n    groupsToRemove.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates(data[groupId]?.itemsIds.filter((id) => id !== itemId)),\n      });\n    });\n  };\n\n  return (\n    <>\n      {is('display', 'group') && <ItemsGroupsByGroupTable data={data} />}\n      {is('display', 'item') && (\n        <ItemsGroupsByItemTable\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n        />\n      )}\n    </>\n  );\n}\n\nfunction ItemsGroupsByGroupTable({ data }: Pick<UseResourceFirebaseDataReturnType<ItemGroup>, 'data'>) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  const columns: TableProps<ItemGroup>['columns'] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n      render: (id) => <span>{id}</span>,\n    },\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <Flex gap={6} wrap=\"wrap\" key={`items-${record.id}`}>\n          {itemsIds.map((itemId) => (\n            <Flex key={`${record.id}-${itemId}`} gap={2} vertical>\n              <Item id={itemId} width={60} />\n              <Flex justify=\"center\">\n                <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n              </Flex>\n            </Flex>\n          ))}\n        </Flex>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n  ];\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={Object.values(data)}\n      className=\"my-4\"\n      pagination={{ showQuickJumper: true }}\n    />\n  );\n}\n\ntype ItemsGroupsByItemTableProps = {\n  items: Dictionary<ItemT>;\n  grousByItem: Record<string, string[]>;\n  groupsTypeahead: { value: string; label: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nfunction ItemsGroupsByItemTable({\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemsGroupsByItemTableProps) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const data = useMemo(\n    () => (showOnlyEmpty ? Object.values(items).filter((v) => !grousByItem[v.id]) : Object.values(items)),\n    [items, grousByItem, showOnlyEmpty]\n  );\n\n  const { page, pagination } = useGridPagination({ data });\n\n  return (\n    <>\n      <Typography.Title level={2}>Groups by Items ({data.length})</Typography.Title>\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemGroupsCard\n                item={item}\n                itemGroups={grousByItem[item.id]}\n                groupsTypeahead={groupsTypeahead}\n                onUpdateItemGroups={onUpdateItemGroups}\n              />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { ItemGroup } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nimport { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { SaveButton } from 'components/Common/SaveButton';\n\nexport function ItemsGroupsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { queryParams, addParam, is } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"items-groups.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'group'}\n        onChange={(mode) => addParam('display', mode)}\n        options={[\n          {\n            title: 'By Groups',\n            icon: <ClusterOutlined />,\n            value: 'group',\n          },\n          {\n            title: 'By Items',\n            icon: <TableOutlined />,\n            value: 'item',\n          },\n        ]}\n      />\n\n      <FilterSwitch\n        label=\"No Groups Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n    </SiderContent>\n  );\n}\nfunction prepareFileForDownload(groups: Dictionary<ItemGroup>) {\n  // TODO\n  return sortJsonKeys(groups);\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsGroupsContent } from 'components/Items/ItemsGroupsContent';\nimport { ItemsGroupsFilters } from 'components/Items/ItemsGroupsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { Item, ItemGroup } from 'types';\n\nexport function ItemsGroups() {\n  const groupsQuery = useResourceFirebaseData<ItemGroup>({\n    tdrResourceName: 'items-groups',\n    firebaseDataCollectionName: 'itemsGroups',\n    serialize: true,\n  });\n  const itemsTypeaheadQuery = useTDResource<Item>('items');\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Groups Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsGroupsFilters {...groupsQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={groupsQuery.isLoading || itemsTypeaheadQuery.isLoading}\n            error={groupsQuery.error || itemsTypeaheadQuery.error}\n            hasResponseData={!isEmpty(groupsQuery.data) && !isEmpty(itemsTypeaheadQuery.data)}\n          >\n            <ItemsGroupsContent {...groupsQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsGroups;\n"],"names":["ItemSprite","item","width","className","id","title","name","en","pt","ItemId","copyToClipboard","useCopyToClipboardFunction","prefix","nsfw","style","color","placeholder","variant","size","value","readOnly","onClick","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","ItemGroupsCard","itemGroups","groupsTypeahead","onUpdateItemGroups","maxWidth","direction","mode","defaultValue","options","showSearch","onChange","groups","String","gap","EditItemGroupsPanel","AddNewGroup","groupsPanel","wrap","map","group","isActive","includes","bordered","undefined","filter","g","label","content","trigger","placement","cursor","EditOutlined","inputVisible","setInputVisible","useState","inputValue","setInputValue","inputRef","useRef","useEffect","current","focus","handleInputConfirm","find","ref","type","height","marginInlineEnd","verticalAlign","e","target","onBlur","onPressEnter","borderStyle","icon","PlusOutlined","ItemsGroupsContent","data","addEntryToUpdate","is","useQueryParams","itemsTypeaheadQuery","useTDResource","grousByItem","useMemo","Object","values","reduce","acc","itemsIds","console","warn","forEach","push","orderBy","keys","ItemsGroupsByGroupTable","ItemsGroupsByItemTable","items","groupIds","previousGroups","groupsToAdd","groupsToRemove","groupId","removeDuplicates","columns","dataIndex","key","render","record","vertical","justify","Boolean","length","dataSource","pagination","showQuickJumper","showOnlyEmpty","v","page","useGridPagination","level","PaginationWrapper","gutter","xs","sm","md","lg","xl","ItemsGroupsFilters","save","isDirty","isSaving","entriesToUpdate","queryParams","addParam","SaveButton","onSave","dirt","JSON","stringify","DownloadButton","prepareFileForDownload","sortJsonKeys","fileName","disabled","block","get","ClusterOutlined","TableOutlined","ItemsGroups","groupsQuery","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","subtitle","hasSider","PageSider","DataLoadingWrapper","isLoading","error","hasResponseData","isEmpty"],"sourceRoot":""}