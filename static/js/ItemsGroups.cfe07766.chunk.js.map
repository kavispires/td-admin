{"version":3,"file":"static/js/ItemsGroups.cfe07766.chunk.js","mappings":"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","sources":["components/Common/PaginationWrapper.tsx","components/Items/CopyIdsButton.tsx","components/Items/ItemBuildingBlocks.tsx","hooks/useGridPagination.tsx","hooks/useResourceFirebaseData.ts","hooks/useTablePagination.tsx","components/Items/Groups/ItemGroupsCard.tsx","components/Items/Groups/ItemsGroupsContent.tsx","components/Items/Groups/ItemsGroupsFilters.tsx","pages/Items/ItemsGroups.tsx"],"sourcesContent":["import { Pagination, Space, SpaceProps, TableProps } from 'antd';\nimport { ReactNode } from 'react';\n\ntype PaginationWrapperProps = {\n  children: ReactNode;\n  pagination: TableProps['pagination'];\n} & SpaceProps;\n\nexport function PaginationWrapper({ children, pagination, ...spaceProps }: PaginationWrapperProps) {\n  const paginationComponent = <Pagination showQuickJumper {...pagination} className=\"fixed-pagination\" />;\n  return (\n    <Space direction=\"vertical\" {...spaceProps}>\n      {paginationComponent}\n      {children}\n      {paginationComponent}\n    </Space>\n  );\n}\n","import { Button, Space } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype CopyIdsButtonProps = {\n  ids: string[];\n};\n\nexport function CopyIdsButton({ ids }: CopyIdsButtonProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <Space direction=\"vertical\" size=\"small\">\n      <Button size=\"small\" onClick={() => copyToClipboard(JSON.stringify(ids))}>\n        Copy Ids\n      </Button>\n    </Space>\n  );\n}\n","import { Button, Input } from 'antd';\nimport { LanguageFlag } from 'components/Common/LanguageFlag';\nimport { Item } from 'components/Sprites';\nimport { Item as ItemT } from 'types';\n\nimport { FireFilled, IdcardOutlined } from '@ant-design/icons';\nimport { useSearchParams } from 'react-router-dom';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\n\ntype ItemBlockProps = {\n  item: ItemT;\n};\n\ntype ItemBlocksAdditionalProps = {\n  className?: string;\n  width: number;\n  language: 'en' | 'pt';\n  to: string;\n};\n\nexport function ItemSprite({\n  item,\n  width,\n  className,\n}: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'width' | 'className'>) {\n  return (\n    <Item id={item.id} width={width} title={`${item.name.en} | ${item.name.pt}`} className={className} />\n  );\n}\n\nexport function ItemId({ item }: ItemBlockProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  return (\n    <span>\n      <Input\n        prefix={item.nsfw ? <FireFilled style={{ color: 'hotPink' }} /> : <IdcardOutlined />}\n        placeholder=\"Id\"\n        variant=\"borderless\"\n        size=\"small\"\n        value={item.id}\n        readOnly\n        style={{ width: '8ch' }}\n        onClick={() => copyToClipboard(item.id)}\n      />\n    </span>\n  );\n}\n\nexport function ItemName({ item, language }: ItemBlockProps & Pick<ItemBlocksAdditionalProps, 'language'>) {\n  return (\n    <Input\n      prefix={<LanguageFlag language={language} width=\"1em\" />}\n      placeholder={`Name in ${language.toUpperCase()}`}\n      variant=\"borderless\"\n      size=\"small\"\n      value={item.name[language]}\n      readOnly\n    />\n  );\n}\n\nexport function ItemNsfw({ item }: ItemBlockProps) {\n  return item.nsfw ? <FireFilled style={{ color: 'hotpink' }} /> : <></>;\n}\n\nexport function ItemGoTo({ item }: ItemBlockProps) {\n  const [, setSearchParams] = useSearchParams();\n  const onGoTo = () => {\n    setSearchParams({ itemId: item.id, view: 'classifier' });\n  };\n\n  return (\n    <span>\n      <Button size=\"small\" shape=\"round\" onClick={onGoTo}>\n        Go to\n      </Button>\n    </span>\n  );\n}\n","import { TableProps } from 'antd';\nimport { useMemo } from 'react';\n\nimport { useQueryParams } from './useQueryParams';\nimport { usePrevious } from 'react-use';\n\n/**\n * Options for configuring table pagination.\n */\ntype UsePaginationOptions<TData> = {\n  /**\n   * The data array to be paginated.\n   */\n  data: TData[];\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n  /**\n   * The value that triggers the reset of the pagination.\n   */\n  resetter?: string;\n};\n\nexport function useGridPagination<TData>({\n  prefix = '',\n  data,\n  defaultCurrent = 1,\n  defaultPageSize = 64,\n  pageSizeOptions = [16, 32, 64, 128],\n  resetter,\n}: UsePaginationOptions<TData>): {\n  page: TData[];\n  pagination: TableProps['pagination'];\n} {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n  const previous = usePrevious(resetter);\n\n  const page = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return data.slice(start, end);\n  }, [currentPage, pageSize, data]);\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  if (resetter !== previous) {\n    onChange(defaultCurrent);\n  }\n\n  return {\n    page,\n    pagination: {\n      current: currentPage,\n      pageSize,\n      onChange,\n      onShowSizeChange,\n      defaultCurrent,\n      defaultPageSize,\n      pageSizeOptions,\n      total: data.length,\n      hideOnSinglePage: true,\n    },\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'tdr',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('tdr', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'tdr', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (!tdrQuery.isSuccess || !firebaseQuery.isSuccess || mutation.isPending) return {};\n\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isSuccess,\n    firebaseQuery.isSuccess,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { Card, Select, Space, Typography } from 'antd';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { Item as ItemT } from 'types';\n\nimport { ItemName, ItemNsfw, ItemSprite } from '../ItemBuildingBlocks';\n\ntype ItemGroupsCardProps = {\n  item: ItemT;\n  itemGroups?: string[];\n  groupsTypeahead: { label: string; value: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n};\n\nexport function ItemGroupsCard({\n  item,\n  itemGroups,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemGroupsCardProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n\n  return (\n    <Card\n      title={\n        <>\n          <Typography.Text onClick={() => copyToClipboard(item.id)}>{item.id}</Typography.Text>\n          <ItemNsfw item={item} />\n        </>\n      }\n      style={{ maxWidth: 250 }}\n    >\n      <ItemSprite item={item} width={75} />\n      <Space size=\"small\" direction=\"vertical\" className=\"my-4\">\n        <ItemName item={item} language=\"en\" />\n        <ItemName item={item} language=\"pt\" />\n\n        <Select\n          mode=\"tags\"\n          style={{ width: '100%' }}\n          placeholder=\"Select a group\"\n          defaultValue={itemGroups}\n          options={groupsTypeahead}\n          showSearch\n          size=\"small\"\n          key={String(itemGroups)}\n          onChange={(groups) => onUpdateItemGroups(item.id, groups)}\n        />\n      </Space>\n    </Card>\n  );\n}\n","import { Col, Drawer, Flex, Row, Table, TableProps, Typography } from 'antd';\nimport { PaginationWrapper } from 'components/Common/PaginationWrapper';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useGridPagination } from 'hooks/useGridPagination';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Item as ItemT, ItemGroup } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { ItemGroupsCard } from './ItemGroupsCard';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { TransparentButton } from 'components/Common';\nimport { ItemsTypeahead } from '../ItemsTypeahead';\nimport { CopyIdsButton } from '../CopyIdsButton';\n\nexport function ItemsGroupsContent({ data, addEntryToUpdate }: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { is, queryParams } = useQueryParams();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n\n  const grousByItem = useMemo(() => {\n    return Object.values(data ?? []).reduce((acc: Record<string, string[]>, group) => {\n      if (!group.itemsIds) {\n        console.warn('Group without items', group);\n      }\n      group.itemsIds.forEach((itemId) => {\n        if (!acc[itemId]) {\n          acc[itemId] = [];\n        }\n        acc[itemId].push(group.id);\n      });\n\n      return acc;\n    }, {});\n  }, [data]);\n\n  const groupsTypeahead = useMemo(\n    () =>\n      orderBy(\n        Object.keys(data).map((id) => ({ label: id, value: id })),\n        'label'\n      ),\n    [data]\n  );\n\n  const onUpdateItemGroups = (itemId: string, groupIds: string[]) => {\n    // Compare previous groups in items with new groups\n    const previousGroups = grousByItem[itemId] ?? [];\n    const groupsToAdd = groupIds.filter((id) => !previousGroups.includes(id));\n    const groupsToRemove = previousGroups.filter((id) => !groupIds.includes(id));\n\n    // Add item to groups\n    groupsToAdd.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates([...(data[groupId]?.itemsIds ?? []), itemId]),\n      });\n    });\n\n    // Remove item from groups\n    groupsToRemove.forEach((groupId) => {\n      addEntryToUpdate(groupId, {\n        id: groupId,\n        itemsIds: removeDuplicates(data[groupId]?.itemsIds.filter((id) => id !== itemId)),\n      });\n    });\n  };\n\n  const onUpdateGroupItems = (groupId: string, itemIds: string[]) => {\n    addEntryToUpdate(groupId, {\n      id: groupId,\n      itemsIds: removeDuplicates(itemIds),\n    });\n  };\n\n  return (\n    <>\n      {(is('display', 'group') || !queryParams.has('display')) && (\n        <ItemsGroupsByGroupTable\n          data={data}\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n          onUpdateGroupItems={onUpdateGroupItems}\n        />\n      )}\n      {is('display', 'item') && (\n        <ItemsGroupsByItemTable\n          data={data}\n          items={itemsTypeaheadQuery.data}\n          grousByItem={grousByItem}\n          groupsTypeahead={groupsTypeahead}\n          onUpdateItemGroups={onUpdateItemGroups}\n          onUpdateGroupItems={onUpdateGroupItems}\n        />\n      )}\n    </>\n  );\n}\n\ntype ItemsGroupsTablesProps = {\n  items: Dictionary<ItemT>;\n  grousByItem: Record<string, string[]>;\n  groupsTypeahead: { value: string; label: string }[];\n  onUpdateItemGroups: (itemId: string, groupIds: string[]) => void;\n  onUpdateGroupItems: (groupId: string, itemIds: string[]) => void;\n} & Pick<UseResourceFirebaseDataReturnType<ItemGroup>, 'data'>;\n\nfunction ItemsGroupsByGroupTable({\n  data,\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n  onUpdateGroupItems,\n}: ItemsGroupsTablesProps) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const [selectedItemId, setSelectedItemId] = useState<null | string>(null);\n\n  const paginationProps = useTablePagination({\n    showQuickJumper: true,\n    total: Object.keys(data).length,\n  });\n\n  const columns: TableProps<ItemGroup>['columns'] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n      render: (id) => <span>{id}</span>,\n    },\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <Flex gap={6} wrap=\"wrap\" key={`items-${record.id}`}>\n          {itemsIds.map((itemId) => (\n            <Flex key={`${record.id}-${itemId}`} gap={2} vertical>\n              <TransparentButton onClick={() => setSelectedItemId(itemId)}>\n                <Item id={itemId} width={60} />\n              </TransparentButton>\n              <Flex justify=\"center\">\n                <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n              </Flex>\n            </Flex>\n          ))}\n        </Flex>\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      key: 'count',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Actions',\n      dataIndex: 'itemsIds',\n      key: 'actions',\n      render: (itemsIds: string[]) => <CopyIdsButton ids={itemsIds} />,\n    },\n  ];\n\n  const selectedItem = selectedItemId ? items[selectedItemId] : null;\n\n  return (\n    <>\n      <Table\n        columns={columns}\n        dataSource={Object.values(data)}\n        className=\"my-4\"\n        rowKey=\"id\"\n        pagination={paginationProps}\n        expandable={{\n          expandedRowRender: (record) => (\n            <AddItemFlow group={record} onUpdateGroupItems={onUpdateGroupItems} />\n          ),\n          rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n        }}\n      />\n      <Drawer title=\"Edit Item Group\" onClose={() => setSelectedItemId(null)} open={!!selectedItem}>\n        {selectedItem && (\n          <ItemGroupsCard\n            item={selectedItem}\n            itemGroups={grousByItem[selectedItem.id]}\n            groupsTypeahead={groupsTypeahead}\n            onUpdateItemGroups={onUpdateItemGroups}\n          />\n        )}\n      </Drawer>\n    </>\n  );\n}\n\ntype AddItemFlowProps = {\n  group: ItemGroup;\n  onUpdateGroupItems: (groupId: string, itemIds: string[]) => void;\n};\n\nexport function AddItemFlow({ group, onUpdateGroupItems }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    onUpdateGroupItems(group.id, [...group.itemsIds, itemId]);\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\nfunction ItemsGroupsByItemTable({\n  items,\n  grousByItem,\n  groupsTypeahead,\n  onUpdateItemGroups,\n}: ItemsGroupsTablesProps) {\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const data = useMemo(\n    () => (showOnlyEmpty ? Object.values(items).filter((v) => !grousByItem[v.id]) : Object.values(items)),\n    [items, grousByItem, showOnlyEmpty]\n  );\n\n  const { page, pagination } = useGridPagination({ data });\n\n  return (\n    <>\n      <Typography.Title level={2}>Groups by Items ({data.length})</Typography.Title>\n      <PaginationWrapper pagination={pagination}>\n        <Row gutter={[16, 16]} className=\"my-4\">\n          {page.map((item) => (\n            <Col key={item.id} xs={24} sm={24} md={12} lg={6} xl={4}>\n              <ItemGroupsCard\n                item={item}\n                itemGroups={grousByItem[item.id]}\n                groupsTypeahead={groupsTypeahead}\n                onUpdateItemGroups={onUpdateItemGroups}\n              />\n            </Col>\n          ))}\n        </Row>\n      </PaginationWrapper>\n    </>\n  );\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSegments, FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { ItemGroup } from 'types';\nimport { removeDuplicates, sortItemsIds, sortJsonKeys } from 'utils';\n\nimport { ClusterOutlined, TableOutlined } from '@ant-design/icons';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { cloneDeep, isEmpty, omitBy } from 'lodash';\n\nexport function ItemsGroupsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<ItemGroup>) {\n  const { queryParams, addParam, addParams, is } = useQueryParams();\n\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(prepareObjectToSave(entriesToUpdate))}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"items-groups.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n      <Divider />\n\n      <FilterSegments\n        label=\"Display\"\n        value={queryParams.get('display') ?? 'group'}\n        onChange={(mode) => addParams({ display: mode, page: 1 }, { page: 1 })}\n        options={[\n          {\n            title: 'By Groups',\n            icon: <ClusterOutlined />,\n            value: 'group',\n          },\n          {\n            title: 'By Items',\n            icon: <TableOutlined />,\n            value: 'item',\n          },\n        ]}\n      />\n\n      {is('display', 'item') && (\n        <FilterSwitch\n          label=\"No Groups Only\"\n          value={is('emptyOnly')}\n          onChange={(mode) => addParam('emptyOnly', mode, false)}\n        />\n      )}\n    </SiderContent>\n  );\n}\n\nfunction prepareObjectToSave(groups: Dictionary<ItemGroup>) {\n  return omitBy(cloneDeep(groups), (group) => isEmpty(group.itemsIds));\n}\n\nfunction prepareFileForDownload(groups: Dictionary<ItemGroup>) {\n  Object.keys(groups).forEach((key) => {\n    groups[key].itemsIds = sortItemsIds(removeDuplicates(groups[key].itemsIds));\n  });\n  return sortJsonKeys(prepareObjectToSave(groups));\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsGroupsContent } from 'components/Items/Groups/ItemsGroupsContent';\nimport { ItemsGroupsFilters } from 'components/Items/Groups/ItemsGroupsFilters';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { isEmpty } from 'lodash';\nimport { Item, ItemGroup } from 'types';\n\nexport function ItemsGroups() {\n  const groupsQuery = useResourceFirebaseData<ItemGroup>({\n    tdrResourceName: 'items-groups',\n    firebaseDataCollectionName: 'itemsGroups',\n    serialize: true,\n  });\n  const itemsTypeaheadQuery = useTDResource<Item>('items');\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Groups Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsGroupsFilters {...groupsQuery} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={groupsQuery.isLoading || itemsTypeaheadQuery.isLoading}\n            error={groupsQuery.error || itemsTypeaheadQuery.error}\n            hasResponseData={!isEmpty(groupsQuery.data) && !isEmpty(itemsTypeaheadQuery.data)}\n          >\n            <ItemsGroupsContent {...groupsQuery} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsGroups;\n"],"names":["PaginationWrapper","children","pagination","spaceProps","paginationComponent","showQuickJumper","className","direction","CopyIdsButton","ids","copyToClipboard","useCopyToClipboardFunction","size","onClick","JSON","stringify","ItemSprite","item","width","id","title","name","en","pt","ItemId","prefix","nsfw","style","color","placeholder","variant","value","readOnly","ItemName","language","toUpperCase","ItemNsfw","ItemGoTo","setSearchParams","useSearchParams","shape","itemId","view","useGridPagination","data","defaultCurrent","defaultPageSize","pageSizeOptions","resetter","queryParams","addParam","useQueryParams","currentPage","Number","get","String","pageSize","previous","usePrevious","page","useMemo","start","end","slice","onChange","toString","current","onShowSizeChange","_","total","length","hideOnSinglePage","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","App","queryClient","useQueryClient","tdrQuery","useTDResource","firebaseQuery","useGetFirebaseDoc","select","deserializeFirebaseData","undefined","modifiedEntries","setModifiedEntries","useState","mutation","useUpdateFirebaseDoc","onSuccess","success","message","refetchQueries","queryKey","onError","error","description","isSuccess","isPending","console","log","cloneDeep","isDirty","isEmpty","firebaseData","isLoading","isSaving","save","mutate","serializeFirebaseData","addEntryToUpdate","prev","entriesToUpdate","useTablePagination","ItemGroupsCard","itemGroups","groupsTypeahead","onUpdateItemGroups","maxWidth","mode","defaultValue","options","showSearch","groups","ItemsGroupsContent","is","itemsTypeaheadQuery","grousByItem","Object","values","reduce","acc","group","itemsIds","warn","forEach","push","orderBy","keys","map","label","groupIds","previousGroups","groupsToAdd","filter","includes","groupsToRemove","groupId","removeDuplicates","onUpdateGroupItems","itemIds","has","ItemsGroupsByGroupTable","items","ItemsGroupsByItemTable","selectedItemId","setSelectedItemId","paginationProps","columns","dataIndex","key","render","record","gap","wrap","vertical","justify","Table","Boolean","selectedItem","dataSource","rowKey","expandable","expandedRowRender","AddItemFlow","rowExpandable","onClose","open","ItemsTypeahead","onFinish","showOnlyEmpty","v","level","gutter","xs","sm","md","lg","xl","ItemsGroupsFilters","addParams","SaveButton","onSave","dirt","prepareObjectToSave","DownloadButton","prepareFileForDownload","sortItemsIds","sortJsonKeys","fileName","disabled","block","display","icon","ClusterOutlined","TableOutlined","omitBy","ItemsGroups","groupsQuery","subtitle","hasSider","PageSider","DataLoadingWrapper","hasResponseData"],"sourceRoot":""}