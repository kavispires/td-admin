{"version":3,"file":"static/js/ItemsQuartets.65df248e.chunk.js","mappings":"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","sources":["components/Common/SaveButton.tsx","components/Items/ItemsTypeahead.tsx","hooks/useCopyToClipboardFunction.ts","hooks/useGetFirebaseDoc.ts","hooks/useQueryParams.ts","hooks/useResourceFirebaseData.ts","hooks/useTDResource.ts","hooks/useTablePagination.tsx","hooks/useUpdateFirebaseDoc.tsx","components/Items/ItemsQuartetsFilters.tsx","components/Items/ItemsQuartetsTable.tsx","pages/Items/ItemsQuartets.tsx"],"sourcesContent":["import { SaveOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport moment from 'moment';\nimport { useEffect } from 'react';\nimport { useTimeoutFn } from 'react-use';\n\ntype SaveButtonProps = {\n  isDirty: boolean;\n  dirt?: string | number;\n  onSave: (args?: unknown) => void;\n  isSaving: boolean;\n  interval?: number;\n} & Omit<ButtonProps, 'icon' | 'type' | 'size' | 'danger'>;\n\nexport function SaveButton({\n  isDirty,\n  onSave,\n  isSaving,\n  dirt,\n  interval = 10 * 60 * 1000,\n  ...buttonProps\n}: SaveButtonProps) {\n  // It saves after 10 minutes of the first time of being dirty, unless 'dirt' is provided and changed\n  const [, cancel, reset] = useTimeoutFn(() => {\n    if (isDirty) {\n      onSave();\n    }\n  }, interval); // 10 minutes in milliseconds\n\n  useEffect(() => {\n    if (isDirty) {\n      console.log('Save Reset', moment(Date.now()).format('MM/DD/YYYY HH:mm:ss'));\n      reset(); // Start or reset the timeout if `isDirty` is true and dirt has changed\n    } else {\n      cancel(); // Cancel the timeout if `isDirty` becomes false\n    }\n  }, [isDirty, reset, cancel, dirt]);\n\n  return (\n    <Button\n      type=\"primary\"\n      size=\"large\"\n      icon={<SaveOutlined />}\n      onClick={onSave}\n      disabled={!isDirty}\n      loading={isSaving}\n      danger\n      block\n      {...buttonProps}\n    >\n      Save\n    </Button>\n  );\n}\n","import { AutoComplete, AutoCompleteProps, Input } from 'antd';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Item } from 'types';\n\ntype ItemsTypeaheadProps = {\n  items?: Dictionary<Item>;\n  isPending?: boolean;\n  onFinish: (id: string) => void;\n} & Omit<AutoCompleteProps, 'options'>;\n\nexport function ItemsTypeahead({\n  items,\n  isPending,\n  style,\n  size,\n  placeholder,\n  allowClear,\n  onFinish,\n  ...rest\n}: ItemsTypeaheadProps) {\n  const tdrItemsQuery = useTDResource<Item>('items', !Boolean(items) && !isPending);\n\n  const { namesDict, options } = useMemo(() => {\n    console.log('Recomputing item names typeahead...');\n\n    const namesDict = Object.values(items ?? tdrItemsQuery.data ?? {}).reduce(\n      (acc: Dictionary<string>, entry) => {\n        const nameEn = `${entry.name.en} (${entry.id})`;\n        const namePt = `${entry.name.pt} (${entry.id})`;\n        acc[nameEn] = entry.id;\n        acc[namePt] = entry.id;\n        return acc;\n      },\n      {}\n    );\n\n    const options = orderBy(Object.keys(namesDict), [(name) => name.toLowerCase()]).map((name) => ({\n      value: name,\n    }));\n\n    return { namesDict, options };\n  }, [items, isPending]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [filteredOptions, setFilteredOptions] = useState<{ value: string }[]>([]);\n  const [typedText, setTypedText] = useState('');\n\n  useDebounce(\n    () => {\n      if (typedText) {\n        handleSearch(typedText);\n      }\n    },\n    500,\n    [typedText]\n  );\n\n  const handleSearch = (searchText: string) => {\n    if (!searchText) {\n      setFilteredOptions([]);\n      return;\n    }\n\n    const SEARCH = searchText.trim().toUpperCase();\n\n    const filtered = options.filter((option) =>\n      String(option?.value ?? '')\n        .toUpperCase()\n        .includes(SEARCH)\n    );\n\n    const sorted = orderBy(filtered, [\n      (option) => {\n        const value = String(option?.value ?? '').toUpperCase();\n        // console.log(value);\n        // Exact match\n        if (value === SEARCH) return 0;\n\n        // Full ID match within parentheses\n        const idMatch = value.match(/\\((.*?)\\)/);\n        if (idMatch && idMatch[1] === SEARCH) return 1;\n\n        // Partial match at the beginning\n        const index = value.indexOf(SEARCH);\n        if (index === 0) return 2;\n\n        // Partial match elsewhere\n        if (index > 0) return 3;\n\n        // No match\n        return 4;\n      },\n    ]);\n\n    setFilteredOptions(sorted);\n  };\n\n  const handlePressEnter = () => {\n    if (filteredOptions.length > 0) {\n      const key = filteredOptions[0].value;\n      if (namesDict[key] !== undefined) {\n        onFinish(namesDict[key]);\n      }\n    }\n  };\n\n  const onSelect = (key: any) => {\n    if (namesDict[key] !== undefined) {\n      onFinish(namesDict[key]);\n    }\n  };\n\n  return (\n    <AutoComplete\n      options={filteredOptions}\n      style={{ width: 250, ...style }}\n      allowClear={allowClear ?? true}\n      placeholder={placeholder ?? 'Search by name or id...'}\n      filterOption={(inputValue, option) =>\n        String(option?.value ?? '')\n          .toUpperCase()\n          .indexOf(inputValue?.toUpperCase()) !== -1\n      }\n      onSearch={setTypedText}\n      notFoundContent={typedText.length > 0 ? 'No items found' : 'Type to search...'}\n      onSelect={onSelect}\n      {...rest}\n    >\n      <Input onPressEnter={handlePressEnter} />\n    </AutoComplete>\n  );\n}\n","import { App } from 'antd';\nimport { truncate } from 'lodash';\nimport { useEffect } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nexport function useCopyToClipboardFunction() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    if (state.value) {\n      if (state.value.length > 20) {\n        message.info(`Copied to clipboard: ${truncate(state.value, { length: 30, omission: '...' })}`);\n      } else {\n        message.success('Copied');\n      }\n    }\n  }, [state, message]);\n\n  return copyToClipboard;\n}\n","import { doc, getDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { getCurrentDateTime } from 'utils';\n\nexport function getDocQueryFunction<TQueryFnData>(path: string, docId: string) {\n  return async () => {\n    console.log(`%cQuerying ${path}/${docId} from firebase: ${getCurrentDateTime()}`, 'color: #f0f');\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as TQueryFnData;\n  };\n}\n\nexport function useGetFirebaseDoc<TQueryFnData, TData = TQueryFnData>(\n  path: string,\n  docId: string,\n  options?: Omit<UseQueryOptions<any, Error, TData, QueryKey>, 'queryKey'>\n) {\n  return useQuery<TQueryFnData, Error, TData, QueryKey>({\n    queryKey: ['firebase', path, docId],\n    queryFn: getDocQueryFunction<TQueryFnData>(path, docId),\n    ...options,\n  });\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addParam = (key: string, value: unknown, defaultValue?: unknown) => {\n    if (value === undefined || value === '' || value === defaultValue) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const removeParam = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  const is = (key: string, value = 'true') => searchParams.get(key) === String(value);\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        addParam(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return {\n    addParam,\n    removeParam,\n    queryParams: searchParams,\n    is,\n  };\n}\n","import { App } from 'antd';\nimport { cloneDeep, isEmpty } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { useQueryClient } from '@tanstack/react-query';\n\nimport { useGetFirebaseDoc } from './useGetFirebaseDoc';\nimport { useTDResource } from './useTDResource';\nimport { useUpdateFirebaseDoc } from './useUpdateFirebaseDoc';\nimport { deserializeFirebaseData, serializeFirebaseData } from 'utils';\n\nexport type UseResourceFirebaseDataProps = {\n  tdrResourceName: string;\n  firebaseDataCollectionName: string;\n  serialize?: boolean;\n};\n\nexport type UseResourceFirebaseDataReturnType<TDRData> = {\n  data: Dictionary<TDRData>;\n  isLoading: boolean;\n  error: ResponseError;\n  firebaseData: Dictionary<TDRData> | undefined;\n  isSaving: boolean;\n  save: () => void;\n  addEntryToUpdate: (id: string, item: TDRData) => void;\n  entriesToUpdate: Dictionary<TDRData>;\n  isDirty: boolean;\n};\n\n/**\n * Custom hook that fetches and manages data from both TDR (The Daily Refactor) and Firebase.\n * It merges the data from both sources and provides functions to update and save the data.\n *\n * @template TDRData - The type of data fetched from TDR.\n * @template TFirebaseData - The type of data fetched from Firebase.\n *\n * The hook return object containing the merged data, loading state, error, and functions to update and save the data.\n */\nexport function useResourceFirebaseData<TDRData = PlainObject, TFirebaseData = TDRData>({\n  tdrResourceName,\n  firebaseDataCollectionName,\n  serialize,\n}: UseResourceFirebaseDataProps): UseResourceFirebaseDataReturnType<TDRData> {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const tdrQuery = useTDResource<TDRData>(tdrResourceName);\n  const firebaseQuery = useGetFirebaseDoc<Dictionary<TFirebaseData>, Dictionary<TDRData>>(\n    'data',\n    firebaseDataCollectionName,\n    {\n      select: serialize ? deserializeFirebaseData : undefined,\n    }\n  );\n\n  // Keeps track of items that have been modified\n  const [modifiedEntries, setModifiedEntries] = useState<Dictionary<TDRData>>({});\n\n  const mutation = useUpdateFirebaseDoc('data', firebaseDataCollectionName, {\n    onSuccess: () => {\n      notification.success({\n        message: `${firebaseDataCollectionName} updated`,\n      });\n      queryClient.refetchQueries({\n        queryKey: ['firebase', 'data', firebaseDataCollectionName],\n      });\n      setModifiedEntries({});\n    },\n    onError: (error) => {\n      notification.error({\n        message: `${firebaseDataCollectionName} update failed`,\n        description: error.message,\n      });\n    },\n  });\n\n  const data = useMemo(() => {\n    if (tdrQuery.isLoading || firebaseQuery.isLoading || mutation.isPending) return {};\n    console.log(`%cMerging ${tdrResourceName}+${firebaseDataCollectionName} data...`, 'color: #f0f');\n    return cloneDeep({\n      ...(tdrQuery.data ?? {}),\n      ...(firebaseQuery.data ?? {}),\n      ...modifiedEntries,\n    });\n  }, [\n    tdrResourceName,\n    firebaseDataCollectionName,\n    tdrQuery.data,\n    firebaseQuery.data,\n    tdrQuery.isLoading,\n    firebaseQuery.isLoading,\n    mutation.isPending,\n    modifiedEntries,\n  ]);\n\n  const isDirty = !isEmpty(modifiedEntries);\n  const addEntryToUpdate = (id: string, item: TDRData) => {\n    setModifiedEntries((prev) => ({ ...prev, [id]: item }));\n  };\n\n  const firebaseData = firebaseQuery.data;\n\n  const save = () => {\n    mutation.mutate(serialize ? serializeFirebaseData(modifiedEntries) : modifiedEntries);\n  };\n\n  return {\n    data,\n    isLoading: tdrQuery.isLoading || firebaseQuery.isLoading,\n    error: tdrQuery.error || firebaseQuery.error,\n    firebaseData,\n    isSaving: mutation.isPending,\n    save,\n    addEntryToUpdate,\n    entriesToUpdate: modifiedEntries,\n    isDirty,\n  };\n}\n","import { isEmpty } from 'lodash';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useBaseUrl } from './useBaseUrl';\n\nexport function useTDResource<TData>(resourceName: string, enabled = true) {\n  const { getUrl } = useBaseUrl('tdr');\n\n  const query = useQuery<Dictionary<TData>, ResponseError>({\n    queryKey: [resourceName],\n    queryFn: async () => {\n      const res = await fetch(getUrl(`${resourceName}.json`));\n      return (await res.json()) as Dictionary<TData>;\n    },\n    enabled,\n  });\n  const hasResponseData = !isEmpty(query.data);\n\n  return {\n    ...query,\n    data: query.data ?? {},\n    hasResponseData,\n  };\n}\n","import { TableProps } from 'antd';\nimport { useQueryParams } from './useQueryParams';\n\n/**\n * Options for configuring table pagination.\n */\ntype UseTablePaginationOptions = {\n  /**\n   * Only necessary if multiple tables are on the same page.\n   */\n  prefix?: string;\n\n  /**\n   * The default current page number.\n   */\n  defaultCurrent?: number;\n\n  /**\n   * The default number of items per page.\n   */\n  defaultPageSize?: number;\n\n  /**\n   * An array of available page size options.\n   */\n  pageSizeOptions?: number[];\n\n  /**\n   * The total number of items in the table.\n   */\n  total: number;\n\n  /**\n   * Whether to show the quick jumper input.\n   */\n  showQuickJumper?: boolean;\n};\n\nexport function useTablePagination({\n  prefix = '',\n  defaultCurrent = 1,\n  defaultPageSize = 10,\n  pageSizeOptions = [10, 20, 50, 100],\n  total,\n  showQuickJumper,\n}: UseTablePaginationOptions): TableProps['pagination'] {\n  const { queryParams, addParam } = useQueryParams();\n  const currentPage = Number(queryParams.get(`${prefix}page`) ?? String(defaultCurrent));\n  const pageSize = Number(queryParams.get(`${prefix}pageSize`) ?? String(defaultPageSize));\n\n  const onChange = (page: number) => {\n    addParam(`${prefix}page`, page.toString(), String(defaultCurrent));\n  };\n  const onShowSizeChange = (_: number, size: number) => {\n    addParam(`${prefix}pageSize`, size.toString(), String(defaultPageSize));\n  };\n\n  return {\n    current: currentPage,\n    pageSize,\n    onChange,\n    onShowSizeChange,\n    defaultCurrent,\n    defaultPageSize,\n    pageSizeOptions,\n    total,\n    hideOnSinglePage: true,\n    showQuickJumper,\n  };\n}\n","import { doc, DocumentData, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nimport { QueryKey, useMutation, UseMutationOptions } from '@tanstack/react-query';\n\nexport function updateQueryFunction<TData = PlainObject>(path: string, docId: string, data: TData) {\n  console.log(`%cUpdating ${path}/${docId} from firebase`, 'color: #f00');\n  const docRef = doc(firestore, `${path}/${docId}`);\n  return updateDoc(docRef, data as DocumentData);\n}\n\nexport function useUpdateFirebaseDoc<TData>(\n  path: string,\n  docId: string,\n  options: UseMutationOptions<any, Error, TData, QueryKey> = {}\n) {\n  return useMutation<any, Error, TData, QueryKey>({\n    mutationFn: async (data: TData) => updateQueryFunction<TData>(path, docId, data),\n    ...options,\n  });\n}\n","import { Divider, Flex } from 'antd';\nimport { FilterSwitch } from 'components/Common';\nimport { DownloadButton } from 'components/Common/DownloadButton';\nimport { SaveButton } from 'components/Common/SaveButton';\nimport { SiderContent } from 'components/Layout';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { DailyQuartetSet } from 'types';\nimport { sortJsonKeys } from 'utils';\n\nexport function ItemsQuartetsFilters({\n  data,\n  save,\n  isDirty,\n  isSaving,\n  entriesToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const { is, addParam } = useQueryParams();\n  return (\n    <SiderContent>\n      <Flex vertical gap={12}>\n        <SaveButton\n          isDirty={isDirty}\n          onSave={save}\n          isSaving={isSaving}\n          dirt={JSON.stringify(entriesToUpdate)}\n        />\n\n        <DownloadButton\n          data={() => prepareFileForDownload(data)}\n          fileName=\"daily-quartet-sets.json\"\n          disabled={isDirty}\n          block\n        />\n      </Flex>\n\n      <Divider />\n\n      <FilterSwitch\n        label=\"Pending Only\"\n        value={is('emptyOnly')}\n        onChange={(mode) => addParam('emptyOnly', mode, false)}\n      />\n    </SiderContent>\n  );\n}\n\nfunction prepareFileForDownload(quartets: Dictionary<DailyQuartetSet>) {\n  return sortJsonKeys(quartets);\n}\n","import { Button, Flex, Popconfirm, Rate, Space, Table, Typography } from 'antd';\nimport { Item } from 'components/Sprites';\nimport { useCopyToClipboardFunction } from 'hooks/useCopyToClipboardFunction';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { UseResourceFirebaseDataReturnType } from 'hooks/useResourceFirebaseData';\nimport { useTablePagination } from 'hooks/useTablePagination';\nimport { useTDResource } from 'hooks/useTDResource';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { DailyQuartetSet, Item as ItemT } from 'types';\nimport { removeDuplicates } from 'utils';\n\nimport { CheckCircleFilled, DeleteFilled } from '@ant-design/icons';\n\nimport { ItemsTypeahead } from './ItemsTypeahead';\n\nimport type { TableProps } from 'antd';\n\nfunction orderSets(givenSets: DailyQuartetSet[]) {\n  return orderBy(givenSets, [\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length !== 4,\n    // (s) => removeDuplicates(s.itemsIds).filter(Boolean).length === 0,\n    (s) => s.title,\n  ]).map((s) => ({\n    ...s,\n    itemsIds: orderBy(s.itemsIds, (id) => Number(id)),\n  }));\n}\n\nexport function ItemsQuartetsTable({\n  data,\n  addEntryToUpdate,\n}: UseResourceFirebaseDataReturnType<DailyQuartetSet>) {\n  const copyToClipboard = useCopyToClipboardFunction();\n  const itemsTypeaheadQuery = useTDResource<ItemT>('items');\n  const { is } = useQueryParams();\n  const showOnlyEmpty = is('emptyOnly');\n\n  const rows = useMemo(() => {\n    const sets = data ? orderSets(Object.values(data)) : [];\n    return showOnlyEmpty ? sets.filter((s) => s.itemsIds.length === 0) : sets;\n  }, [data, showOnlyEmpty]);\n\n  const completeQuartetsCount = rows.filter((s) => s.itemsIds.length === 4).length;\n\n  const paginationProps = useTablePagination({ total: rows.length, showQuickJumper: true });\n\n  const columns: TableProps<DailyQuartetSet>['columns'] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      render: (title, record) => (\n        <QuartetEditableCell\n          property=\"title\"\n          value={title}\n          quartet={record}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    Table.EXPAND_COLUMN,\n    {\n      title: 'Items',\n      dataIndex: 'itemsIds',\n      key: 'itemsIds',\n      render: (itemsIds: string[], record) => (\n        <QuartetItemsCell\n          quartet={record}\n          itemsIds={itemsIds}\n          copyToClipboard={copyToClipboard}\n          addEntryToUpdate={addEntryToUpdate}\n        />\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => removeDuplicates(itemsIds).filter(Boolean).length,\n    },\n    {\n      title: 'Level',\n      dataIndex: 'level',\n      render: (level, record) => (\n        <Rate\n          count={3}\n          value={level}\n          onChange={(v) => addEntryToUpdate(record.id, { ...record, level: v })}\n        />\n      ),\n    },\n    {\n      title: 'Perfect Quartet',\n      dataIndex: 'itemsIds',\n      render: (itemsIds: string[]) => {\n        const uniqueItems = removeDuplicates(itemsIds).filter(Boolean);\n        return uniqueItems.length === 4 && <CheckCircleFilled style={{ color: 'dodgerblue' }} />;\n      },\n    },\n  ];\n\n  return (\n    <Space direction=\"vertical\">\n      <Typography.Title level={5}>\n        Total Quartets: {rows.length} | Complete Quartets: {completeQuartetsCount}\n      </Typography.Title>\n      <Table\n        columns={columns}\n        rowKey=\"id\"\n        dataSource={rows}\n        expandable={{\n          expandedRowRender: (record) => <AddItemFlow quartet={record} addEntryToUpdate={addEntryToUpdate} />,\n          rowExpandable: () => itemsTypeaheadQuery.isSuccess,\n        }}\n        pagination={paginationProps}\n      />\n    </Space>\n  );\n}\n\ntype AddItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n};\n\nexport function AddItemFlow({ quartet, addEntryToUpdate }: AddItemFlowProps) {\n  const onUpdate = (itemId: string) => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: [...quartet.itemsIds, itemId],\n    });\n  };\n\n  return (\n    <div>\n      <ItemsTypeahead onFinish={onUpdate} />\n    </div>\n  );\n}\n\ntype RemoveItemFlowProps = {\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: (id: string, item: DailyQuartetSet) => void;\n  itemId: string;\n};\n\nexport function RemoveItemFlow({ quartet, addEntryToUpdate, itemId }: RemoveItemFlowProps) {\n  const onRemove = () => {\n    addEntryToUpdate(quartet.id, {\n      ...quartet,\n      itemsIds: quartet.itemsIds.filter((id) => id !== itemId),\n    });\n  };\n\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to remove this item?\"\n      onConfirm={onRemove}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button icon={<DeleteFilled />} size=\"small\" type=\"text\" />\n    </Popconfirm>\n  );\n}\n\ntype QuartetItemsCellProps = {\n  quartet: DailyQuartetSet;\n  itemsIds: string[];\n  copyToClipboard: ReturnType<typeof useCopyToClipboardFunction>;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n};\n\nexport function QuartetItemsCell({\n  quartet,\n  itemsIds,\n  copyToClipboard,\n  addEntryToUpdate,\n}: QuartetItemsCellProps) {\n  return (\n    <Flex gap={6} wrap=\"wrap\" key={`items-${quartet.title}`}>\n      {itemsIds.map((itemId) => (\n        <Flex key={`${quartet.title}-${itemId}`} gap={2} vertical>\n          {!!itemId ? <Item id={String(itemId)} width={60} /> : <>{console.log(itemId)}</>}\n          <Flex justify=\"center\">\n            <Typography.Text onClick={() => copyToClipboard(itemId)}>{itemId}</Typography.Text>\n            <RemoveItemFlow quartet={quartet} addEntryToUpdate={addEntryToUpdate} itemId={itemId} />\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n\ntype QuartetEditableCellProps = {\n  value: string | number;\n  quartet: DailyQuartetSet;\n  addEntryToUpdate: AddItemFlowProps['addEntryToUpdate'];\n  property: keyof DailyQuartetSet;\n};\n\nexport function QuartetEditableCell({\n  value,\n  quartet,\n  addEntryToUpdate,\n  property,\n}: QuartetEditableCellProps) {\n  const handleChange = (newValue: string) => {\n    if (typeof value === 'number') {\n      return newValue !== String(value)\n        ? addEntryToUpdate(quartet.id, { ...quartet, [property]: Number(newValue) })\n        : null;\n    }\n\n    return newValue !== value\n      ? addEntryToUpdate(quartet.id, { ...quartet, [property]: newValue.trim() })\n      : null;\n  };\n\n  return (\n    <Space>\n      <Typography.Text\n        editable={{\n          onChange: handleChange,\n        }}\n      >\n        {String(value)}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import { Layout } from 'antd';\nimport { DataLoadingWrapper } from 'components/DataLoadingWrapper';\nimport { ItemsQuartetsFilters } from 'components/Items/ItemsQuartetsFilters';\nimport { ItemsQuartetsTable } from 'components/Items/ItemsQuartetsTable';\nimport { PageLayout } from 'components/Layout';\nimport { PageSider } from 'components/Layout/PageSider';\nimport { useResourceFirebaseData } from 'hooks/useResourceFirebaseData';\nimport { isEmpty } from 'lodash';\nimport { DailyQuartetSet } from 'types';\n\nexport function ItemsQuartets() {\n  const quartetsData = useResourceFirebaseData<DailyQuartetSet>({\n    tdrResourceName: 'daily-quartet-sets',\n    firebaseDataCollectionName: 'quartetSets',\n  });\n\n  return (\n    <PageLayout title=\"Items\" subtitle=\"Quartet Sets\">\n      <Layout hasSider>\n        <PageSider>\n          <ItemsQuartetsFilters {...quartetsData} />\n        </PageSider>\n\n        <Layout.Content className=\"content\">\n          <DataLoadingWrapper\n            isLoading={quartetsData.isLoading}\n            error={quartetsData.error}\n            hasResponseData={!isEmpty(quartetsData.data)}\n          >\n            <ItemsQuartetsTable {...quartetsData} />\n          </DataLoadingWrapper>\n        </Layout.Content>\n      </Layout>\n    </PageLayout>\n  );\n}\n\nexport default ItemsQuartets;\n"],"names":["SaveButton","isDirty","onSave","isSaving","dirt","interval","buttonProps","cancel","reset","useTimeoutFn","useEffect","console","log","moment","Date","now","format","type","size","icon","onClick","disabled","loading","danger","block","ItemsTypeahead","items","isPending","style","placeholder","allowClear","onFinish","rest","tdrItemsQuery","useTDResource","Boolean","namesDict","options","useMemo","Object","values","data","reduce","acc","entry","nameEn","name","en","id","namePt","pt","orderBy","keys","toLowerCase","map","value","filteredOptions","setFilteredOptions","useState","typedText","setTypedText","useDebounce","handleSearch","searchText","SEARCH","trim","toUpperCase","filtered","filter","option","String","includes","sorted","idMatch","match","index","indexOf","width","filterOption","inputValue","onSearch","notFoundContent","length","onSelect","key","undefined","onPressEnter","useCopyToClipboardFunction","state","copyToClipboard","useCopyToClipboard","message","App","info","truncate","omission","success","getDocQueryFunction","path","docId","async","getCurrentDateTime","docRef","doc","firestore","getDoc","useGetFirebaseDoc","useQuery","queryKey","queryFn","useQueryParams","defaultParams","searchParams","setSearchParams","useSearchParams","addParam","defaultValue","delete","set","removeParam","is","get","entries","forEach","has","queryParams","useResourceFirebaseData","tdrResourceName","firebaseDataCollectionName","serialize","notification","queryClient","useQueryClient","tdrQuery","firebaseQuery","select","deserializeFirebaseData","modifiedEntries","setModifiedEntries","mutation","useUpdateFirebaseDoc","onSuccess","refetchQueries","onError","error","description","isLoading","cloneDeep","isEmpty","firebaseData","save","mutate","serializeFirebaseData","addEntryToUpdate","item","prev","entriesToUpdate","resourceName","enabled","getUrl","useBaseUrl","query","res","fetch","json","hasResponseData","useTablePagination","prefix","defaultCurrent","defaultPageSize","pageSizeOptions","total","showQuickJumper","current","Number","pageSize","onChange","page","toString","onShowSizeChange","_","hideOnSinglePage","updateQueryFunction","updateDoc","useMutation","mutationFn","ItemsQuartetsFilters","vertical","gap","JSON","stringify","DownloadButton","prepareFileForDownload","quartets","sortJsonKeys","fileName","label","mode","ItemsQuartetsTable","itemsTypeaheadQuery","showOnlyEmpty","rows","sets","givenSets","s","title","itemsIds","completeQuartetsCount","paginationProps","columns","dataIndex","render","record","QuartetEditableCell","property","quartet","Table","QuartetItemsCell","removeDuplicates","level","count","v","CheckCircleFilled","color","direction","rowKey","dataSource","expandable","expandedRowRender","AddItemFlow","rowExpandable","isSuccess","pagination","itemId","RemoveItemFlow","onConfirm","okText","cancelText","DeleteFilled","wrap","justify","editable","newValue","ItemsQuartets","quartetsData","subtitle","hasSider","PageSider","className","DataLoadingWrapper"],"sourceRoot":""}