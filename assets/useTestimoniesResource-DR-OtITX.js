import{u as A,D as H,a as U,A as q}from"./useParsedHistory-DNFk7WvG.js";import{l as g}from"./useBaseUrl-BXHtA4Pi.js";import{u as k}from"./useTDResource-Bxk_GrJX.js";import{r as R}from"./index-dxqRZG9X.js";import{u as Q}from"./useResourceFirestoreData-pL1PX9Zq.js";const B=(o,e,t)=>{const{reliabilityThreshold:n=4,projectionThreshold:s=55}={},r=`us-gb-${o.split("-")[1]}`,i=g.isEmpty(e[o])?[]:e[o];let c=0,m=0;i.forEach(b=>{b===3&&(c+=3),b===-3&&(m+=3),b===4&&(c+=4),b===-4&&(m+=4)});const l=i.filter(b=>![-4,-3,3,4].includes(b)),f=l.length+c+m,p=Math.max(f,5),d=i.filter(b=>b===1).length+c,h=Math.round(d/p*100),y=i.filter(b=>b===0).length+m,x=Math.round(y/p*100),S=Math.round((p-d-y)/p*100),v=l.length+c+m>=5,w=f>3,O=f>n,j=O&&Math.abs(h-x)>40?h>x?"üëç":"üëé":null,F=!w||Math.abs(h-x)<60?null:h>=s?"üëç":x>=s?"üëé":null;return{suspectCardId:o,imageId:r,enoughData:w,reliable:O,total:p,yesCount:d,yesPercentage:h,noCount:y,noPercentage:x,blankPercentage:S,complete:v,values:i,resolution:j,projection:F}};function le(o){const e=o.filter(s=>![0,1].includes(s)),t=o.filter(s=>[0,1].includes(s)),n={0:0,1:0};return t.forEach(s=>{if(n[s]===void 0)throw Error(`what is this value? ${s}`);n[s]+=1}),Object.entries(n).forEach(([s,a])=>{if(a>0){const r=Math.floor(a/4),i=a%4;for(let c=0;c<r;c++)e.push(s==="0"?-4:4);if(i>0){const c=Array.from({length:i},()=>s==="0"?0:1);e.push(...c)}}}),e.sort((s,a)=>s-a)}const z={male:"√© homem",female:"√© mulher",caucasian:"√© branco(a)",black:"√© negro(a)",asian:"√© asi√°tico(a)",latino:"√© latino(a)",thin:"√© magrelo(a)",fat:"√© gordo(a)",large:"√© gordo(a)",tall:"√© alto(a)",short:"√© baixinho(a)",young:"√© jovem",adult:"√© adulto(a)",senior:"√© idoso(a)",average:"tem corpo normal",medium:"√© de altura m√©dia",mixed:"√© mesti√ßo(a)",hat:"est√° usando um chap√©u",tie:"est√° usando uma gravata",glasses:"est√° usando √≥culos",brownHair:"tem cabelo castanho",shortHair:"tem cabelo curto",beard:"tem barba",scarf:"est√° usando um cachecol",blondeHair:"tem cabelo loiro",longHair:"tem cabelo longo",greyHair:"tem cabelo grisalho",bald:"√© careca",mustache:"tem bigode",goatee:"tem cavanhaque",muscular:"√© sarado(a)",blackHair:"tem cabelo preto",hoodie:"est√° usando um moletom",earrings:"est√° usando brincos",lipstick:"est√° usando batom",necklace:"est√° usando um colar",mediumHair:"tem cabelo m√©dio","middle-eastern":"√© do Oriente M√©dio",headscarf:"est√° usando um len√ßo na cabe√ßa",redHair:"tem cabelo ruivo",piercings:"tem piercings",coloredHair:"tem cabelo colorido",indian:"√© indiano(a)","native-american":"√© nativo-americano(a)",noAccessories:"est√° sem nenhum acess√≥rio",avoidingCamera:"est√° evitando olhar para a c√¢mera",wearingStripes:"tem listras na roupa",blackClothes:"est√° vestindo roupas pretas",blueClothes:"est√° vestindo roupas azuis",greenClothes:"est√° vestindo roupas verdes",redClothes:"est√° vestindo roupas vermelhas",yellowClothes:"est√° vestindo roupas amarelas",purpleClothes:"est√° vestindo roupas roxas",orangeClothes:"est√° vestindo roupas laranjas",brownClothes:"est√° vestindo roupas marrons",whiteShirt:"est√° usando camisa branca",pinkClothes:"est√° vestindo roupas rosas",patternedShirt:"est√° usando roupa estampada",buttonShirt:"est√° usando camisa com bot√µes",bow:"est√° usando um la√ßo",hairyChest:"tem peito peludo",wearingFlowers:"est√° usando flores",showTeeth:"est√° mostrando os dentes",hairTie:"est√° usando um xuxinha ou fita no cabelo","non-binary":"√© n√£o-bin√°rio(a)"},N=12,ue=(o,e,t,n)=>{const[s]=A(H.ESPIONAGEM,n),a=k("suspects",o),r=k(`testimony-questions-${e}`,o),i=k("testimony-answers",o),c=k("crime-reasons",o),m=R.useMemo(()=>V(i.data),[i.dataUpdatedAt]),l=R.useMemo(()=>K(a.data),[a.data]);return{entries:R.useMemo(()=>!o||!s||!a.isSuccess||!r.isSuccess||!i.isSuccess||!c.isSuccess?{}:W(t,s,a.data,r.data,m,l,c.data),[o,s,a,r,i,t,m,l,c]),isLoading:a.isLoading||r.isLoading||i.isLoading}},W=(o,e,t,n,s,a,r)=>{console.count("Creating Espionagem...");let i=e.latestDate;const c=[],m={};for(let l=0;l<o;l++){const f=U(i);i=f;let p=null,u=0;for(;p===null&&u<q;)try{u++;const d=Y(t,n,s,a,c,r);if(te(d.statements))throw p=d,new Error(`Game is invalid after ${u} attempts`)}catch{}if(!p)throw new Error(`Failed to generate valid game for ${f} after ${u} attempts`);console.log(`Generated valid game for ${f} after ${u} attempts`),c.push(p.culpritId),m[f]={id:f,type:"espionagem",number:e.latestNumber+l+1,...p}}return m};function Y(o,e,t,n,s,a){const r=[],i={};console.log("SuspectTestimonyAnswers",t);const{selectedTestimonyId1:c,selectedTestimonyId2:m,culpritId:l,possibleSuspects:f,impossibleSuspects:p}=J(t,s);let u=[...f];if(f.length<N-1){const $=g.sampleSize(Object.keys(o).filter(C=>!p.includes(C)&&!f.includes(C)),N-f.length-1);u.push(...$)}const d={};Object.keys(n).forEach($=>{if(n[$][l]===void 0){const C=Object.keys(n[$]).filter(I=>u.includes(I));if(C.length>0){const I={};C.forEach(_=>{u.includes(_)&&(I[_]=!0)}),d[$]=I}}});const h=e[c],E=G(l,u,h,t[c]);r.push(E),D(i,E.excludes);const y=e[m],x=G(l,u,y,t[m]);r.push(x),D(i,x.excludes);const S=M(l,u,d,[],"best");r.push(S),D(i,S.excludes);const v=M(l,u,d,[S],"best");r.push(v);const w=M(l,u,d,[S,v],"worst");r.push(w),D(i,w.excludes);const O=M(l,u,d,[S,v,w],"worst");if(r.push(O),r.length<6)throw new Error("Not enough statements generated");u=g.shuffle([...u,l]);const j=P(l,u,r,"columns");r.push(j),D(i,j.excludes);const F=P(l,u,r,"rows");r.push(F);const b=[E,w,x,S,j,O],T=[v,F],L=se(o[l],a);return{isNsfw:h.nsfw||y.nsfw||!1,culpritId:l,statements:b,additionalStatements:T,suspects:X(u,o,[...b,...T]),reason:L.title,setId:`${l}::${L.id}::${b[0].key}`,level:oe(b)}}const X=(o,e,t)=>{const n={};return t.forEach(s=>{if(s.key.includes(".feature.")){const a=s.key.split("not.feature.")[1];n[a]=!0}}),o.map(s=>{const a=e[s],r={"18-21":"young","21-30":"adult","30-40":"adult","40-50":"adult","50-60":"senior","60-70":"senior","70-80":"senior","80-90":"senior"}[a.age]||a.age,i=[a.gender,r,a.ethnicity,a.height,a.build],c=a.features.filter(m=>n[m]);return{id:a.id,name:a.name,gender:a.gender,features:[...i,...c]}})},V=o=>{const e={};console.log("‚öôÔ∏è Calculating suspect answers...");for(const t of Object.keys(o)){const n=o[t];for(const s of Object.keys(n)){const{resolution:a,projection:r}=B(s,n);if(!(!a&&!r)){if(e[t]===void 0&&(e[t]={}),a){e[t][s]=a==="üëç";continue}r&&(e[t][s]=r==="üëç")}}}return Object.keys(e).forEach(t=>{g.isEmpty(e[t])&&delete e[t]}),Object.keys(e).forEach(t=>{Object.keys(e[t]).length<3&&(console.log("‚ÅâÔ∏è Removing testimonies with less than 3 answers"),delete e[t])}),Object.keys(e).forEach(t=>{g.uniq(Object.values(e[t])).length===1&&(console.log("‚ÅâÔ∏è Removing testimonies with the same answer"),delete e[t])}),e},K=o=>{const e={};for(const n of Object.keys(o)){const{gender:s,ethnicity:a,age:r,build:i,height:c,features:m}=o[n];if(!i){console.log("‚ÅâÔ∏è Ignoring suspect with missing build",n);continue}if(!c){console.log("‚ÅâÔ∏è Ignoring suspect with missing height",n);continue}if(!m||m.length===0){console.log("‚ÅâÔ∏è Ignoring suspect with missing features",n);continue}e[s]===void 0&&(e[s]={}),e[s][n]=!0,e[a]===void 0&&(e[a]={}),e[a][n]=!0,e[r]===void 0&&(e[r]={}),e[r][n]=!0,e[i]===void 0&&(e[i]={}),e[i][n]=!0,e[c]===void 0&&(e[c]={}),e[c][n]=!0,m.forEach(l=>{e[l]===void 0&&(e[l]={}),e[l][n]=!0})}return e.young=g.cloneDeep(e["18-21"]),e.adult=g.cloneDeep({...e["21-30"],...e["30-40"],...e["40-50"]}),e.senior=g.cloneDeep({...e["50-60"],...e["60-70"],...e["70-80"],...e["80-90"]}),["18-21","21-30","30-40","40-50","50-60","60-70","70-80","80-90","average","medium","mixed","adult","tall"].forEach(n=>{delete e[n]}),e},J=(o,e)=>{let t=0,n,s,a=[];for(;t<q&&!s&&a.length===0;){if(t++,n=g.sample(Object.keys(o)),!n)throw new Error("Failed to find a testimony");const l=Object.keys(o[n]);if(s=g.sample(Object.keys(o).filter(f=>f!==n&&!g.isEmpty(g.difference(l,Object.keys(o[f]))))),s){a=g.intersection(Object.keys(o[n]),Object.keys(o[s]));break}}if(!n||!s||a.length<3)throw new Error("Failed to find two related testimonies");const r=g.sample(a.filter(l=>!e.includes(l)));if(!r)throw new Error("Failed to determine a culprit from common suspects");console.log("<===============>"),console.log(`‚öôÔ∏è Selected testimonies 1: ${n}`),console.log(o[n]),console.log(`‚öôÔ∏è Selected testimonies 2: ${s}`),console.log(o[s]),console.log(`‚öôÔ∏è Culprit ID: ${r}`),console.log(`Testimony 1 answers: ${o[n][r]}`),console.log(`Testimony 2 answers: ${o[s][r]}`);const i=`${o[n][r]}-${o[s][r]}`,c=g.sampleSize(a.filter(l=>l!==r&&`${o[n][l]}-${o[s][l]}`!==i),N-1),m=g.difference(a,c);return console.log(`‚öôÔ∏è Possible suspects: ${c.join(", ")}`),console.log(`‚öôÔ∏è Impossible suspects: ${m.join(", ")}`),console.log(`‚öôÔ∏è Attempts made: ${t}`),console.log(">===============<"),{selectedTestimonyId1:n,selectedTestimonyId2:s,culpritId:r,possibleSuspects:c,impossibleSuspects:m}},D=(o,e)=>{e.forEach(t=>{o[t]===void 0&&(o[t]=0),o[t]++})},G=(o,e,t,n)=>{const s=n[o],a=e.filter(c=>n[c]!==void 0&&n[c]!==s),r=t.answer.charAt(0).toLowerCase()+t.answer.slice(1),i={key:`testimony.${t.id}`,text:`O(a) suspeito(a) ${s?"":"n√£o "}${r}`,excludes:a,type:"testimony"};return i.text.includes("n√£o j√°")&&(i.text=i.text.replace("n√£o j√°","nunca")),i},Z={column1:{indexes:[0,4,8],text:"na primeira coluna"},column2:{indexes:[1,5,9],text:"na segunda coluna"},column3:{indexes:[2,6,10],text:"na terceira coluna"},column4:{indexes:[3,7,11],text:"na quarta coluna"},corners:{indexes:[0,3,8,11],text:"nos cantos"}},ee={row1:{indexes:[0,1,2,3],text:"na primeira linha"},row2:{indexes:[4,5,6,7],text:"na segunda linha"},row3:{indexes:[8,9,10,11],text:"na terceira linha"}},P=(o,e,t,n)=>{const s=e.indexOf(o),a=t.slice(0,3),r=n==="rows"?ee:Z,i={};for(const u of Object.keys(r)){const{indexes:d}=r[u];d.includes(s)||(i[u]=d.reduce((h,E)=>{const y=e[E],x=a.filter(S=>S.excludes.includes(y)).length;return x>0?h+x:h},0))}const c=Object.entries(i).reduce((u,[d,h])=>(u[h]||(u[h]=[]),u[h].push(d),u),{}),m=Math.min(...Object.keys(i).map(u=>i[u])),l=c[m.toString()],f=g.sample(l)||Object.keys(i)[0],p=r[f].indexes.map(u=>e[u]);return{key:`not.grid.${f}`,text:`O(a) suspeito(a) n√£o est√° ${r[f].text}`,excludes:p,type:"grid"}},M=(o,e,t,n=[],s="best")=>{const a=g.difference(e,[o]),r=n.filter(d=>d.key.startsWith("not.feature.")).map(d=>d.key.replace("not.feature.","")),i=new Set(n.flatMap(d=>d.excludes)),c=Object.keys(t).filter(d=>Object.keys(t[d]).length<=6&&!r.includes(d)).sort((d,h)=>Object.keys(t[h]).length-Object.keys(t[d]).length);let m,l=[],f=0;const p=500;for(;f<p;){f++;const d=s==="best"?c[0]:g.sample(c.slice(2,5))??c[2];if(!d)break;const h=a.filter(y=>t[d][y]);if(h.some(y=>!i.has(y))||f===p){m=d,l=h;break}c.splice(c.indexOf(d),1)}if(!m)throw Error(`No suitable feature found for ${s} selection after ${p} attempts`);console.log(`Selected feature after ${f} attempts: ${m}`);const u=z[m];return u||console.warn(`Feature ${m} not found in translations`),{key:`not.feature.${m}`,text:`O(a) suspeito(a) n√£o ${u||m}`,excludes:l,type:"feature"}},te=o=>{const e=o.slice(0,3);return e.reduce((s,a)=>s+a.excludes.length,0)<10?!1:new Set(e.flatMap(s=>s.excludes)).size===N-1},se=(o,e)=>{const t=[];Object.values(e).forEach(s=>{var a;s.feature==="general"&&t.push(s),(a=o.features)!=null&&a.includes(s.feature)&&t.push(s)});const n=g.sample(t);return n||{id:"unknown",title:{pt:"Motivo desconhecido",en:"Unknown reason"},feature:"general"}},oe=o=>{const e=o.slice(0,3),t=[],n={1:4,2:3,3:3,4:2,5:2,6:1,7:0,8:0};e.forEach(a=>{const r=a.excludes.length;n[r]!==void 0&&t.push(n[r])});const s=Math.round(t.reduce((a,r)=>a+r,0)/t.length);return Math.min(Math.max(s,1),3)};function de(){const o=k("suspects"),e=k("testimony-questions-pt"),t=Q({tdrResourceName:"testimony-answers",firestoreDataCollectionName:"testimonies",serialize:!0});return{...t,isLoading:t.isLoading||e.isLoading||o.isLoading,isSuccess:t.isSuccess&&e.isSuccess&&o.isSuccess,error:t.error||e.error||o.error,questions:e.data,suspects:o.data,hasNewData:t.hasFirestoreData}}const me=o=>o.reduce((e,t)=>{if(t===0||t===1)return e+1;const n=Math.abs(t);return n?e+n:e},0);export{B as a,de as b,me as c,le as n,ue as u};
