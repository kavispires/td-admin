import{Y as Q,X as $,r as g}from"./index-vmFFRzn7.js";import{l as c}from"./useBaseUrl-Dv2lNNaz.js";import{e as h,g as v}from"./index-7JE2gYhQ.js";import{u as x}from"./useGetFirestoreDoc-CNHqTUco.js";import{u as L}from"./useTDResource-DRi3U-Lt.js";import{u as M}from"./useUpdateFirestoreDoc-BYmtHkXE.js";function G({tdrResourceName:o,firestoreDataCollectionName:e,serialize:n}){const{notification:u}=Q.useApp(),m=$(),r=L(o),s=x("tdr",e,{select:n?h:void 0}),[t,d]=g.useState({}),i=M("tdr",e,{onSuccess:()=>{u.success({message:`${e} updated`}),m.refetchQueries({queryKey:["firestore","tdr",e]}),d({})},onError:a=>{u.error({message:`${e} update failed`,description:a.message})}}),f=g.useMemo(()=>!r.isSuccess||!s.isSuccess||i.isPending?{}:(console.log(`%cMerging ${o}+${e} data...`,"color: #f0f"),c.cloneDeep({...r.data??{},...s.data??{},...t})),[o,e,r.data,s.data,r.isSuccess,s.isSuccess,i.isPending,t]),y=!c.isEmpty(t),S=(a,F)=>{d(D=>({...D,[a]:F}))},p=s.data,E=()=>{i.mutate(n?v(t):t)};return{data:f,isLoading:r.isLoading||s.isLoading,isSuccess:r.isSuccess&&s.isSuccess,error:r.error||s.error,firestoreData:p,hasFirestoreData:!c.isEmpty(p),isSaving:i.isPending,save:E,addEntryToUpdate:S,entriesToUpdate:t,isDirty:y}}export{G as u};
